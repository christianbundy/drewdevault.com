<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wayland on Drew DeVault&#39;s blog</title>
    <link>./tags/wayland.html</link>
    <description>Recent content in wayland on Drew DeVault&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 07 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="./tags/wayland/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why Collabora really added Digital Restrictions Management to Weston</title>
      <link>./2019/10/07/HDCP-in-Weston.html</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/10/07/HDCP-in-Weston.html</guid>
      <description>A recent article from Collabora, Why HDCP support in Weston is a good thing, proports to offer a lot of insight into why HDCP - a Digital Restrictions Management (DRM) related technology - was added to Weston - a well known basic Wayland compositor which was once the reference compositor for Wayland. But this article is gaslighting you. There is one reason and one reason alone that explains why HDCP support landed in Weston.</description>
    </item>
    
    <item>
      <title>DRM leasing: VR for Wayland</title>
      <link>./2019/08/09/DRM-leasing-and-VR-for-Wayland.html</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/08/09/DRM-leasing-and-VR-for-Wayland.html</guid>
      <description>As those who read my status updates have been aware, recently I&amp;rsquo;ve been working on bringing VR to Wayland (and vice versa). The deepest and most technical part of this work is DRM leasing (Direct Rendering Manager, not Digital Restrictions Management), and I think it&amp;rsquo;d be good to write in detail about what&amp;rsquo;s involved in this part of the effort. This work has been sponsored by Status.im, as part of an effort to build a comprehensive Wayland-driven VR workspace.</description>
    </item>
    
    <item>
      <title>Announcing Wio: A clone of Plan 9&#39;s Rio for Wayland</title>
      <link>./2019/05/01/Announcing-wio.html</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/05/01/Announcing-wio.html</guid>
      <description>For a few hours here and there over the past few months, I&amp;rsquo;ve been working on a side project: Wio. I&amp;rsquo;ll just let the (3 minute) screencast do the talking first:

Note: this video begins with several seconds of grey video. This is normal.
In short, Wio is a Wayland compositor based on wlroots which has a similar look and feel to Plan 9&amp;rsquo;s Rio desktop. It works by running each application in its own nested Wayland compositor, based on Cage - yet another wlroots-based Wayland compositor.</description>
    </item>
    
    <item>
      <title>Using Cage for a seamless remote Wayland session</title>
      <link>./2019/04/23/Using-cage-for-a-seamless-RDP-Wayland-desktop.html</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/04/23/Using-cage-for-a-seamless-RDP-Wayland-desktop.html</guid>
      <description>Congratulations to Jente Hidskes on the first release of Cage! Cage is a Wayland compositor designed for kiosks - though, as you&amp;rsquo;ll shortly find out, is useful in many unexpected ways. It launches a single application, in fullscreen, and exits the compositor when that application exits. This lets you basically add a DRM+KMS+libinput session to any Wayland-compatible application (or X application via XWayland) and run it in a tiny wlroots compositor.</description>
    </item>
    
    <item>
      <title>Announcing the release of sway 1.0</title>
      <link>./2019/03/11/Sway-1.0-released.html</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/03/11/Sway-1.0-released.html</guid>
      <description>1,315 days after I started the sway project, it&amp;rsquo;s finally time for sway 1.0! I had no idea at the time how much work I was in for, or how many talented people would join and support the project with me. In order to complete this project, we have had to rewrite the entire Linux desktop nearly from scratch. Nearly 300 people worked together, together writing over 9,000 commits and almost 100,000 lines of code, to bring you this release.</description>
    </item>
    
    <item>
      <title>Wayland misconceptions debunked</title>
      <link>./2019/02/10/Wayland-misconceptions-debunked.html</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/02/10/Wayland-misconceptions-debunked.html</guid>
      <description>This article has been on my backburner for a while, but it seems Wayland FUD is making the news again recently, so I&amp;rsquo;ve bumped up the priority a bit. For those new to my blog, I am the maintainer of wlroots, a library which implements much of the functionality required of a Wayland compositor and is arguably the single most influential project in Wayland right now; and sway, a popular Wayland compositor which is nearing version 1.</description>
    </item>
    
    <item>
      <title>Sway 1.0-beta.1 release highlights</title>
      <link>./2018/10/20/Sway-1.0-highlights.html</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/10/20/Sway-1.0-highlights.html</guid>
      <description>1,173 days ago, I wrote sway&amp;rsquo;s initial commit, and 8,269 commits followed1, written by hundreds of contributors. What started as a side project became the most fully featured and stable Wayland desktop available, and drove the development of what has become the dominant solution for building Wayland compositors - wlroots, now the basis of 10 Wayland compositors.
Sway 1.0-beta.1 was just released and is 100% compatible with the i3 X11 window manager.</description>
    </item>
    
    <item>
      <title>Sway &amp; wlroots at XDC 2018</title>
      <link>./2018/09/30/Sway-wlroots-at-XDC-2018.html</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/09/30/Sway-wlroots-at-XDC-2018.html</guid>
      <description>Just got my first full night of sleep after the return flight from Spain after attending XDC 2018. It was a lot of fun! I attended along with four other major wlroots contributors. Joining me were Simon Ser (emersion) (a volunteer) and Scott Anderson (ascent12) of Collabora, who work on both wlroots and sway. ongy works on wlroots, hsroots, and waymonad, and joined us on behalf of IGEL. Finally, we were joined by Guido GÃ¼nther (agx) of Purism, who works with us on wlroots and on the Librem 5.</description>
    </item>
    
    <item>
      <title>Writing a Wayland compositor with wlroots: shells</title>
      <link>./2018/07/29/Wayland-shells.html</link>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/07/29/Wayland-shells.html</guid>
      <description>I apologise for not writing about wlroots more frequently. I don&amp;rsquo;t really enjoy working on the McWayface codebase this series of blog posts was originally about, so we&amp;rsquo;re just going to dismiss that and talk about the various pieces of a Wayland compositor in a more free-form style. I hope you still find it useful!
Today, we&amp;rsquo;re going to talk about shells. But to make sure we&amp;rsquo;re on the same page first, a quick refresher on surfaces.</description>
    </item>
    
    <item>
      <title>Input handling in wlroots</title>
      <link>./2018/07/17/Input-handling-in-wlroots.html</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/07/17/Input-handling-in-wlroots.html</guid>
      <description>I&amp;rsquo;ve said before that wlroots is a &amp;ldquo;batteries not included&amp;rdquo; kind of library, and one of the places where that is most apparent is with our approach to input handling. We implemented a very hands-off design for input, in order to support many use-cases: desktop input, phones with and without USB-OTG HIDs plugged in, multiple mice bound to a single cursor, multiple keyboards per seat, simulated input from fake input devices, on-screen keyboards, input which is processed by the compositor but not sent to clients&amp;hellip; we support all of these use-cases and even more.</description>
    </item>
    
    <item>
      <title>Why did we replace wlc?</title>
      <link>./2018/05/27/Why-rewrite-wlc.html</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/05/27/Why-rewrite-wlc.html</guid>
      <description>For a little over a year, I&amp;rsquo;ve been working with a bunch of talented C developers to build a replacement for the wlc library. The result is wlroots, and we&amp;rsquo;re still working on completing it and updating our software to use it. The conventional wisdom suggests that rewriting your code from scratch is almost never the right idea. So why did we do it, and how is it working out? I have spoken a little about this in the past, but we&amp;rsquo;ll answer this question in detail today.</description>
    </item>
    
    <item>
      <title>Sway reporting in from KDE&#39;s Berlin development sprint</title>
      <link>./2018/04/28/KDE-Sprint-retrospective.html</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/04/28/KDE-Sprint-retrospective.html</guid>
      <description>I&amp;rsquo;m writing to you from an airplane on my way back to Philadelphia, after spending a week in Berlin working with the KDE team. It was great to meet those folks and work with them for a while. It&amp;rsquo;ll take me some time to get the taste of C++ out of my mouth, though! In all seriousness, it was a very productive week and I feel like we have learned a lot about each other&amp;rsquo;s projects and have a strengthened interest in collaborating more in the future.</description>
    </item>
    
    <item>
      <title>Writing a Wayland Compositor, Part 3: Rendering a window</title>
      <link>./2018/02/28/Writing-a-wayland-compositor-part-3.html</link>
      <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/02/28/Writing-a-wayland-compositor-part-3.html</guid>
      <description>This is the third in a series of articles on the subject of writing a Wayland compositor from scratch using wlroots. Check out the first article if you haven&amp;rsquo;t already. We left off with a Wayland server which accepts client connections and exposes a handful of globals, but does not do anything particularly interesting yet. Our goal today is to do something interesting - render a window!
The commit that this article dissects is 342b7b6.</description>
    </item>
    
    <item>
      <title>Writing a Wayland Compositor, Part 2: Rigging up the server</title>
      <link>./2018/02/22/Writing-a-wayland-compositor-part-2.html</link>
      <pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/02/22/Writing-a-wayland-compositor-part-2.html</guid>
      <description>This is the second in a series of articles on the subject of writing a Wayland compositor from scratch using wlroots. Check out the first article if you haven&amp;rsquo;t already. Last time, we ended up with an application which fired up a wlroots backend, enumerated output devices, and drew some pretty colors on the screen. Today, we&amp;rsquo;re going to start accepting Wayland client connections, though we aren&amp;rsquo;t going to be doing much with them yet.</description>
    </item>
    
    <item>
      <title>Writing a Wayland Compositor, Part 1: Hello wlroots</title>
      <link>./2018/02/17/Writing-a-Wayland-compositor-1.html</link>
      <pubDate>Sat, 17 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/02/17/Writing-a-Wayland-compositor-1.html</guid>
      <description>This is the first in a series of many articles I&amp;rsquo;m writing on the subject of building a functional Wayland compositor from scratch. As you may know, I am the lead maintainer of sway, a reasonably popular Wayland compositor. Along with many other talented developers, we&amp;rsquo;ve been working on wlroots over the past few months. This is a powerful tool for creating new Wayland compositors, but it is very dense and difficult to understand.</description>
    </item>
    
    <item>
      <title>Sway and client side decorations</title>
      <link>./2018/01/27/Sway-and-client-side-decorations.html</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/01/27/Sway-and-client-side-decorations.html</guid>
      <description>You may have recently seen an article from GNOME on the subject of client side decorations (CSD) titled Introducing the CSD Initiative. It states some invalid assumptions which I want to clarify, and I want to tell you Sway&amp;rsquo;s stance on the subject. I also speak for the rest of the projects involved in wlroots on this matter, including Way Cooler, waymonad, and bspwc.
The subject of which party is responsible for window decorations on Wayland (the client or the server) has been a subject of much debate.</description>
    </item>
    
    <item>
      <title>Nvidia sucks and I&#39;m sick of it</title>
      <link>./2017/10/26/Fuck-you-nvidia.html</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/10/26/Fuck-you-nvidia.html</guid>
      <description>There&amp;rsquo;s something I need to make clear about Nvidia. Sway 1.0, which is the release after next, is not going to support the Nvidia proprietary driver, EGLStreams, or any other proprietary graphics APIs. The only supported driver for Nvidia cards will be the open source nouveau driver. I will explain why.
Today, Sway is able to run on the Nvidia proprietary driver. This is not and has never been an officially supported feature - we&amp;rsquo;ve added a few things to try and make it easier but my stance has always been that Nvidia users are on their own for support.</description>
    </item>
    
    <item>
      <title>The future of Wayland, and sway&#39;s role in it</title>
      <link>./2017/10/09/Future-of-sway.html</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/10/09/Future-of-sway.html</guid>
      <description>Today I&amp;rsquo;ve released sway 0.15-rc1, the first release candidate for the final 0.x release of sway. That&amp;rsquo;s right - after sway 0.15 will be sway 1.0. After today, no new features are being added to sway until we complete the migration to our new plumbing library, wlroots. This has been a long time coming, and I would love to introduce you to wlroots and tell you what to expect from sway 1.</description>
    </item>
    
    <item>
      <title>An introduction to Wayland</title>
      <link>./2017/06/10/Introduction-to-Wayland.html</link>
      <pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/06/10/Introduction-to-Wayland.html</guid>
      <description>Wayland is the new hotness on the Linux graphics stack. There are plenty of introductions to Wayland that give you the high level details on how the stack is laid out how applications talk directly to the kernel with EGL and so on, but that doesn&amp;rsquo;t give you much practical knowledge. I&amp;rsquo;d like to instead share with you details about how the protocol actually works and how you can use it.</description>
    </item>
    
  </channel>
</rss>
