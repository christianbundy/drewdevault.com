<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cage on Drew DeVault&#39;s blog</title>
    <link>./tags/cage.html</link>
    <description>Recent content in cage on Drew DeVault&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 23 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="./tags/cage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Cage for a seamless remote Wayland session</title>
      <link>./2019/04/23/Using-cage-for-a-seamless-RDP-Wayland-desktop.html</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/04/23/Using-cage-for-a-seamless-RDP-Wayland-desktop.html</guid>
      <description>Congratulations to Jente Hidskes on the first release of Cage! Cage is a Wayland compositor designed for kiosks - though, as you&amp;rsquo;ll shortly find out, is useful in many unexpected ways. It launches a single application, in fullscreen, and exits the compositor when that application exits. This lets you basically add a DRM+KMS+libinput session to any Wayland-compatible application (or X application via XWayland) and run it in a tiny wlroots compositor.</description>
    </item>
    
  </channel>
</rss>
