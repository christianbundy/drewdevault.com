<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drew DeVault's blog</title>
    <link>https://drewdevault.com</link>
    <description>Recent content in Blogs on Drew DeVault&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 25 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="./blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to design a new programming language from scratch</title>
      <link>./2020/12/25/How-to-design-a-new-programming-language.html</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/12/25/How-to-design-a-new-programming-language.html</guid>
      <description>&lt;p&gt;There is a long, difficult road from vague, pie-in-the-sky ideas about what
would be cool to have in a new programming language, to a robust,
self-consistent, practical implementation of those ideas. Designing and
implementing a new programming language from scratch is one of the most
challenging tasks a programmer can undertake.&lt;/p&gt;
&lt;p&gt;Note: this post is targeted at motivated programmers who want to make a
serious attempt at designing a useful programming language. If you just want to
make a language as a fun side project, then you can totally just wing it. Taking
on an unserious project of that nature is also a good way to develop some
expertise which will be useful for a serious project later on.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s set the scene. You already know a few programming languages, and you know
what you like and dislike about them — these are your influences. You have
some cool novel language design ideas as well. A good first step from here is to
dream up some pseudocode, putting some of your ideas to paper, so you can get an
idea of what it would actually feel like to write or read code in this
hypothetical language. Perhaps a short write-up or a list of goals and ideas is
also in order. Circulate these among your confidants for discussion and
feedback.&lt;/p&gt;
&lt;p&gt;Ideas need to be proven in the forge of implementations, and the next step is to
write a compiler (or interpreter — everything in this article applies
equally to them). We&amp;rsquo;ll call this the sacrificial implementation, because you
should be prepared to throw it away later. Its purpose is to prove that your
design ideas work and can be implemented efficiently, but &lt;em&gt;not&lt;/em&gt; to be the
production-ready implementation of your new language. It&amp;rsquo;s a tool to help you
refine your language design.&lt;/p&gt;
&lt;p&gt;To this end, I would suggest using a parser generator like yacc to create your
parser, even if you&amp;rsquo;d prefer to ultimately use a different design (e.g.
recursive descent). The ability to quickly make changes to your grammar, and the
side-effect of having a formal grammar written as you work, are both valuable to
have at this stage of development. Being prepared to throw out the rest of the
compiler is helpful because, due to the inherent difficulty of designing and
implementing a programming language at the same time, your first implementation
will probably be shit. You don&amp;rsquo;t know what the language will look like, you&amp;rsquo;ll
make assumptions that you have to undo later, and it&amp;rsquo;ll undergo dozens of
refactorings. It&amp;rsquo;s gonna suck.&lt;/p&gt;
&lt;p&gt;However, shit as it may be, it will have done important work in validating your
ideas and refining your design. I would recommend that your next step is to
start working on a formal specification of the language (something that I
believe all languages should have). You&amp;rsquo;ve proven what works, and writing it up
formally is a good way to finalize the ideas and address the edge cases. Gather
a group of interested early adopters, contributors, and subject matter experts
(e.g. compiler experts who work with similar languages), and hold discussions on
the specification as you work.&lt;/p&gt;
&lt;p&gt;This is also a good time to start working on your second implementation. At this
point, you will have a good grasp on the overall compiler design, the flaws from
your original implementation, and better skills as a compiler programmer.
Working on your second compiler and your specification at the same time can help
as both endeavours inform the others — a particularly difficult detail to
implement could lead to a simplification in the spec, and an under-specified
detail getting shored up could lead to a more robust implementation.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t get carried away — keep this new compiler simple and small. Don&amp;rsquo;t go
crazy on nice-to-have features like linters and formatters, an exhaustive test
suite, detailed error messages, a sophisticated optimizer, and so on. You want
it to implement the specification as simply as possible, so that you can use it
for the next step: the hosted compiler. You need to write a third
implementation, using your own language to compile itself.&lt;/p&gt;
&lt;p&gt;The second compiler, which I hope you wrote in C, is now the bootstrap compiler.
I recommend keeping it up-to-date with the specification and maintaining it
perpetually as a convenient path to bootstrap your toolchain from scratch
(looking at you, Rust). But it&amp;rsquo;s not going to be the final implementation: any
self-respecting general-purpose programming language is implemented in itself.
The next, and final step, is to implement your language for a third time.&lt;/p&gt;
&lt;p&gt;At this point, you will have refined and proven your language design. You will
have developed and applied compiler programming skills. You will have a robust
implementation for a complete and self-consistent programming language,
developed carefully and with the benefit of hindsight. Your future community
will thank you for the care and time you put into this work, as your language
design and implementation sets the ceiling on the quality of programs written in
it.&lt;/p&gt;
</description>
    </item><item>
      <title>godocs.io is now available</title>
      <link>./2020/12/18/godocs.io.html</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/12/18/godocs.io.html</guid>
      <description>&lt;p&gt;The inevitable forced migration to pkg.go.dev is shipping with known
regressions. It&amp;rsquo;s rolling on out without fixing, for example, &lt;a href=&#34;https://github.com/golang/go/issues/38986&#34;&gt;a problem I
pointed out in June&lt;/a&gt;. godoc.org uses
special meta tags&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; which can link up a source path and line number with a URL
for a git host&amp;rsquo;s source view. pkg.go.dev instead hardcodes a list of hosted git
forges. git.sr.ht is among them — getting it added was my introduction to
this mess — but &lt;em&gt;only&lt;/em&gt; the hosted instance, and no third-party git.sr.ht
instances. hg.sr.ht is still missing, too. The Go team committed to not shipping
with regressions, but that was (predictably) false.&lt;/p&gt;
&lt;p&gt;I have &lt;a href=&#34;https://drewdevault.com/2020/08/01/pkg-go-dev-sucks.html&#34;&gt;previously written about&lt;/a&gt; the botched pkg.go.dev roll-out.
It&amp;rsquo;s a microcosm of Google&amp;rsquo;s toxic engineering culture, demonstrating how Google
engineers are out-of-touch with the values and needs of their community. It
initially shipped as a proprietary replacement, with no intention of making it
open source until the community demanded it, under the rationale that it wasn&amp;rsquo;t
useful for intranets.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; They didn&amp;rsquo;t take the opportunity to address any of the
flaws in godoc.org&amp;rsquo;s design, and instead introduced regressions and made those
flaws even worse.&lt;/p&gt;
&lt;p&gt;And it&amp;rsquo;s shipping, in this state, in Q1 2021.&lt;/p&gt;
&lt;p&gt;This pattern appears to be common to many Google affairs, because it&amp;rsquo;s the
primary means by which Googlers get promoted.&lt;/p&gt;
&lt;p&gt;In light of this, &lt;a href=&#34;https://godocs.io&#34;&gt;godocs.io&lt;/a&gt; is now available, running the
last version of godoc.org that pre-dates pkg.go.dev. It is my intention to keep
this running indefinitely, and you&amp;rsquo;re welcome to use it for your own purposes or
projects.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t made any especially interesting changes, but the source code &lt;a href=&#34;https://git.sr.ht/~sircmpwn/gddo&#34;&gt;is
available on git.sr.ht&lt;/a&gt; — feel free to
send patches along to &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;sir@cmpwn.com&lt;/a&gt; if you want to
submit (minor) improvements or bugfixes. One change I will definitely have to
make is a new solution for full-text search (probably just Postgres), because I
don&amp;rsquo;t want to use AppEngine. If anyone wants to help with this, I would
appreciate your patch.&lt;/p&gt;
&lt;p&gt;Update: &lt;a href=&#34;https://git.sr.ht/~sircmpwn/gddo/commit/c916d5629996d6a4cbd67e48e25af40a966b5d69&#34;&gt;implemented full-text search&lt;/a&gt;
on top of Postgres in about 30 minutes with a friend&amp;rsquo;s help. Aside from the
dataset (which will grow naturally as the service is used), this should be for
all intents and purposes equivalent to pre-pkg.go.dev godoc.org now. Enjoy!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Which have problems of their own, which, when I raised them, where quickly dismissed by the Go team. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;Useful for intranets&amp;rdquo; is obviously not the defining reason why FOSS projects are good. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, December 2020</title>
      <link>./2020/12/15/Status-update-December-2020.html</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/12/15/Status-update-December-2020.html</guid>
      <description>&lt;p&gt;Happy holidays! I hope everyone&amp;rsquo;s having a great time staying at home and not
spending any time with your families. It&amp;rsquo;s time for another summary of the
month&amp;rsquo;s advances in FOSS development. Let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;p&gt;One of my main focuses has been on sourcehut&amp;rsquo;s API 2.0 planning. This month, the
meta.sr.ht and git.sr.ht GraphQL APIs have shipped feature parity with the REST
APIs, and the RFC 6749 compatible OAuth 2.0 implementation has shipped. I&amp;rsquo;ve
broken ground on the todo.sr.ht GraphQL API — it&amp;rsquo;ll be next. Check out the
&lt;a href=&#34;https://man.sr.ht/graphql.md&#34;&gt;GraphQL docs on man.sr.ht&lt;/a&gt; if you want to kick
the tires.&lt;/p&gt;
&lt;p&gt;I also wrote a little tool this month called
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/mkproof&#34;&gt;mkproof&lt;/a&gt;, after brainstorming some ways to
allow sourcehut signups over Tor without enabling abuse. The idea is that you
can generate a challenge (mkchallenge), give it to a user who generates a proof
for that challenge (mkproof), and then verify their proof is correct. Generating
the proof is computationally expensive and resistant to highly parallel attacks
(e.g. GPUs), and takes tens of minutes of work — making it unpractical for
spammers to register accounts in bulk, while still allowing Tor users to
register with their anonymity intact.&lt;/p&gt;
&lt;p&gt;On the Gemini front, patches from Mark Dain, William Casarin, and Eyal Sawady
have improved &lt;a href=&#34;https://git.sr.ht/~sircmpwn/gmnisrv&#34;&gt;gmnisrv&lt;/a&gt; in several respects
— mainly bugfixes — and &lt;a href=&#34;https://git.sr.ht/~sircmpwn/gmni&#34;&gt;gmnlm&lt;/a&gt;
has grown the &amp;ldquo;&amp;lt;n&amp;gt;|&amp;rdquo; command, which pipes the Nth link into a shell
command. Thanks are due to Alexey Yerin as well, who sent a little bugfix with
redirect handling.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://datatracker.ietf.org/doc/draft-devault-bare/&#34;&gt;second draft of the BARE
specification&lt;/a&gt; was
submitted to the IETF this month. Will revisit it again in several weeks. John
Mulligan has also sent several patches improving go-bare — thanks!&lt;/p&gt;
&lt;p&gt;scdoc 1.11.0 was released this month, with only minor bug fixes.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for now! I&amp;rsquo;ll see you in a month.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;...&lt;/summary&gt;
  &lt;p&gt;
  The secret project has slowed down a bit as we&#39;ve started on a new phase of
  development: writing the specification, and new compiler which implements it
  from the ground up. Progress on this is good, but won&#39;t introduce anything
  groundbreaking for a while. Stay tuned.
&lt;/details&gt;
</description>
    </item><item>
      <title>Become shell literate</title>
      <link>./2020/12/12/Shell-literacy.html</link>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/12/12/Shell-literacy.html</guid>
      <description>&lt;p&gt;Shell literacy is one of the most important skills you ought to possess as a
programmer. The Unix shell is one of the most powerful ideas ever put to code,
and should be second nature to you as a programmer. No other tool is nearly as
effective at commanding your computer to perform complex tasks quickly —
or at storing them as scripts you can use later.&lt;/p&gt;
&lt;p&gt;In my workflow, I use Vim as my editor, and Unix as my &amp;ldquo;IDE&amp;rdquo;. I don&amp;rsquo;t trick out
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/dotfiles/tree/master/.vimrc&#34;&gt;my vimrc&lt;/a&gt; to add a
bunch of IDE-like features — the most substantial plugin I use on a daily
basis is &lt;a href=&#34;https://github.com/ctrlpvim/ctrlp.vim&#34;&gt;Ctrl+P&lt;/a&gt;, and that just makes it
easier to open files. Being Vim literate is a valuable skill, but an important
detail is knowing when to drop it. My daily workflow involves several open
terminals, generally one with Vim, another to run builds or daemons, and a third
which just keeps a shell handy for anything I might ask of it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://l.sr.ht/g_oL.png&#34;&gt;&lt;img src=&#34;https://l.sr.ht/g_oL.png&#34; alt=&#34;Screenshot of my workspace&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The shell I keep open allows me to perform complex tasks and answer complex
questions as I work. I find interesting things with &lt;a href=&#34;https://git-scm.com/docs/git-grep&#34;&gt;git grep&lt;/a&gt;,
perform bulk find-and-replace with &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sed.html#top&#34;&gt;sed&lt;/a&gt;, answer questions with
&lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html#top&#34;&gt;awk&lt;/a&gt;, and perform more intricate tasks on-demand with ad-hoc shell
commands and pipelines. I have the freedom to creatively solve problems without
being constrained to the rails laid by IDE designers.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of a problem I encountered recently: I had a bunch of changes
in a git repository. I wanted to restore deleted files without dropping the rest
of my changes, but there were hundreds of these. How can I efficiently address
this problem?&lt;/p&gt;
&lt;p&gt;Well, I start by getting a grasp of the scale of the issue with git status,
which shows hundreds of deleted files that need to be restored. This scale is
beyond the practical limit of manual intervention, so I switch to git status
-s to get a more pipeline-friendly output.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git status -s
 D main/a52dec/APKBUILD
 D main/a52dec/a52dec-0.7.4-build.patch
 D main/a52dec/automake.patch
 D main/a52dec/fix-globals-test-x86-pie.patch
 D main/aaudit/APKBUILD
 D main/aaudit/aaudit
 D main/aaudit/aaudit-common.lua
 D main/aaudit/aaudit-repo
 D main/aaudit/aaudit-server.json
 D main/aaudit/aaudit-server.lua
 ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I can work with this. I add grep &#39;^ D&#39; to filter out any entries which were
not deleted, and pipe it through awk &#39;{ print $2 }&#39; to extract just the
filenames. I&amp;rsquo;ll often run the incomplete pipeline just to check my work and
catch my bearings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git status -s | grep &#39;^ D&#39; | awk &#39;{ print $2 }&#39;
main/a52dec/APKBUILD
main/a52dec/a52dec-0.7.4-build.patch
main/a52dec/automake.patch
main/a52dec/fix-globals-test-x86-pie.patch
main/aaudit/APKBUILD
main/aaudit/aaudit
main/aaudit/aaudit-common.lua
main/aaudit/aaudit-repo
main/aaudit/aaudit-server.json
main/aaudit/aaudit-server.lua
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Very good — we have produced a list of files which we need to address.
Note that, in retrospect, I could have dropped the grep and just used awk to the
same effect:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git status -s | awk &#39;/^ D/ { print $2 }&#39;
main/a52dec/APKBUILD
main/a52dec/a52dec-0.7.4-build.patch
main/a52dec/automake.patch
main/a52dec/fix-globals-test-x86-pie.patch
main/aaudit/APKBUILD
main/aaudit/aaudit
main/aaudit/aaudit-common.lua
main/aaudit/aaudit-repo
main/aaudit/aaudit-server.json
main/aaudit/aaudit-server.lua
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, we&amp;rsquo;re just writing an ad-hoc command here to solve a specific,
temporary problem — finesse is not important. This command isn&amp;rsquo;t going to
be subjected to a code review. Often my thinking in these situations is to solve
one problem at a time: &amp;ldquo;filter the list&amp;rdquo; and &amp;ldquo;reword the list&amp;rdquo;.  Anyway, the
last step is to actually use this list of files to address the issue, with the
help of &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/xargs.html#top&#34;&gt;xargs&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git status -s | awk &#39;/^ D/ { print $2 }&#39; | xargs git checkout --
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s look at some more examples of interesting ad-hoc shell pipelines.
Naturally, I wrote a shell pipeline to find some:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ history | cut -d&#39; &#39; -f2- | awk -F&#39;|&#39; &#39;{ print NF-1 &amp;quot; &amp;quot; $0 }&#39; | sort -n | tail
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here&amp;rsquo;s the breakdown:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt; prints a list of my historical shell commands.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cut -d&#39; &#39; -f2-&lt;/code&gt; removes the first field from each line, using space as a
delimiter. &lt;code&gt;history&lt;/code&gt; numbers every command, and this removes the number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awk -F&#39;|&#39; &#39;{ print NF-1 &amp;quot; &amp;quot; $0 }&lt;/code&gt; tells awk to use | as the field delimiter
for each line, and print each line prefixed with the number of fields. This
prints every line of my history, prefixed with the number of times the pipe
operator appears in that line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort -n&lt;/code&gt; numerically sorts this list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail&lt;/code&gt; prints the last 10 items.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This command, written in the moment, finds, characterizes, filters, and sorts my
shell history by command complexity. Here are a couple of the cool shell
commands I found:&lt;/p&gt;
&lt;p&gt;Play the 50 newest videos in a directory with
&lt;a href=&#34;https://github.com/mpv-player/mpv&#34;&gt;mpv&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls -tc | head -n50 | tr &#39;\n&#39; &#39;\0&#39; | xargs -0 mpv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I use this command all the time. If I want to watch a video later, I will
&lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/touch.html#top&#34;&gt;touch&lt;/a&gt; the file so it appears at the top of this list. Another command
transmits a tarball of a patched version of &lt;a href=&#34;http://www.celestegame.com/&#34;&gt;Celeste&lt;/a&gt; to a friend using
netcat, minus the (large) game assets, with a progress display via &lt;a href=&#34;http://www.ivarch.com/programs/pv.shtml&#34;&gt;pv&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find . ! -path &#39;./Content/*&#39; | xargs tar -cv | pv | zstd | nc 204:fbf5:... 12345
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And on my friend&amp;rsquo;s end:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nc -vll :: 12345 | zstdcat | pv | tar -xv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tar, by the way, is an under-rated tool for moving multiple files through a
pipeline. It can read and write tarballs to stdin and stdout!&lt;/p&gt;
&lt;p&gt;I hope that this has given you a tantalizing taste of the power of the Unix
shell. If you want to learn more about the shell, I can recommend
&lt;a href=&#34;http://shellhaters.org/&#34;&gt;shellhaters.org&lt;/a&gt; as a great jumping-off point into
various shell-related parts of the POSIX specification. Don&amp;rsquo;t be afraid of the
spec — it&amp;rsquo;s concise, comprehensive, comprehensible, and full of examples.
I would also &lt;em&gt;definitely&lt;/em&gt; recommend taking some time to learn awk in particular:
&lt;a href=&#34;https://ferd.ca/awk-in-20-minutes.html&#34;&gt;here&amp;rsquo;s a brief tutorial&lt;/a&gt;.&lt;/p&gt;
</description>
    </item><item>
      <title>Web analytics should at least meet the standards of informed consent</title>
      <link>./2020/12/04/Analytics-and-informed-consent.html</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/12/04/Analytics-and-informed-consent.html</guid>
      <description>&lt;p&gt;Research conducted on human beings, at least outside of the domain of
technology, has to meet a minimum standard of ethical reasoning called
&lt;a href=&#34;https://en.wikipedia.org/wiki/Informed_consent&#34;&gt;informed consent&lt;/a&gt;. Details
vary, but the general elements of informed consent are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Disclosure of the nature and purpose of the research and its implications
(risks and benefits) for the participant, and the confidentiality of the
collected information.&lt;/li&gt;
&lt;li&gt;An adequate understanding of these facts on the part of the participant,
requiring an accessible explanation in lay terms and an assessment of
understanding.&lt;/li&gt;
&lt;li&gt;The participant must exercise voluntary agreement, without coercion or fear
of repercussions (e.g. not being allowed to use your website).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, I pose the following question: if your analytics script wouldn&amp;rsquo;t pass muster
at your university&amp;rsquo;s ethics board, then what the hell is it doing on your
website? Can we not meet this basic minimum standard of ethical decency and
respect for our users?&lt;/p&gt;
&lt;p&gt;Opt-out is not informed consent. Manually unticking dozens of third-party
trackers from a cookie pop-up is not informed consent. &amp;ldquo;By continuing to use
this website, you agree to&amp;hellip;&amp;rdquo; is not informed consent. &amp;ldquo;Install &lt;a href=&#34;https://ublockorigin.com/&#34;&gt;uBlock
Origin&lt;/a&gt;&amp;rdquo; is not informed consent.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t necessarily believe that ethical user tracking is &lt;em&gt;impossible&lt;/em&gt;, but I
know for damn sure that most of these &amp;ldquo;pro-privacy&amp;rdquo; analytics solutions which
have been cropping up in the wake of the GDPR don&amp;rsquo;t qualify, either.&lt;/p&gt;
&lt;p&gt;Our industry&amp;rsquo;s fundamental failure to respect users, deliberately mining their
data without consent and without oversight for profit, is the reason why we&amp;rsquo;re
seeing legal crackdowns in the form of the GDPR and similar legislation.  Our
comeuppance is well-earned, and I hope that the regulators give it teeth in
enforcement. The industry response — denial and looking for ways to weasel
out of these ethical obligations — is a strategy on borrowed time. The law
is not a computer program, and it is not executed by computers: it is executed
by human beings who can see through your horseshit. You&amp;rsquo;re not going to be able
to seek out some narrow path you can walk to skirt the regulations and keep
spying on people.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re going to stop spying on people.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;P.S. If you still want the data you might get from analytics without
compromising on ethics, here&amp;rsquo;s an idea: compensate users for their participation
in your research. Woah, what a wild idea! That&amp;rsquo;s not very growth hacker of you,
Drew.&lt;/em&gt;&lt;/p&gt;
</description>
    </item><item>
      <title>A few ways to make money in FOSS</title>
      <link>./2020/11/20/A-few-ways-to-make-money-in-FOSS.html</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/11/20/A-few-ways-to-make-money-in-FOSS.html</guid>
      <description>&lt;p&gt;I work on free and open-source software full time, and I make a comfortable
living doing it. And I don&amp;rsquo;t half-ass it: 100% of my code is free and
open-source. There&amp;rsquo;s no proprietary add-ons, no periodic code dumps, just
100% bona-fide free and open source software. Others have often sought my advice
— how can they, too, make a living doing open source?&lt;/p&gt;
&lt;p&gt;Well, there&amp;rsquo;s more than one way to skin a cat. There are many varieties of
software, each with different needs, and many kinds of people, each with
different needs. The exact approach which works for you and your project will
vary quite a bit depending on the nature of your project.&lt;/p&gt;
&lt;p&gt;I would generally categorize my advice into two bins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You want to make money from your own projects&lt;/li&gt;
&lt;li&gt;You want to make money participating in open source&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one is more difficult. We&amp;rsquo;ll start with the latter.&lt;/p&gt;
&lt;h2 id=&#34;being-employed-in-foss&#34;&gt;Being employed in FOSS&lt;/h2&gt;
&lt;p&gt;One way to make money in FOSS is to get someone to pay you to write free
software. There&amp;rsquo;s lots of advantages to this: minimal personal risk, at-market
salaries, benefits, and so on, but at the cost of not necessarily getting to
choose what you work on all the time.&lt;/p&gt;
&lt;p&gt;I have a little trick that I often suggest to people who vaguely want to work
&amp;ldquo;in FOSS&amp;rdquo;, but who aren&amp;rsquo;t trying to find the monetization potential in their own
projects. Use git to clone the source repositories for some (large) projects
you&amp;rsquo;re interested in,
&lt;a href=&#34;https://drewdevault.com/2020/08/10/How-to-contribute-to-FOSS.html&#34;&gt;the kind of stuff you want to work on&lt;/a&gt;,
and then run this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log -n100000 --format=&amp;quot;%ae&amp;quot; | cut -d@ -f2 | sort | uniq -c | sort -nr | less
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will output a list of the email domains who have committed to the
repository in the last 100,000 commits. This is a good set of leads for
companies who might be interested in paying you to work on projects like this
😉&lt;/p&gt;
&lt;p&gt;Another good way is to explicitly seek out large companies known to work a lot
in FOSS, and see if they&amp;rsquo;re hiring in those departments. There are some
companies that specialize in FOSS, such as RedHat, Collabora, and dozens more;
and there are large companies with FOSS-specific teams, such as Intel, AMD, IBM,
and so on.&lt;/p&gt;
&lt;h2 id=&#34;making-money-from-your-own-foss-work&#34;&gt;Making money from your own FOSS work&lt;/h2&gt;
&lt;p&gt;If you want to pay for the project infrastructure, and maybe beer money for the
weekend, then donations are an easy way to do that. I&amp;rsquo;ll give it to you
straight, though: you&amp;rsquo;re unlikely to make a living from donations.  Programmers
who do are a small minority. If you want to make a living from FOSS, it&amp;rsquo;s
going to be more difficult.&lt;/p&gt;
&lt;p&gt;Start by unlearning what you think you know about startups. The toxic startup
culture around venture capital and endless hyper-growth is more stressful, less
likely to succeed, and socially irresponsible. Building a sustainable business
responsibly takes time, careful planning, and hard work. The fast route —
venture capital funded — is going to impose constraints on your business
that will ultimately make it difficult to remain true to your open-source
mission.&lt;/p&gt;
&lt;p&gt;And yes, you are building a &lt;em&gt;business&lt;/em&gt;. You need to start thinking of your
project as a business and of yourself as a business owner. This undertaking is
going to require developing business skills in planning, budgeting, scheduling,
resource allocation, marketing &amp;amp; sales, compliance, and more. At times, you will
be forced to embrace your inner
&lt;a href=&#34;http://www.catb.org/jargon/html/S/suit.html&#34;&gt;suit&lt;/a&gt;. Channel your engineering
problem-solving skills into the business problems.&lt;/p&gt;
&lt;p&gt;So, you&amp;rsquo;ve got the right mindset. What are some business models that work?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sourcehut.org&#34;&gt;SourceHut&lt;/a&gt;, my company, has two revenue streams. We have
a hosted SaaS product. It&amp;rsquo;s open source, and users can choose to deploy and
maintain it themselves, or they can just buy a hosted account from us. The
services are somewhat complex, so the managed offering saves them a lot of time.
We have skilled sysops/sysadmins, support channels, and so on, for paying users.
Importantly, we don&amp;rsquo;t have a free tier (but we do choose to provide free service
to those who need it, at our discretion).&lt;/p&gt;
&lt;p&gt;Our secondary revenue stream is &lt;a href=&#34;https://sourcehut.org/consultancy&#34;&gt;free software
consulting&lt;/a&gt;. Our developers work part-time
writing free and open-source software on contracts. We&amp;rsquo;re asked to help
implement features upstream for various projects, or to develop new open-source
applications or libraries, to share our expertise in operations, and so on, and
charge for these services. This is different from providing paid support or
development on our own projects — we accept contracts to work on &lt;em&gt;any&lt;/em&gt;
open source project.&lt;/p&gt;
&lt;p&gt;The other approach to consulting is also possible: paid support and development
on your own projects. If there are businesses that rely on your project, then
you may be able to offer them support or develop new features or bugfixes that
they need, on a paid basis. Projects with a large corporate userbase also
sometimes &lt;em&gt;do&lt;/em&gt; find success in donations — albeit rebranded as
sponsorships. The largest projects often set up foundations to manage them in
this manner.&lt;/p&gt;
&lt;p&gt;These are, in my experience, some of the most successful approaches to
monetizing FOSS. You may have success with a combination of these, or with other
business models as well.  Remember to turn that engineering mind of yours
towards the task of monetization, and experiment with and invent new ways of
making money that best suit the kind of software you want to work on.&lt;/p&gt;
&lt;p&gt;Feel free to &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;reach out&lt;/a&gt; if you have some questions or
need a sounding board for your ideas. Good luck!&lt;/p&gt;
</description>
    </item><item>
      <title>We can do better than DuckDuckGo</title>
      <link>./2020/11/17/Better-than-DuckDuckGo.html</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/11/17/Better-than-DuckDuckGo.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://duckduckgo.com&#34;&gt;DuckDuckGo&lt;/a&gt; is one of the long-time darlings of the
technophile&amp;rsquo;s pro-privacy recommendations, and in fact the search engine that I
use myself on the daily. They certainly present a more compelling option than
many of the incumbents, like Google or Bing. Even so, DuckDuckGo is not good
enough, and we ought to do better.&lt;/p&gt;
&lt;p&gt;I have three grievances with DuckDuckGo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;It&amp;rsquo;s not open source.&lt;/strong&gt; Almost all of DDG&amp;rsquo;s software is proprietary, and
they&amp;rsquo;ve demonstrated &lt;a href=&#34;https://github.com/duckduckgo/Android/issues/527&#34;&gt;gross incompetence&lt;/a&gt; in privacy in what little
software they have made open source. Who knows what else is going on in the
proprietary code?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DuckDuckGo is not a search engine&lt;/strong&gt;. It&amp;rsquo;s more aptly described as a search
engine frontend. They &lt;em&gt;do&lt;/em&gt; handle features like bangs and instant answers
internally, but their actual search results come from third-parties like
Bing. They don&amp;rsquo;t operate a crawler for their search results, and are not
independent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The search results suck!&lt;/strong&gt; The authoritative sources for anything I want to
find are almost always buried beneath 2-5 results from content scrapers and
blogspam. This is also true of other search engines like Google. Search
engines are highly vulnerable to abuse and they aren&amp;rsquo;t doing enough to
address it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are some FOSS attempts to do better here, but they all fall flat.
&lt;a href=&#34;https://github.com/bauruine/searx/&#34;&gt;searX&lt;/a&gt; is also a false search engine
— that is, they serve someone else&amp;rsquo;s results. &lt;a href=&#34;https://yacy.net/&#34;&gt;YaCy&lt;/a&gt;
has their own crawler, but the distributed design makes results untolerably
slow, poor quality, and vulnerable to abuse, and it&amp;rsquo;s missing strong central
project leadership.&lt;/p&gt;
&lt;p&gt;We need a real, working FOSS search engine, complete with its own crawler.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how I would design it.&lt;/p&gt;
&lt;p&gt;First, YaCy-style decentralization is &lt;em&gt;way&lt;/em&gt; too hard to get right, especially
when a search engine project already has a lot of Very Hard problems to solve.
Federation is also very hard in this situation — queries will have to
consult &lt;em&gt;most&lt;/em&gt; instances in order to get good quality results, or a novel
sharding algorithm will have to be designed, and either approach will have to be
tolerant of nodes appearing and disappearing at any time. Not to mention it&amp;rsquo;d be
slow! Several unsolved problems with federation and decentralziation would have
to be addressed on top of building a search engine in the first place.&lt;/p&gt;
&lt;p&gt;So, a SourceHut-style approach is better. 100% of the software would be free
software, and third parties would be encouraged to set up their own
installations. It would use standard protocols and formats where applicable, and
accept patches from the community. However, the database would still be
centralized, and even if programmable access were provided, it would not be with
an emphasis on decentralization or shared governance. It might be possible to
design tools which help third-parties bootstrap their indexes, and create a
community of informal index sharing, but that&amp;rsquo;s not the focus here.&lt;/p&gt;
&lt;p&gt;It would also need its own crawler, and probably its own indexer. I&amp;rsquo;m not
convinced that any of the existing FOSS solutions in this space are quite right
for this problem. Crucially, I would &lt;em&gt;not&lt;/em&gt; have it crawling the entire web from
the outset. Instead, it should crawl a whitelist of domains, or &amp;ldquo;tier 1&amp;rdquo;
domains. These would be the limited mainly to authoritative or high-quality
sources for their respective specializations, and would be weighed upwards in
search results. Pages that these sites link to would be crawled as well, and
given tier 2 status, recursively up to an arbitrary N tiers. Users who want to
find, say, a blog post about a subject rather than the documentation on that
subject, would have to be more specific: &amp;ldquo;$subject blog posts&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;An advantage of this design is that it would be easy for anyone to take the
software stack and plop it on their own servers, with their own whitelist of
tier 1 domains, to easily create a domain-specific search engine. Independent
groups could create search engines which specialize in academia, open standards,
specific fandoms, and so on. They could tweak their precise approach to
indexing, tokenization, and so on to better suit their domain.&lt;/p&gt;
&lt;p&gt;We should also prepare the software to boldly lead the way on new internet
standards. Crawling and indexing non-HTTP data sources (Gemini?  Man pages?
Linux distribution repositories?), supporting non-traditional network stacks
(Tor? Yggdrasil? cjdns?) and third-party name systems (OpenNIC?), and anything
else we could leverage our influence to give a leg up on.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a &lt;em&gt;ton&lt;/em&gt; of potential in this domain which is just sitting on the floor
right now. The main problem is: who&amp;rsquo;s going to pay for it? Advertisements or
paid results are &lt;em&gt;not&lt;/em&gt; going to fly — conflict of interest. Private, paid
access to search APIs or index internals is one opportunity, but it&amp;rsquo;s kind of
shit and I think that preferring open data access and open APIs would be
exceptionally valuable for the community.&lt;/p&gt;
&lt;p&gt;If SourceHut eventually grows in revenue — at least 5-10× its
&lt;a href=&#34;https://sourcehut.org/blog/2020-11-11-sourcehut-q3-2020-financial-report/&#34;&gt;present revenue&lt;/a&gt; — I intend to sponsor this as a public
benefit project, with no plans for generating revenue. I am not aware of any
monetization approach for a search engine which squares with my ethics and
doesn&amp;rsquo;t fundamentally undermine the mission. So, if no one else has figured it
out by the time we have the resources to take it on, we&amp;rsquo;ll do it.&lt;/p&gt;
</description>
    </item><item>
      <title>Status update, November 2020</title>
      <link>./2020/11/15/Status-update-November-2020.html</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/11/15/Status-update-November-2020.html</guid>
      <description>&lt;p&gt;Greetings, humanoids! Our fleshy vessels have aged by 2.678×10⁶ seconds, and you
know what that means: time for another status update! Pour a cup of your
favorite beverage stimulant and gather &amp;lsquo;round for some news.&lt;/p&gt;
&lt;p&gt;First off, today is the second anniversary of SourceHut&amp;rsquo;s alpha being opened to
the public, and as such, I&amp;rsquo;ve prepared a special &lt;a href=&#34;https://sourcehut.org/blog/2020-11-15-sourcehut-2-year-alpha/&#34;&gt;blog post&lt;/a&gt; for
you to read. I&amp;rsquo;ll leave the sr.ht details out of this post and just send you off
to read about it there.&lt;/p&gt;
&lt;p&gt;What else is new? Well, a few things. For one, I&amp;rsquo;ve been working more on Gemini.
I added CGI support to &lt;a href=&#34;https://sr.ht/~sircmpwn/gmnisrv&#34;&gt;gmnisrv&lt;/a&gt; and wrote a
few &lt;a href=&#34;https://git.sr.ht/~sircmpwn/cgi-scripts&#34;&gt;CGI scripts&lt;/a&gt; to do neato Gemini
things with. I&amp;rsquo;ve also added regexp routing and URL rewriting support. We can
probably ship gmnisrv 1.0 as soon as the last few bugs are flushed out, and a
couple of minor features are added, and we might switch to another SSL
implementation as well. Thanks to the many contributors who&amp;rsquo;ve helped out:
William Casarin, Tom Lebreux, Kenny Levinsen, Eyal Sawady, René Wagner,
dbandstra, and mbays.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://baremessages.org&#34;&gt;BARE&lt;/a&gt; news: Elm, Erlang, Java, and Ruby
implementations have appeared, and I have submitted a
&lt;a href=&#34;https://datatracker.ietf.org/doc/draft-devault-bare/&#34;&gt;draft RFC&lt;/a&gt; to the IETF
for standardization.&lt;/p&gt;
&lt;p&gt;Finally, I wrote a new Wayland server for you. Its only dependencies are a POSIX
system and a C11 compiler — and it works with Nvidia GPUs, or even systems
without OpenGL support at all. Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;poll.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/ioctl.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/un.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int16_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	  &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	       &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

	  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pollfd&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xFFFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
			      &lt;span class=&#34;n&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define AR I z,I y,u32 x,u16 c
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define SN(n) (((n)%4)==0?(n):(n)+(4-((n)%4)))
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;u8w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x3f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xE0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fwrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;xrgb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;winsize&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ioctl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TIOCGWINSZ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ws_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x1b&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[H&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x1b&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[2J&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x1b&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[3J&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ws_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ws_col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2800&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ws_row&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ws_col&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u8&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;avg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;avg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u8w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;putchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;sc&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fflush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i16&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i16&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ws&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ga&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u16&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PROT_READ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAP_PRIVATE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xrgb&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timespec&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tv_sec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tv_nsec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.6e6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nanosleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ae&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ae&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;
                  &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ga&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wl_shm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wl_compositor&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wl_subcompositor&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wl_data_device_manager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wl_output&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wl_seat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;xdg_wm_base&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ws&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}}&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;si&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_UNIX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr_un&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sun_family&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_UNIX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;XDG_RUNTIME_DIR&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/tmp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sun_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s/wayland-%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;access&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sun_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;F_OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;POLLIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;POLLHUP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;revents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIGINT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;si&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;revents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;revents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;POLLHUP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;memmove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;revents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;CMSG_SPACE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cmsghdr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iovec&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iov_base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iov_len&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;msghdr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg_iov&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg_iovlen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg_control&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg_controllen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvmsg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CMSG_FIRSTHDR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CMSG_DATA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u16&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xFFFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xFFFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}}}}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unlink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sun_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;re welcome!&lt;/p&gt;
</description>
    </item><item>
      <title>Utility vs usability</title>
      <link>./2020/11/06/Utility-vs-usability.html</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/11/06/Utility-vs-usability.html</guid>
      <description>&lt;p&gt;In many fields, professional-grade tooling requires a high degree of knowledge
and training to use properly, usually more than is available to the amateur. The
typical mechanic&amp;rsquo;s tool chest makes my (rather well-stocked, in my opinion) tool
bag look quite silly. A racecar driver is using a vehicle which is much more
complex than, say, the soccer mom&amp;rsquo;s mini-van. Professional-grade tools are,
necessarily, more complex and require skill to use.&lt;/p&gt;
&lt;p&gt;There are two attributes to consider when classifying these tools: &lt;em&gt;utility&lt;/em&gt; and
&lt;em&gt;usability&lt;/em&gt;. These are not the same thing. Some tools have both high utility and
high usability, such as a pencil. Some are highly usable, but of low utility,
such as a child&amp;rsquo;s tricycle. Tools of both low-utility and low-usability are
uncommon, but I&amp;rsquo;m sure you can think of a few examples from your own experiences
:)&lt;/p&gt;
&lt;p&gt;When designing tools, it is important to consider both of these attributes, and
it helps to keep the intended audience in mind. I think that many programmers
today are overly concerned with usability, and insufficiently concerned with
utility. Some programmers (although this sort prefers &amp;ldquo;developer&amp;rdquo;) go so far as
to fetishize usability &lt;em&gt;at the expense&lt;/em&gt; of utility.&lt;/p&gt;
&lt;p&gt;In some cases, sacrificing utility in favor of usability is an acceptable
trade-off. In the earlier example&amp;rsquo;s case, it&amp;rsquo;s unlikely that anyone would argue
that the soccer mom should be loading the tots into an F1 racecar. However, it&amp;rsquo;s
equally absurd to suppose that the F1 driver should bring a mini-van to the race
track. In the realm of programming, this metaphor speaks most strongly to me in
the design of programming tools.&lt;/p&gt;
&lt;p&gt;I argue that most programmers are professionals who are going to invest several
years into learning the craft. This is the audience for whom I design my tools.
What trouble is it to spend an extra hour learning a somewhat less intuitive
&lt;a href=&#34;https://git-send-email.io&#34;&gt;code review tool&lt;/a&gt; when the programming language
whose code you&amp;rsquo;re reviewing required months to learn and years to master?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xkcd.com/1205/&#34;&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/is_it_worth_the_time_2x.png&#34; alt=&#34;An XKCD comic which depicts a table that compares &amp;ldquo;time to improve task&amp;rdquo; versus &amp;ldquo;time saved by improvement&amp;rdquo; and how to figure if the improvement is worthwhile&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I write tools to maximize the productivity of professional programmers. Ideally,
we can achieve both usability and utility, and often we do just that.
But, sometimes, these tools require a steeper learning curve. If they are &lt;em&gt;more
useful&lt;/em&gt; in spite of that, they will usually save heaps of time in the long run.&lt;/p&gt;
&lt;p&gt;Instead of focusing on dumbing down our tools, maximizing usability at the
expense of utility, we should focus on making powerful tools &lt;em&gt;and&lt;/em&gt; fostering a
culture of &lt;em&gt;mentorship&lt;/em&gt;. Senior engineers should be helping their juniors learn
and grow to embrace and build a new generation of more and more productive
tooling, considering usability all the while but never at the expense of
utility.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll address mentorship in more detail in future posts. For now, I&amp;rsquo;ll just state
that mentorship is the praxis of my tooling philosophy. We can build better,
more powerful, and more productive tools, even if they require a steeper
learning curve, so long as we&amp;rsquo;re prepared to teach people how to use them, and
they&amp;rsquo;re prepared to learn.&lt;/p&gt;
</description>
    </item><item>
      <title>What is this Gemini thing anyway, and why am I excited about it?</title>
      <link>./2020/11/01/What-is-Gemini-anyway.html</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/11/01/What-is-Gemini-anyway.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been writing about some specific topics in the realm of Gemini on my blog
over the past two months or so, but I still haven&amp;rsquo;t written a broader
introduction to Gemini, what I&amp;rsquo;m doing with it, and why you should be excited
about it, too. Let&amp;rsquo;s do that today!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gemini.circumlunar.space/&#34;&gt;Gemini&lt;/a&gt; is a network protocol for exchanging
hypertext documents — &amp;ldquo;hypertext&amp;rdquo; in the general sense of the word, not
with respect to the hypertext markup language (HTML) that web browsers
understand. It&amp;rsquo;s a simple network protocol which allows clients to request
hypertext documents (in its own document format, gemtext). It is, in some
respects, an evolution of &lt;a href=&#34;https://en.wikipedia.org/wiki/Gopher_(protocol)&#34;&gt;Gopher&lt;/a&gt;, but more modernized and streamlined.&lt;/p&gt;
&lt;p&gt;Gemini is very simple. The protocol uses TLS to establish an encrypted
connection (using self-signed certificates and
&lt;abbr title=&#34;trust on first use&#34;&gt;TOFU&lt;/abbr&gt; rather than certificate
authorities), and performs a very simple exchange: the client sends the URL it
wants to retrieve, terminated with CRLF.  The server responds with an
informative line, consisting of a numeric status code and some additional
information (such as the document&amp;rsquo;s mimetype), then writes the document and
closes the connection. Authentication, if desired, is done with client
certificates. User input, if desired, is done with a response code which conveys
a prompt string and a request for user input, followed by a second request with
the user&amp;rsquo;s response filled into the URL&amp;rsquo;s query string. And that&amp;rsquo;s pretty much
it!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl s_client -quiet -crlf   \
    -servername drewdevault.com   \
    -connect drewdevault.com:1965 \
  | awk &#39;{ print &amp;quot;response: &amp;quot; $0 }&#39;
gemini://drewdevault.com
response: 20 text/gemini
response: ```ASCII art of a rocket next to &amp;quot;Drew DeVault&amp;quot; in a stylized font
response:   /\
response:   ||    ________                         ________       ____   ____            .__   __
response:   ||    \______ \_______   ______  _  __ \______ \   ___\   \ /   /____   __ __|  |_/  |_
response:  /||\    |    |  \_  __ \_/ __ \ \/ \/ /  |    |  \_/ __ \   Y   /\__  \ |  |  \  |\   __\
response: /:||:\   |    `   \  | \/\  ___/\     /   |    `   \  ___/\     /  / __ \|  |  /  |_|  |
response: |:||:|  /_______  /__|    \___  &amp;gt;\/\_/   /_______  /\___  &amp;gt;\___/  (____  /____/|____/__|
response: |/||\|        \/            \/                 \/     \/             \/
response:   **
response:   **
response: ```
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So why am I excited about it?&lt;/p&gt;
&lt;p&gt;My disdain for web browsers is well documented&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Web browsers are
&lt;em&gt;extraordinarily&lt;/em&gt; complex, and any attempt to build a new one would be a
Sisyphean task. Successfully completing that implementation, if even possible,
would necessarily produce a Lovecraftian mess: unmaintainable, full of security
vulnerabilities, with gigabytes in RAM use and hours in compile times. And given
that all of the contemporary web browsers that implement a sufficiently useful
subset of web standards are ass and getting assier, what should we do?&lt;/p&gt;
&lt;p&gt;The problem is unsolvable. We cannot have the &amp;ldquo;web&amp;rdquo; without all of these
problems. But what we can have is something different, like Gemini. Gemini does
not solve all of the web&amp;rsquo;s problems, but it addresses a subset of its use-cases
better than the web does, and that excites me. I want to discard the parts of
the web that Gemini does better, and explore other solutions for anything that&amp;rsquo;s
left of the web which is worth keeping (hint: much of it is not).&lt;/p&gt;
&lt;p&gt;There are some aspects of Gemini which I approve of immensely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s dead simple. A client or server implementation can be written from
scratch by a single person in the space of an afternoon or two. A new web
browser could take hundreds of engineers millions of hours to complete.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not extensible. Gemini is designed to be &lt;em&gt;difficult&lt;/em&gt; to extend without
breaking backwards compatibility, and almost all proposals for expansion on
the mailing list are ultimately shot down. This is a good thing: extensibility
is generally a bad idea. Extensions ultimately lead to more complexity and
Gemini might suffer the same fate as the web if not for its disdain for
extensions.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s opinionated about document formatting. There are no inline links (every
link goes on its own line), no formatting, and no inline images. Gemini
strictly separates the responsibility of content and presentation. Providing
the content is the exclusive role of the server, and providing the
presentation is the exclusive role of the client. There are no stylesheets and
authors have very little say in &lt;em&gt;how&lt;/em&gt; their content is presented. It&amp;rsquo;s still
possible for authors to express themselves within these constraints —
as with any other constraints — but it allows clients to be simpler and
act more as &lt;em&gt;user&lt;/em&gt; agents than &lt;em&gt;vendor&lt;/em&gt; agents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some people argue that what we should have is &amp;ldquo;the web, but less of it&amp;rdquo;, i.e. a
&amp;ldquo;sane&amp;rdquo; subset of web standards. I don&amp;rsquo;t agree (for one, I don&amp;rsquo;t think there &lt;em&gt;is&lt;/em&gt;
a &amp;ldquo;sane&amp;rdquo; subset of those standards), but I&amp;rsquo;ll save that for another blog post.
Gemini is a new medium, and it&amp;rsquo;s different from the web. Anyone who checking it
out should be prepared for that and open to working within its constraints.
Limitations breed creativity!&lt;/p&gt;
&lt;p&gt;For my part, I have been working on a number of Gemini projects. For one, this
blog is now available &lt;a href=&#34;gemini://drewdevault.com&#34;&gt;on Gemini&lt;/a&gt;, and I have started
writing some Gemini-exclusive content for it. I&amp;rsquo;ve also written some software
you&amp;rsquo;re welcome to use:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/~sircmpwn/gmni&#34;&gt;&lt;strong&gt;libgmni&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://sr.ht/~sircmpwn/gmni&#34;&gt;&lt;strong&gt;gmni&lt;/strong&gt;&lt;/a&gt;,
and &lt;a href=&#34;https://sr.ht/~sircmpwn/gmni&#34;&gt;&lt;strong&gt;gmnlm&lt;/strong&gt;&lt;/a&gt; are my suite of Gemini client
software, all written in C11 and only depending on a POSIX-like system and
OpenSSL. libgmni is a general-purpose Gemini client library with &lt;a href=&#34;https://git.sr.ht/~sircmpwn/gmni/tree/master/include/gmni&#34;&gt;a simple
interface&lt;/a&gt;. gmni is a
cURL-like &lt;a href=&#34;https://drewdevault.com/gmni.1.html&#34;&gt;command line tool&lt;/a&gt; for
performing Gemini requests. Finally, gmnlm is a line-mode browser with a rich
feature-set. Together these tools weigh just under 4,000 lines of code, of which
about 1,600 are the URL parser from cURL vendored in.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://portal.drewdevault.com/gmnisrv.gmi&#34;&gt;&lt;strong&gt;gmnisrv&lt;/strong&gt;&lt;/a&gt; is a high-performance
Gemini server, also written in C11 for POSIX systems with OpenSSL. It supports
zero-configuration TLS, CGI scripting, auto-indexing, regex routing and URL
rewrites, and I have a couple more things planned for 1.0. It clocks in at about
6,700 lines, of which the same 1,600 are vendored from cURL, and an additional
2,800 lines are vendored from Fabrice Bellard&amp;rsquo;s
&lt;a href=&#34;https://bellard.org/quickjs/&#34;&gt;quickjs&lt;/a&gt; regex implementation.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://portal.drewdevault.com/kineto.gmi&#34;&gt;&lt;strong&gt;kineto&lt;/strong&gt;&lt;/a&gt; is an HTTP-to-Gemini
gateway, implemented as a single Go file (under 500 lines) with the assistance
of ~adnano&amp;rsquo;s &lt;a href=&#34;https://sr.ht/~adnano/go-gemini/&#34;&gt;go-gemini&lt;/a&gt; library. My Gemini
blog &lt;a href=&#34;https://portal.drewdevault.com&#34;&gt;is available through this portal&lt;/a&gt; if you
would like to browse it.&lt;/p&gt;
&lt;p&gt;So dive in and explore! Install gmnisrv on your server and set up a Gemini space
for yourself. Read the feeds from
&lt;a href=&#34;gemini://gemini.circumlunar.space/capcom/&#34;&gt;CAPCOM&lt;/a&gt;. Write some software of your
own!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://drewdevault.com/2020/08/13/Web-browsers-need-to-stop.html&#34;&gt;Exhibit A&lt;/a&gt;, &lt;a href=&#34;https://drewdevault.com/2020/03/18/Reckless-limitless-scope.html&#34;&gt;Exhibit B&lt;/a&gt;, &lt;a href=&#34;https://cmpwn.com/@sir/104894723861368333&#34;&gt;Exhibit C&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>I&#39;m handing over maintenance of wlroots and sway to Simon Ser</title>
      <link>./2020/10/23/Im-handing-wlroots-and-sway-to-Simon.html</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/10/23/Im-handing-wlroots-and-sway-to-Simon.html</guid>
      <description>&lt;p&gt;Over the past several months, I&amp;rsquo;ve been gradually weaning down my role in both
projects, and as a contributor to Wayland in general. I feel that I&amp;rsquo;ve already
accomplished everything I set out to do with Wayland — and more! I have
been happily using sway as my daily driver for well over a year with no
complaints or conspicuously absent features. For me, there&amp;rsquo;s little reason to
stay involved. This will likely come as no surprise to many who&amp;rsquo;ve kept their
ear to the ground in these communities.&lt;/p&gt;
&lt;p&gt;Simon has been an important co-maintainer on wlroots and sway for several years,
and also serves as a maintainer for Wayland itself, and Weston. I trust him with
these projects, and he&amp;rsquo;s been doing a stellar job so far — no real change
in his work is necessary for this hand-off. Simon works for SourceHut full-time
and his compensation covers his role in the Wayland community, so you can trust
that the health of the project is unaffected, too.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s still plenty of great things to come from these projects without me.
Many improvements are underway and more are planned for the future. Don&amp;rsquo;t worry:
sway and wlroots have already demonstrated that they work quite well without my
active involvement.&lt;/p&gt;
&lt;p&gt;Good luck, Simon, and thanks for all of your hard work! I&amp;rsquo;m proud of you!&lt;/p&gt;
</description>
    </item><item>
      <title>Firefox: The Jewel^WEmbarassment of Open Source</title>
      <link>./2020/10/22/Firefox-the-embarassment-of-FOSS.html</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/10/22/Firefox-the-embarassment-of-FOSS.html</guid>
      <description>&lt;p&gt;Circa 2006, the consensus on Firefox was concisely stated by this classic xkcd:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xkcd.com/198/&#34;&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/perspective.png&#34; alt=&#34;A stick-figure comic. The title reads &amp;ldquo;Sometimes, when I first wake up, I am caught in the horrible grip of perspective.&amp;rdquo; The character, waking up, says &amp;ldquo;It may be a jewel of open source, but Firefox is just a browser. It shows webpages. What the hell is wrong with us?&amp;rdquo; The caption reads &amp;ldquo;Fortunately, this subsides quickly.&amp;rdquo;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This feeling didn&amp;rsquo;t last. In 2016, I wrote
&lt;a href=&#34;./2016/05/11/In-Memoriam-Mozilla.html&#34;&gt;In Memoriam - Mozilla&lt;/a&gt;, and in 2017,
&lt;a href=&#34;./2017/12/16/Firefox-is-on-a-slippery-slope.html&#34;&gt;Firefox is on a slippery slope&lt;/a&gt;.
Well, I was right, and Firefox (and Mozilla) have only become worse since. The
fuck-up culture is so ingrained in Mozilla in 2020 that it&amp;rsquo;s hard to see it ever
getting better again.&lt;/p&gt;
&lt;p&gt;In the time since my last article on the subject, Mozilla has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Laid off 25% of its employees, mostly engineers, many of whom work on Firefox&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Raised executive pay 400% as their market share declined 85%&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Sent a record of all browsing traffic to CloudFlare by default&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Added advertisements to the new tab page on Firefox&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Used their brand to enter the saturated VPN grift market&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Built a walled garden for add-ons, then let the walls crash in&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Started, and killed, a dozen projects which were not Firefox&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most interesting things they&amp;rsquo;ve been involved in in the past few years are
Rust and Servo, and they fired most or all of their engineers involved in both.
And, yesterday, &lt;a href=&#34;https://blog.mozilla.org/blog/2020/10/20/mozilla-reaction-to-u-s-v-google/&#34;&gt;Mozilla published a statement&lt;/a&gt; siding with
Google on anti-trust, failing to disclose the fact that Google pays to keep their
lights on.&lt;/p&gt;
&lt;p&gt;Is this the jewel of open source? No, not anymore. Firefox is the embarrassment
of open source, and it&amp;rsquo;s the only thing standing between Google and an
all-encompassing monopoly over the web. Mozilla has divested from Firefox and
started funnelling what money is left out of their engineering payroll and into
their executive pockets. The web is dead, and its fetid corpse persists only
as the layer of goop that Google scrapes between its servers and your screen.
Anyone who still believes that Mozilla will save the web is a fool.&lt;/p&gt;
&lt;p&gt;As I have &lt;a href=&#34;./2020/03/18/Reckless-limitless-scope.html&#34;&gt;stated before&lt;/a&gt;, the scope of web browsers has been
increasing at a reckless pace for &lt;em&gt;years&lt;/em&gt;, to the point where it&amp;rsquo;s literally
impossible to build a new web browser. We have no recourse left to preserve the
web. This is why I&amp;rsquo;m throwing my weight behind &lt;a href=&#34;https://gemini.circumlunar.space/&#34;&gt;Gemini&lt;/a&gt;, a new protocol
which is &lt;em&gt;much simpler&lt;/em&gt; than the web, and which you can implement yourself in a
weekend.&lt;/p&gt;
&lt;p&gt;Forget about the web, it&amp;rsquo;s a lost cause. Let&amp;rsquo;s move on.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2020/08/firefox-maker-mozilla-lays-off-250-workers-says-covid-19-lowered-revenue/&#34;&gt;Mozilla cuts 250 jobs, says Firefox development will be affected&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://calpaterson.com/mozilla.html&#34;&gt;Firefox usage is down 85% despite Mozilla&amp;rsquo;s top exec pay going up 400%&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.mozilla.org/blog/2020/02/25/firefox-continues-push-to-bring-dns-over-https-by-default-for-us-users/&#34;&gt;Firefox continues push to bring DNS over HTTPS by default for US users&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.mozilla.org/futurereleases/2018/04/30/a-privacy-conscious-approach-to-sponsored-content/&#34;&gt;A Privacy-Conscious Approach to Sponsored Content&lt;/a&gt; &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://vpn.mozilla.org/&#34;&gt;Mozilla VPN&lt;/a&gt; &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://hacks.mozilla.org/2019/05/technical-details-on-the-recent-firefox-add-on-outage/&#34;&gt;Technical Details on the Recent Firefox Add-on Outage&lt;/a&gt; &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://killedbymozilla.com/&#34;&gt;Killed by Mozilla&lt;/a&gt; &lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, October 2020</title>
      <link>./2020/10/15/Status-update-October-2020.html</link>
      <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/10/15/Status-update-October-2020.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;m writing this month&amp;rsquo;s status update from a brand-new desktop workstation
(well, I re-used the GPU), my first new workstation in about 10 years. I hope
this new one lasts for another decade! I aimed for something smaller and
lightweight this time — it&amp;rsquo;s a Mini-ITX build. I&amp;rsquo;ve only been running this
for a few days, so let me tell you about the last few accomplishments which are
accountable to my venerable workstation&amp;rsquo;s final days of life.&lt;/p&gt;
&lt;p&gt;First, there&amp;rsquo;s been a ton of important work completed for SourceHut&amp;rsquo;s API 2.0
plans. All of the main blockers for the first version of meta.sr.ht&amp;rsquo;s writable
GraphQL API are resolved, and after implementing a few more resolvers it should
be in a shippable state. This included riggings for database transactions,
simplification of the mini-&amp;ldquo;ORM&amp;rdquo; I built, and support for asyncronous work like
delivering webhooks. The latter called for a new library, &lt;a href=&#34;https://sr.ht/~sircmpwn/dowork/&#34;&gt;dowork&lt;/a&gt;,
which you&amp;rsquo;re free to reuse to bring asyncronous work processing to your Go
programs.&lt;/p&gt;
&lt;p&gt;I also built a new general-purpose daemon for SourceHut called
&lt;a href=&#34;https://sr.ht/~sircmpwn/chartsrv/&#34;&gt;chartsrv&lt;/a&gt;, which can be used to generate graphs from
&lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; data. The following is a real-time graph of the load
average on the builds.sr.ht workers:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://metrics.sr.ht/chart.svg?title=Build%20worker%20load%20average&amp;amp;query=avg_over_time%28node_load15%7Binstance%3D~%22cirno%5B0-9%5D%2B.sr.ht%3A80%22%7D%5B1h%5D%29&amp;amp;max=64&amp;amp;since=336h&amp;amp;stacked&amp;amp;step=10000&amp;amp;height=3&amp;amp;width=10&#34; alt=&#34;A chart which hopefully shows a reasonable load average across all workers&#34;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been getting more into &lt;a href=&#34;https://gemini.circumlunar.space/&#34;&gt;Gemini&lt;/a&gt; this month, and have completed
three (or four?) whole projects for it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sr.ht/~sircmpwn/gmni/&#34;&gt;gmni&lt;/a&gt; and gmnlm: a client implementation and line-mode browser&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sr.ht/~sircmpwn/gmnisrv/&#34;&gt;gmnisrv&lt;/a&gt;: a server implementation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sr.ht/~sircmpwn/kineto/&#34;&gt;kineto&lt;/a&gt;: an HTTP-&amp;gt;Gemini portal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The (arguably) fourth project is the completion of a Gemini version of this
blog, which is available at &lt;code&gt;gemini://drewdevault.com&lt;/code&gt;, or via the kineto portal
at &lt;a href=&#34;https://portal.drewdevault.com&#34;&gt;portal.drewdevault.com&lt;/a&gt;. I&amp;rsquo;ll be posting
some content exclusively on Gemini (and I already have!), so get yourself a
client if you want to tune in.&lt;/p&gt;
&lt;p&gt;I have also invested some effort into &lt;a href=&#34;https://git.sr.ht/~sircmpwn/himitsu&#34;&gt;himitsu&lt;/a&gt;, a project I shelved
for so long that you probably don&amp;rsquo;t remember it. Worry not, I have rewritten the
README.md to give you a better introduction to it. Here&amp;rsquo;s a screenshot for your
viewing pleasure:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://l.sr.ht/hr4G.png&#34; alt=&#34;A GUI dialog asking a user to consent to allow an application to access their IMAP credentials&#34;&gt;&lt;/p&gt;
&lt;p&gt;Bonus update: two new &lt;a href=&#34;https://baremessages.org&#34;&gt;BARE&lt;/a&gt; implementations have
appeared: OCaml and Java.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for now! I&amp;rsquo;ll see you for the next update soon. Thanks for your
support!&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;...&lt;/summary&gt;
  &lt;img src=&#34;https://l.sr.ht/y15d.png&#34; alt=&#34;A screenshot of a page of a programming language specification detailing the syntax of tagged unions&#34; /&gt;
&lt;/details&gt;
</description>
    </item><item>
      <title>Four principles of software engineering</title>
      <link>./2020/10/09/Four-principles-of-software-engineering.html</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/10/09/Four-principles-of-software-engineering.html</guid>
      <description>&lt;p&gt;Software should be &lt;strong&gt;robust&lt;/strong&gt;. It should be designed to accommodate all known
edge cases. In practice, this means predicting and handling all known error
cases, enumerating and addressing all classes of user inputs, reasoning about
and planning for the performance characteristics of your program, and so on.&lt;/p&gt;
&lt;p&gt;Software should be &lt;strong&gt;reliable&lt;/strong&gt;. It should be expected to work for an extended
length of time under design conditions without failures. Ideally, it should work
outside of design conditions up to some threshold.&lt;/p&gt;
&lt;p&gt;Software should also be &lt;strong&gt;stable&lt;/strong&gt;. It should not change in incompatible or
unexpected ways; if it works today it should also work tomorrow. If it has to
change, a plan shall be written. Stakeholders (including users!) should be given
advance notice and should be involved in the planning stage.&lt;/p&gt;
&lt;p&gt;Finally, software should be &lt;strong&gt;simple&lt;/strong&gt;. Only as many moving parts should be
included as necessary to meet the other three goals. All software has bugs, but
complicated software (1) has more bugs and (2) is more difficult to diagnose
and fix. Note that designing a simple solution is usually more difficult than
designing a complex solution.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This (short) article is based on &lt;a href=&#34;https://cmpwn.com/@sir/104931806273081351&#34;&gt;a Mastodon post&lt;/a&gt; I wrote a few weeks ago.&lt;/em&gt;&lt;/p&gt;
</description>
    </item><item>
      <title>Spamtoberfest</title>
      <link>./2020/10/01/Spamtoberfest.html</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/10/01/Spamtoberfest.html</guid>
      <description>&lt;p&gt;As I&amp;rsquo;ve &lt;a href=&#34;https://drewdevault.com/2020/08/10/How-to-contribute-to-FOSS.html&#34;&gt;written before&lt;/a&gt;, the best contributors to a FOSS project are
intrinsically motivated to solve problems in your software. This sort of
contribution is often fixing an important problem and places a smaller burden on
maintainers to spend their time working with the contributor. I&amp;rsquo;ve previously
contrasted this with the &amp;ldquo;I want to help out!&amp;rdquo; contributions, where a person
just has a vague desire to help out. Those contributions are, generally, less
valuable and place a greater burden on the maintainer. Now, DigitalOcean has
lowered the bar even further with Hacktoberfest.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: I am the founder of a FOSS project hosting company similar to GitHub.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As I write this, a Digital Ocean-sponsored and GitHub-enabled Distributed Denial
of Service (DDoS) attack is ongoing, wasting the time of thousands of free
software maintainers with an onslaught of meaningless spam. Bots are spamming
&lt;a href=&#34;https://github.com/search?q=amazing+project+is:pr&amp;amp;type=Issues&#34;&gt;tens of thousands&lt;/a&gt; of pull requests like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hundredrabbits/100r.co/pull/39/files&#34;&gt;&lt;img src=&#34;https://l.sr.ht/71VU.png&#34; alt=&#34;Screenshot of a spam pull request on GitHub which adds garbage to the README.md file&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The official response from both Digital Ocean and GitHub appears to be passing
the buck.  Digital Ocean addresses spam in their FAQ, putting the burden of
dealing with it entirely on the maintainers:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spammy pull requests can be given a label that contains the word &amp;ldquo;invalid&amp;rdquo; or
&amp;ldquo;spam&amp;rdquo; to discount them. Maintainers are faced with the majority of spam that
occurs during Hacktoberfest, and we dislike spam just as much as you. If
you&amp;rsquo;re a maintainer, please label any spammy pull requests submitted to the
repositories you maintain as &amp;ldquo;invalid&amp;rdquo; or &amp;ldquo;spam&amp;rdquo;, and close them. Pull
requests with this label won&amp;rsquo;t count toward Hacktoberfest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;via &lt;a href=&#34;https://hacktoberfest.digitalocean.com/details&#34;&gt;Hacktoberfest FAQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s GitHub&amp;rsquo;s response:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The content and activity you are reporting appears to be related to
Hacktoberfest. Please keep in mind that GitHub Staff is not enforcing
Hacktoberfest rules; we will, however, enforce our own Acceptable Use
Policies. According to the Hacktoberfest FAQ&amp;hellip; [same quote as given above]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;via &lt;a href=&#34;https://twitter.com/kyleknighted/status/1311685461828612097&#34;&gt;@kyleknighted@twitter.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, according to these two companies, whose responsibility is it to deal with
the spam that &lt;em&gt;they&amp;rsquo;ve&lt;/em&gt; created? The maintainers, of course! All for a T-Shirt.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s be honest. Hacktoberfest has never generated anything of value for open
source. It&amp;rsquo;s a marketing stunt which sends a deluge of low-effort contributions
to maintainers, leaving them to clean up the spam. I&amp;rsquo;ve never been impressed
with Hacktoberfest contributions, even the ones which aren&amp;rsquo;t obviously written
by a bot:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/whatwg/html/pull/5975/files&#34;&gt;&lt;img src=&#34;https://l.sr.ht/F-sU.png&#34; alt=&#34;Screenshot of a pull request which needlessly comment a CSS file&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hacktoberfest is, and has always been, about one thing: marketing for Digital
Ocean.&lt;/p&gt;
&lt;iframe
src=&#34;https://oc.todon.fr/@val/104960502585461740/embed&#34;
class=&#34;mastodon-embed&#34;
style=&#34;max-width: 100%; border: 0; margin: 0 auto; display: block;&#34;
width=&#34;400&#34;
height=&#34;530&#34;
allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;This is what we get with corporate-sponsored &amp;ldquo;social coding&amp;rdquo;, brought to you by
Digital Ocean and GitHub and McDonalds, home of the Big Mac™. When you
build the Facebook of coding, you get the Facebook of coding. We don&amp;rsquo;t need to
give away T-Shirts to incentivize drive-by drivel from randoms who will never
get any closer to open source than a +1/-1 README.md change.&lt;/p&gt;
&lt;p&gt;What would &lt;em&gt;actually&lt;/em&gt; benefit FOSS is to enable the strong mentorship necessary
raise a new generation of &lt;strong&gt;software engineers&lt;/strong&gt; under the tutelage of
maintainers who can rely on a strong support system to do their work. Programs
like Google Summer of Code do this better. Programs where a marketing department
spends $5,000 on T-Shirts to flood maintainers with garbage and clothe people in
ads are doing the opposite: &lt;em&gt;hurting&lt;/em&gt; open source.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://l.sr.ht/KoFK.png&#34;&gt;&lt;img src=&#34;https://l.sr.ht/KoFK.png&#34; alt=&#34;Screenshot of a friend&amp;rsquo;s notifications, 9 out of 11 of which are spam&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&#34;https://twitter.com/shitoberfest&#34;&gt;@shitoberfest on Twitter&lt;/a&gt; for more
Hacktoberfest garbage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2020-10-03&lt;/strong&gt;: Digital Ocean
&lt;a href=&#34;https://hacktoberfest.digitalocean.com/hacktoberfest-update&#34;&gt;has updated their rules&lt;/a&gt;,
among other things asking maintainers to opt-in, to reduce spam.&lt;/p&gt;
</description>
    </item><item>
      <title>A tale of two libcs</title>
      <link>./2020/09/25/A-story-of-two-libcs.html</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/09/25/A-story-of-two-libcs.html</guid>
      <description>&lt;p&gt;I received a bug report from Debian today, who had fed some garbage into
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/scdoc&#34;&gt;scdoc&lt;/a&gt;, and it gave them a SIGSEGV back.
Diving into this problem gave me a good opportunity to draw a comparison between
musl libc and glibc. Let&amp;rsquo;s start with the stack trace:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;==26267==ERROR: AddressSanitizer: SEGV on unknown address 0x7f9925764184
(pc 0x0000004c5d4d bp 0x000000000002 sp 0x7ffe7f8574d0 T0)
==26267==The signal is caused by a READ memory access.
    0 0x4c5d4d in parse_text /scdoc/src/main.c:223:61
    1 0x4c476c in parse_document /scdoc/src/main.c
    2 0x4c3544 in main /scdoc/src/main.c:763:2
    3 0x7f99252ab0b2 in __libc_start_main
/build/glibc-YYA7BZ/glibc-2.31/csu/../csu/libc-start.c:308:16
    4 0x41b3fd in _start (/scdoc/scdoc+0x41b3fd)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And if we pull up that line of code, we find&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isalnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FORMAT_UNDERLINE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isalnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hint: p is a valid pointer. &amp;ldquo;last&amp;rdquo; and &amp;ldquo;next&amp;rdquo; are both uint32_t. The segfault
happens in the second call to isalnum. And, the key: it can only be reproduced
on glibc, not on musl libc. If you did a double-take, you&amp;rsquo;re not alone. There&amp;rsquo;s
nothing here which could have caused a segfault.&lt;/p&gt;
&lt;p&gt;Since it was narrowed down to glibc, I pulled up the source code and went
digging for the isalnum implementation, expecting some stupid bullshit. But
before I get into their stupid bullshit, of which I can assure you there is &lt;em&gt;a
lot&lt;/em&gt;, let&amp;rsquo;s briefly review the happy version. This is what the musl libc
&lt;code&gt;isalnum&lt;/code&gt; implementation looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isalnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isalpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isdigit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isalpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isdigit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As expected, for any value of &lt;code&gt;c&lt;/code&gt;, isalnum will never segfault. Because why the
fuck would isalnum segfault? Okay, now, let&amp;rsquo;s compare this to the
&lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=blob;f=ctype/ctype.h;h=351495aa4feaf23993fe65afc0760615268d044e;hb=HEAD&#34;&gt;glibc implementation&lt;/a&gt;. When opening this header, you&amp;rsquo;re greeted with the
typical GNU bullshit, but let&amp;rsquo;s trudge through and grep for isalnum.&lt;/p&gt;
&lt;p&gt;The first result is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;_ISupper&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ISbit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;        &lt;span class=&#34;cm&#34;&gt;/* UPPERCASE.  */&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;_ISlower&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ISbit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;        &lt;span class=&#34;cm&#34;&gt;/* lowercase.  */&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;_ISalnum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ISbit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;cm&#34;&gt;/* Alphanumeric.  */&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This looks like an implementation detail, let&amp;rsquo;s move on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;__exctype&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isalnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But what&amp;rsquo;s &lt;code&gt;__exctype&lt;/code&gt;? Back up the file a few lines&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define __exctype(name) extern int name (int) __THROW
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, apparently that&amp;rsquo;s just the prototype. Not sure why they felt the need to
write a macro for that. Next search result&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#if !defined __NO_CTYPE
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# ifdef __isctype_f
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__isctype_f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, this looks useful. What is &lt;code&gt;__isctype_f&lt;/code&gt;? Back up the file now&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef __cplusplus
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# define __isctype(c, type) \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;  ((*__ctype_b_loc ())[(int) (c)] &amp;amp; (unsigned short int) type)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#elif defined __USE_EXTERN_INLINES
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# define __isctype_f(type) \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;  __extern_inline int                                                         \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;  is##type (int __c) __THROW                                                  \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;  {                                                                           \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;    return (*__ctype_b_loc ())[(int) (__c)] &amp;amp; (unsigned short int) _IS##type; \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;  }
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Oh&amp;hellip;. oh dear. It&amp;rsquo;s okay, we&amp;rsquo;ll work through this together. Let&amp;rsquo;s see,
&lt;code&gt;__isctype_f&lt;/code&gt; is some kind of inline function&amp;hellip; wait, this is the else branch
of &lt;code&gt;#ifndef __cplusplus&lt;/code&gt;. Dead end. Where the fuck is isalnum &lt;em&gt;actually&lt;/em&gt;
defined? Grep again&amp;hellip; okay&amp;hellip; here we are?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#if !defined __NO_CTYPE
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# ifdef __isctype_f
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__isctype_f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# elif defined __isctype
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# define isalnum(c)     __isctype((c), _ISalnum) &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// &amp;lt;- this is it
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hey, there&amp;rsquo;s that implementation detail from earlier! Remember this?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;_ISupper&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ISbit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;        &lt;span class=&#34;cm&#34;&gt;/* UPPERCASE.  */&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;_ISlower&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ISbit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;        &lt;span class=&#34;cm&#34;&gt;/* lowercase.  */&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;_ISalnum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ISbit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;cm&#34;&gt;/* Alphanumeric.  */&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s suss out that macro real quick:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# include &amp;lt;bits/endian.h&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# if __BYTE_ORDER == __BIG_ENDIAN
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#  define _ISbit(bit)   (1 &amp;lt;&amp;lt; (bit))
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# else &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* __BYTE_ORDER == __LITTLE_ENDIAN */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#  define _ISbit(bit)   ((bit) &amp;lt; 8 ? ((1 &amp;lt;&amp;lt; (bit)) &amp;lt;&amp;lt; 8) : ((1 &amp;lt;&amp;lt; (bit)) &amp;gt;&amp;gt; 8))
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Oh, for fuck&amp;rsquo;s sake. Whatever, let&amp;rsquo;s move on and just assume this is a magic
number. The other macro is &lt;code&gt;__isctype&lt;/code&gt;, which is similar to the &lt;code&gt;__isctype_f&lt;/code&gt; we
were just looking at a moment ago. Let&amp;rsquo;s go look at that &lt;code&gt;ifndef __cplusplus&lt;/code&gt;
branch again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef __cplusplus
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# define __isctype(c, type) \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;  ((*__ctype_b_loc ())[(int) (c)] &amp;amp; (unsigned short int) type)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#elif defined __USE_EXTERN_INLINES
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Well, at least we have a pointer dereference now, that could explain the
segfault. What&amp;rsquo;s &lt;code&gt;__ctype_b_loc&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* These are defined in ctype-info.c.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   The declarations here must match those in localeinfo.h.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   In the thread-specific locale model (see `uselocale&amp;#39; in &amp;lt;locale.h&amp;gt;)
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   we cannot use global variables for these as was done in the past.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   Instead, the following accessor functions return the address of
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   each variable, which is local to the current thread if multithreaded.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   These point into arrays of 384, so they can be indexed by any `unsigned
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   char&amp;#39; value [0,255]; by EOF (-1); or by any `signed char&amp;#39; value
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   [-128,-1).  ISO C requires that the ctype functions work for `unsigned
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   char&amp;#39; values and for EOF; we also support negative `signed char&amp;#39; values
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   for broken old programs.  The case conversion arrays are of `int&amp;#39;s
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   rather than `unsigned char&amp;#39;s because tolower (EOF) must be EOF, which
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   doesn&amp;#39;t fit into an `unsigned char&amp;#39;.  But today more important is that
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;   the arrays are also used for multi-byte character sets.  */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;short&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;__ctype_b_loc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;__THROW&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__const__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__int32_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;__ctype_tolower_loc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;__THROW&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__const__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__int32_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;__ctype_toupper_loc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;__THROW&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__const__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That is just so, super cool of you, glibc. I just &lt;em&gt;love&lt;/em&gt; dealing with locales.
Anyway, my segfaulted process is sitting in gdb, and equipped with all of this
information I wrote the following monstrosity:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) print ((unsigned int **(*)(void))__ctype_b_loc)()[next]
Cannot access memory at address 0x11dfa68
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Segfault found. Reading that comment again, we see &amp;ldquo;ISO C requires that the
ctype functions work for &amp;lsquo;unsigned char&amp;rsquo; values and for EOF&amp;rdquo;. If we
cross-reference that with the specification:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In all cases [of functions defined by ctype.h,] the argument is an int, the
value of which shall be representable as an unsigned char or shall equal the
value of the macro EOF.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the fix is obvious at this point. Okay, fine, my bad. My code is wrong. I
apparently cannot just hand a UCS-32 codepoint to isalnum and expect it to tell
me if it&amp;rsquo;s between 0x30-0x39, 0x41-0x5A, or 0x61-0x7A.&lt;/p&gt;
&lt;p&gt;But, I&amp;rsquo;m going to go out on a limb here: maybe isalnum should never cause a
program to segfault no matter what input you give it. Maybe because the spec
says you &lt;em&gt;can&lt;/em&gt; does not mean you &lt;em&gt;should&lt;/em&gt;. Maybe, just maybe, the behavior of
this function should not depend on five macros, whether or not you&amp;rsquo;re using a
C++ compiler, the endianness of your machine, a look-up table, thread-local
storage, and two pointer dereferences.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the musl version as a quick reminder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isalnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isalpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isdigit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isalpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isdigit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Bye!&lt;/p&gt;
</description>
    </item><item>
      <title>TOFU recommendations for Gemini</title>
      <link>./2020/09/21/Gemini-TOFU.html</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/09/21/Gemini-TOFU.html</guid>
      <description>&lt;p&gt;I will have more to say about &lt;a href=&#34;https://gemini.circumlunar.space/&#34;&gt;Gemini&lt;/a&gt; in the future, but for now, I wanted to
write up some details about one thing in particular: the trust-on-first-use
algorithm I implemented for my client, &lt;a href=&#34;https://sr.ht/~sircmpwn/gmni&#34;&gt;gmni&lt;/a&gt;. I think you should implement
this algorithm, too!&lt;/p&gt;
&lt;p&gt;First of all, it&amp;rsquo;s important to note that the Gemini specification explicitly
mentions TOFU and the role of self-signed certificates: they are the norm in
Geminiland, and if your client does not support them then you&amp;rsquo;re going to be
unable to browse many sites. However, the exact details are left up to the
implementation. Here&amp;rsquo;s what mine does:&lt;/p&gt;
&lt;p&gt;First, on startup, it finds the known_hosts file. For my client, this is
&lt;code&gt;~/.local/share/gmni/known_hosts&lt;/code&gt; (the exact path is adjusted as necessary per
the XDG basedirs specification). Each line of this file represents a known host,
and each host has four fields separated by spaces, in this order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hostname (e.g. gemini.circumlunar.space)&lt;/li&gt;
&lt;li&gt;Fingerprint algorithm (e.g. SHA-512)&lt;/li&gt;
&lt;li&gt;Fingerprint, in hexadecimal, with &amp;lsquo;:&amp;rsquo; between each octet (e.g. 55:01:D8&amp;hellip;)&lt;/li&gt;
&lt;li&gt;Unix timestamp of the certificate&amp;rsquo;s notAfter date&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a known_hosts entry is encountered with a hashing algorithm you don&amp;rsquo;t
understand, it is disregarded.&lt;/p&gt;
&lt;p&gt;Then, when processing a request and deciding whether or not to trust its
certificate, take the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Verify that the certificate makes sense. Check the notBefore and notAfter
dates against the current time, and check that the hostname is correct
(including wildcards). Apply any other scrutiny you want, like enforcing a
good hash algorithm or an upper limit on the expiration date. If these checks
do not pass, the trust state is INVALID, GOTO 5.&lt;/li&gt;
&lt;li&gt;Compute the certificate&amp;rsquo;s fingerprint. Use the entire certificate (in OpenSSL
terms, &lt;code&gt;X509_digest&lt;/code&gt; will do this), not just the public key.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Look up the known_hosts record for this hostname. If one is found, but the
record is expired, disregard it. If one is found, and the fingerprint does
not match, the trust state is UNTRUSTED, GOTO 5. Otherwise, the trust state
is TRUSTED. GOTO 7.&lt;/li&gt;
&lt;li&gt;The trust state is UNKNOWN. GOTO 5.&lt;/li&gt;
&lt;li&gt;Display information about the certficate and its trust state to the user, and
prompt them to choose an action, from the following options:
&lt;ul&gt;
&lt;li&gt;If INVALID, the user&amp;rsquo;s choices are ABORT or TRUST_TEMPORARY.&lt;/li&gt;
&lt;li&gt;If UNKNOWN, the user&amp;rsquo;s choices are ABORT, TRUST_TEMPORARY, or TRUST_ALWAYS.&lt;/li&gt;
&lt;li&gt;If UNTRUSTED, abort the request and display a diagnostic message. The user
must manually edit the known_hosts file to correct the issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete the requested action:
&lt;ul&gt;
&lt;li&gt;If ABORT, terminate the request.&lt;/li&gt;
&lt;li&gt;If TRUST_TEMPORARY, update the session&amp;rsquo;s list of known hosts.&lt;/li&gt;
&lt;li&gt;If TRUST_ALWAYS, append a record to the known_hosts file and update the
session&amp;rsquo;s list of known hosts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allow the request to proceed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the trust state is UNKNOWN, instead of requring user input to proceed, the
implementation MAY proceed with the request IF the UI displays that a new
certificate was trusted and provides a means to review the certificate and
revoke that trust.&lt;/p&gt;
&lt;p&gt;Note that being signed by a certificate authority in the system trust store is
not considered meaningful to this algorithm. Such a cert is TOFU&amp;rsquo;d all the same.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! If you have feedback on this approach, please &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;send me an
email&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My implementation doesn&amp;rsquo;t &lt;em&gt;entirely&lt;/em&gt; match this behavior, but it&amp;rsquo;s close and
I&amp;rsquo;ll finish it up before 1.0. If you want to read the code, &lt;a href=&#34;https://git.sr.ht/~sircmpwn/gmni/tree/master/src/tofu.c&#34;&gt;here it is&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bonus recommendation for servers: you &lt;strong&gt;should&lt;/strong&gt; use a self-signed certificate,
and you &lt;strong&gt;should not&lt;/strong&gt; use a certificate signed by one of the mainstream
certificate authorities. We don&amp;rsquo;t need to carry along the legacy CA cabal into
our brave new Gemini future.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Rationale: this fingerprint matches the output of &lt;code&gt;openssl x509 -sha512 -fingerprint&lt;/code&gt;. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>The unrealized potential of federation</title>
      <link>./2020/09/20/The-potential-of-federation.html</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/09/20/The-potential-of-federation.html</guid>
      <description>&lt;p&gt;There are some major problems on the internet which may seem intractable. How do
we prevent centralization of our communication tools under the authority of a
few, whose motivations may not align with our interests? How do we build
internet-scale infrastructure without a megacorp-scale budget? Can we make our
systems reliable and fault-tolerant — in the face of technical &lt;em&gt;and&lt;/em&gt;
social problems?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Federation&lt;/strong&gt; is an idea which takes a swing at all of these problems.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: apparently some cryptocurrency enthusiasts are parading this article
around to peddle their garbage. Cryptocurrency is the digitally woke techbro&amp;rsquo;s
ponzi scheme, and is a massive waste of electricity and developer effort. Anyone
who tells you anything positive about anything which is even remotely connected
to cryptocurrency almost certainly has ulterior motives and you should steer
clear. So hopefully that settles that. And cryptocurrency is a P2P system,
anyway, NOT a federation!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The key trait of a software system which is &lt;em&gt;federated&lt;/em&gt; is that the servers are
controlled by independent, sovereign entities, and that they exist together
under a common web of communication protocols and social agreements. This
occupies a sort of middle ground between the centralized architecture and the
peer-to-peer (or &amp;ldquo;decentralized&amp;rdquo;) architecture. Federation enjoys the advantages
of both, and few of the drawbacks.&lt;/p&gt;
&lt;p&gt;In a federated software system, groups of users are built around small,
neighborly instances of servers. These are usually small servers, sporting only
modest resource requirements to support their correspondingly modest userbase.
Crucially, these small servers speak to &lt;em&gt;one another&lt;/em&gt; using standard protocols,
allowing users of one instance to communicate seamlessly with users of other
instances. You can build a culture and shared sense of identity on your
instance, but also reach out and easily connect with other instances.&lt;/p&gt;
&lt;p&gt;The governance of a federated system then becomes distributed among many
operators. Every instance has the following privileges:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To set the rules which govern users of their instance&lt;/li&gt;
&lt;li&gt;To set the rules which govern who they federate with&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And, because there are hundreds or even thousands of instances, the users get
the privilege of choosing an instance whose rules they like, and which federates
with other instances they wish to talk to. This system also makes it hard for
marketing and spam to get a foothold — it optimizes for a self-governing
system of human beings talking to human beings, and not for corporations to push
their products.&lt;/p&gt;
&lt;p&gt;The costs of scaling up a federation is distributed manageably among these
operators. Small instances, with their modest server requirements, are often
cheap enough that a sysadmin can comfortably pay for the expenses out of pocket.
If not, it&amp;rsquo;s usually quite easy to solicit donations from the users to keep
things running. New operators appear all the time, and the federation scales up
a little bit more.&lt;/p&gt;
&lt;p&gt;Unlike P2P systems, the federated model allows volunteer sysadmins to use their
skills to expand access to the service to non-technical users, without placing
the burden on those non-technical users to set up, understand, maintain, or
secure servers or esoteric software. The servers are also always online and
provide strong identities and authenticity guarantees — eliminating an
entire class of P2P problems.&lt;/p&gt;
&lt;p&gt;A popular up-and-coming protocol for federation is ActivityPub, but it&amp;rsquo;s not the
only way to build a federated system. You&amp;rsquo;re certainly familiar with another
federation which is not based on ActivityPub: email. IRC and Matrix also provide
federated protocols in the instant messaging domain. Personally, I don&amp;rsquo;t like
ActivityPub, but AP is not necessary to reap the benefits of federation. Many
different kinds of communication systems can be designed with federation in
mind, and adjust their approach to accommodate their specific needs, evident in
each of these examples.&lt;/p&gt;
&lt;p&gt;In short, federation distributes governance and cost, and can allow us to tackle
challenges that we couldn&amp;rsquo;t overcome without it. The free software community
needs to rally behind federation, because no one else will. For all of the
reasons which make it worth doing, it is not rewarding for corporations.  They
would much rather build walled gardens and centralize, centralize, centralize
— it&amp;rsquo;s more profitable!  Democratic software which puts control into the
hands of the users is something we&amp;rsquo;re going to have to take for ourselves. Viva
la federación!&lt;/p&gt;
</description>
    </item><item>
      <title>Status update, September 2020</title>
      <link>./2020/09/15/Status-update-September-2020.html</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/09/15/Status-update-September-2020.html</guid>
      <description>&lt;p&gt;A mercifully cool September is upon us, and after years of searching, I finally
was able to secure Club Mate in the US. Let&amp;rsquo;s decant a bottle and recant the
story of this month&amp;rsquo;s progress in free software development.&lt;/p&gt;
&lt;p&gt;First of all, I&amp;rsquo;ve been able to put a pin on operations work on SourceHut for
the time being, and focus again on its software development. The GraphQL APIs
are a major focus area here, and I&amp;rsquo;ve made a lot of progress towards OAuth 2.0
support and writable GraphQL APIs. Additionally, I&amp;rsquo;ve laid out a number of
prioritized tickets for the beta — with the &amp;ldquo;beta&amp;rdquo; label on todo.sr.ht
— and have been picking items off of the list one at a time, mainly
focusing on meta.sr.ht improvements at first. I&amp;rsquo;ll go into more detail in the
What&amp;rsquo;s Cooking post for SourceHut later today, stay tuned.&lt;/p&gt;
&lt;p&gt;There has been some advancements in the little projects: a second Python
implementation of BARE has appeared, another in Common Lisp, and one in PHP;
bringing the total implementations to nine. We have a pretty decent spread of
support among programming languages!&lt;/p&gt;
&lt;p&gt;Not much more news to share today. Been focusing in on SourceHut and a secret
project, so check out the What&amp;rsquo;s Cooking post for more details. Thanks for your
support!&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;...&lt;/summary&gt;
&lt;img
  src=&#34;https://cmpwn.com/system/media_attachments/files/000/970/411/original/f5d4c6f553a5a0ce.png?1599509919&#34;
  alt=&#34;A screenshot of a programming language with a DRAFT watermark. The page shown describes the syntax and semantics of enum types.&#34;
/&gt;
&lt;/details&gt;
</description>
    </item><item>
      <title>Linux development is distributed - profoundly so</title>
      <link>./2020/09/02/Linux-development-is-profoundly-distributed.html</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/09/02/Linux-development-is-profoundly-distributed.html</guid>
      <description>&lt;p&gt;The standard introduction to git starts with an explanation of what it means to
use a &amp;ldquo;distributed&amp;rdquo; version control system. It&amp;rsquo;s pointed out that every
developer has a complete local copy of the repository and can work independently
and offline, often contrasting this design with systems like SVN and CVS.  The
explanation usually stops here. If you want to learn more, consider git&amp;rsquo;s roots:
it is the version control system purpose-built for Linux, the largest and most
active open source project in the world. To learn more about the true nature of
distributed development, we should observe Linux.&lt;/p&gt;
&lt;p&gt;Pull up your local copy of the Linux source code (you have one of those,
right?&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;) and open the MAINTAINERS file. Scroll down to line 150 or so and
let&amp;rsquo;s start reading some of these entries.&lt;/p&gt;
&lt;p&gt;Each of these represents a different individual or group which has some interest
in the Linux kernel, often a particular driver. Most of them have an &amp;ldquo;F&amp;rdquo; entry,
which indicates which files they&amp;rsquo;re responsible for in the source code. Most
have an &amp;ldquo;L&amp;rdquo; entry, which has a mailing list you can post questions, bug reports,
and patches to, as well as an individual maintainer (&amp;ldquo;M&amp;rdquo;) or maintainers who are
known to have expertise and autonomy over this part of the kernel. Many of them
— but, hmm, not all — also have a tree (&amp;ldquo;T&amp;rdquo;), which is a dedicated
git repo with their copy of Linux, for staging changes to the kernel. This is
common with larger drivers or with &amp;ldquo;meta&amp;rdquo; organizations, which oversee
development of entire subsystems.&lt;/p&gt;
&lt;p&gt;However, this presents a simplified view. Look carefully at the &amp;ldquo;DRM&amp;rdquo; drivers
(&lt;a href=&#34;https://en.wikipedia.org/wiki/Direct_Rendering_Manager&#34;&gt;Direct Rendering Manager&lt;/a&gt;); a group of drivers and maintainers who are
collectively responsible for graphics on Linux. There are many drivers and many
maintainers, but a careful eye will notice that there are many similarities as
well. A lot of them use the same mailing list, &lt;a href=&#34;mailto:dri-devel@lists.freedesktop.org&#34;&gt;dri-devel@lists.freedesktop.org&lt;/a&gt;,
and many of them use the same git repository:
&lt;code&gt;git://anongit.freedesktop.org/drm/drm-misc&lt;/code&gt;. It&amp;rsquo;s not mentioned in this file,
but many of them also shared the FreeDesktop bugzilla until recently, then moved
to the FreeDesktop GitLab; and many of them share the &lt;code&gt;#dri-devel&lt;/code&gt; IRC channel
on Freenode. And again I&amp;rsquo;m simplifying — there are also many related IRC
channels and git repos, and some larger drivers like AMDGPU have dedicated
mailing lists and trees.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s more complexity to this system still. For example, not all of these
subsystems are using git. The Intel TXT subsystem uses Mercurial. The Device
Mapper team (one of the largest and most important Linux subsystems) uses
&lt;a href=&#34;https://savannah.nongnu.org/projects/quilt&#34;&gt;Quilt&lt;/a&gt;. And like Linux DRM is a meta-project for many DRM-related subsystems
&amp;amp; drivers, there are higher-level meta projects still, such as driver-core,
which manages code and subsystems common to &lt;em&gt;all&lt;/em&gt; I/O drivers. There are also
cross-cutting concerns, such as the interaction between linux-usb and various
network driver teams.&lt;/p&gt;
&lt;p&gt;Patches to any particular driver could first end up on a domain-specific mailing
list, with a particular maintainer being responsible for reviewing and
integrating the patch, with their own policies and workflows and tooling. Then
it might flow upwards towards another subsystem with its own similar features,
and then up again towards meta-meta trees like linux-staging, and eventually to
Linus&#39; tree&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. Along the way it might receive feedback from other projects if it
has cross-cutting concerns, tracing out an ever growing and shrinking bubble of
inclusion among the trees, ultimately ending up in every tree. And that&amp;rsquo;s
&lt;em&gt;still&lt;/em&gt; a simplification — for example, an important bug fix may sidestep
all of this entirely and get applied on top of a downstream distribution kernel,
ending up on end-user machines before it&amp;rsquo;s made much progress upstream at all.&lt;/p&gt;
&lt;p&gt;This complex &lt;em&gt;graph&lt;/em&gt; of Linux development has code flowing smoothly between
hundreds of repositories, emails exchanging between hundreds of mailing lists,
passing through the hands of dozens of maintainers, several bug trackers,
various CI systems, all day, every day, ten-thousand fold. This is truly
illustrative of &lt;strong&gt;distributed&lt;/strong&gt; software development, well above and beyond the
typical explanation given to a new git user. The profound potential of the
distributed git system can be plainly seen in the project for which it was
principally designed. It&amp;rsquo;s also plain to see how difficult it would be to adapt
this system to something like GitHub pull requests, despite how easy many who
are perplexed by the email-driven workflow wish it to be&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. As a matter of
fact, several Linux teams are already using GitHub and GitLab and even pull or
merge requests on their respective platforms.  However, scaling this system up
to the entire kernel would be a great challenge indeed.&lt;/p&gt;
&lt;p&gt;By the way — that MAINTAINERS file? Scroll to the bottom. My copy is
&lt;em&gt;19,000 lines long&lt;/em&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Okay, just in case: &lt;code&gt;git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git&lt;/code&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;That&amp;rsquo;s not the only destination; for example, some patches will end up in the LTS kernels as well. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;If you are among the perplexed, &lt;a href=&#34;https://git-send-email.io&#34;&gt;my interactive git send-email tutorial&lt;/a&gt; takes about 10 minutes and is often recommended to new developers by Greg KH himself. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Embrace, extend, and finally extinguish - Microsoft plays their hand</title>
      <link>./2020/08/27/Microsoft-plays-their-hand.html</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/08/27/Microsoft-plays-their-hand.html</guid>
      <description>&lt;p&gt;GitHub took a note out of the Microsoft &amp;ldquo;&lt;abbr title=&#34;Embrace, Extend,
Extinguish&#34;&gt;EEE&lt;/abbr&gt;&amp;rdquo; playbook when designing their git services. They
&lt;strong&gt;embraced&lt;/strong&gt; git, and then rather than building an interface on top of email
— the collaboration mechanism that git was designed to use, and which is
still used for Linux kernel development&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; — they built their &amp;ldquo;pull
requests&amp;rdquo; mechanism.&lt;/p&gt;
&lt;p&gt;They took terminology which already had meaning — &amp;ldquo;fork&amp;rdquo;, meaning the
creation a separate governing body and development upstream for a codebase, a
rather large task; and &amp;ldquo;pull request&amp;rdquo;, a git workflow which prepares an email
asking a receipient to pull a large branch of changes from a non-centralized
source — and replaced these decentralized, open systems with a completely
incompatible system designed to keep you on GitHub and to teach you to
collaborate using GitHub&amp;rsquo;s proprietary tools. They &lt;strong&gt;extended&lt;/strong&gt; git in a
proprietary way.&lt;/p&gt;
&lt;p&gt;Microsoft knows a good deal when they see one, and picked up GitHub for a cool
$7,500,000,000, after they had already completed the two steps in Microsoft&amp;rsquo;s
&lt;a href=&#34;https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish&#34;&gt;anti-open-source playbook&lt;/a&gt;. They joined the Linux Foundation in late 2016,
after Azure failed to win people back to Windows Server, admitting defeat while
simultaneously carving out a space from which they could project their interests
over the kernel.&lt;/p&gt;
&lt;p&gt;Today, I discovered this article, &amp;ldquo;&lt;a href=&#34;https://www.theregister.com/2020/08/25/linux_kernel_email/&#34;&gt;Relying on plain-text email is a
&amp;lsquo;barrier to entry&amp;rsquo; for kernel development, says Linux Foundation board
member&lt;/a&gt;&amp;rdquo;, a title which conveniently chooses to refer to Sarah Novotny by
her role as a Linux Foundation board member, rather than by her full title,
&amp;ldquo;Sarah Novotny, Microsoft employee, transitive owner of GitHub, and patroness
saint of conflicts of interests.&amp;rdquo; Finally, they&amp;rsquo;re playing the &lt;strong&gt;extinguish&lt;/strong&gt;
card. Naturally, a representative of Microsoft, a company which has long waged
war against open source, and GitHub, a company which explicitly built an
incompatible proprietary system to extend git, would have an interest in
dismantling the distributed, open system that git was designed for.&lt;/p&gt;
&lt;p&gt;I represent &lt;a href=&#34;https://sourcehut.org&#34;&gt;sourcehut&lt;/a&gt;, a GitHub competitor which does
what GitHub wouldn&amp;rsquo;t — interoperate with open, distributed protocols, and
in the form of 100% free and open-source software. I agree that the UX of
email-driven development could be better! But instead of investing $7.5B into
throwing the baby out with the bathwater, we&amp;rsquo;ve &lt;a href=&#34;https://git-send-email.io/&#34;&gt;built interactive
tutorials&lt;/a&gt;, &lt;a href=&#34;https://lists.sr.ht/~emersion/mrsh-dev/patches/4728&#34;&gt;designed better mailing lists&lt;/a&gt;, &lt;a href=&#34;https://sr.ht/_fUk.webm&#34;&gt;built web interfaces for
patch submission&lt;/a&gt;, &lt;a href=&#34;https://sourcehut.org/blog/2020-07-14-setting-up-ci-for-mailing-lists/&#34;&gt;implemented CI for emails&lt;/a&gt; and &lt;a href=&#34;https://github.com/git/git/commits?author=ddevault&#34;&gt;sent improvements to
git upstream&lt;/a&gt;. I wrote &lt;a href=&#34;https://aerc-mail.org/&#34;&gt;an entire mail client which makes it easier to use
these tools&lt;/a&gt;. We&amp;rsquo;re planning on web-based review interface, too. The result
is a UX which provides a similar experience to GitHub, but without disrupting
the established open ecosystem.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This&lt;/em&gt; is how you improve the ecosystem, Microsoft. Take notes. Stick with the
embrace, move your extending &lt;em&gt;upstream&lt;/em&gt;, and forget about extinguish.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;And hundreds of other projects, including git itself. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Alice in Wonderland and the theft of the public domain</title>
      <link>./2020/08/24/Alice-in-Wonderland.html</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/08/24/Alice-in-Wonderland.html</guid>
      <description>&lt;p&gt;Disney&amp;rsquo;s &lt;em&gt;Alice in Wonderland&lt;/em&gt; is one of my favorite movies and an undisputed
classic. After its release in 1951, &lt;em&gt;Alice&lt;/em&gt; holds a fond place in billions of
children&amp;rsquo;s hearts, over almost four generations. And it has been stolen from
those generations, as part of the theft of one of these generations&#39; greatest
treasures: the public domain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://l.sr.ht/pMHw.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I often use this film as an example when arguing about copyright. Almost
everyone I speak to was born well after the film&amp;rsquo;s release (in fact, this is
true of almost everyone &lt;em&gt;alive today&lt;/em&gt;), but they remember it fondly regardless.
Many people I&amp;rsquo;ve spoken to would agree that it even played a formative role in
their childhoods; it&amp;rsquo;s a film dear to many hearts. My mom is very fond of the
Cheshire Cat in particular, and owns quite a bit of relevant merchandise.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Like many films from their &amp;ldquo;Golden Age&amp;rdquo;, Disney&amp;rsquo;s &lt;em&gt;Alice&lt;/em&gt; is itself a derivative
work, based on Lewis Carroll&amp;rsquo;s 1865 book. However, Disney&amp;rsquo;s film won&amp;rsquo;t enter the
public domain until 2046, and until then, no one can create derivative works of
their own without receiving permission from and paying a tithe to Disney. And if
modern-day copyright law, &lt;a href=&#34;https://en.wikipedia.org/wiki/Copyright_Term_Extension_Act&#34;&gt;bought and paid for by Disney&lt;/a&gt;, had
been in force at the time Alice in Wonderland was made, they would have released
their film 17 years &lt;em&gt;before&lt;/em&gt; Carroll&amp;rsquo;s novel entered the public domain.&lt;/p&gt;
&lt;p&gt;Carroll, who died in 1898, was 53 years dead when the film was released. Everyone
who is listed in the credits for Disney&amp;rsquo;s Alice in Wonderland is also dead, with
the exception of Kathryn Beaumont, who played the role of none other than Alice
herself.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; She was 12 years old at the time. And still today, the
copyright remains in force, though no creators remain to enjoy its privileges.
It shall remain so for another 26 years, when I can finally celebrate my
Alice-in-Wonderland-themed 53rd birthday party, having been robbed of the
privilege at age 11.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Copyright was established in the United States to incentivize artists,
musicians, authors, writers, and other creatives to create novel art, allowing
them to enjoy the exclusive rights to it for a short period&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;, then ultimately
&lt;em&gt;enriching&lt;/em&gt; the public domain. The obscene copyright terms we&amp;rsquo;re faced with
today have robbed the American public of its national heritage. Any work made
today will not enter the public domain during the lifetimes of any of its
contemporaries, let alone soon enough for those contemporaries to &lt;em&gt;do&lt;/em&gt; anything
with it.&lt;/p&gt;
&lt;p&gt;A system designed to incentivize creation has become a system which incentivises
the opposite: rent seeking. A rent which is sought from the American public, in
exchange for which we&amp;rsquo;re no longer getting our end of the deal.&lt;/p&gt;
&lt;p&gt;Well, the deal is off.&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;./video-js.css&#34;&gt;
&lt;script&gt;
window.HELP_IMPROVE_VIDEOJS = false;
&lt;/script&gt;
&lt;script src=&#34;./video.js&#34;&gt;&lt;/script&gt;
&lt;video class=&#34;video-js vjs-16-9&#34; data-setup=&#34;{}&#34; controls&gt;
  &lt;source src=&#34;https://drewdevault.com/alice.webm&#34; type=&#34;video/webm&#34;&gt;
  &lt;p&gt;Your browser does not support HTML5 video, or webm. Either way you&#39;re not
  going to watch this video.&lt;/p&gt;
&lt;/video&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;She is not sure how much of that merchandise is officially licensed. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The last person credited for Alice in Wonderland to have died was &lt;a href=&#34;https://en.wikipedia.org/wiki/Don_Lusk&#34;&gt;Don Lusk&lt;/a&gt;, who died in 2018 at the age of 105. He lived through World War I, fought in World War II, then went on to animate 17 films for Disney. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Another honorable mention goes to &lt;a href=&#34;https://en.wikipedia.org/wiki/Ben_Sharpsteen&#34;&gt;Ben Sharpsteen&lt;/a&gt;, the production director on &lt;em&gt;Alice&lt;/em&gt;, who enjoyed the status of oldest staff member on the production, having been born in 1895. He was alive in Lewis Carroll&amp;rsquo;s lifetime! &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Okay, I&amp;rsquo;ll fess up: I never had any plans of an Alice-themed birthday party when I was 11, or at any other age. But you can bet I&amp;rsquo;m planning one for my 53rd now! &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;14 years, or 28 years if renewed &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Software engineers solve problems</title>
      <link>./2020/08/17/Engineers-solve-problems.html</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/08/17/Engineers-solve-problems.html</guid>
      <description>&lt;p&gt;Software engineers solve problems. A problem you may have encountered is, for
example, &amp;ldquo;this function has a bug&amp;rdquo;, and you&amp;rsquo;re probably already more or less
comfortable solving these problems. Here are some other problems you might
encounter on the way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Actually, the bug ultimately comes from a third-party program&lt;/li&gt;
&lt;li&gt;Hm, it uses a programming language I don&amp;rsquo;t know&lt;/li&gt;
&lt;li&gt;Oh, the bug is in that programming language&amp;rsquo;s compiler&lt;/li&gt;
&lt;li&gt;This subsystem of the compiler would have to be overhauled&lt;/li&gt;
&lt;li&gt;And the problem is overlooked by the language specification&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;ve met many engineers who, when standing at the base of this mountain,
conclude that the summit is too far away and clearly not their responsibility,
and subsequently give up. But remember: as an engineer, your job is to apply
creativity to solving problems. Are these not themselves problems to which the
engineering process may be applied?&lt;/p&gt;
&lt;p&gt;You can introduce yourself to the maintainers of the third-party program and
start working on a solution. You can study the programming language you don&amp;rsquo;t
know, at least as much as is necessary to understand and correct the bug. You
can read the compiler&amp;rsquo;s source code, and identify the subsystem which needs
overhauling, then introduce yourself to &lt;em&gt;those&lt;/em&gt; maintainers and work on the
needed overhaul. The specification is probably managed by a working group, reach
out to them and have an erratta issued or a clarification added to the upcoming
revision.&lt;/p&gt;
&lt;p&gt;The scope of fixing this bug is broader than you thought, but if you apply a
deliberate engineering process to each problem that you encounter, eventually
you will complete the solution. This process of recursively solving problems to
get at the one you want to solve is called &amp;ldquo;&lt;a href=&#34;http://catb.org/jargon/html/Y/yak-shaving.html&#34;&gt;yak
shaving&lt;/a&gt;&amp;rdquo;, and it&amp;rsquo;s a necessary
part of your workflow.&lt;/p&gt;
</description>
    </item><item>
      <title>Status update, August 2020</title>
      <link>./2020/08/16/Status-update.html</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/08/16/Status-update.html</guid>
      <description>&lt;p&gt;Greetings! Today is another rainy day here in Philadelphia, which rather sours
my plans of walking over to the nearby cafe to order some breakfast to-go. But I
am tired, and if I&amp;rsquo;m going to make it to the end of this blog post in one piece,
I&amp;rsquo;m gonna need a coffee. brb.&lt;/p&gt;
&lt;p&gt;Hey, that was actually pretty refreshing. It&amp;rsquo;s just drizzling, and the rain is
nice and cool. Alright, here goes! What&amp;rsquo;s new? I&amp;rsquo;ll leave the Wayland news for
&lt;a href=&#34;https://emersion.fr/blog&#34;&gt;Simon Ser&amp;rsquo;s blog&lt;/a&gt; this month - he&amp;rsquo;s been working on
some exciting stuff. The &lt;a href=&#34;https://baremessages.org/&#34;&gt;BARE encoding&lt;/a&gt; announced
last month has received some great feedback and refinements, and there are now
six projects providing BARE support for their author&amp;rsquo;s favorite programming
language&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. There have also been some improvements to the Go implementation
which should help with some SourceHut plans later on.&lt;/p&gt;
&lt;p&gt;On the subject of SourceHut, I&amp;rsquo;ve focused mainly on infrastructure improvements
this month. There is a new server installed for hg.sr.ht, which will also be
useful as a testbed for additional ops work planned for future expansion.
Additionally, the PostgreSQL backup system has been overhauled and made more
resilient, both to data loss and to outages. A lot of other robustness
improvements have been made fleet-wide in monitoring. I&amp;rsquo;ll be working on more
user-facing features again next month, but in the meanwhile, contributors like
наб have sent many patches in which I&amp;rsquo;ll cover in detail in the coming &amp;ldquo;What&amp;rsquo;s
cooking&amp;rdquo; post for &lt;a href=&#34;https://sourcehut.org/blog&#34;&gt;sourcehut.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Otherwise, I&amp;rsquo;ve been taking it easy this month. I definitely haven&amp;rsquo;t been
spending a lot of my time on a secret project, no sir. Thanks again for your
support! I&amp;rsquo;ll see you next month.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;?&lt;/summary&gt;
&lt;pre&gt;
use io;
use io_uring = linux::io_uring;
use linux;
use strings;
&lt;p&gt;export fn main void = {
let uring = match (io_uring::init(256u32, 0u32)) {
err: linux::error =&amp;gt; {
io::println(&amp;ldquo;io_uring::init error:&amp;quot;);
io::println(linux::errstr(err));
return;
},
u: io_uring::io_uring =&amp;gt; u,
};&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let buf: [8192]u8 = [0u8...];
let text: nullable *str = null;
let wait = 0u;
let offs = 0z;
let read: *io_uring::sqe = null: *io_uring::sqe,
    write: *io_uring::sqe = null: *io_uring::sqe;
let eof = false;

while (!eof) {
    read = io_uring::must_get_sqe(&amp;amp;uring);
    io_uring::prep_read(read, linux::STDIN_FILENO,
        &amp;amp;buf, len(buf): u32, offs);
    io_uring::sqe_set_user_data(read, &amp;amp;read);
    wait += 1u;

    let ev = match (io_uring::submit_and_wait(&amp;amp;uring, wait)) {
        err: linux::error =&amp;gt; {
            io::println(&amp;quot;io_uring::submit error:&amp;quot;);
            io::println(linux::errstr(err));
            return;
        },
        ev: uint =&amp;gt; ev,
    };

    wait -= ev;

    for (let i = 0; i &amp;lt; ev; i += 1) {
        let cqe = match (io_uring::get_cqe(&amp;amp;uring, 0u, 0u)) {
            err: linux::error =&amp;gt; {
                io::println(&amp;quot;io_uring::get_cqe error:&amp;quot;);
                io::println(linux::errstr(err));
                return;
            },
            c: *io_uring::cqe =&amp;gt; c,
        };

        if (io_uring::cqe_get_user_data(cqe) == &amp;amp;read) {
            if (text != null) {
                free(text);
            };

            if (cqe.res == 0) {
                eof = true;
                break;
            };

            text = strings::must_decode_utf8(buf[0..cqe.res]);
            io_uring::cqe_seen(&amp;amp;uring, cqe);

            write = io_uring::must_get_sqe(&amp;amp;uring);
            io_uring::prep_write(write, linux::STDOUT_FILENO,
                text: *char, len(text): u32, 0);
            io_uring::sqe_set_user_data(write, &amp;amp;write);
            wait += 1u;
            offs += cqe.res;
        } else if (io_uring::cqe_get_user_data(cqe) == &amp;amp;write) {
            assert(cqe.res &amp;gt; 0);
            io_uring::cqe_seen(&amp;amp;uring, cqe);
        } else {
            assert(false, &amp;quot;Unknown CQE user data&amp;quot;);
        };
    };
};

io_uring::close(&amp;amp;uring);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;};
&lt;/pre&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;hmm?&lt;/summary&gt;
&lt;p&gt;I might note that I wrote this program to test my io_uring wrapper; it&#39;s not
representative of how normal programs will do I/O in the future.&lt;/p&gt;
&lt;/details&gt;
&lt;/details&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Or in some cases, the language the author is begrudgingly stuck with. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Web browsers need to stop</title>
      <link>./2020/08/13/Web-browsers-need-to-stop.html</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/08/13/Web-browsers-need-to-stop.html</guid>
      <description>&lt;p&gt;Enough is enough.&lt;/p&gt;
&lt;p&gt;The web and web browsers have become Lovecraftian horrors of an unprecedented
scale. They&amp;rsquo;ve long since left &amp;ldquo;scope creep&amp;rdquo; territory and entered &amp;ldquo;oh my god
please just stop&amp;rdquo; territory, and are trucking on through to hitherto unexplored
degrees of &lt;em&gt;obscene&lt;/em&gt; scope. And we &lt;em&gt;don&amp;rsquo;t want&lt;/em&gt; what they&amp;rsquo;re selling. Google
pitches garbage like AMP&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and pushing dubious half-assed specs like Web
Components. Mozilla just fired everyone relevant&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; to focus on crap no one
asked for like Pocket, and fad nonsense like a paid VPN service and &lt;del&gt;virtual
reality tech&lt;/del&gt;.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;em&gt;[2020-08-14: It has been pointed out that the VR team was
also fired.]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Microsoft gave up entirely. Mozilla just hammered the last few nails into their
casket.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;del&gt;Safari is a joke&lt;/del&gt;&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;. Google is all that&amp;rsquo;s left, and they&amp;rsquo;re
&lt;em&gt;not&lt;/em&gt; a good steward of the open web. The browsers are drowning under their own
scope.  The web is dead.&lt;/p&gt;
&lt;p&gt;I call for an immediate and indefinite suspension of the addition of new
developer-facing APIs to web browsers. Browser vendors need to start thinking
about &lt;em&gt;reducing&lt;/em&gt; scope and &lt;em&gt;cutting&lt;/em&gt; features. WebUSB, WebBluetooth, WebXR,
&lt;del&gt;WebDRM&lt;/del&gt; &lt;del&gt;WebMPAA&lt;/del&gt; &lt;del&gt;WebBootlicking&lt;/del&gt; &lt;del&gt;replacing User-Agent with
Vendor-Agent cause let&amp;rsquo;s be honest with ourselves at this point&lt;/del&gt; &amp;ldquo;Encrypted
Media Extensions&amp;rdquo; — this crap all needs to go. At some point you need to
stop adding scope and start focusing on performance, efficiency, reliability,
and security&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; at the scope you already have.&lt;/p&gt;
&lt;p&gt;Enough is enough.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;em&gt;No one&lt;/em&gt; wants AMP. Google knows it, you know it, I know it. If you&amp;rsquo;re a Google engineer who is still working on AMP, you are a disgrace to your field. &lt;a href=&#34;https://drewdevault.com/2020/05/05/We-are-complicit-in-our-employers-deeds.html&#34;&gt;Take responsibility for the code you write&lt;/a&gt;. This project needs to be dead and buried and the earth above salted, and it needs to happen yesterday. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;del&gt;No layoffs or pay cuts at the management level, of course!&lt;/del&gt; It&amp;rsquo;s not like they&amp;rsquo;re &lt;em&gt;responsible&lt;/em&gt; for these problems, it&amp;rsquo;s not like anyone&amp;rsquo;s fucking &lt;em&gt;responsible&lt;/em&gt; for any of this, it&amp;rsquo;s not like the very idea of &lt;em&gt;personal responsibility&lt;/em&gt; has been forgotten by both executives and engineers, no sir! &lt;em&gt;[2020-08-14: It has been pointed out that some VPs were laid off. I also wish to clarify that the personal responsibility I find absent at the engineering level is more of a commentary on Google than Mozilla.]&lt;/em&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Oh good, the &lt;em&gt;web&lt;/em&gt; is exactly what VR needs! It&amp;rsquo;s definitely &lt;em&gt;not&lt;/em&gt; a huge time-sink requiring the highly skilled low-level engineering talent which Mozilla just finished &lt;em&gt;laying off&lt;/em&gt;, or years of effort and millions of dollars just to realize that the new state of the art is still just an expensive and underwhelming product whose few end-user applications make half of their users motion sick. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Next time they should aim for their executive&amp;rsquo;s heads, maybe they&amp;rsquo;ll jostle them around enough to get the two wires in each of their heads to make contact so that they&amp;rsquo;re briefly capable of making basic decisions and not just collecting multi-million-dollar paychecks. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;2020-08-14: I haven&amp;rsquo;t used Safari in over 10 years, so maybe it&amp;rsquo;s not so bad. However, so long as it&amp;rsquo;s single-platform and closed source, it&amp;rsquo;s still a net negative on the ecosystem. &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The web &lt;em&gt;might&lt;/em&gt; be one for four on these right now. &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>I want to contribute to your project, how do I start?</title>
      <link>./2020/08/10/How-to-contribute-to-FOSS.html</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/08/10/How-to-contribute-to-FOSS.html</guid>
      <description>&lt;p&gt;I get this question a lot! The answer is usually&amp;hellip; don&amp;rsquo;t. If you already know
what you want to do, then the question doesn&amp;rsquo;t need to be asked.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; But, if you
don&amp;rsquo;t already know what you want to do, then your time might be better spent
elsewhere!&lt;/p&gt;
&lt;p&gt;The best contributors are always intrinsically motivated. Some contributors show
up every now and then who appreciate the value the project gives to them and
want to give something back. Their gratitude is definitely appreciated&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, but
these kinds of contributions tend to require more effort from the maintainers,
and don&amp;rsquo;t generally lead to recurring contributions. Projects you already like
are less likely to need help when compared to incomplete projects that you don&amp;rsquo;t
already depend on — so this model leaves newer projects with fewer
contributors and encourages established projects to grow in complexity.&lt;/p&gt;
&lt;p&gt;Instead, you should focus on scratching your own itches. Is there a bug which is
getting on your nerves? A conspicuously absent feature? Work on those!&lt;/p&gt;
&lt;p&gt;If there&amp;rsquo;s nothing specific that you want to work on, then you may be better off
finding something to do in a different project. Don&amp;rsquo;t be afraid to work on any
free- and open-source codebase that you encounter — nearly all of them
will accept your patches. If something is bothering you about another project,
then go fix it! Someone has a cool idea and needs help realizing it? Get
involved! If we spread the contributions around, the FOSS ecosystem will
flourish and the benefits will come back around to our project, too.&lt;/p&gt;
&lt;p&gt;So, if you want to contribute to open-source — as a whole — here are
my tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find problems which you are intrinsically motivated to work on.&lt;/li&gt;
&lt;li&gt;Focus on developing skills to get up to speed on new codebases fast.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t be afraid to work on &lt;em&gt;any&lt;/em&gt; project — new languages, tools,
libraries; learn enough of them and it&amp;rsquo;ll only get easier to learn more.&lt;/li&gt;
&lt;li&gt;When you file bug reports with a FOSS project, get into the habit of following
up with a patch which addresses the problem.&lt;/li&gt;
&lt;li&gt;Get used to introducing yourself to maintainers and talking through the code;
it always pays to ask.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to work on a specific project, and you have a specific goal in mind:
perfect! If you don&amp;rsquo;t have a specific goal in mind, try to come up with some.
And if you&amp;rsquo;re still drawing a blank, consider another project.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Or perhaps the better question is &amp;ldquo;where should I start with this goal?&amp;rdquo; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;For real, we don&amp;rsquo;t hear &amp;ldquo;thanks&amp;rdquo; very often and expressions of gratitude are often our only reward for our work. We do appreciate it :) &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>pkg.go.dev is more concerned with Google&#39;s interests than good engineering</title>
      <link>./2020/08/01/pkg-go-dev-sucks.html</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/08/01/pkg-go-dev-sucks.html</guid>
      <description>&lt;p&gt;pkg.go.dev sucks. It&amp;rsquo;s certainly &lt;em&gt;prettier&lt;/em&gt; than godoc.org, but under the
covers, it&amp;rsquo;s a failure of engineering characteristic of the Google approach.&lt;/p&gt;
&lt;p&gt;Go is a &lt;em&gt;pretty good&lt;/em&gt; programming language. I have long held that this is not
attributable to Google&amp;rsquo;s stewardship, but rather to a small number of language
designers and a clear line of influences which is drawn entirely from outside of
Google — mostly from Bell Labs. pkg.go.dev provides renewed support for my
argument: it has all the hallmarks of Google crapware and none of the
deliberate, good engineering work that went into Go&amp;rsquo;s design.&lt;/p&gt;
&lt;p&gt;It was apparent from the start that this is what it would be. pkg.go.dev was
launched as a closed-source product,
&lt;a href=&#34;https://blog.golang.org/pkg.go.dev-2020&#34;&gt;justified&lt;/a&gt; by pointing out that
godoc.org is too complex to run on an intranet, and pkg.go.dev has the same
problem. There are many problems to take apart in this explanation: the
assumption that the only reason an open source platform is desirable is for
running it on your intranet; the unstated assumption that such complexity
is necessary or agreeable in the first place; and the
&lt;a href=&#34;https://github.com/golang/go/issues/25443&#34;&gt;systemic&lt;/a&gt; &lt;a href=&#34;https://github.com/golang/go/issues/30029&#34;&gt;erosion&lt;/a&gt;
of the existing (and simple!) tools which &lt;em&gt;could&lt;/em&gt; have been used for this
purpose prior to this change. The attitude towards open source was only changed
following pkg.go.dev&amp;rsquo;s harsh reception by the community.&lt;/p&gt;
&lt;p&gt;But this attitude &lt;em&gt;did&lt;/em&gt; change, and it is open-source now&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, so let&amp;rsquo;s give
them credit for that. The good intentions are spoilt by the fact that pkg.go.dev
fetches the list of modules from &lt;a href=&#34;https://proxy.golang.org/&#34;&gt;proxy.golang.org&lt;/a&gt;:
a closed-source proxy through which all of your go module fetches are being
routed and tracked (oh, you didn&amp;rsquo;t know? They never told you, after all).
Anyway, enough of the gross disregard for the values of open source and user
privacy; I &lt;em&gt;do&lt;/em&gt; have some technical problems to talk about.&lt;/p&gt;
&lt;p&gt;One concern comes from a blatant failure to comprehend the fundamentally
decentralized nature of git hosting. Thankfully, git.sr.ht is supported now&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;
— but only &lt;em&gt;the&lt;/em&gt; git.sr.ht, i.e. the hosted instance, not the software.
pkg.go.dev hard-codes a list of centralized git hosting services, and completely
disregards the idea of git hosting as &lt;em&gt;software&lt;/em&gt; rather than as a &lt;em&gt;platform&lt;/em&gt;.
Any GitLab instance other than gitlab.com (such as
&lt;a href=&#34;https://gitlab.freedesktop.org&#34;&gt;gitlab.freedesktop.org&lt;/a&gt; or
&lt;a href=&#34;https://salsa.debian.org/public&#34;&gt;salsa.debian.org&lt;/a&gt;); any
&lt;a href=&#34;https://gogs.io/&#34;&gt;Gogs&lt;/a&gt; or &lt;a href=&#34;https://gitea.io/en-us/&#34;&gt;Gitea&lt;/a&gt; like
&lt;a href=&#34;https://codeberg.org&#34;&gt;Codeberg&lt;/a&gt;; cgit instances like
&lt;a href=&#34;https://git.kernel.org/&#34;&gt;git.kernel.org&lt;/a&gt;; none of these are going to work
unless every host is added and the list is kept up-to-date manually. Your
intranet instance of cgit? Not a chance.&lt;/p&gt;
&lt;p&gt;They were also given an opportunity here to fix a long-standing problem with Go
package discovery, namely that it requires every downstream git repository host
has to (1) provide a web interface and (2) include &lt;em&gt;Go-specific&lt;/em&gt; meta tags in
the HTML. The hubris to impose your &lt;em&gt;programming language&lt;/em&gt;&amp;rsquo;s needs onto a
language-agnostic version control system! I asked: they have no interest in the
better-engineered — but more worksome — approach of pursing a
language agnostic design.&lt;/p&gt;
&lt;p&gt;The worldview of the developers is whack, the new site introduces dozens of
regressions, and all it really improves upon is the visual style — which
could trivially have been done to godoc.org. The goal is shipping a shiny new
product — not engineering a good solution. This is typical of Google&amp;rsquo;s
engineering ethos in general. pkg.go.dev sucks, and is added the large (and
growing) body of evidence that Google is bad for Go.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Setting aside the fact that the production pkg.go.dev site is amended with closed-source patches. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The GitHub comment explaining the change of heart included a link to a Google Groups discussion which requires you to log in with a Google account in order to &lt;em&gt;read&lt;/em&gt;.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; If you go the long way around and do some guesswork searching the archives yourself, you &lt;a href=&#34;https://groups.google.com/d/msg/golang-dev/mfiPCtJ1BGU/ibeimu3WEgAJ&#34;&gt;can find it&lt;/a&gt; without logging in. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Commenting on Go patches also requires a Google account, by the way. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;But not hg.sr.ht! &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>The falsehoods of anti-AGPL propaganda</title>
      <link>./2020/07/27/Anti-AGPL-propaganda.html</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/07/27/Anti-AGPL-propaganda.html</guid>
      <description>&lt;p&gt;Google is well-known for &lt;a href=&#34;https://opensource.google/docs/using/agpl-policy/&#34;&gt;forbidding the use of&lt;/a&gt; software
using the &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.en.html&#34;&gt;GNU Affero General Public License&lt;/a&gt;, commonly known as &amp;ldquo;AGPL&amp;rdquo;.
Google is also well-known for being the subject of cargo-culting by fad
startups. Unfortunately, this means that they are susceptible to what is
ultimately anti-AGPL propaganda from Google, with little to no basis in fact.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Obligatory: I&amp;rsquo;m not a lawyer; this is for informational purposes only.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In truth, the terms of the AGPL are pretty easy to comply with. The basic
obligations of the AGPL which set it apart from other licenses are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any derivative works of AGPL-licensed software must also use the AGPL.&lt;/li&gt;
&lt;li&gt;Any users of such software are entitled to the source code under the terms of
the AGPL, including users accessing it over the network such as with their web
browser or via an API or internet protocol.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;re using AGPL-licensed software like a database engine or &lt;a href=&#34;https://sr.ht/~sircmpwn/sourcehut/&#34;&gt;my own
AGPL-licensed works&lt;/a&gt;, and you haven&amp;rsquo;t made any changes to the source
code, all you have to do is provide a link to the upstream source code
somewhere, and if users ask for it, direct them there. If you &lt;em&gt;have&lt;/em&gt; modified
the software, you simply have to publish your modifications. The easiest way to
do this is to send it as a patch upstream, but you could use something as simple
as providing a tarball to your users.&lt;/p&gt;
&lt;p&gt;The nuances are detailed and cover many edge cases to prevent abuse. But in
general, just publish your modifications under the same AGPL terms and you&amp;rsquo;ll
be good to go. The license is usually present in the source code as a &lt;code&gt;COPYING&lt;/code&gt;
or &lt;code&gt;LICENSE&lt;/code&gt; file, so if you just tar up your modified source code and drop a
link on your website, that&amp;rsquo;s good enough. If you want to go the extra mile and
express your gratitude to the original software developers, consider submitting
your changes for upstream inclusion. Generally, the feedback you&amp;rsquo;ll receive will
help to make your changes better for your use-case, too; and submitting your
work upstream will prevent your copy from diverging from upstream.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s pretty easy, right? I&amp;rsquo;m positive that your business has to deal with much
more onerous contracts than the AGPL. Then why does Google make a fuss about it?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://opensource.google/docs/using/agpl-policy/&#34;&gt;The Google page about the AGPL&lt;/a&gt; details inaccurate (but
common&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;) misconceptions about the obligations of the AGPL that don&amp;rsquo;t follow
from the text. Google states that if, for example, Google Maps used PostGIS as
its data store, and PostGIS used the AGPL, Google would be required to release
the Google Maps code. This is not true. They would be required to release &lt;em&gt;their
PostGIS patches&lt;/em&gt; in this situation. AGPL does not extend the GPL in that it
makes the Internet count as a form of linking which creates a derivative work,
as Google implies, but rather that it makes anyone who uses the software via
the Internet entitled to its source code. It does not update the &amp;ldquo;what counts
as a &amp;lsquo;derivative work&amp;rsquo;&amp;rdquo; algorithm, so to speak — it updates the &amp;ldquo;what
counts as &amp;lsquo;distributing&amp;rsquo; the software&amp;rdquo; algorithm.&lt;/p&gt;
&lt;p&gt;The reason they spread these misconceptions is straightforward: they want to
discourage people from using the AGPL, because they cannot productize such
software effectively. Google wants to be able to incorporate FOSS software into
their products and sell it to users without the obligation to release their
derivative works. Google is an Internet company, and they offer Internet
services. The original GPL doesn&amp;rsquo;t threaten their scheme because their software
is accessed over the Internet, not distributed to end-users directly.&lt;/p&gt;
&lt;p&gt;By discouraging the use of AGPL in the broader community, Google hopes to create
a larger set of free- and open-source software that they can take for their own
needs without any obligations to upstream. Ask yourself: why is documentation of
internal-facing decisions like what software licenses to use being published in
a public place? The answer is straightforward: to influence the public. This is
propaganda.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a bizarre idea that software companies which eschew the AGPL in favor of
something like MIT are doing so specifically because they want companies &amp;ldquo;like
Google&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&amp;rdquo; to pay for their software, and they know that they have no chance if
they use AGPL. In truth, Google was never going to buy your software. If you
don&amp;rsquo;t use the AGPL, they&amp;rsquo;re just going to take your software and give nothing
back. If you do use the AGPL, they&amp;rsquo;re just going to develop a solution in-house.
There&amp;rsquo;s no outcome where Google pays you.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t be afraid to use the AGPL, and don&amp;rsquo;t be afraid to use software which uses
the AGPL. The obligations are not especially onerous or difficult, despite what
Google would have you believe. The license isn&amp;rsquo;t that long — read it and
see for yourself.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Likely common &lt;em&gt;because of this page&lt;/em&gt;. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;By the way, there are no more than 10 companies world-wide which are &amp;ldquo;like Google&amp;rdquo; by any measure. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, July 2020</title>
      <link>./2020/07/15/Status-update-July-2020.html</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/07/15/Status-update-July-2020.html</guid>
      <description>&lt;p&gt;Hello again! Another month of FOSS development behind us, and we&amp;rsquo;re back again
to share the results. I took a week off at the end of June, so my progress this
month is somewhat less than usual. Regardless, I have some updates for you,
mainly in the domain of SourceHut work.&lt;/p&gt;
&lt;p&gt;But before we get to that, let&amp;rsquo;s go over this month&amp;rsquo;s small victories. One was
the invention of the &lt;a href=&#34;https://baremessages.org&#34;&gt;BARE message format&lt;/a&gt;, which I
wrote &lt;a href=&#34;https://drewdevault.com/2020/06/21/BARE-message-encoding.html&#34;&gt;a blog post about&lt;/a&gt; if you want to learn more. Since that
article, five new implementations have appeared from various authors: Rust,
Python, JavaScript, D, and Zig.&lt;/p&gt;
&lt;p&gt;I also wrote a couple of not-blogposts for this site (drewdevault.com),
including a page &lt;a href=&#34;./dynlib&#34;&gt;dispelling misconceptions about static linking&lt;/a&gt;,
and a page (that I hope you&amp;rsquo;ll contribute to!) with &lt;a href=&#34;./editing&#34;&gt;videos of people editing
text&lt;/a&gt;. Just dropping a link here in case you missed them; they didn&amp;rsquo;t
appear in RSS and aren&amp;rsquo;t blog posts. To help find random stuff like that on this
site, I&amp;rsquo;ve also established a &lt;a href=&#34;./misc&#34;&gt;misc page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Okay, on to SourceHut. Perhaps the most exciting development is the addition of
&lt;a href=&#34;https://sourcehut.org/blog/2020-07-14-setting-up-ci-for-mailing-lists/&#34;&gt;continuous integration to the mailing lists&lt;/a&gt;. I&amp;rsquo;ve been working
towards this for some time now, and it&amp;rsquo;s the first of many features which are
now possible thanks to the addition of the project hub. I intend to complete
some follow-up work improving the CI feature further still in the coming weeks.
I&amp;rsquo;m also planning an upgrade for the hardware that runs hg.sr.ht during the same
timeframe.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all the news I have for now, somewhat less than usual. Some time off was
much-needed, though. Thanks for your continued support, and I hope you continue
to enjoy using my software!&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;...&lt;/summary&gt;
&lt;pre&gt;
$ cat main.$ext
use io;
use strings;
use sys;
&lt;p&gt;export fn main void =
{
for (let i = 0; sys::envp[i] != null; i += 1) {
let s = strings::from_c(sys::envp[i]);
io::println(s);
};
};
$ $redacted run main.$ext
error: main.$ext:8:41: incorrect type (&amp;amp;char) for parameter 1 (&amp;amp;char)
let s = strings::from_c(sys::envp[i]);
^&amp;mdash; here
$ vim main.$ext
$ cat main.$ext
use io;
use strings;
use sys;&lt;/p&gt;
&lt;p&gt;export fn main void =
{
for (let i = 0; sys::envp[i] != null; i += 1) {
let s = strings::from_c(sys::envp[i]);
io::println(s);
free(s);
};
};
$ $redacted run main.$ext
DISPLAY=:0
EDITOR=vim&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;&amp;hellip;&lt;/h1&gt;
&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/details&gt;
</description>
    </item><item>
      <title>March 2nd, 1943</title>
      <link>./2020/07/14/March-2nd-1943.html</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/07/14/March-2nd-1943.html</guid>
      <description>&lt;p&gt;It&amp;rsquo;s March 2nd, 1943. The user asks your software to schedule a meeting with
Acmecorp at &amp;ldquo;9 AM on the first Monday of next month&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
[6:17:45] homura ~ $ cal -3 2 March 1943
    February 1943          March 1943            April 1943
Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6      1 &lt;span style=&#34;background: black; color: white&#34;&gt; 2&lt;/span&gt; 3  4  5  6               1  2  3
 7  8  9 10 11 12 13   7  8  9 10 11 12 13   4 &lt;span style=&#34;background: #666; color: white&#34;&gt; 5&lt;/span&gt;  6  7  8  9 10
14 15 16 17 18 19 20  14 15 16 17 18 19 20  11 12 13 14 15 16 17
21 22 23 24 25 26 27  21 22 23 24 25 26 27  18 19 20 21 22 23 24
28                    28 29 30 31           25 26 27 28 29 30
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Right now, California is on Pacific Standard Time (PST) and Arizona is on
Mountain Standard Time (MST). On March 8th, California will transition to
Pacific Daylight Time (PDT), one hour ahead. Arizona does not observe DST, so
they&amp;rsquo;ll stay behind.&lt;/p&gt;
&lt;p&gt;At least until April 1st — when the governor will sign an emergency order
moving the state to MDT, effective immediately.&lt;/p&gt;
&lt;p&gt;Back on March 2nd, you send an email to each participant telling them about the
meeting. One of them has their locale set to en_GB, so some of the participants
need to be sent &amp;ldquo;04/05/43&amp;rdquo; and some &amp;ldquo;05/04/43&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A moment later, the user asks you to tell it the number of hours betweeen now
and the meeting they just scheduled. The subject of the meeting is purchasing
fuel for a machine that the user is now filling with enough fuel to last until
then.&lt;/p&gt;
&lt;p&gt;On the day of the meeting, the user drives to the Navajo reservation to conduct
some unrelated business, and has to attend the meeting by phone. The reservation
has been on daylight savings time since March 8th, by the way, they never stayed
behind with the rest of Arizona. The user expects the software to warn them 1
hour prior to the meeting start. The border of the reservation is defined by a
river, which is slowly moving East.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mm.icann.org/pipermail/tz-announce/&#34;&gt;The changelog for the IANA zoneinfo database&lt;/a&gt;
is great, by the way, you should read it.
&lt;a href=&#34;https://mm.icann.org/mailman/listinfo/tz-announce&#34;&gt;Or subscribe&lt;/a&gt; to get it
periodically&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; material delivered to your inbox!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Okay, that last bit isn&amp;rsquo;t true. But imagine if it was! &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;But with what period? 😉 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>General-purpose OS, special-purpose OS, and now: vendor-purpose OS</title>
      <link>./2020/06/26/Vendor-purpose-OS.html</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/06/26/Vendor-purpose-OS.html</guid>
      <description>&lt;p&gt;There have, historically, been two kinds of operating systems: general-purpose,
and special-purpose. These roles are defined by the function they serve for the
user. Examples of general-purpose operating systems include Unix (Linux, BSD,
etc), Solaris, Haiku, Plan 9, and so on. These are well-suited to general
computing tasks, and are optimized to solve the most problems possible, perhaps
at the expense of those in some niche domains. Special-purpose operating systems
serve those niche domains, and are less suitable for general computing. Examples
of these include FreeRTOS, Rockbox, Genode, and so on.&lt;/p&gt;
&lt;p&gt;These terms distinguish operating systems by the problems they solve for the
user. However, a disturbing trend is emerging in which the user is not the party
whose problems are being solved, and perhaps this calls for a new term. I
propose &amp;ldquo;vendor-purpose operating system&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I would use this term to describe Windows, macOS, Android, and iOS, and perhaps
some others besides. Arguably, the first two used to be general purpose
operating systems, and the latter two were once special-purpose operating
systems.  Increasingly, these operating systems are making design decisions
which benefit the vendor &lt;em&gt;at the expense&lt;/em&gt; of the user. For example: Windows has
ads and excessive spyware, prevents you from making a local login without a
Microsoft account, and aggressively pushes you to switch to Edge from other web
browsers, as well as many other examples besides.&lt;/p&gt;
&lt;p&gt;Apple is more subtle from the end-user&amp;rsquo;s perspective. They eschew standards to
build walled gardens, opting for Metal rather than Vulkan, for example. They use
cryptographic signatures to enforce a racket against developers who just want to
ship their programs. They bully vendors in the app store into adding things like
microtransactions to increase their revenue. They&amp;rsquo;ve also long been making
similar moves in their hardware design, adding anti-features which are
explicitly designed to increase their profit — adding false costs which
are ultimately passed onto the consumer.&lt;/p&gt;
&lt;p&gt;All of these decisions are making the OS worse for users in order to provide
more value to the vendor. The operating system is becoming &lt;em&gt;less&lt;/em&gt; suited to its
general-purpose tasks, as the vendor-purpose anti-features deliberately get in
the way. They also become less suited at special-purpose tasks for the same
reasons. These changes &lt;em&gt;are&lt;/em&gt; making improvements for one purpose: the vendor&amp;rsquo;s
purpose. Therefore, I am going to start refering to these operating systems as
&amp;ldquo;vendor purpose&amp;rdquo;, generally alongside a curse and a raising of the middle
finger.&lt;/p&gt;
</description>
    </item><item>
      <title>Introducing the BARE message encoding</title>
      <link>./2020/06/21/BARE-message-encoding.html</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/06/21/BARE-message-encoding.html</guid>
      <description>&lt;p&gt;I like stateless tokens. We started with state&lt;em&gt;ful&lt;/em&gt; tokens: where a generated
string acts as a unique identifier for a resource, and the resource itself is
looked up separately. For example, your sr.ht OAuth token is a stateful token:
we just generate a random number and hand it to you, something like
&amp;ldquo;a97c4aeeec705f81539aa&amp;rdquo;. To find the information associated with this token, we
query the database — our local &lt;em&gt;state&lt;/em&gt; — to find it.&lt;/p&gt;
&lt;a href=&#34;#announcement&#34;&gt;
  Click here to skip the context and read the actual announcement -&amp;gt;
&lt;/a&gt;
&lt;p&gt;But, increasingly, we&amp;rsquo;ve been using stateless tokens, which are a bloody good
idea. The idea is that, instead of using random numbers, you encode the actual
state you need into the token. For example, your sr.ht login session cookie is a
JSON blob which is encrypted and base64 encoded. Rather than associating your
session with a record in the database, we just decrypt the cookie when your
browser sends it to us, and the session information is right there. This
improves performance and simplicity in a single stroke, which is a huge win in
my book.&lt;/p&gt;
&lt;p&gt;There is one big problem, though: stateless tokens tend to be a lot larger than
their stateful counterparts. For a stateful token, we just need to generate
enough random numbers to be both unique and unpredictable, and then store the
rest of the data elsewhere. Not so for a stateless token, whose length is a
function of the amount of state which has been sequestered into it. Here&amp;rsquo;s an
example: the cursor fields on the new GraphQL APIs are stateless. This is one of
them:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gAAAAABe7-ysKcvmyavwKIT9k1uVLx_GXI6OunjFIHa3OJmK3eBC9NT6507PBr1WbuGtjlZSTYLYvicH2EvJXI1eAejR4kuNExpwoQsogkE9Ua6JhN10KKYzF9kJKW0hA_-737NurotB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A whopping 141 characters long! It&amp;rsquo;s hardly as convenient to lug this monster
around. Most of the time it&amp;rsquo;ll be programs doing the carrying, but it&amp;rsquo;s still
annoying when you&amp;rsquo;re messing with the API and debugging your programs. This
isn&amp;rsquo;t an isolated example, either: these stateless tokens tend to be large
throughout sr.ht.&lt;/p&gt;
&lt;p&gt;In general, JSON messages are pretty bulky. They represent everything as text,
which can be 2x as inefficient for certain kinds of data right off the bat.
They&amp;rsquo;re also self-describing: the schema of the message is encoded into the
message itself; that is, the names of fields, hierarchy of objects, and data
types.&lt;/p&gt;
&lt;p&gt;There are many alternatives that attempt to address this problem, and I
considered many of them. Here were a selected few of my conclusions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protobuf&lt;/a&gt;: too
complicated and too fragile, and I&amp;rsquo;ve never been fond of the generated code
for protobufs in any language. Writing a third-party protobuf implementation
would be a gargantuan task, and there&amp;rsquo;s no standard. RPC support is also
undesirable for this use-case.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://capnproto.org/&#34;&gt;Cap&amp;rsquo;n Proto&lt;/a&gt;: fixed width, alignment, and so on
— good for performance, bad for message size. Too complex. RPC support
is also undesirable for this use-case. I also passionately hate C++ and I
cannot in good faith consider something which makes it their primary target.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bsonspec.org/&#34;&gt;BSON&lt;/a&gt;: MonogoDB implementation details have leaked into
the specification, and it&amp;rsquo;s extensible in the worst way. I appreciate that
JSON is a closed spec and no one is making vendor extensions for it —
and, similarly, a diverse extension ecosystem is not something I want to see
for this technology. Additionally, encoding schema into the message is wasting
space.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://msgpack.org/&#34;&gt;MessagePack&lt;/a&gt;: ruled out for similar reasons: too much
extensibility, and the schema is encoded into the message, wasting space.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cbor.io/&#34;&gt;CBOR&lt;/a&gt;: ruled out for similar reasons: too much
extensibility, and the schema is encoded into the message. Has the advantage
of a specification, but the disadvantage of that spec being 54 pages long.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There were others, but hopefully this should give you an idea of what I was
thinking about when evaluating my options.&lt;/p&gt;
&lt;p&gt;There doesn&amp;rsquo;t seem to be anything which meets my criteria just right:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optimized for small messages&lt;/li&gt;
&lt;li&gt;Standardized&lt;/li&gt;
&lt;li&gt;Easy to implement&lt;/li&gt;
&lt;li&gt;Universal — little to no support for extensions&lt;/li&gt;
&lt;li&gt;Simple — no extra junk that isn&amp;rsquo;t contributing to the core mission&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The solution is evident.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xkcd.com/927&#34;&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/standards.png&#34; alt=&#34;xkcd comic 927, &amp;ldquo;Standards&amp;rdquo;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;announcement&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;bare-binary-application-record-encoding&#34;&gt;BARE: Binary Application Record Encoding&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://baremessages.org&#34;&gt;BARE&lt;/a&gt; meets all of the criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Optimized for small messages&lt;/strong&gt;: messages are binary, not self-describing,
and have no alignment or padding.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standardized &amp;amp; simple&lt;/strong&gt;: the specification is just over 1,000 words —
shorter than this blog post.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy to implement&lt;/strong&gt;: the first implementation (for Go) was done in a single
weekend (this weekend, in fact).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Universal&lt;/strong&gt;: there is room for user extensibility, but it&amp;rsquo;s done in a manner
which does not require expanding the implementation nor making messages which
are incompatible with other implementations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stateless tokens aren&amp;rsquo;t the only messages that I&amp;rsquo;ve wanted a simple binary
encoding for. On many occasions I&amp;rsquo;ve evaluated and re-evaluated the same set of
existing solutions, and found none of them quite right. I hope that BARE will
help me solve many of these problems in the future, and I hope you find it
useful, too!&lt;/p&gt;
&lt;p&gt;The cursor token I shared earlier in the article looks like this when encoded
with BARE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gAAAAABe7_K9PeskT6xtLDh_a3JGQa_DV5bkXzKm81gCYqNRV4FLJlVvG3puusCGAwQUrKFLO-4LJc39GBFPZomJhkyqrowsUw==
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;100 characters (41 fewer than JSON), which happens to be the minimum size of a
padded &lt;a href=&#34;https://github.com/fernet/spec/&#34;&gt;Fernet&lt;/a&gt; message. If we compare only the
cleartext:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JSON: eyJjb3VudCI6MjUsIm5leHQiOiIxMjM0NSIsInNlYXJjaCI6bnVsbH0=
BARE: EAUxMjM0NQA=
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much improved!&lt;/p&gt;
&lt;p&gt;BARE also has an optional schema language for defining your message structure.
Here&amp;rsquo;s a sample:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type PublicKey data&amp;lt;128&amp;gt;
type Time string # ISO 8601

enum Department {
  ACCOUNTING
  ADMINISTRATION
  CUSTOMER_SERVICE
  DEVELOPMENT

  # Reserved for the CEO
  JSMITH = 99
}

type Customer {
  name: string
  email: string
  address: Address
  orders: []{
    orderId: i64
    quantity: i32
  }
  metadata: map[string]data
}

type Employee {
  name: string
  email: string
  address: Address
  department: Department
  hireDate: Time
  publicKey: optional
  metadata: map[string]data
}

type Person (Customer | Employee)

type Address {
  address: [4]string
  city: string
  state: string
  country: string
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can feed this into a code generator and get types which can encode &amp;amp; decode
these messages. But, you can also describe your schema just using your
language&amp;rsquo;s existing type system, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Coordinates&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// uint
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// uint
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;Z&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// uint
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;Q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// optional&amp;lt;uint&amp;gt;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Coordinates&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x02&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x03&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x04&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Unmarshal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;coords: %d, %d, %d (%d)\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* coords: 1, 2, 3 (4) */&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Bonus: you can get the schema language definition for this struct with
&lt;code&gt;schema.SchemaFor(coords)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;bare-is-under-development&#34;&gt;BARE is under development&lt;/h2&gt;
&lt;p&gt;There are some possible changes that could come to BARE before finalizing the
specification. Here are some questions I&amp;rsquo;m thinking about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should the schema language include support for arbitrary annotations to
inform code generators? I&amp;rsquo;m inclined to think &amp;ldquo;no&amp;rdquo;, but if you use BARE and
find yourself wishing for this, tell me about it.&lt;/li&gt;
&lt;li&gt;Should BARE have first-class support for bitfield enums?&lt;/li&gt;
&lt;li&gt;Should maps be ordered?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;mailto:~sircmpwn/public-inbox@lists.sr.ht&#34;&gt;Feedback welcome&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Errata&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This article was originally based on an older version of the draft
specification, and was updated accordingly.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item><item>
      <title>Email service provider recommendations</title>
      <link>./2020/06/19/Mail-service-provider-recommendations.html</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/06/19/Mail-service-provider-recommendations.html</guid>
      <description>&lt;p&gt;Email is important to my daily workflow, and I&amp;rsquo;ve built many tools which
encourage productive use of it for software development. As such, I&amp;rsquo;m often
asked for advice on choosing a good email service provider. Personally, I run
my own mail servers, but about a year ago I signed up for and evaluated many
different service providers available today so that I could make informed
recommendations to people. Here are my top picks, as well as the criteria by
which they were evaluated.&lt;/p&gt;
&lt;p&gt;Unfortunately, almost all mail providers fail to meet my criteria.  As such, I
can only recommend two: Migadu and mailbox.org.&lt;/p&gt;
&lt;h1 id=&#34;1-migadu&#34;&gt;#1: Migadu&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.migadu.com/&#34;&gt;Migadu&lt;/a&gt; is my go-to recommendation
for a mail service provider.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Migadu is a small company with strong values and no outside capital (i.e.
no profit-motivated external influence). Email support and a human being
answers, and their leadership is accessible if you have questions or feedback.&lt;/li&gt;
&lt;li&gt;Their pricing is based on bandwidth usage, and does not rely on artificial
scarcity like limited domain names or mailboxes.&lt;/li&gt;
&lt;li&gt;Has lots of features for your postmaster - you can treat it as a managed mail
server for your organization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They have suffered from some outages in the past. The global mail system is
tolerant of such outages - you don&amp;rsquo;t have to worry about messages being lost
if they were sent during an outage. Still, being unable to access your mail is
a problem.&lt;/li&gt;
&lt;li&gt;If you are on a trial account, they will put an advertisement into your email
signature. I don&amp;rsquo;t think that it&amp;rsquo;s ever appropriate for a mail service
provider to edit your outgoing emails for any reason, and certainly not to
advertise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Full disclosure: SourceHut and Migadu agreed to a consulting arrangement to
build their &lt;a href=&#34;https://git.sr.ht/~migadu/alps&#34;&gt;new webmail system&lt;/a&gt;, which should
be going into production soon. However, I had evaluated and started recommending
Migadu prior to the start of this project, and I believe that Migadu fares well
under the criteria I give at the end of this post.&lt;/p&gt;
&lt;h1 id=&#34;2-mailboxorg&#34;&gt;#2: mailbox.org&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://mailbox.org/en/&#34;&gt;Mailbox.org&lt;/a&gt; may be desirable if you wish to have a
more curated experience, and less hands-on access to postmaster-specific
features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Excellent first-class support for PGP, and many other strong security and
privacy features are available.&lt;/li&gt;
&lt;li&gt;Was able to speak to the CEO directly to discuss my concerns and feedback, and
have my questions answered. Raised some bugs and they were fixed in short
order.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The interface is a little bit too JavaScript heavy for my tastes, and suffer
from some bugs and lack of polish.&lt;/li&gt;
&lt;li&gt;They are a German company serving mostly German customers - German text leaks
into the UI and documentation in some places.&lt;/li&gt;
&lt;li&gt;Completing a Google captcha is required to sign up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;others&#34;&gt;Others&lt;/h1&gt;
&lt;p&gt;Evaluated but not recommended: disroot, fastmail, posteo.de, poste.io,
protonmail, tutanota, riseup, cock.li, teknik, runbox, megacorp mail (gmail,
outlook, etc).&lt;/p&gt;
&lt;h1 id=&#34;criteria-for-a-good-mail-service-provider&#34;&gt;Criteria for a good mail service provider&lt;/h1&gt;
&lt;p&gt;The following criteria are objective and non-negotiable:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Support for open standards including IMAP and SMTP&lt;/li&gt;
&lt;li&gt;Support for users who wish to bring their own domain&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is necessary to preserve the user&amp;rsquo;s ownership of their data by making it
accessible over open and standardized protocols, and their right to move to
another service provider by not fixing their identity to a domain name
controlled by the email provider. It is for these reasons that Posteo,
ProtonMail, and Tutanota are not considered suitable.&lt;/p&gt;
&lt;p&gt;The remaining criteria are subjective:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is the business conducted ethically? Are their incentives aligned with their
customers, or with their investors?&lt;/li&gt;
&lt;li&gt;Is it sustainable? Can I expect them to be around in 10 years? 20? 30?&lt;/li&gt;
&lt;li&gt;Do they make unfounded claims about security or privacy, or develop
techniques which ultimately rely on trusting them instead of supporting or
improving standards which rely on encryption?&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;If they make claims about privacy or security, do they explain the
limitations and trade-offs, or do they let you believe it&amp;rsquo;s infallible?&lt;/li&gt;
&lt;li&gt;Do you trust them with your personal data? What if they&amp;rsquo;re compelled by law
enforcement? What is their government like?&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bonus points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is their relationship with open source?&lt;/li&gt;
&lt;li&gt;Can I sign up without an existing email address? Is there a chicken and egg
problem here?&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;How well do they handle plaintext email? Do they meet the criteria for
recommended clients at
&lt;a href=&#34;https://useplaintext.email/#implementation-recommendations&#34;&gt;useplaintext.email&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you represent a mail service provider which you believe meets this criteria,
please &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;send me an email&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This also rules out ProtonMail and Tutanota, doubly damning them, especially because it provides an excuse for skipping IMAP and SMTP, which conveniently enables vendor lock-in. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This rules out Fastmail because of their government (Australia)&amp;rsquo;s hostile and subversive laws regarding encryption. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Alarmingly rare, this one. It seems to be either this, or a captcha like mailbox.org does. I would be interested in seeing the use of client-side proof of work, or requiring someone to enter their payment details and successfully complete a charge instead. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, June 2020</title>
      <link>./2020/06/15/Status-update-June-2020.html</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/06/15/Status-update-June-2020.html</guid>
      <description>&lt;p&gt;Like last month, I am writing to you from the past, preparing this status update
a day earlier than usual. This time it&amp;rsquo;s because I expect to be busy with
planned sr.ht maintenance tomorrow, so I&amp;rsquo;m getting the status updates written
ahead of time.&lt;/p&gt;
&lt;p&gt;aerc has seen lots of patches merged recently thanks to the hard work of
co-maintainer Reto Brunner and the many contributors who sent patches, ranging
from a scrollable folder list to improvements and bugfixes for PGP support. We
wrapped all of this up in the aerc 0.4.0 release in late May. Thanks to Reto and
all of the other contributors for their hard work on aerc!&lt;/p&gt;
&lt;p&gt;Wayland improvements have also continued at a good pace. I&amp;rsquo;ve mentioned before
that wlroots is a crucial core component tying together a lot of different parts
of the ecosystem — DRM/KMS, GBM, OpenGL, libinput, udev, and more —
bringing together integrations for many disparate systems and providing a single
unified multiplexer for them over the Wayland protocol. Taking full advantage of
all of these systems and becoming a more perfect integration of them is a
long-term goal, and we&amp;rsquo;ve been continuing to make headway on these goals over
the past few weeks. We are working hard to squeeze every drop of performance out
of your system.&lt;/p&gt;
&lt;p&gt;In the SourceHut world, I&amp;rsquo;ve been working mainly on GraphQL support, as well as
Alpine 3.12 upgrades (the latter being the source of the planned outage). I
wrote in some detail &lt;a href=&#34;https://sourcehut.org/blog/2020-06-10-how-graphql-will-shape-the-alpha/&#34;&gt;on the sourcehut.org blog&lt;/a&gt; about why and how
the GraphQL backends are being implemented, if you&amp;rsquo;re curious. The main
development improvements in this respect which have occured since the last
status updates are the introduction of a JavaScript-free GraphQL playground, and
a GraphQL API for meta.sr.ht. Coming improvements will include an overhaul to
authentication and OAuth2 support, and a dramatically improved approach to
webhooks. Stay tuned!&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for the time being. Thank you for your support and attention, and
stay safe out there. I&amp;rsquo;ll see you next month!&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;...&lt;/summary&gt;
&lt;pre&gt;
$ cat strconv/itos.$redacted
use bytes;
use types;
&lt;p&gt;/***&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Converts an i64 to a string, in base 10. The return value is statically&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allocated and will be overwritten on subsequent calls; see [strings::dup] to&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;duplicate the result, or [strconv::itosb] to pass your own string buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;let a = strconv::i64tos(1234);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;io::printf(&amp;quot;%s&amp;quot;, a); // 1234&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;let a = strconv::i64tos(1234);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;let b = strconv::i64tos(4321);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;io::printf(&amp;quot;%s %s&amp;quot;, a, b); // 4321 4321
*/
export fn i64tos(i: i64) const &lt;em&gt;str =
{
static assert(types::I64_MAX == 9223372036854775807,
&amp;ldquo;Maximum integer value exceeds buffer length&amp;rdquo;);
static let s = struct {
l: size = 0,
b: [22]u8 = [0: u8&amp;hellip;], /&lt;/em&gt; 20 digits plus NUL and &amp;lsquo;-&amp;rsquo; */
};
s.l = 0;
s.b = [0: u8&amp;hellip;];&lt;/p&gt;
&lt;p&gt;const isneg = i &amp;lt; 0;
if (isneg) {
s.b[s.l] = &amp;lsquo;-&#39;: u8;
s.l += 1;
i = -i;
} else if (i == 0) {
s.b[s.l] = &amp;lsquo;0&amp;rsquo;: u8;
s.l += 1;
};&lt;/p&gt;
&lt;p&gt;while (i &amp;gt; 0) {
s.b[s.l] = &amp;lsquo;0&amp;rsquo;: u8 + (i % 10): u8;
s.l += 1;
i /= 10;
};&lt;/p&gt;
&lt;p&gt;const x: size = if (isneg) 1 else 0;
bytes::reverse(s.b[x..s.l]);&lt;/p&gt;
&lt;p&gt;s.b[s.l] = 0: u8;
return &amp;amp;s: *str;
};
&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
</description>
    </item><item>
      <title>Can we talk about client-side certificates?</title>
      <link>./2020/06/12/Can-we-talk-about-client-side-certs.html</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/06/12/Can-we-talk-about-client-side-certs.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;m working on improving the means by which API users authenticate with the
SourceHut API. Today, I was reading &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;RFC 6749&lt;/a&gt; (OAuth2) for this purpose,
and it got me thinking about the original OAuth spec. I recalled vaguely that it
had the API clients actually &lt;em&gt;sign&lt;/em&gt; every request, and&amp;hellip; &lt;a href=&#34;https://tools.ietf.org/html/rfc5849&#34;&gt;yep, indeed it
does&lt;/a&gt;. This also got me thinking: what else signs requests? TLS!&lt;/p&gt;
&lt;p&gt;OAuth is very complicated. The RFC is 76 pages long, the separate bearer token
RFC (6750) is another 18, and no one has ever read either of them. Add JSON Web
Tokens (RFC 7519, 30 pages), too. The process is complicated and everyone
implements it themselves — a sure way to make mistakes in a
security-critical component. Not all of the data is authenticated, no
cryptography is involved at any step, and it&amp;rsquo;s easy for either party to end up
in an unexpected state. The server has to deal with problems of revocation and
generating a secure token itself. Have you ever met anyone who feels positively
about OAuth?&lt;/p&gt;
&lt;p&gt;Now, take a seat. Have a cup of coffee. I want to talk about client-side
certificates. Why didn&amp;rsquo;t they take off? Let&amp;rsquo;s sketch up a hypothetical TLS-based
protocol as an alternative to OAuth.  Picture the following&amp;hellip;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You, an API client developer, generate a certificate authority and
intermediate, and you upload your CA certificate to the Service Provider as
part of your registration as a user agent.&lt;/li&gt;
&lt;li&gt;When you want a user to authorize you to access their account, you generate a
certificate for them, and redirect them to the Service Provider&amp;rsquo;s
authorization page with a &lt;abbr title=&#34;Certificate Signing Request&#34;&gt;CSR&lt;/abbr&gt;
in tow. Your certificate includes, among other things, the list of authorized
scopes for which you want to be granted access. It is already signed with
your client CA key, or one of its intermediates.&lt;/li&gt;
&lt;li&gt;The client reviews the desired access, and consents. They are redirected back
to your API client application, along with the signed certificate.&lt;/li&gt;
&lt;li&gt;Use this client-side certificate to authenticate your API requests. Hooray!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Several advantages to this approach occur to me.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You get strong encryption and authentication guarantees for free.&lt;/li&gt;
&lt;li&gt;TLS is basically the single most ironclad, battle-tested security mechanism on
the internet, and mature implementations are available for every platform.
Everyone implements OAuth themselves, and often poorly.&lt;/li&gt;
&lt;li&gt;Client-side certificates are stateless. They contain all of the information
necessary to prove that the client is entitled to access.&lt;/li&gt;
&lt;li&gt;If you handle SSL termination with nginx, haproxy, etc, you can reject
unauthorized requests before your application backend ever even sees them.&lt;/li&gt;
&lt;li&gt;The service provider can untrust the client&amp;rsquo;s CA in a single revocation, if
they are malicious or lose their private keys.&lt;/li&gt;
&lt;li&gt;The API client and service provider are both always certain that the process
was deliberately initiated by the API client. No weird state tokens to carry
through the process like OAuth uses!&lt;/li&gt;
&lt;li&gt;Lots of free features: any metadata you like, built-in expirations, API
clients can self-organize into intermediates at their discretion, and so on.&lt;/li&gt;
&lt;li&gt;Security-concious end users can toggle a flag in their account which would, as
part of the consent process, ask them to sign the API client&amp;rsquo;s certificate
themselves, before the signed certificate is returned to the API client. Then
any API request authorized for that user&amp;rsquo;s account has to be signed by the API
client, the service provider, &lt;em&gt;and&lt;/em&gt; the user to be valid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s another example: say your organization has several services, each of
which interacts with a subset of Acme Co&amp;rsquo;s API on behalf of their users. Your
organization generates a single root CA, and signs up for Acme Co&amp;rsquo;s API with it.
Then you issue intermediate CAs to each of your services, which are &lt;em&gt;only&lt;/em&gt;
allowed to issue CSRs for the subset of scopes they require. If any service is
compromised, it can&amp;rsquo;t be used to get more access than it already had, and you
can revoke just that one intermediate without affecting the rest.&lt;/p&gt;
&lt;p&gt;Even some famous downsides, such as &lt;abbr title=&#34;Certificate Revocation
Lists&#34;&gt;CRLs&lt;/abbr&gt; and &lt;abbr title=&#34;Online Certificate Status
Protocol&#34;&gt;OCSP&lt;/abbr&gt;, are mitigated here, because the system is much more
centralized. You control all of the endpoints which will be validating
certificates, you can just distribute revocations directly to them as soon as
they come in.&lt;/p&gt;
&lt;p&gt;The advantages are clearly numerous. Let&amp;rsquo;s wrap it up in a cute, Google-able
name, write some nice tooling and helper libraries for it, and ship it!&lt;/p&gt;
&lt;p&gt;Or, maybe not. I have a nagging feeling that I&amp;rsquo;m missing something here. It
doesn&amp;rsquo;t seem right that such an obvious solution would have been left on the
table, by everyone, for decades. Maybe it&amp;rsquo;s just that the whole certificate
signing dance has left a bad taste in everyone&amp;rsquo;s mouth — many of us have
not-so-fond memories of futzing around with the awful OpenSSL CLI to generate a
CSR. But, there&amp;rsquo;s no reason why we couldn&amp;rsquo;t do it better, and more streamlined,
if we had the motivation to.&lt;/p&gt;
&lt;p&gt;There are also more use-cases for client-side certificates that seem rather
compelling, such as an alternative to user passwords. Web browser support for
client-side certificates totally sucks, but that is a solvable problem.&lt;/p&gt;
&lt;p&gt;For the record, I have no intention of using this approach for the SourceHut
API. This thought simply occurred to me, and I want to hear what you think. Why
aren&amp;rsquo;t we using client-side certificates?&lt;/p&gt;
</description>
    </item><item>
      <title>Add a &#34;contrib&#34; directory to your projects</title>
      <link>./2020/06/06/Add-a-contrib-directory.html</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/06/06/Add-a-contrib-directory.html</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a common pattern among free- and open-source software projects to
include a &amp;ldquo;contrib&amp;rdquo; directory at the top of their source code tree. I&amp;rsquo;ve seen
this in many projects for many years, but I&amp;rsquo;ve seen it discussed only rarely
— so here we are!&lt;/p&gt;
&lt;p&gt;The contrib directory is used as an unorganized (or, at best, lightly organized)
bin of various useful things &lt;strong&gt;contrib&lt;/strong&gt;uted by the community around the
software, but which is not necessarily a good candidate for being a proper part
of the software. Things in contrib should not be wired into your build system,
shouldn&amp;rsquo;t be part of your automated testing, shouldn&amp;rsquo;t be included in your
documentation, and should not be installed with your packages. contrib entries
are not supported by the maintainers, and are given only a light code review at
the most. There is no guarantee whatsoever of workitude or maintenance for
anything found in contrib.&lt;/p&gt;
&lt;p&gt;Nevertheless, it is often useful to have such a place to put various little
scripts, config files, and so on, which provide a helpful leg-up for users
hoping to integrate the software with some third-party product, configure it to
fit nicely into an unusual environment, coax it into some unusual behavior, or
whatever else the case may be. The idea is to provide a place to drop a couple
of files which might save a future someone facing similar problems from doing
all of the work themselves. Such people can contribute back small fixes or
improvements, and the maintenance burden of such contributions lies entirely
with the users.&lt;/p&gt;
&lt;p&gt;If the contributor wants to take on a greater maintenance burden, this kind of
stuff is better suited to a standalone project, with its own issue tracking,
releases, and so on. If you just wrote a little script and want somewhere to
drop it so that others may find it useful, then contrib is the place for you.&lt;/p&gt;
&lt;p&gt;For a quick example, let&amp;rsquo;s consult Sway&amp;rsquo;s &lt;a href=&#34;https://github.com/swaywm/sway/tree/master/contrib&#34;&gt;contrib
folder&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_incr_version
autoname-workspaces.py
grimshot
grimshot.1
grimshot.1.scd
inactive-windows-transparency.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;_incr_version&lt;/code&gt; script is something that I use myself to help with preparing
new releases. It is a tool useful only to maintainers, and therefore is not
distributed with the project.&lt;/p&gt;
&lt;p&gt;Looking at &lt;code&gt;autoname-workspaces.py&lt;/code&gt; next, from which we can see that the quality
criteria is reduced for members of contrib — none of Sway&amp;rsquo;s upstream code
is written in Python, and the introduction of such a dependency would be
controversial. This script automatically changes your workspace name based on
what applications you&amp;rsquo;re running in it — an interesting workflow, but
quite different from the &lt;abbr title=&#34;out-of-the-box&#34;&gt;OOTB&lt;/abbr&gt; experience.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grimshot&lt;/code&gt; is a shell script which ties together many third-party programs
(grim, slurp, wl-copy, jq, and notify-send) to make a convenient way of taking
screenshots. Adding this upstream would introduce &lt;em&gt;a lot&lt;/em&gt; of third-party
dependencies for a minor convenience. This tool has had a bit more effort put
into it: notice that a man page is provided as well. Because the contrib
directory does not participate in the upstream build system, the contributor has
also added a pre-compiled man page so that you can skip this step when
installing it on your system.&lt;/p&gt;
&lt;p&gt;Last, we have &lt;code&gt;inactive-windows-transparency.py&lt;/code&gt;, which is a script for making
all windows other than your focused one semi-transparent. Some people may want
this, but again, it&amp;rsquo;s not really something we&amp;rsquo;d consider appropriate for the
OOTB experience. Perfect for contrib!&lt;/p&gt;
</description>
    </item><item>
      <title>Status update, May 2020</title>
      <link>./2020/05/15/Status-update-May-2020.html</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/05/15/Status-update-May-2020.html</guid>
      <description>&lt;p&gt;Hello, future readers! I am writing to you from one day in the past. I finished
my plans for today early and thought I&amp;rsquo;d get a head start on writing the status
updates for tomorrow, or rather, for today. From your reference frame, that is.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with Wayland. First, as you might have heard, &lt;a href=&#34;https://wayland-book.com&#34;&gt;The Wayland
Protocol&lt;/a&gt; is now free for anyone to read, and has been
relicensed as CC-BY-SA. Enjoy! It&amp;rsquo;s still not quite done, but most of it&amp;rsquo;s
there. In development news, wlroots continues to enjoy incremental improvements,
and is being refined further and further towards a perfect citizen of the
ecosystem in which it resides. Sway as well has seen many small bugfixes and
improvements. Both have been been stable for a while now: the only meaningful
changes will be, for the most part, a steady stream of bug fixes and performance
improvements.&lt;/p&gt;
&lt;p&gt;Moving on from Wayland, then, there are some interesting developments in the
world of email as well. aerc has seen some minor changes to how it handles
templates and custom email headers, and a series of other small features and
improvements: drafts, a &lt;code&gt;:choose&lt;/code&gt; meta-command, and fixes for OpenBSD and Go
1.15. Additionally, I&amp;rsquo;ve joined &lt;a href=&#34;https://emersion.fr/&#34;&gt;Simon Ser&lt;/a&gt; to work on
&lt;a href=&#34;https://sr.ht/~emersion/alps/&#34;&gt;Alps&lt;/a&gt; together, to put the finishing touches on
our lightweight &amp;amp; customizable webmail client before
&lt;a href=&#34;https://www.migadu.com/en/index.html&#34;&gt;Migadu&lt;/a&gt; puts it into production.&lt;/p&gt;
&lt;p&gt;On the SourceHut front, lots of cool stuff came out this month. You might have
seen the &lt;a href=&#34;https://sourcehut.org/blog/2020-05-11-sourcehut-plus-plan-9/&#34;&gt;announcement this week&lt;/a&gt; that we&amp;rsquo;ve added Plan 9 support to the
CI — a world first :D I also just published the first bits of the new,
experimental GraphQL API for git.sr.ht, which you can &lt;a href=&#34;https://git.sr.ht/graphql&#34;&gt;play with here&lt;/a&gt;.
And, of course, the long-awaited project hub was released this month! &lt;a href=&#34;https://sr.ht&#34;&gt;Check it
out here&lt;/a&gt; to get your projects listed. I&amp;rsquo;ll post about all of
this in more detail on the sr.ht-announce mailing list later today.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for today! I&amp;rsquo;ll see you next month. Thank you once more for your
wonderful support.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;...&lt;/summary&gt;
&lt;pre&gt;/* sys::write */
fn write(fd: int, buf: *void, count: size) size;
&lt;p&gt;fn puts(s: str) size =
{
let n = write(1, s: *char, len(s));
n += write(1, &amp;ldquo;\n&amp;rdquo;: *char, 1);
n;
};&lt;/p&gt;
&lt;p&gt;export fn main int =
{
puts(&amp;ldquo;Hello world!&amp;quot;);
0;
};
&lt;/pre&gt;&lt;/p&gt;
&lt;pre&gt;
$ ./[redacted] &lt; example.[redacted] | qbe &gt; example.S
$ as -o example.o example.S
$ ld -o example lib/sys/[redacted]s.o example.o lib/sys/lib[redacted]rt.a
$ wc -c example
9640
$ ./example
Hello world!
&lt;/pre&gt;
&lt;/details&gt;
</description>
    </item><item>
      <title>We are complicit in our employer&#39;s deeds</title>
      <link>./2020/05/05/We-are-complicit-in-our-employers-deeds.html</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/05/05/We-are-complicit-in-our-employers-deeds.html</guid>
      <description>&lt;p&gt;Tim Bray&amp;rsquo;s excellent &amp;ldquo;&lt;a href=&#34;https://www.tbray.org/ongoing/When/202x/2020/04/29/Leaving-Amazon&#34;&gt;Bye Amazon&lt;/a&gt;&amp;rdquo; post inspired me to take this
article off of my backlog, where it has been sitting for a few weeks. I applaud
Tim for stepping down from a company that has demonstrated itself incompatible
with his sense of right and wrong, and I want to take a moment to remind you
that the rest of us in the tech industry have the same opportunity — no,
the same &lt;em&gt;obligation&lt;/em&gt; as Tim did.&lt;/p&gt;
&lt;p&gt;As software engineers, we enjoy high salaries and extremely good job security. A
good software engineer with only a couple of years of experience under their
belt can expect to have an offer within 1 or 2 months of starting their search.
It can seem a little scary and stressful, but if you&amp;rsquo;re a programmer already
working at $company and you&amp;rsquo;re looking for a change, you&amp;rsquo;re better off than 99%
of your non-technical friends. In tech, hardly anyone is &amp;ldquo;trapped&amp;rdquo; at a bad job;
or at least we don&amp;rsquo;t have a good excuse for not trying for something better.&lt;/p&gt;
&lt;p&gt;Tim calls out Amazon&amp;rsquo;s terrible, unhealthy working conditions and retaliation
against staff who speak up or try to organize.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Google conducts mass
surveillance, kowtows to oppressive regimes, and punishes workers who stand up
to them. Less obvious stuff, too — Apple builds walled gardens and makes
targeted attacks on open standards, Facebook is a giant surveillance tool which
routinely disregards the law, the same behavior which made Uber and Airbnb into
the giants they are today, all while fostering a &amp;ldquo;gig&amp;rdquo; culture in which the poor
have no stability or security. Mass surveillance, contempt of the law, tax
evasion, oppression of the poor, of minorities&amp;hellip; this is what our industry is
known for, and it&amp;rsquo;s &lt;em&gt;our&lt;/em&gt; fault.&lt;/p&gt;
&lt;p&gt;This is why I hold my peers accountable for working at companies which are
making a negative impact on the world around them. As a general rule, it costs a
business your salary × 1.5 to employ you, given the overhead of benefits,
HR, training, and so on. When you&amp;rsquo;re making a cool half-million annual salary
from $bigcorp, it&amp;rsquo;s because they expect to make at least ¾ of a million that
they wouldn&amp;rsquo;t be making without you. It does not make economic sense for them to
hire you if this weren&amp;rsquo;t the case. Your contribution makes a big difference.&lt;/p&gt;
&lt;p&gt;If the best defense we have for working at these companies is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Superior_orders&#34;&gt;Nuremberg
defense&lt;/a&gt;, that doesn&amp;rsquo;t reflect well on us. But, maybe you would
object, maybe you would have the courage to say &amp;ldquo;no&amp;rdquo; when asked to do these
things. Maybe you would, but someday, a cool project will come across your
inbox - machine learning!  Big data! Cloud scale! It&amp;rsquo;s everything you were
promised when you took the job, and have more fun with it for a few months than
you have had in a long time. Your superiors are thrilled - &amp;ldquo;it&amp;rsquo;s perfect!&amp;rdquo;, they
say, and it&amp;rsquo;s not until they take it and start feeding it real-world data that
&lt;a href=&#34;https://observer.com/2020/04/amazon-whole-foods-anti-union-technology-heat-map/&#34;&gt;you realize exactly what you have built&lt;/a&gt;. Doublethink quickly
steps in to protect your ego from the cognitive dissonance, and you take another
little step towards becoming the person you once swore never to be.&lt;/p&gt;
&lt;p&gt;The rapid computerization of society has decreased the time necessary to build
novel machines one thousand-fold. This endows us with a great responsibility,
because whatever we build with them, the changes they bring to society will be
upon us much, much faster than any changes to come before. Every software
developer possesses alone the potential of 50 engineers living just 100 years
ago. We can apply this power for good or for ill, but it&amp;rsquo;s up to each of us to
make a deliberate choice on the matter.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/mc/pipelines/cancellation&#34;&gt;Here&amp;rsquo;s a link&lt;/a&gt; to cancel Amazon Prime, by the way. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>How to store data forever</title>
      <link>./2020/04/22/How-to-store-data-forever.html</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/04/22/How-to-store-data-forever.html</guid>
      <description>&lt;p&gt;As someone who has been often maligned by the disappearance of my data for
various reasons — companies going under, hard drive failure, etc —
and as someone who is responsible for the safekeeping of other people&amp;rsquo;s data,
I&amp;rsquo;ve put a lot of thought into solutions for long-term data retention.&lt;/p&gt;
&lt;p&gt;There are two kinds of long-term storage, with different concerns: cold storage
and hot storage. The former is like a hard drive in your safe — it stores
your data, but you&amp;rsquo;re not actively using it or putting wear on the storage
medium. By contrast, hot storage is storage which is available immediately and
undergoing frequent reads and writes.&lt;/p&gt;
&lt;h2 id=&#34;what-storage-medium-to-use&#34;&gt;What storage medium to use?&lt;/h2&gt;
&lt;p&gt;There are some bad ways to do it. The worst way I can think of is to store
it on a microSD card. These fail &lt;em&gt;a lot&lt;/em&gt;. I couldn&amp;rsquo;t find any hard data, but
anecdotally, 4 out of 5 microSD cards I&amp;rsquo;ve used have experienced failures
resulting in permanent data loss. Low volume writes, such as from a digital
camera, are unlikely to cause failure. However, microSD cards have a tendency to
get hot with prolonged writes, and they&amp;rsquo;ll quickly leave their safe operating
temperature and start to accumulate damage. Nearly all microSD cards will let
you perform writes fast enough to drive up the temperature beyond the operating
limits — after all, writes per second is a marketable feature — so
if you want to safely move lots of data onto or off of a microSD card, you need
to monitor the temperature and throttle your read/write operations.&lt;/p&gt;
&lt;p&gt;A more reliable solution is to store the data on a hard drive&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. However, hard
drives are rated for a limited number of read/write cycles, and can be expected
to fail eventually. Backblaze publishes some great articles on &lt;a href=&#34;https://www.backblaze.com/blog/hard-drive-stats-for-2019/&#34;&gt;hard drive
failure rates&lt;/a&gt; across
their fleet. According to them, the average annual failure rate of hard drives
is almost 2%. Of course, the exact rate will vary with the frequency of use and
storage conditions. Even in cold storage, the shelf life of a magnetic platter
is not indefinite.&lt;/p&gt;
&lt;p&gt;There are other solutions, like optical media, tape drives, or more novel
mediums, like the &lt;a href=&#34;https://en.wikipedia.org/wiki/Rosetta_Project&#34;&gt;Rosetta Disk&lt;/a&gt;.
For most readers, a hard drive will be the best balance of practical and
reliable. For serious long-term storage, if expense isn&amp;rsquo;t a concern, I would
also recommend hot storage over cold storage because it introduces the
possibility of active monitoring.&lt;/p&gt;
&lt;h2 id=&#34;redundancy-with-raid&#34;&gt;Redundancy with RAID&lt;/h2&gt;
&lt;p&gt;One solution to this is redundancy — storing the same data across multiple
hard drives. For cold storage, this is often as simple as copying the data onto
a second hard drive, like an external backup HDD. Other solutions exist for hot
storage. The most common standard is &lt;a href=&#34;https://en.wikipedia.org/wiki/RAID&#34;&gt;RAID&lt;/a&gt;, which offers different
features with different numbers of hard drives. With two hard drives (RAID1), for
example, it utilizes mirroring, which writes the same data to both disks. RAID
gets more creative with three or more hard drives, utilizing &lt;em&gt;parity&lt;/em&gt;, which
allows it to reconstruct the contents of failed hard drives from still-online
drives. The basic idea relies on the XOR operation. Let&amp;rsquo;s say you write the
following byte to drive A: &lt;code&gt;0b11100111&lt;/code&gt;, and to drive B: &lt;code&gt;0b10101100&lt;/code&gt;. By XORing
these values together:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  11100111 A
^ 10101100 B
= 01001011 C
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We obtain the value to write to drive C. If any of these three drives fail, we
can XOR the remaining two values again to obtain the third.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  11100111 A
^ 01001011 C
= 10101100 B

  10101100 B
^ 01001011 C
= 11100111 A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows any drive to fail while still being able to recover its contents,
and the recovery can be performed online. However, it&amp;rsquo;s often not that simple.
Drive failure can dramatically reduce the performance of the array while it&amp;rsquo;s
being rebuilt — the disks are going to be seeking constantly to find the
parity data to rebuild the failed disk, and any attempts to read from the disk
that&amp;rsquo;s being rebuilt will require computing the recovered value on the fly. This
can be improved upon by using lots of drives and multiple levels of redundancy,
but it is still likely to have an impact on the availability of your data if not
carefully planned for.&lt;/p&gt;
&lt;p&gt;You should also be monitoring your drives and preparing for their failure in
advance.  Failing disks can show signs of it in advance — degraded
performance, or via S.M.A.R.T reports. Learn the tools for monitoring your
storage medium, such as smartmontools, and set it up to report failures to you
(and &lt;em&gt;test&lt;/em&gt; the mechanisms by which the failures are reported to you).&lt;/p&gt;
&lt;h3 id=&#34;other-raid-failure-modes&#34;&gt;Other RAID failure modes&lt;/h3&gt;
&lt;p&gt;There are other common ways a RAID can fail that result in permanent data loss.
One example is using hardware RAID — there was an argument to be made for
them at one point, but these days hardware RAID is &lt;em&gt;almost always&lt;/em&gt; a mistake.
Most operating systems have software RAID implementations which can achieve the
same results without a dedicated RAID card. With hardware RAID, if the RAID card
itself fails (and they often do), you might have to find the exact same card to
be able to read from your disks again. You&amp;rsquo;ll be paying for new hardware, which
might be expensive or out of production, and waiting for it to arrive before you
can start recovering data. With software RAID, the hard drives are portable
between machines and you can always interpret the data with general purpose
software.&lt;/p&gt;
&lt;p&gt;Another common failure is &lt;em&gt;cascading&lt;/em&gt; drive failures. RAID can tolerate partial
drive failure thanks to parity and mirroring, but if the failures start to pile
up, you can suffer permanent data loss. Many a sad administrator has been in
panic mode, recovering a RAID from a disk failure, and at their lowest
moment&amp;hellip; another disk fails. Then another. They&amp;rsquo;ve suddenly lost their data,
and the challenge of recovering what remains has become ten times harder. When
you&amp;rsquo;ve been distributing read and write operations consistently across all of
your drives over the lifetime of the hardware, they&amp;rsquo;ve been receiving a similar
level of wear, and failing together is not uncommon.&lt;/p&gt;
&lt;p&gt;Often, failures like this can be attributed to using many hard drives from the
same batch. One strategy I recommend to avoid this scenario is to use drives
from a mix of vendors, model numbers, and so on. Using a RAID improves
performance by distributing reads and writes across drives, using the time one
drive is busy to utilize an alternate. Accordingly, any differences in the
performance characteristics of different kinds of drives will be smoothed out in
the wash.&lt;/p&gt;
&lt;h2 id=&#34;zfs&#34;&gt;ZFS&lt;/h2&gt;
&lt;p&gt;RAID is complicated, and getting it right is difficult. You don&amp;rsquo;t want to wait
until your drives are failing to learn about a gap in your understanding of
RAID. For this reason, I recommend ZFS to most. It automatically makes good
decisions for you with respect to mirroring and parity, and gracefully handles
rebuilds, sudden power loss, and other failures. It also has features which are
helpful for other failure modes, like snapshots.&lt;/p&gt;
&lt;p&gt;Set up Zed to email you reports from ZFS. Zed has a debug mode, which will send
you emails even for working disks — I recommend leaving this on, so that
their conspicuous absence might alert you to a problem with the monitoring
mechanism. Set up a cronjob to do monthly scrubs and review the Zed reports when
they arrive. ZFS snapshots are cheap - set up a cronjob to take one every 5
minutes, perhaps with &lt;a href=&#34;https://github.com/zfsonlinux/zfs-auto-snapshot&#34;&gt;zfs-auto-snapshot&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;human-failures-and-existential-threats&#34;&gt;Human failures and existential threats&lt;/h2&gt;
&lt;p&gt;Even if you&amp;rsquo;ve addressed hardware failure, you&amp;rsquo;re not done yet. There are other
ways still in which your storage may fail. Maybe your server fans fail and burn
out all of your hard drives at once. Or, your datacenter could suffer a total
existence failure — what if a fire burns down the building?&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also the problem of human failure. What if you accidentally &lt;code&gt;rm -rf / *&lt;/code&gt;
the server? Your RAID array will faithfully remove the data from all of the hard
drives for you. What if you send the sysop out to the datacenter to decommission
a machine, and no one notices that they decommissioned the wrong one until it&amp;rsquo;s
too late?&lt;/p&gt;
&lt;p&gt;This is where off-site backups come into play. For this purpose, I recommend
&lt;a href=&#34;https://www.borgbackup.org/&#34;&gt;Borg backup&lt;/a&gt;. It has sophisticated features for compression and
encryption, and allows you to mount any version of your backups as a filesystem
to recover the data from. Set this up on a cronjob as well for as frequently as
you feel the need to make backups, and send them off-site to another location,
which itself should have storage facilities following the rest of the
recommendations from this article. Set up another cronjob to run &lt;code&gt;borg check&lt;/code&gt;
and send you the results on a schedule, so that their conspicuous absence may
indicate that something fishy is going on. I also use &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; with
&lt;a href=&#34;https://github.com/prometheus/pushgateway&#34;&gt;Pushgateway&lt;/a&gt; to make a note every time that a backup is run, and
set up an alarm which goes off if the backup age exceeds 48 hours. I also have
periodic test alarms, so that the alert manager&amp;rsquo;s own failures are noticed.&lt;/p&gt;
&lt;h2 id=&#34;are-you-prepared-for-the-failure&#34;&gt;Are you prepared for the failure?&lt;/h2&gt;
&lt;p&gt;When your disks are failing and everything is on fire and the sky is falling,
this is the worst time to be your first rodeo. You should have &lt;em&gt;practiced&lt;/em&gt; these
problems before they became problems. Do training with anyone expected to deal
with failures. Yank out a hard drive and tell them to fix it. Have someone in
sales come yell at them partway through because the website is unbearably slow
while the RAID is rebuilding and the company is losing $100 per minute as a
result of the outage.&lt;/p&gt;
&lt;p&gt;Periodically produce a working system from your backups. This proves (1) the
backups are still working, (2) the backups have coverage over everything which
would need to be restored, and (3) you know how to restore them. Bonus: if
you&amp;rsquo;re confident in your backups, you should be able to replace the production
system with the restored one and allow service to continue as normal.&lt;/p&gt;
&lt;h2 id=&#34;actually-storing-data-forever&#34;&gt;Actually storing data &lt;em&gt;forever&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say you&amp;rsquo;ve managed to keep your data around. But will you still know how
to interpret that data in the future? Is it in a file format which requires
specialized software to use? Will that software still be relevant in the future?
Is that software open-source, so you can update it yourself? Will it still
compile and run correctly on newer operating systems and hardware? Will the
storage medium still be compatible with new computers?&lt;/p&gt;
&lt;p&gt;Who is going to be around to watch the monitoring systems you&amp;rsquo;ve put in place?
Who&amp;rsquo;s going to replace the failing hard drives after you&amp;rsquo;re gone? How will they
be paid? Will the dataset still be comprehensible after 500 years of evolution
of written language? The dataset requires constant maintenance to remain intact,
but also to remain useful.&lt;/p&gt;
&lt;p&gt;And ultimately, there is one factor to long-term data retention that you cannot
control: future generations will decide what data is worth keeping — not
us.&lt;/p&gt;
&lt;p&gt;In summary: no matter what, definitely don&amp;rsquo;t do this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://l.sr.ht/ig3R.jpg&#34; alt=&#34;Picture of a SATA card for RAIDing 10 microSD cards together&#34;&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Or SSDs, which I will refer to interchangeably with HDDs in this article. They have their own considerations, but we&amp;rsquo;ll get to that. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Configuring aerc for git via email</title>
      <link>./2020/04/20/Configuring-aerc-for-git.html</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/04/20/Configuring-aerc-for-git.html</guid>
      <description>&lt;p&gt;I use &lt;a href=&#34;https://aerc-mail.org&#34;&gt;aerc&lt;/a&gt; as my email client (naturally — I
wrote it, after all), and I use &lt;a href=&#34;https://git-send-email.io&#34;&gt;git send-email&lt;/a&gt; to
receive patches to many of my projects. I designed aerc specifically to be
productive for this workflow, but there are a few extra things that I use in my
personal aerc configuration that I thought were worth sharing briefly. This blog
post will be boring and clerical, feel free to skip it unless it&amp;rsquo;s something
you&amp;rsquo;re interested in.&lt;/p&gt;
&lt;p&gt;When I want to review a patch, I first tell aerc to &lt;code&gt;:cd sources/&amp;lt;that project&amp;gt;&lt;/code&gt;, then I open up the patch and give it a read. If it needs work, I&amp;rsquo;ll
use &amp;ldquo;rq&amp;rdquo; (&amp;ldquo;reply quoted&amp;rdquo;), a keybinding which is available by default, to open
my editor with the patch pre-quoted to trim down and reply with feedback inline.
If it looks good, I use the first of my custom keybindings: &amp;ldquo;ga&amp;rdquo;, short for git
am. The entry in &lt;code&gt;~/.config/aerc/binds.conf&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ga = :pipe -mb git am -3&amp;lt;Enter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This pipes the entire message (-m, in case I&amp;rsquo;m viewing a message part) into &lt;code&gt;git am -3&lt;/code&gt; (-3 uses a three-way merge, in case of conflicts), in the background
(-b). Then I&amp;rsquo;ll use C-t (ctrl-T), another keybinding which is included by
default, to open a terminal tab in that directory, where I can compile the code,
run the tests, and so on. When I&amp;rsquo;m done, I use the &amp;ldquo;gp&amp;rdquo; keybinding to push the
changes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gp = :term git push&amp;lt;Enter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This runs the command in a new terminal, so I can monitor the progress. Finally,
I like to reply to the patch, letting the contributor know their work was merged
and thanking them for the contribution. I have a keybinding for this, too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rt = :reply -Tthanks&amp;lt;Enter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;My &amp;ldquo;thanks&amp;rdquo; template is at &lt;code&gt;~/.config/aerc/templates/thanks&lt;/code&gt; and looks like
this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Thanks!

{% raw %}
{{exec &amp;quot;{ git remote get-url --push origin;
    git reflog -2 origin/master --pretty=format:%h; }
  | xargs printf &#39;To %s\n   %s..%s  master -&amp;gt; master\n&#39;&amp;quot; &amp;quot;&amp;quot;}}
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That git command prints a summary of the most recent push to master. The result
is that my editor is pre-filled with something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Thanks!

To git@git.sr.ht:~sircmpwn/builds.sr.ht
   7aabe74..191f4a0  master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I occasionally append a few lines asking questions about follow-up work or
clarifying the deployment schedule for the change.&lt;/p&gt;
</description>
    </item><item>
      <title>Status update, April 2020</title>
      <link>./2020/04/15/Status-update-April-2020.html</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/04/15/Status-update-April-2020.html</guid>
      <description>&lt;p&gt;Wow, it&amp;rsquo;s already time for another status update? I&amp;rsquo;m starting to lose track of
the days stuck inside. I have it easier than many - I was already used to
working from home before any of this began. But, weeks and weeks of not spending
IRL time with anyone else is starting to get to me. Remember to call your
friends and family and let them know how you&amp;rsquo;re doing. Meanwhile, I&amp;rsquo;ve had a
productive month - let&amp;rsquo;s get you up to date!&lt;/p&gt;
&lt;p&gt;In the Wayland world, I&amp;rsquo;ve made some more progress on the book. The input
chapter is now finished, including the example code. The main things which
remain to be written are the XDG positioner section (which I am dreading), drag
and drop, and protocol extensions. On the code side of things, wlroots continues
to see gradual improvements — the DRM (not the bad kind) implementation
continues to see improvements, expanding to more and more use-cases with even
better performance. Sway has also seen little bug fixes here and there, and
updates to keep up with wlroots.&lt;/p&gt;
&lt;p&gt;For my part, I&amp;rsquo;ve mostly been focused on SourceHut and Secret Project this
month. On the SourceHut side of things, I&amp;rsquo;ve been working on hub.sr.ht, and on
an experimental GraphQL-based API for git.sr.ht. The former is progressing quite
well, and I hope to ship an early version before the next status update. As for
the latter, it&amp;rsquo;s still very experimental, but I am optimistic about it. I have
felt that the current REST API design was less than ideal, and the best time to
change it would be during the alpha. The GraphQL design, while it has its
limitations, is a lot better than the REST design and should make it a lot
easier for services to interop with each other - which is a core design need for
sr.ht.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a little demo of hub.sr.ht as of a few weeks ago to whet your appetite:&lt;/p&gt;
&lt;video src=&#34;https://yukari.sr.ht/hub.sr.ht.webm&#34; muted autoplay loop controls&gt;
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
&lt;/video&gt;
&lt;p&gt;As far as the secret project is concerned, here&amp;rsquo;s another teaser:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn printf (fmt: str, ...) int;

fn f (ptr: &amp;amp;int) int =
{
	let x: int = *ptr;
	free ptr;
	printf(&amp;quot;value: %d\n&amp;quot;, x)
};

export fn main int =
{
	let x = alloc &amp;amp;int 10;
	f(^x);
	0
};
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ [redacted] -o example [redacted...]
$ ./example
value: 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s all for today! I&amp;rsquo;ll see you again next month. Thank you for your support!&lt;/p&gt;
</description>
    </item><item>
      <title>My unorthodox, branchless git workflow</title>
      <link>./2020/04/06/My-weird-branchless-git-workflow.html</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/04/06/My-weird-branchless-git-workflow.html</guid>
      <description>&lt;p&gt;I have been using git for a while, and I took the time to learn about it in
great detail. Equipped with an understanding of its internals and a comfortable
familiarity with tools like &lt;a href=&#34;https://git-rebase.io&#34;&gt;git rebase&lt;/a&gt; — and a
personal, intrinsic desire to strive for minimal and lightweight solutions
— I have organically developed a workflow which is, admittedly, somewhat
unorthodox.&lt;/p&gt;
&lt;p&gt;In short, I use git branches very rarely, preferring to work on my local master
branch almost every time. When I want to work on multiple tasks in the same
repository (i.e. often), I just&amp;hellip; work on all of them on master. I waste no
time creating a new branch, or switching to another branch to change contexts; I
just start writing code and committing changes, all directly on master,
intermixing different workstreams freely.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; This reduces my startup time to
zero, both for starting new tasks and revisiting old work.&lt;/p&gt;
&lt;p&gt;When I&amp;rsquo;m ready to present some or all of my changes to upstream, I grab git
rebase and reorganize all of these into their respective features, bugfixes, and
so on, forming a series of carefully organized, self-contained patchsets. When I
receive feedback, I just start correcting the code right away, then fixup the
old commits during the rebase. Often, I&amp;rsquo;ll bring the particular patchset I&amp;rsquo;m
ready to present upstream to the front of my master branch at the same time, for
convenient access with &lt;a href=&#34;https://git-send-email.io&#34;&gt;git send-email&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I generally set my local master branch to track the remote master branch,&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; so
I can update my branch with &lt;code&gt;git pull --rebase&lt;/code&gt;.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; Because all of my
work-in-progress features are on the master branch, this allows me to quickly
address any merge conflicts with upstream for &lt;em&gt;all&lt;/em&gt; of my ongoing work at once.
Additionally, by keeping them all on the same branch, I can be assured that my
patches are mutually applicable and that there won&amp;rsquo;t be any surprise conflicts
in feature B after feature A is merged upstream.&lt;/p&gt;
&lt;p&gt;If I&amp;rsquo;m working on my own projects (where I can push to upstream master), I&amp;rsquo;ll
still be working on master. If I end up with a few commits queued up and I need
to review some incoming patches, I&amp;rsquo;ll just apply them to master, rebase them
behind my WIP work, and then use &lt;code&gt;git push origin HEAD~5:refs/heads/master&lt;/code&gt; to
send them upstream, or something to that effect.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; Bonus: this instantly
rebases my WIP work on top of the new master branch.&lt;/p&gt;
&lt;p&gt;This workflow saves me time in several ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No time spent creating new branches for new features.&lt;/li&gt;
&lt;li&gt;No time spent switching between branches to address feedback.&lt;/li&gt;
&lt;li&gt;All of my features are guaranteed to be mutually applicable to master, saving
me time addressing conflicts.&lt;/li&gt;
&lt;li&gt;Any conflicts with upstream are addressed in all of my workstreams at once,
without switching between branches or allowing any branch to get stale.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know that lightweight branches are one of git&amp;rsquo;s flagship features, but I don&amp;rsquo;t
really use them. I know it&amp;rsquo;s weird, sue me.&lt;/p&gt;
&lt;p&gt;Sometimes I do use branches, though, when I know that a workstream is going to
be a lot of work — it involves lots of large-scale refactoring, or will
take several weeks to complete. This isolates it from my normal workflow on
small-to-medium patches, acknowledging that the large workstream is going to be
more prone to conflicts. By addressing these separately, I don&amp;rsquo;t waste my time
fixing up the error-prone branch all the time while I&amp;rsquo;m working on my smaller
workstreams.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I will occasionally use &lt;code&gt;git add -p&lt;/code&gt; or even just &lt;code&gt;git commit -p&lt;/code&gt; to quickly separate any changes in my working directory into separate commits for their respective workstreams, to make my life easier later on. This is usually the case when, for example, I have to fix problem A before I can address problem B, and additional issues with problem A are revealed by my work on problem B. I just fix them right away, &lt;code&gt;git commit -p&lt;/code&gt; the changes separately, then file each commit into their respective patchsets later. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;What?&amp;rdquo; Okay, so in git, you have &lt;em&gt;local&lt;/em&gt; branches and &lt;em&gt;remote&lt;/em&gt; branches.  The default behavior is reasonably sane, so I would forgive you for not noticing. Your local branches can &lt;em&gt;track&lt;/em&gt; remote branches, so that when you &lt;code&gt;git pull&lt;/code&gt; it automatically updates any local &lt;em&gt;tracking branches&lt;/em&gt;. &lt;code&gt;git pull&lt;/code&gt; is actually equivalent to doing &lt;code&gt;git fetch&lt;/code&gt; and then &lt;code&gt;git merge origin/master&lt;/code&gt; assuming that the current branch (your &lt;em&gt;local&lt;/em&gt; master) is &lt;em&gt;tracking&lt;/em&gt; &lt;code&gt;origin/master&lt;/code&gt;. &lt;code&gt;git pull --rebase&lt;/code&gt; is the same thing, except it uses &lt;code&gt;git rebase&lt;/code&gt; instead of &lt;code&gt;git merge&lt;/code&gt; to update your local branch. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;In fact, I have &lt;code&gt;pull.rebase = true&lt;/code&gt; in my git config, which makes &lt;code&gt;--rebase&lt;/code&gt; the default behavior. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;What?&amp;rdquo; Okay, so &lt;code&gt;git push&lt;/code&gt; is shorthand for &lt;code&gt;git push origin master&lt;/code&gt;, if you have a tracking branch set up for your local master branch to &lt;code&gt;origin/master&lt;/code&gt;. But this itself is also shorthand, for &lt;code&gt;git push &amp;lt;remote&amp;gt; &amp;lt;local&amp;gt;:&amp;lt;remote&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;local&amp;gt;&lt;/code&gt; is the local branch you want to push, and &lt;code&gt;&amp;lt;remote&amp;gt;&lt;/code&gt; is the remote branch you want to update. But, remember that branches are just references to commits. In git, there are other ways to reference commits. &lt;code&gt;HEAD~5&lt;/code&gt;, for example, gets the commit which is 5 commits earlier than &lt;code&gt;HEAD&lt;/code&gt;, which is the commit you have checked out right now. So &lt;code&gt;git push origin HEAD~5:refs/for/master&lt;/code&gt; updates the &lt;code&gt;origin&lt;/code&gt;&amp;rsquo;s &lt;code&gt;refs/for/master&lt;/code&gt; reference (i.e. the master branch) to the local commit at &lt;code&gt;HEAD~5&lt;/code&gt;, pushing any commits that upstream master doesn&amp;rsquo;t also have in the process. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Designing and 3D printing a new part for my truck</title>
      <link>./2020/03/25/Designing-a-replacement-part-for-my-truck.html</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/03/25/Designing-a-replacement-part-for-my-truck.html</guid>
      <description>&lt;p&gt;I drove a car daily for many years while I was living in Colorado, California,
and New Jersey, but since I moved to Philadelphia I have not needed a car. The
public transit here is not great, but it&amp;rsquo;s good enough to get where I need to be
and it&amp;rsquo;s a lot easier than worrying about parking a car. However, in the past
couple of years, I have been moving more and more large server parts back and
forth to the datacenter for SourceHut. I&amp;rsquo;ve also developed an interest in
astronomy, which benefits from being able to carry large equipment to remote
places. These reasons, among others, put me into the market for a vehicle once
again.&lt;/p&gt;
&lt;p&gt;I think of a vehicle strictly as a functional tool. Some creature comforts are
nice, but I consider them optional. Instead, I prioritize utility. A truck makes
a lot of sense — lots of room to carry things in. And, given my expected
driving schedule of &amp;ldquo;not often&amp;rdquo;, I wasn&amp;rsquo;t looking to spend a lot of money or
get a loan. There are other concerns: modern cars are very complicated machines,
and many have lots of proprietary computerized components which make end-user
maintenance very difficult. Sometimes manufacturers even use cryptography and
legal threats to bring cars into their dealerships, bullying out third-party
repairs.&lt;/p&gt;
&lt;p&gt;To avoid these, I got an older truck: a 1984 Dodge D250. It&amp;rsquo;s a much simpler
machine than most modern cars, and learning how to repair and maintain it is
something I can do in my spare time.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s an old truck, and the previous owners were not negligent, but also didn&amp;rsquo;t
invest a lot of time or money in the vehicle&amp;rsquo;s upkeep. The first problem I hit
was the turn signal lever snapping and becoming slack, which I fixed by pulling
open the steering column, re-aligning the lever, and tightening an internal
screw. The more interesting problem, however, was this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://l.sr.ht/OWVw.jpg&#34; alt=&#34;Picture of a broken latch on the window over the truck bay&#34;&gt;&lt;/p&gt;
&lt;p&gt;This plastic part holds an arm in place, which is engaged by a lever in the
center of the window which folds closed over the truck bay. It&amp;rsquo;s used to hold
the window in place and provides a weak locking mechanism. When the arm is
allowed to move freely, it can clang around while I&amp;rsquo;m driving, and can make
opening the truck bay a frustrating procedure. I have been looking for a reason
to learn how to use &lt;a href=&#34;http://solvespace.com/index.pl&#34;&gt;solvespace&lt;/a&gt;, and this
seemed like a great start.&lt;/p&gt;
&lt;p&gt;I ordered a caliper&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and measured the dimensions of the broken part, and took
pictures of it from several angles for later reference. I took some notes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://l.sr.ht/20eR.jpg&#34; alt=&#34;Picture of my notes on the measurements of the part&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then, I used solvespace to design the following part:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://l.sr.ht/rVPV.png&#34; alt=&#34;Screenshot of the replacement part in solvespace&#34;&gt;&lt;/p&gt;
&lt;p&gt;This was the third iteration — I printed one version, brought it out to
the truck to compare with the broken part, made refinements to the design, then
rinse and repeat. Here&amp;rsquo;s an earlier revision being compared with the broken
piece:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://l.sr.ht/CUPM.jpg&#34; alt=&#34;A hand holds up a 3D printed part for comparison with the original&#34;&gt;&lt;/p&gt;
&lt;p&gt;Finally, I arrived at a design I liked and sent it to the printer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://l.sr.ht/xh9h.jpg&#34; alt=&#34;Picture of my 3D printer working on the part&#34;&gt;&lt;/p&gt;
&lt;p&gt;I took some pliers to the remaining plastic bits from the broken part, and sawed
off the rivets. I attached the replacement with superglue and ta-da!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://l.sr.ht/3AGi.jpg&#34; alt=&#34;Picture of the replacement part in place&#34;&gt;&lt;/p&gt;
&lt;p&gt;If the glue fails, I&amp;rsquo;ll drill out what&amp;rsquo;s left of the rivets and secure it with
screws. This may require another revision of the design, which will also give me
a chance to address some minor shortcomings. I don&amp;rsquo;t expect to need this,
though, because this is not part under especially high stress.&lt;/p&gt;
&lt;p&gt;You can get the CAD files and an STL from my &lt;a href=&#34;https://git.sr.ht/~sircmpwn/open-dodge-d250&#34;&gt;repository
here&lt;/a&gt;, which I intend to keep
updating as I learn more about this truck and encounter more fun problems to
solve.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Oh man, I&amp;rsquo;ve always wanted a caliper, and now I have an excuse! &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>The reckless, infinite scope of web browsers</title>
      <link>./2020/03/18/Reckless-limitless-scope.html</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/03/18/Reckless-limitless-scope.html</guid>
      <description>&lt;p&gt;Since the first browser war between Netscape and Internet Explorer, web browsers
have been using features as their primary means of competing with each other.
This strategy of unlimited scope and perpetual feature creep is reckless, and
has been allowed to go on for far too long.&lt;/p&gt;
&lt;p&gt;I used wget to download all 1,217 of the &lt;a href=&#34;https://www.w3.org/TR/&#34;&gt;W3C specifications&lt;/a&gt;
which have been published at the time of writing&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, of which web browsers need
to implement a substantial subset in order to provide a modern web experience.
I ran a word count on all of these specifications. How complex would you guess
the web is?&lt;/p&gt;
&lt;p&gt;The total word count of the W3C specification catalogue is 114 million words at
the time of writing. If you added the combined word counts of the C11, C++17,
UEFI, USB 3.2, and POSIX specifications, all 8,754 published RFCs, and the
combined word counts of everything on Wikipedia&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_longest_novels&#34;&gt;list of longest
novels&lt;/a&gt;, you would be 12 million words short of the W3C
specifications.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I conclude that &lt;strong&gt;it is impossible to build a new web browser&lt;/strong&gt;. The complexity
of the web is &lt;em&gt;obscene&lt;/em&gt;. The creation of a new web browser would be comparable
in effort to the Apollo program or the Manhattan project.&lt;/p&gt;
&lt;p&gt;It is impossible to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the web correctly&lt;/li&gt;
&lt;li&gt;Implement the web securely&lt;/li&gt;
&lt;li&gt;Implement the web &lt;strong&gt;at all&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Starting a bespoke browser engine with the intention of competing with Google or
Mozilla is a fool&amp;rsquo;s errand. The last serious attempt to make a new browser,
Servo, has become one part incubator for Firefox refactoring, one part
playground for bored Mozilla engineers to mess with technology no one wants, and
zero parts viable modern web browser. But WebVR is cool, right? Right?&lt;/p&gt;
&lt;p&gt;The consequences of this are obvious. Browsers are the most expensive piece of
software a typical consumer computer runs. They&amp;rsquo;re infamous for using all of
your RAM, pinning CPU and I/O, draining your battery, etc. &lt;em&gt;Web browsers are
responsible for more than 8,000 CVEs&lt;/em&gt;.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Because of the monopoly created by the insurmountable task of building a
competitive alternative, browsers have also been free to stop being the &amp;ldquo;user
agent&amp;rdquo; and start being the agents of their creators instead. Firefox is filling
up with ads, tracking, and mandatory plugins. Chrome is used as a means for
Google to efficiently track your eyeballs and muscle anti-technologies like DRM
and AMP into the ecosystem.  The browser duopoly is only growing stronger, too,
as Microsoft drops Edge and WebKit falls well behind its competition.&lt;/p&gt;
&lt;p&gt;The major projects are open source, and usually when an open-source project
misbehaves, we&amp;rsquo;re able to fork it to offer an alternative. But even this
is an impossible task where web browsers are concerned. The number of W3C
specifications grows at an average rate of 200 new specs per year, or about 4
million words, or about one POSIX every 4 to 6 months. How can a new team
possibly keep up with this on top of implementing the outrageous scope web
browsers already have &lt;em&gt;now&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;The browser wars have been allowed to continue for far too long. They should
have long ago focused on competing in terms of performance and stability, not in
adding new web &amp;ldquo;features&amp;rdquo;. This is absolutely ridiculous, and it has to stop.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I have prepared a write-up on &lt;a href=&#34;https://paste.sr.ht/~sircmpwn/13c1951014a256e9f551296a129bf6d10e9303dc&#34;&gt;how I arrived at these word counts&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Not counting WebGL, which is maintained by Khronos. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;You could fit the 5,038 page Intel x86 ISA manual into the remainder, six times. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Combined search results for CVEs mentioning &amp;ldquo;firefox&amp;rdquo;, &amp;ldquo;chrome&amp;rdquo;, &amp;ldquo;safari&amp;rdquo;, and &amp;ldquo;internet explorer&amp;rdquo;, on cve.mitre.org. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>GitHub&#39;s new notifications: a case of regressive design</title>
      <link>./2020/03/13/GitHub-notifications.html</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/03/13/GitHub-notifications.html</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer: I am the founder of a company which competes with GitHub. However,
I still use tools like GitHub, GitLab, and so on, as part of regular
contributions to projects all over the FOSS ecosystem. I don&amp;rsquo;t dislike GitHub,
and I use it frequently in my daily workflow.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GitHub is rolling out a new notifications UI. A few weeks ago, I started seeing
the option to try it. Yesterday, I received a warning that the old UI will soon
be deprecated. At this pace, I would not be surprised to see the new UI become
mandatory in a week or two. I&amp;rsquo;m usually optimistic about trying out new
features, but this change worried me right away. I still maintain a few projects
on GitHub, and I frequently contribute to many projects there. Using the
notification page to review these projects is a ritual I usually conduct several
times throughout the workday. So, I held my breath and tried it out.&lt;/p&gt;
&lt;p&gt;The new UI looks a lot more powerful initially. The whole page is used to
present your notifications, and there are a lot more buttons to click, many of
them with cute emojis to quickly convey meaning. The page is updated in
real-time, so as you interact with the rest of the website your notifications
page in the other tab will be updated accordingly.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s stop and review my workflow using the &lt;em&gt;old&lt;/em&gt; UI. I drew this beautiful
graphic up in GIMP to demonstrate:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cmpwn.com/system/media_attachments/files/000/659/354/original/d9abc4befe1a074c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I open the page, then fix my eyes on the notification titles. I move my mouse to
the right, and while reading titles I move the mouse down, clicking to mark any
notifications as read that I don&amp;rsquo;t need to look at, and watching in my
peripheral vision to see that the mouse hits its mark over the next button. The
notifications are grouped by repository, so I can read the name of the repo then
review all of its notifications in one go. The page is fairly narrow, so reading
the titles usually leads my eyes naturally into reading any other information I
might need, like the avatars of participants or age of the notification.&lt;/p&gt;
&lt;p&gt;I made an equally beautiful picture for the new UI&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cmpwn.com/system/media_attachments/files/000/659/353/original/b15f20de0ae35cd3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This one is a lot harder to scan quickly or get into your muscle memory. The
title of the notification no longer stands out, as it&amp;rsquo;s the same size as the
name of the repo that was affected. They&amp;rsquo;re no longer grouped by repo, either,
so I have to read both every time to get the full context. I then have to move
my eyes &lt;em&gt;all the way&lt;/em&gt; across the page to review any of those other details,
through vast fields of whitespace, where I can easily lose my place and end up
on a different row.&lt;/p&gt;
&lt;p&gt;Once I&amp;rsquo;ve decided what to do with it, I have to move my mouse over the row, and
wait for the action buttons to appear. They were invisible a second ago, so I
have to move my mouse again to get closer to the target. Clicking it will mark
it as read. Then, because I have it filtered to unread (because &amp;ldquo;all&amp;rdquo;
notifications is really &lt;em&gt;all&lt;/em&gt; notifications, and there&amp;rsquo;s no &amp;ldquo;new&amp;rdquo; notifications
like the old UI had), the row disappears, making it difficult to undo if it was
a mistake. Then I heave my eyes to the left again to read the next one.&lt;/p&gt;
&lt;p&gt;This page is updated in real-time. In the old UI, after I had marked everything
as read that I didn&amp;rsquo;t need to look at, I would middle click on each remaining
notification to open it in a new tab. On the new real-time page, as soon as the
other tab loads, the notification I clicked disappears (again, because I have it
filtered to &amp;ldquo;unread&amp;rdquo;). This isn&amp;rsquo;t immediate, though — it takes at least as
long as it takes for the new tab to load. Scanning the list and middle-clicking
every other message becomes a Sisyphean task.&lt;/p&gt;
&lt;p&gt;And the giant sticky header that follows you around! A whole 160 pixels, 14% of
my vertical space, is devoted to a new header which shows up on the next page
when I follow through a notification. And it&amp;rsquo;s implemented with JavaScript and
done in a bizzare way, so writing a user style to get rid of it was rather
difficult.&lt;/p&gt;
&lt;p&gt;Aside: I tried adding a custom filter to show only pull requests, but it seems
to silently fail, and I just see all of my notifications when I use it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Anyway, we&amp;rsquo;re probably stuck with this. Now that they&amp;rsquo;ve announced the imminent
removal of the old UI, we can probably assume that this feature is on the
non-stop release train. Negative feedback almost never leads to cancelling the
roll-out of a change, because the team&amp;rsquo;s pride is on the line.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t spoken to anyone who likes the new UI. Do you?&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Both of these pictures were sent to GitHub as feedback on the feature, three weeks ago. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>An open letter to Senator Bob Casey on end-to-end encryption</title>
      <link>./2020/03/07/Open-letter-to-Senator-Casey.html</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/03/07/Open-letter-to-Senator-Casey.html</guid>
      <description>&lt;p&gt;To Senator Bob Casey, I&amp;rsquo;m writing this open letter.&lt;/p&gt;
&lt;p&gt;As your constituent, someone who voted for you in 2018, and an expert in
software technology, I am disappointed in your support of the EARN IT Act. I am
aware that encryption is a challenging technology to understand, even for us
software engineers, and that it raises difficult problems for the legislature.
The EARN IT Act does not protect our children, and it has grave implications for
the freedoms of our citizens.&lt;/p&gt;
&lt;p&gt;The mathematics underlying strong end-to-end encryption have been proven to be
unbreakable. Asking service providers to solve them or stop using it is akin to
forcing us to solve time travel or quit recording history. Banning the use of a
technology without first accomplishing a sisyphean task is equivalent to banning
the technology outright. Ultimately, these efforts are expensive and futile. The
technology necessary to implement unbreakable encryption can be described
succinctly on a single 8.5&amp;quot;x11&amp;quot; sheet of paper. I would be happy to send such a
paper to your office, if you wish. The cat is out of the bag: encryption is not
a secret, and its use to protect our citizens is a widespread industry standard.
Attempting to ban it is equivalent to trying to ban algebra or trigonometry.&lt;/p&gt;
&lt;p&gt;Citizen use of end-to-end encryption is necessary to uphold our national
security. One way that child abuse material is often shared is via the Tor
secure internet network. This system utilizes strong end-to-end encryption to
secure the communications of its users, which makes it well-suited to hiding
the communications of child abusers. However, the same guarantees that enable
the child abusers to securely share materials are also essential for
journalists, activists, watchdog groups - and for our national security. The
technology behind Tor was designed by the US Navy and DARPA and the ability for
the public to use it to secure their communications is essential to the
network&amp;rsquo;s ability to delivery on its national security guarantees as well.&lt;/p&gt;
&lt;p&gt;Protecting our children is important, but this move doesn&amp;rsquo;t help. Breaking
end-to-end encryption is no substitute for good police work and effective
courts. Banning end-to-end encryption isn&amp;rsquo;t going to make it go away - the
smart criminals are still going to use it to cover their tracks, and law
enforcement still needs to be prepared to solve cases with strong encryption
involved. Even on the Tor network, where strong end-to-end encryption is
utilized, many child abusers have been caught and brought to justice thanks to
good investigative work. It&amp;rsquo;s often difficult to conduct an investigation within
the limits of the law and with respect to the rights of our citizens, but it&amp;rsquo;s
necessary for law enforcement to endure this difficulty to protect our freedom.&lt;/p&gt;
&lt;p&gt;End-to-end encryption represents an important tool for the preservation of our
fundamental rights, as enshrined in the bill of rights. Time and again, our
alleged representatives levy attacks on this essential technology. It doesn&amp;rsquo;t
get any less important each time it&amp;rsquo;s attacked - rather, the opposite seems to
be true. On the face of it, the EARN IT Act appears to use important and morally
compelling problems of child abuse as a front for an attack on end-to-end
encryption. Using child abuse as a front to attack our fundamental right to
privacy is reprehensible, and I&amp;rsquo;m sure that you&amp;rsquo;ll reconsider your position.&lt;/p&gt;
&lt;p&gt;As freedom of the press is an early signal for the failure of democracy and rise
of tyranny, so holds for the right to encrypt. I am an American, I am free to
speak my mind. I am free to solve a simple mathematical equation which
guarantees that my thoughts are shared only with those I choose. The right to
private communications is essential to a functioning democracy, and if you claim
to represent the American people, you must work to defend that right.&lt;/p&gt;
</description>
    </item><item>
      <title>The Abiopause</title>
      <link>./2020/03/03/Abiopause.html</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/03/03/Abiopause.html</guid>
      <description>&lt;p&gt;The sun has an influence on its surroundings. One of these is in the form of
small particles that are constantly ejected from the sun in all directions,
which exerts an outward pressure, creating an expanding sphere of particles that
moves away from the sun. These particles are the solar wind. As the shell of
particles expands, the density (and pressure) falls. Eventually the solar wind
reaches the &lt;em&gt;interstellar medium&lt;/em&gt; — the space between the stars —
which, despite not being very dense, is not empty. It exerts a pressure that
pushes inwards, towards the sun.&lt;/p&gt;
&lt;p&gt;Where the two pressures balance each other is an interesting place. The sphere
up to this point is called the &lt;em&gt;heliosphere&lt;/em&gt; — which can be roughly
defined as the zone in which the influence of the sun is the dominant factor.
The &lt;em&gt;termination shock&lt;/em&gt; is where the change starts to occur. The plasma from the
sun slows, compresses, and heats, among other changes. The physical interactions
here are interesting, but aren&amp;rsquo;t important to the metaphor. At the
termination shock begins the &lt;em&gt;heliosheath&lt;/em&gt;. This is a turbulent place where
particles from the sun and from the interstellar medium mix. The interactions in
this area are complicated and interesting, you should read up about it later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://legacy.sr.ht/_FIT.svg&#34; alt=&#34;Picture of a faucet pouring into a sink&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;text-center&#34;&gt;
  &lt;small&gt;Yanpas via Wikimedia Commons, CC-BY-SA&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;Finally, we reach the &lt;em&gt;heliopause&lt;/em&gt;, beyond which the influence of the
interstellar medium is dominant. Once crossing this threshold, you are said to
have left the solar system. The Voyager 1 space probe, the first man-made object
to leave the solar system, crossed this point on August 25th, 2012. Voyager 2
completed the same milestone on November 12th, 2018&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;In the world of software, the C programming language clearly stands out as the
single most important and influential programming language.  Everything
forming the critical, foundational parts of your computer is written in it:
kernels, drivers, compilers, interpreters, runtimes, hypervisors, databases,
libraries, and more are almost all written in C.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; For this reason, any
programming language which wants to get anything useful done is certain to
support a C FFI (foreign function interface), which will allow programmers to
communicate with C code from the comfort of a high-level language. No other
language has the clout or ubiquity to demand this level of deference from
everyone else.&lt;/p&gt;
&lt;p&gt;The way that an application passes information back and forth with its
subroutines is called its &lt;em&gt;ABI&lt;/em&gt;, or application binary interface. There are a
number of ABIs for C, but the most common is the System-V ABI, which is used on
most modern Unix systems. It specifies details like which function parameters to
put in which registers, what goes on the stack, the structure and format of
these values, and how the function returns a value to the caller. In order to
interface with C programs, the FFI layers in other programs have to utilize this
ABI to pass information to and from C functions.&lt;/p&gt;
&lt;p&gt;Other languages often have their own ABIs. C, being a different programming
language from $X, naturally has different semantics. The particular semantics of
C don&amp;rsquo;t necessarily line up to the semantics the language designers want $X to
have, so the typical solution is to define functions with C &amp;ldquo;linkage&amp;rdquo;, which
means they&amp;rsquo;re called with the C ABI. It&amp;rsquo;s from this that we get keywords like
&lt;code&gt;extern &amp;quot;C&amp;quot;&lt;/code&gt; (C++, Rust), &lt;code&gt;export&lt;/code&gt; in Go, &lt;code&gt;[DllImport]&lt;/code&gt; in C#, and so on.
Naturally, these keywords come with a lot of constraints on how the function
works, limiting the user to the mutually compatible subset of the two ABIs, or
else using some kind of translation layer.&lt;/p&gt;
&lt;p&gt;I like to think of the place where this happens as the &amp;ldquo;abiopause&amp;rdquo;, and draw
comparisons with the solar system&amp;rsquo;s heliopause. Within the &amp;ldquo;abiosphere&amp;rdquo;, the
programming language you&amp;rsquo;re using is the dominant influence. The idioms and
features of the language are used to their fullest extent to write idiomatic
code. However, the language&amp;rsquo;s sphere of influence is but a bubble in a sea of C
code, and the interface between these two areas of influence is often quite
turbulent. Directly using functions with C linkage from the abiosphere is not
pleasant, as the design of good C APIs do not match the semantics of good
$X APIs. Often there are layers to this transition, much like our solar
system, where some attempt is made to wrap the C interface in a more idiomatic
abstraction.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t really like this boundary, and I think most programmers who have worked
here would agree. If you like C, you&amp;rsquo;re stuck either writing bad C code or using
poorly-suited tools to interface badly with an otherwise good API. If you like
$X, you&amp;rsquo;re stuck writing very non-idiomatic $X code to interface with a foreign
system. I don&amp;rsquo;t know how to fix this, but it&amp;rsquo;s interesting to me that the
&amp;ldquo;abiopause&amp;rdquo; appears to be an interface full of a similar turbulence and
complexity as we find in the heliopause.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;It took longer because Voyager 2 went on to see Uranus and Neptune. Voyager 1 just swung around Saturn and was shot directly up and out of the solar system. Three other man-made objects are currently on trajectories which will leave the solar system. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Even if you don&amp;rsquo;t like C, it would be ridiculous to dismiss its influence and importance. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Thoughts on performance &amp; optimization</title>
      <link>./2020/02/21/Thoughts-on-performance.html</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/02/21/Thoughts-on-performance.html</guid>
      <description>&lt;p&gt;The idea that programmers ought to or ought not to be called &amp;ldquo;software
engineers&amp;rdquo; is a contentious one. How you approach optimization and performance
is one metric which can definitely push my evaluation of a developer towards the
engineering side. Unfortunately, I think that a huge number of software
developers today, even senior ones, are approaching this problem poorly.&lt;/p&gt;
&lt;p&gt;Centrally, I believe that you cannot effectively optimize a system which you do
not understand. Say, for example, that you&amp;rsquo;re searching for a member of a
linked list, which is an O(n) operation. You know this can be improved by
switching from a linked list to a sorted array and using a binary search. So,
you spend a few hours refactoring, commit the implementation, and&amp;hellip; the
application is no faster. What you failed to consider is that the lists are
populated from data received over the network, whose latency and bandwidth
constraints make the process much slower than any difference made by the kind of
list you&amp;rsquo;re using.  If you&amp;rsquo;re not optimizing your bottleneck, then you&amp;rsquo;re
wasting your time.&lt;/p&gt;
&lt;p&gt;This example seems fairly obvious, and I&amp;rsquo;m sure you, our esteemed reader, would
not have made this mistake. In practice, however, the situation is usually more
subtle. Thinking about your code really hard, making assumptions, and then
acting on them is not the most effective way to make performance improvements.
Instead, we apply the scientific method: we think really hard, &lt;em&gt;form a
hypothesis&lt;/em&gt;, make predictions, test them, and then apply our conclusions.&lt;/p&gt;
&lt;p&gt;To implement this process, we need to describe our performance in factual terms.
All software requires a certain amount of resources — CPU time, RAM, disk
space, network utilization, and so on. These can also be described over time,
and evolve as the program takes on different kinds of work. For example, we
could model our program&amp;rsquo;s memory use as bytes allocated over time, and perhaps
we can correlate this with different stages of work — &amp;ldquo;when the program
starts task C, the rate of memory allocation increases by 5MiB per second&amp;rdquo;. We
identify bottlenecks — &amp;ldquo;this program&amp;rsquo;s primary bottleneck is disk I/O&amp;rdquo;.
When we hit performance problems, then we know that we need to upgrade to SSDs,
or predict what reads will be needed later and prep them in advance, cache data
in RAM, etc.&lt;/p&gt;
&lt;p&gt;Good optimizations are based on factual evidence that the program is not
operating within its constraints in certain respects, then improving on those
particular problems. You should always conduct this analysis before trying to
solve your problems. I generally recommend conducting this analysis in advance,
so that you can predict performance issues before they occur, and plan for them
accordingly. For example, if you know that your disk utilization grows by 2 GiB
per day, and you&amp;rsquo;re on a 500 GiB hard drive, you&amp;rsquo;ve got about 8 months to plan
your next upgrade, and you shouldn&amp;rsquo;t be surprised by an ENOSPC when the time
comes.&lt;/p&gt;
&lt;p&gt;For CPU bound tasks, this is also where a general understanding of the
performance characteristics of various data structures and algorithms is useful.
When you know you&amp;rsquo;re working on something which &lt;em&gt;will become&lt;/em&gt; the application&amp;rsquo;s
bottleneck, you would be wise to consider algorithms which can be implemented
efficiently. However, it&amp;rsquo;s equally important to re-prioritize performance when
you&amp;rsquo;re not working on your bottlenecks, and instead consider factors like
simplicity and conciseness more seriously.&lt;/p&gt;
&lt;p&gt;Much of this will probably seem obvious to many readers. Even so, I think the
general wisdom described here is institutional, so it&amp;rsquo;s worth writing down. I
also want to call out some specific behaviors that I see in software today which
I think don&amp;rsquo;t take this well enough into account.&lt;/p&gt;
&lt;p&gt;I opened by stating that I believe that you cannot effectively optimize a system
which you do not understand. There are two groups of people I want to speak to
with this in mind: library authors (especially the standard library), and
application programmers. There are some feelings among library authors that
libraries should be fairly opaque, and present high-level abstractions over
their particular choices of algorithms, data structures, and so on. I think this
represents a fundamental lack of trust with the programmer downstream. Rather
than write idiot-proof abstractions, I think it&amp;rsquo;s better to trust the downstream
programmer, explain to them how your system works, and equip them with the tools
to audit their own applications. After all: your library is only a small
component of &lt;em&gt;their&lt;/em&gt; system, not yours — and you cannot optimize a system
you don&amp;rsquo;t understand.&lt;/p&gt;
&lt;p&gt;And to the application programmer, I urge you to meet your dependencies in the
middle. Your entire system is your responsibility, including your dependencies.
When the bottleneck lies in someone else&amp;rsquo;s code, you should be prepared to dig
into their code, patch it, and send a fix upstream, or to restructure your code
to route the bottleneck out. Strive to understand how your dependencies, up to
and including the stdlib, compiler, runtime, kernel, and so on, will perform in
your scenario. And again to the standard library programmer: help them out by
making your abstractions thin, and your implementations simple and debuggable.&lt;/p&gt;
</description>
    </item><item>
      <title>Fucking laptops</title>
      <link>./2020/02/18/Fucking-laptops.html</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/02/18/Fucking-laptops.html</guid>
      <description>&lt;p&gt;The best laptop ever made is the ThinkPad X200, and I have two of them. The
caveats are: I get only 2-3 hours of battery life even with conservative use;
and it struggles to deal with 1080p videos.&lt;/p&gt;
&lt;p&gt;The integrated GPU, Bluetooth and WiFi, internal sensors, and even the
fingerprint reader can all be driven by the upstream Linux kernel. In fact, the
hardware is so well understood that I have successfully used almost all of the
laptop&amp;rsquo;s features on Linux, FreeBSD, NetBSD, Minix, Haiku, and Plan 9. Plan
fucking 9. It can run coreboot, too. The back of the laptop has all of the
screws (Phillips head) labelled so you know which to remove to service which
parts. User replacable parts include the screen, keyboard (multiple layouts are
available and are interchangeable), the RAM, hard drive (I put a new SSD in one
of mine a few weeks ago, and it took about 30 seconds) — actually, there
are a total of 26 replacable parts in this laptop.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; There is a detailed
278-page service manual to assist you or your local repair tech in addressing
any problems that arise.&lt;/p&gt;
&lt;p&gt;They&amp;rsquo;re quite durable, too. Mine still looks like it just rolled off the
assembly line yesterday. In fact, it was built 12 years ago.&lt;/p&gt;
&lt;p&gt;The X200 was made in 2008. In the time since, the modern laptops&#39; battery life
and video decoding performance has improved. In every other respect, the market
is regressive, half-assed garbage.&lt;/p&gt;
&lt;p&gt;I am usually near power, so I&amp;rsquo;ve been reasonably happy even with the pithy
battery life of the X200. I also have a T520, which sucks in its own way&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;,
but can decode 1080p videos just fine. I generally don&amp;rsquo;t need a lot of power -
compiling most programs is fast enough that I don&amp;rsquo;t really notice, especially
with incremental compilation, and for any large workloads I just SSH out into a
build server somewhere. However, I&amp;rsquo;ve been planning some astronomy outings
lately, and the battery life matters for this - so I was looking for a laptop I
could run &lt;a href=&#34;https://stellarium.org/&#34;&gt;Stellarium&lt;/a&gt; on to drive my telescope into
the wee hours of the night.&lt;/p&gt;
&lt;p&gt;It has since come to my attention that in 2020, every laptop &lt;em&gt;still&lt;/em&gt; fucking
sucks. Even the ones people pretend to like have crippling, egregious flaws. The
Dell XPS series has a firmware so bad that its engineers should be strung up in
the town square for building it - if yours works, it&amp;rsquo;s because you were &lt;em&gt;lucky&lt;/em&gt;.
System76 laptops are bulky and priced at 2x or 3x what they&amp;rsquo;re worth. Same goes
for Purism, plus a company I have no desire to support any longer, and they&amp;rsquo;re
out of stock anyway. Pine64 requires nonfree blobs, patched kernels, and booting
up ARM devices is a fucking nightmare, and they&amp;rsquo;re out of stock anyway. The Star
Lite looks promising, but they&amp;rsquo;re out of stock too. Huewei laptops are shameless
Macbook ripoffs with the same shitty keyboards, and you can&amp;rsquo;t buy them in the US
anyway. Speaking of Macbooks, even Apple fanboys are fed up with them these
days.&lt;/p&gt;
&lt;p&gt;The laptop market is in an atrocious state, folks. If you work at any of these
companies and you&amp;rsquo;re proud of the garbage you&amp;rsquo;re shipping, then I&amp;rsquo;m disappointed
in you. Come on, let&amp;rsquo;s get our shit together and try to make a laptop which is
&lt;em&gt;at least&lt;/em&gt; as good as the 12 year-old one I&amp;rsquo;m stuck with now.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Which just means you can basically take the entire thing apart and replace almost any part. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;It barely gets an hour and a half of battery life on a good day. And there&amp;rsquo;s an Nvidia optimus GPU, which is just, ugh. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, February 2020</title>
      <link>./2020/02/15/Status-update-February-2020.html</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/02/15/Status-update-February-2020.html</guid>
      <description>&lt;p&gt;Today I thought it&amp;rsquo;d try out something new: I have an old family recipe
simmering on the stove right now, but instead of beef I&amp;rsquo;m trying out impossible
beef. It cooked up a bit weird — it doesn&amp;rsquo;t brown up in the same way I
expect of ground beef, and it made a lot more fond than I expected. Perhaps the
temperature is too high? We&amp;rsquo;ll see how it fares when it&amp;rsquo;s done. In the
meanwhile, let&amp;rsquo;s get you up to speed on my free software projects.&lt;/p&gt;
&lt;p&gt;First, big thanks to everyone who stopped by to say &amp;ldquo;hello&amp;rdquo; at FOSDEM! Putting
faces to names and getting to know everyone on a personal level is really
important to me, and I would love FOSDEM even if that was all I got out of it.
Got a lot of great feedback on the coming plans for SourceHut and aerc, too.&lt;/p&gt;
&lt;p&gt;That aside, what&amp;rsquo;s new? On the Wayland scene, the long-promised Sway 1.3^W1.4
was finally released, and with it wlroots 0.10.0. I&amp;rsquo;ve been talking it up for a
while, so I won&amp;rsquo;t bore you by re-listing all of the cool stuff in this release -
it&amp;rsquo;ll suffice to say that I think you&amp;rsquo;ll enjoy it. The related tools —
swayidle, swaylock, swaybg — all saw releases around the same time. The
other release this month was scdoc 1.10.1, which was a simple patch release.
Beyond releases, there&amp;rsquo;s been some Wayland development work as well: wev
received a simple bugfixes, and casa&amp;rsquo;s OpenGL-based renderer rewrite has been
completed nicely.&lt;/p&gt;
&lt;p&gt;aerc progresses nicely this month as well, thanks to the support of its many
dedicated contributors. Many bugfixes have landed, alongside contextual
configuration options — so you can have different config settings, for
example, when you have an email selected whose subject line matches a regex. A
series of notmuch patches should be landing soon as well. himitsu has also seen
slow progress — this pace being deliberate, as this is security-sensitive
software. Several bugs have been fixed in the existing code, but there are a few
more to address still. imrsh also had a little bit of improvement this month,
as I started down the long road towards properly working UTF-8 support.&lt;/p&gt;
&lt;p&gt;SourceHut improvements have also landed recently. I did some work shoring up our
accessibility standards throughout the site, and SourceHut is now fully
complaint with the WCAG accessibility guidelines. We now score 100% on standard
performance, accessibility, and web standards compliance tests. SourceHut is the
lightest weight, most usable forge. I recently fixed a bug report from a Lynx,
user, too 😉 In terms of feature development, the big addition this month is
support for attaching files to annotated git tags, so you can attach binaries,
PGP signatures, and so on to your releases. More cool SourceHut news is coming
in the post to sr.ht-announce later today.&lt;/p&gt;
&lt;p&gt;This month&amp;rsquo;s update is a little bit light on content, I&amp;rsquo;ll admit. Between FOSDEM
and taking some personal time, I&amp;rsquo;ve had less time for work this month. However,
there&amp;rsquo;s another reason: I have a new secret project which I&amp;rsquo;ve been working on.
I intend to keep this project under wraps for a while still, because I don&amp;rsquo;t
want people to start using it before I know if it&amp;rsquo;s going to pan out or not.
This project is going to take a lot of time to complete, so I hope you&amp;rsquo;ll bear
with me for a while and trust that the results will speak for themselves. As
always, thank you for your support, and I&amp;rsquo;m looking forward to another month of
awesome FOSS work.&lt;/p&gt;
</description>
    </item><item>
      <title>Dependencies and maintainers</title>
      <link>./2020/02/06/Dependencies-and-maintainers.html</link>
      <pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/02/06/Dependencies-and-maintainers.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;m 34,018 feet over the Atlantic at the moment, on my way home from FOSDEM. It
was as always a lovely event, with far too many events of interest for any
single person to consume. One of the few talks I was able to attend&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; left a
persistent worm of thought in my brain. This talk was put on by representatives
of Microsoft and GitHub and discusses whether or not there is a sustainability
problem in open source (&lt;a href=&#34;https://fosdem.org/2020/schedule/event/foss_sustainability_issues/&#34;&gt;link&lt;/a&gt;). The content of the talk,
interpreted within the framework in which it was presented, was moderately
interesting. It was more fascinating to me, however, as a lens for interpreting
GitHub&amp;rsquo;s (and, indirectly, Microsoft&amp;rsquo;s) approach to open source, and of the
mindset of developers who approach problems in the same ways.&lt;/p&gt;
&lt;p&gt;The presenters drew attention to a few significant crises open-source
communities have faced in recent years — left-pad, in which a trivial
library was removed from npm and was unknowingly present in thousands of
dependency graphs; event-stream, in which a maintainer transferred project
ownership to an unknown individual who added crypto mining; and heartbleed, in
which a bug in a critical security library caused mass upgrades and panic
— and asks whether or not these can be considered sustainability issues.
The talk has a lot to dissect and will frame my thinking and writings for a
while. Today I&amp;rsquo;ll focus on one specific problem, which I called attention to
during the Q&amp;amp;A.&lt;/p&gt;
&lt;p&gt;At a few points, the presenters spoke from the perspective of a business which
depends on up to thousands of open-source libraries or tools. In such a context,
how do you prioritize which of your thousands of dependencies requires
attention, for financial support, contributions upstream, and so on? I found
this worldview dissonant, and asked the following question: &amp;ldquo;why do you have
thousands of dependencies in the first place?&amp;rdquo; Because this approach seems to be
fast becoming the norm, this may seem like a stupid question.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; If any Node
developers are reading, scan through your nearest node_modules directory and see
how many of these dependencies you&amp;rsquo;ve even heard of.&lt;/p&gt;
&lt;p&gt;Such an environment is primed to fail in the ways enumerated by this talk.
Consider the case of the maintainer who lost interest and gave their project to
an untrusted third party. If I had depended on this library, I would have
noticed long ago that the project was effectively unmaintained. It&amp;rsquo;s likely that
I or my peers would have sent patches to this project, given that bugfixes would
have stopped coming from upstream. We would be aware of the larger risk this
project posed, and have studied alternatives. Earlier than that, I would
probably have lent my ear to the maintainer to vent their frustrations, and
offered my help where possible.&lt;/p&gt;
&lt;p&gt;For most of my projects, I can probably list the entire dependency graph,
including transitive dependencies, off of the top of my head. I can name most of
their maintainers, and many of their contributors. I have shaken the hands of
these people, shared drinks and meals with them, and count many of them among my
close friends. The idea of depending on a library I&amp;rsquo;ve never heard of, several
degrees removed via transitive dependencies, maintained by someone I&amp;rsquo;ve never
met and have no intention of speaking to, is &lt;em&gt;absolutely nuts&lt;/em&gt; to me. I know of
these problems well in advance because I know the people affected as my friends.
If someone is frustrated or overworked, I&amp;rsquo;m right there with them trying to find
solutions and correct the over-burden. If someone is in dire financial
straights, I&amp;rsquo;m helping them touch up their resume and introducing them to
companies that I know are looking for their skillset, or helping them work on
more sustainable sources of donations and grants. They do the same for me, and
for each other.&lt;/p&gt;
&lt;p&gt;Quit treating open-source projects like a black box that conveniently solves
your problem. Engage with the human beings who work on it, participate in the
community, and &lt;em&gt;make&lt;/em&gt; it healthy and sustainable. You shouldn&amp;rsquo;t be surprised
when the 3 AM alarm goes off if the most you see of a project is a line in your
&lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;And strictly speaking I even had to slip in under the radar to attend in the first place — the room was full. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;If so, you may be pleased by a Microsoft&amp;rsquo;s ridiculous answer: &amp;ldquo;we have 60,000 developers, that&amp;rsquo;s why.&amp;rdquo; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>KnightOS was an interesting operating system</title>
      <link>./2020/01/27/KnightOS-was-interesting.html</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/01/27/KnightOS-was-interesting.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://knightos.org&#34;&gt;KnightOS&lt;/a&gt; is an operating system I started writing about
10 years ago, for Texas Instruments line of z80 calculators — the TI-73,
TI-83+, TI-84+, and similar calculators are supported. It still gets the rare
improvements, but these days myself and most of the major contributors are just
left with starry eyed empty promises to themselves that one day they&amp;rsquo;ll do one
of those big refactorings we&amp;rsquo;ve been planning&amp;hellip; for 4 or 5 years now.&lt;/p&gt;
&lt;p&gt;Still, it was a really interesting operating system which was working under some
challenging constraints, and overcame them to offer a rather nice Unix-like
environment, with a filesystem, preemptive multiprocessing &lt;em&gt;and&lt;/em&gt; multithreading,
assembly and C programming environments, and more. The entire system was written
in handwritten z80 assembly, almost 50,000 lines of it, on a compiler toolchain
we built from scratch.&lt;/p&gt;
&lt;p&gt;There was only 64 KiB of usable RAM. The kernel stored &lt;em&gt;all&lt;/em&gt; of its state in
1024 bytes of statically allocated RAM. Many subsystems used overlapping parts
of this memory, which was carefully planned for to avoid conflicts. The
userspace memory allocator used a simple linked list for tracking allocations,
to minimize the overhead of each allocation and maximize the usable space for
userspace programs. There was no MMU in the sense that we have on modern
computers, so any program could freely overwrite any other programs. In fact,
the &amp;ldquo;userspace&amp;rdquo; task switching GUI would read the kernel&amp;rsquo;s process table
directly to make a list of running programs.&lt;/p&gt;
&lt;p&gt;The non-volatile storage was NOR Flash, which presents some interesting
constraints. In the worst case we only had 512 KiB of storage, and even in the
best case just 4MiB (this for a device released in 2013). This space was shared
with the kernel, whose core code was less than 4KiB, and including high-address
subsystems still clocked in at less than 16KiB. Due to the constraints of NOR
Flash, a custom filesystem was designed which did all daily operations by only
&lt;em&gt;resetting&lt;/em&gt; bits in the underlying storage. In order to &lt;em&gt;set&lt;/em&gt; any bits, we had
to set the entire 64 KiB sector to 1. Overhead was also kept to a bare minimum
here to maximize storage space available to users.&lt;/p&gt;
&lt;p&gt;Writing to Flash storage also renders it unreadable while the operation is in
progress. The kernel normally executes directly from Flash, resident at the
bottom of the memory. Therefore, in order to modify Flash, the kernel&amp;rsquo;s Flash
driver copies part of itself to RAM, jumps to it, and then jumps back after the
operation is complete. Recall that all of the kernel&amp;rsquo;s memory is statically
allocated, and there&amp;rsquo;s not much of it — we used only 128 bytes for the
code which runs in RAM, and it&amp;rsquo;s shared with some other stuff that we had to
plan around. In order to meet these constraints, we employ &lt;em&gt;self modifying code&lt;/em&gt;
— the Flash driver copies some of itself into RAM, then pre-computes some
information and &lt;em&gt;modifies&lt;/em&gt; that machine code in-place before jumping to it.&lt;/p&gt;
&lt;p&gt;We also had some basic networking support. The calculator has a 2.5mm jack,
similar to headphone jacks — if you had a 3.5mm adapter, we had a music
player which would play MIDI or WAV files. The kernel had direct control of the
voltages on the ring and tip, and had to bitbang them directly in software&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.
Based on this we built some basic networking support, which supported
calculator-to-calculator and calculator-to-PC information exchange. Later models
had a mini-USB controller (which, funnily enough, can also be bitbanged in
software), but we never ended up writing a driver for it.&lt;/p&gt;
&lt;p&gt;The KnightOS kernel also includes some code which is the first time I ever wrote
&lt;a href=&#34;https://github.com/KnightOS/kernel/blob/e257f54e021ee743306a2a4a5a152860728fb3f8/src/00/restarts.asm#L129-L130&#34;&gt;&amp;ldquo;here be dragons&amp;rdquo;&lt;/a&gt;
into a comment, and I don&amp;rsquo;t think I&amp;rsquo;ve topped it since.&lt;/p&gt;
&lt;p&gt;Despite these constraints, KnightOS is completely booted up to a useful
Unix-like (with a graphical interface) faster than you can lift your finger off
of the power button. The battery could last the entire semester, if you&amp;rsquo;re
lucky. Can the device you&amp;rsquo;re reading this on claim the same?&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;video controls src=&#34;https://yukari.sr.ht/knightos.webm&#34;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Newer hardware revisions had some support hardware which was capable of transferring a single byte without software intervention. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The device I&amp;rsquo;m writing this blog post with is 3500× faster than my calculator, has 262,144× more RAM, and 2.1×10&lt;sup&gt;6&lt;/sup&gt; times more storage space. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>The happinesses and stresses of full-time FOSS work</title>
      <link>./2020/01/21/Stress-and-happiness.html</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/01/21/Stress-and-happiness.html</guid>
      <description>&lt;p&gt;In the past few days, several free software maintainers have come out to discuss
the stresses of their work. Though the timing was suggestive, my article last
week on the philosophy of project governance was, at best, only tangentially
related to this topic - I had been working on that article for a while. I do
have some thoughts that I&amp;rsquo;d like to share about what kind of stresses I&amp;rsquo;ve
dealt with as a FOSS maintainer, and how I&amp;rsquo;ve managed (or often mismanaged) it.&lt;/p&gt;
&lt;p&gt;February will mark one year that I&amp;rsquo;ve been working on self-directed free
software projects full-time. I was planning on writing an optimistic
retrospective article around this time, but given the current mood of the
ecosystem I think it would be better to be realistic. In this stage of my
career, I now feel at once happier, busier, more fulfilled, more engaged, more
stressed, and more depressed than I have at any other point in my life.&lt;/p&gt;
&lt;p&gt;The good parts are numerous. I&amp;rsquo;m able to work on my life&amp;rsquo;s passions, and my
projects are in the best shape they&amp;rsquo;ve ever been thanks to the attention I&amp;rsquo;m
able to pour into them. I&amp;rsquo;ve also been able to do more thoughtful, careful work;
with the  extra time I&amp;rsquo;ve been able to make my software more robust and reliable
than it&amp;rsquo;s ever been. The variety of projects I can invest my time into has also
increased substantially, with what was once relegated to minor curiosities now
receiving a similar amount of attention as my larger projects were receiving in
my spare time before. I can work from anywhere in the world, at any time, not
worrying about when to take time off and when to put my head down and crank out
a lot of code.&lt;/p&gt;
&lt;p&gt;The frustrations are numerous, as well. I often feel like I&amp;rsquo;ve bit off more than
I can chew. This has been the default state of affairs for me for a long time;
I&amp;rsquo;m often neglecting half of my projects in order to obtain progress by leaps
and bounds in just a few. Working on FOSS full-time has cast this model&amp;rsquo;s
disadvantages into greater relief, as I focus on a greater breadth of projects
and spend more time on them.&lt;/p&gt;
&lt;p&gt;The attention and minor fame I&amp;rsquo;ve received as a result of my prolific efforts
also has profound consequences. On the positive line of thought, I&amp;rsquo;m somewhat
embarrassed to admit that I&amp;rsquo;ve noticed my bug reports and feature requests on
random projects (or even my own projects) being taken more seriously now, which
is almost certainly more related to name recognition than merit. I often receive
thanks and words of admiration from my&amp;hellip; fans? I guess I have those now.
Sometimes these are somewhat unwelcome, with troubled individuals writing
difficult to decipher half-rants laden with strange praises and bizarre
questions. Other times I&amp;rsquo;m asked out of the blue to join a discussion I was
unaware of, to comment on some piece of technology I&amp;rsquo;ve never used or to take a
stand on some argument which I wasn&amp;rsquo;t privy to. I don&amp;rsquo;t enjoy these kinds of
comments. But, they&amp;rsquo;re not far removed from the ones I like - genuine,
thoughtful praise arrives in my inbox fairly often and it makes the job a lot
more worthwhile.&lt;/p&gt;
&lt;p&gt;Of course, a similar sort of person exists on the opposite extreme. There are
many people who hate my guts and anything I&amp;rsquo;ve ever worked on, and who&amp;rsquo;ll go out
of their way to let me and anyone else who&amp;rsquo;ll listen to them know how they feel.
Of course, I have &lt;em&gt;earned&lt;/em&gt; the ire of no small number of people, and I regret
many of these failed interpersonal relationships. These cases are in the
minority, however - most of the people who will tell tales of my evil are people
who I&amp;rsquo;ve never met. There&amp;rsquo;s a lot of spaces online that I just won&amp;rsquo;t visit
anymore because of them. As for the less extreme of this sort of person, I&amp;rsquo;ll
also reiterate what others have said - the negative effects of entitled,
arrogant, or outright toxic users is profound. Don&amp;rsquo;t be that person.&lt;/p&gt;
&lt;p&gt;In either case, I can never join new communities on the same terms as anyone
else does. At least one person in every new community already has some
preconception of me when I arrive. Often I think about making an alias just to
enjoy the privilege of anonymity again.&lt;/p&gt;
&lt;p&gt;A great help has been my daily interactions with the many friends and colleagues
who are dear to me. I&amp;rsquo;ve made lifelong friends of many of the people I&amp;rsquo;ve met
through these projects.  Thanks to FOSS, I have met an amazing number of kind,
talented, generous people.  Every day, I&amp;rsquo;m thankful to and amazed by the
hundreds of people who have found my ideas compelling, and who come together to
contribute their own ideas and set aside their precious time to work together
realizing our shared dreams. If I&amp;rsquo;m feeling blue, often all it takes to snap me
out of it is to reflect on the gratitude I feel for these wonderful people. I&amp;rsquo;ll
never be able to thank my collaborators enough, but hell, I could stand to do it
some more anyway.&lt;/p&gt;
&lt;p&gt;I also have mixed feelings about how &lt;em&gt;busy&lt;/em&gt; I am. Every day I wake up to a
hundred new emails, delete half of them, and spend 3-4 hours working on the
rest. Patches, questions, support inquiries, monitoring &amp;amp; reports, it&amp;rsquo;s endless.
On top of that, I have dozens of things I already need to work on. The CI work
distribution algorithm needs to be completely redone; I need to provision new
hardware — oh yeah, and, the hardware that I need ran into shipping
issues, again; I need to improve monitoring; I need to plan for FOSDEM; I need
to finish the Wayland book; I need to figure out the memory issues in himitsu
— not to mention write the rest of the software; I need to file taxes,
twice as much work when you own a business; I need to implement data export
&amp;amp; account deletion; I need to finish the web-driven patch review UI; I need
to finish writing docs for Alpine; I have to work more on the PinePhone; I have
a legacy server which needs to be overhauled and is now on the clock because of
ACMEv1; names.sr.ht needs to be finished&amp;hellip;&lt;/p&gt;
&lt;p&gt;Not to mention the tasks which have been on hold for longer now than they&amp;rsquo;ve
been planned for in the first place. Alpine is still going to have hundreds of
Python 2 packages by EoL; the ppc64le server is gathering dust in the
datacenter; there&amp;rsquo;s been some bug with fosspay for several months, in which it
doesn&amp;rsquo;t show Patreon figures unless I reboot the process every now and then;
RISC-V work is stalled because the work is currently blocked by a large problem
that I can&amp;rsquo;t automate; the list of blog posts I want to write is well over 100
entries long. There are &lt;em&gt;several dozen&lt;/em&gt; other loose ends I haven&amp;rsquo;t mentioned
here but am painfully aware of anyway.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s not even considering any personal goals, which I have vanishingly little
time for. I get zero exercise, and though my diet is mostly reasonable the
majority of it is delivery unless I get the odd 2 hours to visit the grocery
store. That is, unless I want to spend those 2 hours with my friends, which
means it&amp;rsquo;s back to delivery. My dating life is almost nonexistent. I want to
spend more time studying Japanese, but it&amp;rsquo;s either that or keeping up with my
leisure reading. Lofty goals of also studying Chinese or Arabic are but dust in
the wind. I&amp;rsquo;m addicted to caffeine, again.&lt;/p&gt;
&lt;p&gt;There have been healthy ways and unhealthy ways of dealing with the occasional
feelings of being overwhelmed by all of this. The healthier ways have included
taking walks, reading my books, spending a few minutes with my cat, doing
chores, and calling my family to catch up. Less healthy ways have included
walking to the corner store to buy unhealthy comfort foods, consuming alcohol or
weed too much or too often, getting in stupid internet arguments, being mean to
my friends and colleagues, and googling myself to read negative comments.&lt;/p&gt;
&lt;p&gt;Despite being swamped with all of this work, it&amp;rsquo;s all work that I love. I love
writing code, and immeasurably more so when writing &lt;em&gt;my&lt;/em&gt; code. Sure, there are
tech debt skeletons in the closet here and they&amp;rsquo;re keeping me awake at night, but
on the whole I feel lucky to be able to write the software I want to write, the
way I want to write it. I&amp;rsquo;ve been trying to do that my entire life —
writing code for someone else has always been a huge drain on my emotional
well-being.  That&amp;rsquo;s why I worked on my side projects in the first place, to have
an outlet through which I could work on self-directed projects without making
compromises for some arbitrary deadline.&lt;/p&gt;
&lt;p&gt;When I&amp;rsquo;m in the zone, writing lots of code for a project I&amp;rsquo;m interested in,
knowing it&amp;rsquo;s going to have a meaningful impact on my users, knowing that it&amp;rsquo;s
being written under my terms, it&amp;rsquo;s the most rewarding work I&amp;rsquo;ve ever done. I get
to do that every day.&lt;/p&gt;
&lt;p&gt;This isn&amp;rsquo;t the retrospective I wanted to write, but it&amp;rsquo;s nice to drop the veneer
for a few minutes and share an honest take on what this is like. This year has
been nothing like what I expected it to be - it&amp;rsquo;s both terrible and wonderful
and very busy, very goddamn busy. In any case, I&amp;rsquo;m extremely grateful to be here
doing it, and it&amp;rsquo;s thanks to many, many supportive people - users, contributors,
co-maintainers, and friends. Thank you, thank you, thank you, thank you.&lt;/p&gt;
</description>
    </item><item>
      <title>A philosophy of project governance</title>
      <link>./2020/01/17/Effective-project-governance.html</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/01/17/Effective-project-governance.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been in the maintainer role for dozens of projects for a while now, and
have moderated my fair share of conflicts. I&amp;rsquo;ve also been on the other side,
many times, as a minor contributor watching or participating in conflict within
other projects. Over the years, I&amp;rsquo;ve developed an approach to project governance
which I believe is lightweight, effective, and inclusive.&lt;/p&gt;
&lt;p&gt;I hold the following axioms to be true:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Computer projects are organized by humans, creating a social system.&lt;/li&gt;
&lt;li&gt;Social systems are fundamentally different from computer systems.&lt;/li&gt;
&lt;li&gt;Objective rules cannot be programmed into a social system.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And the following is true of individuals within those systems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Project leadership is in a position to do anything they want.&lt;/li&gt;
&lt;li&gt;Project leadership will ultimately do whatever they want, even if they have
to come up with an interpretation of the rules which justifies it.&lt;/li&gt;
&lt;li&gt;Individual contributors who have a dissonant world-view from project
leadership will never be welcome under those leaders.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Any effective project governance model has to acknowledge these truths. To this
end, the simplest effective project governance model is a BDFL, which scales a
lot further than people might expect.&lt;/p&gt;
&lt;p&gt;The BDFL (Benevolent Dictator for Life) is a term which was first used to
describe Python&amp;rsquo;s governance model with Guido van Rossum at the helm. The &amp;ldquo;for
life&amp;rdquo; in BDFL is, in practice, until the &amp;ldquo;dictator&amp;rdquo; resigns from their role.
Transfers of power either involve stepping away and letting lesser powers decide
between themselves how to best fill the vacuum, or simply directly appointing a
successor (or successors). In this model, a single entity is in charge —
often the person who started the project, at first — and while they may
delegate their responsibilities, they ultimately have the final say in all
matters.&lt;/p&gt;
&lt;p&gt;This decision-making authority derives from the BDFL. Consequently, the
project&amp;rsquo;s values are a reflection of that BDFL&amp;rsquo;s values. Conflict resolution and
matters of exclusion or inclusion of specific people from the project is the
direct responsibility of the BDFL. If the BDFL delegates this authority to other
groups or project members, that authority derives from the BDFL and is exercised
at their leisure, on their terms. In practice, for projects of a certain size,
most if not all of the BDFL&amp;rsquo;s authority is delegated across many people, to the
point where the line between BDFL and core contributor is pretty blurred. The
relationships in the project are built on trust between individuals, not trust
in the system.&lt;/p&gt;
&lt;p&gt;As a contributor, you should evaluate the value system of the leadership and
make a personal determination as to whether or not it aligns with your own. If
it does, participate. If it does not, find an alternative or fork the
project.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Consider the main competing model: a Code of Conduct as the rule of law.&lt;/p&gt;
&lt;p&gt;These attempt to boil subjective matters down into objectively enforcible rules.
Not even in sovereign law do we attempt this. Programmers can easily fall into
the trap of thinking that objective rules can be applied to social systems, and
that they can deal with conflict by executing a script. This is quite untrue,
and attempting to will leave loopholes big enough for bad actors to drive a
truck through.&lt;/p&gt;
&lt;p&gt;Additionally, governance models which provide a scripted path onto the decision
making committee can often have this path exploited by bad actors, or by people
for whom the politics are more important than the software. By implementing this
system, the values of the project can easily shift in ways the leaders and
contributors don&amp;rsquo;t expect or agree with.&lt;/p&gt;
&lt;p&gt;The worst case can be that a contributor is ostracized due to the letter of the
CoC, but not the spirit of it. Managing drama is a sensitive, subjective issue,
but objective rules break hearts. Enough of this can burn out the leaders,
creating a bigger power vacuum, without a plan to fill it.&lt;/p&gt;
&lt;p&gt;In summary:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For leaders&lt;/strong&gt;: Assume good faith until proven otherwise.&lt;/p&gt;
&lt;p&gt;Do what you think is right. If someone is being a
dickhead&lt;small&gt;&lt;sup&gt;†&lt;/sup&gt;&lt;/small&gt;,
tell them to stop.  If they don&amp;rsquo;t stop, kick them out. Work with contributors
you trust to elevate their role in the project so you can delegate
responsibilities to them and have them act as good role models for the
community. If you&amp;rsquo;re not good at moderating discussions or conflict resolution,
find someone who is among your trusted advisors and ask them to exercise their
skills.&lt;/p&gt;
&lt;p&gt;If you need to, sketch up informal guidelines to give an approximation of your
values, so that contributors know how to act and what to expect, but make it
clear that they&amp;rsquo;re guidelines rather than rules. Avoid creating complex systems
of governance. Especially avoid setting up systems which create paths that
untrusted people can use to quickly weasel their way into positions of power.
Don&amp;rsquo;t give power to people who don&amp;rsquo;t have a stake in the project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For contributors&lt;/strong&gt;: Assume good faith until proven otherwise.&lt;/p&gt;
&lt;p&gt;Do what you think is right. If someone is being a
dickhead&lt;small&gt;&lt;sup&gt;†&lt;/sup&gt;&lt;/small&gt;,
talk to the leadership about it. If you don&amp;rsquo;t trust the project leadership, the
project isn&amp;rsquo;t for you, and future conflicts aren&amp;rsquo;t going to go your way. Be
patient with your maintainers — remember that you have the easier job.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;sup&gt;†&lt;/sup&gt; According to your subjective definition of dickhead.&lt;/small&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Note that being able to fork is the escape hatch which makes this model fair and applicable to free &amp;amp; open source projects. The lack of a similarly accessible escape hatch in, for example, the governments of soverign countries, prevents this model from generalizing well. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, January 2020</title>
      <link>./2020/01/15/Status-update-January-2020.html</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/01/15/Status-update-January-2020.html</guid>
      <description>&lt;p&gt;I forgot to write this post this morning, and I&amp;rsquo;m on cup 3 of coffee while
knee-deep in some arcane work with tarballs in Python. Forgive the brevity of
this introduction. Let&amp;rsquo;s get right into the status update.&lt;/p&gt;
&lt;p&gt;First of all, &lt;a href=&#34;https://fosdem.org/2020/&#34;&gt;FOSDEM 2020&lt;/a&gt; is taking place on February 1st and 2nd, and
I&amp;rsquo;m planning on being there again this year. I hope to see you there! I&amp;rsquo;ll be
hosting another &lt;a href=&#34;https://fosdem.org/2020/schedule/event/bof_sourcehut/&#34;&gt;small session&lt;/a&gt; for SourceHut and aerc users
where I&amp;rsquo;ll take questions, demo some new stuff, and give out stickers.&lt;/p&gt;
&lt;p&gt;In Wayland news, the upcoming Sway 1.3 release is getting very close - rc3 is
planned to ship later today. We&amp;rsquo;ve confirmed that it&amp;rsquo;ll ship with VNC support
via &lt;a href=&#34;https://github.com/any1/wayvnc&#34;&gt;wayvnc&lt;/a&gt; and improvements to input latency.
I haven&amp;rsquo;t completed much extra work on Casa (and &amp;ldquo;Sway Mobile&amp;rdquo; alongside it),
but there have been some small improvements. I did find some time to work on
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/sedna&#34;&gt;Sedna&lt;/a&gt;, however. We&amp;rsquo;ve decided to use it as
a proving grounds for the new wlroots scene graph API, which plans to
incorporate Simon Ser&amp;rsquo;s &lt;a href=&#34;https://github.com/emersion/libliftoff&#34;&gt;libliftoff&lt;/a&gt; and put to rest the eternal
debate over how wlroots renderer should take shape. This&amp;rsquo;ll be &lt;em&gt;lots&lt;/em&gt; of work
but the result will be a remarkably good foundation on which we can run
performant compositors on a huge variety of devices — and, if we&amp;rsquo;re
lucky, might help resolve the Nvidia problem. I also did a bit more work on the
&lt;a href=&#34;https://wayland-book.com&#34;&gt;Wayland Book&lt;/a&gt;, refactoring some of the chapter
ordering to make more sense and getting started with the input chapter. More
soon.&lt;/p&gt;
&lt;p&gt;On SourceHut, lots of new developments have been underway. The latest round of
performance improvements for git.sr.ht finally landed with the introduction of
new server hardware, and it&amp;rsquo;s finally competitive with its peers in terms of
push and web performance. I&amp;rsquo;ve also overhauled our monitoring infrastructure
&lt;a href=&#34;https://metrics.sr.ht&#34;&gt;and made it public&lt;/a&gt;. Our &lt;a href=&#34;https://sourcehut.org/blog/2020-01-13-sourcehut-q4-2019-financial-report/&#34;&gt;Q4 2019 financial
report&lt;/a&gt; was also published earlier this week. I&amp;rsquo;m currently
working on pushing forward through the self-service data ownership goals, and
we&amp;rsquo;ve already seen some improvements in that todo.sr.ht can now re-import
tracker exports from itself or other todo.sr.ht instances.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also been working more on &lt;a href=&#34;https://git.sr.ht/~sircmpwn/himitsu&#34;&gt;himitsu&lt;/a&gt;
recently, though I&amp;rsquo;m taking it pretty slowly because it&amp;rsquo;s a security-sensitive
project. Most of the crypto code has been written at this point - writing
encrypted secrets to disk, reading and writing the key index - but reading
encrypted secrets back from the disk remains to be implemented. I know there are
some bugs in the current implementation, which I&amp;rsquo;ll be sorting out before I
write much more code. I also implemented most of the support code for the Unix
socket RPC, and implemented a couple of basic commands which have been helpful
with proving out the secret store code (proving that it&amp;rsquo;s wrong, at least).&lt;/p&gt;
&lt;p&gt;Simon Ser&amp;rsquo;s &lt;a href=&#34;https://mrsh.sh&#34;&gt;mrsh&lt;/a&gt; has also been going very well lately, and is
now a nearly complete implementation of the POSIX shell. I&amp;rsquo;ve started working on
something I&amp;rsquo;ve long planned to build on top of mrsh: a comfortable interactive
shell, inspired by fish&amp;rsquo;s interactive mode, but with a strictly POSIX syntax. I
call the project &lt;a href=&#34;https://git.sr.ht/~sircmpwn/imrsh&#34;&gt;imrsh&lt;/a&gt;, for interactive
mrsh. I&amp;rsquo;ve already got it in somewhat good shape, but many of the features
remain to be implemented. The bulk of the work was in Simon&amp;rsquo;s mrsh, so it
shouldn&amp;rsquo;t be too hard to add a pretty interface on top. We&amp;rsquo;ll see how it goes.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for today. In the coming month I hope to expand on each of these, and
I&amp;rsquo;m also working on a new Secret Project which may start bearing fruits soon
(but likely not). Thank you for your continued support! I&amp;rsquo;ll see you at FOSDEM.&lt;/p&gt;
</description>
    </item><item>
      <title>Following up on &#34;Hello world&#34;</title>
      <link>./2020/01/08/Re-Slow.html</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/01/08/Re-Slow.html</guid>
      <description>&lt;p&gt;This is a follow-up to my last article, &lt;a href=&#34;https://drewdevault.com/2020/01/04/Slow.html&#34;&gt;Hello
world&lt;/a&gt;, which is easily the most
negatively received article I&amp;rsquo;ve written — a remarkable feat for someone
who&amp;rsquo;s written as much flame bait as me. Naturally, the fault lies with the
readers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xkcd.com/1984/&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/misinterpretation_2x.png&#34; width=&#34;294&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All jokes aside, I&amp;rsquo;ll try to state my point better. The &amp;ldquo;Hello world&amp;rdquo; article
was a lot of work to put together — frustrating work — by the time
I had finished collecting numbers, I was exhausted and didn&amp;rsquo;t pay much mind to
putting context to them. This left a lot of it open to interpretation, and a lot
of those interpretations didn&amp;rsquo;t give the benefit of the doubt.&lt;/p&gt;
&lt;p&gt;First, it&amp;rsquo;s worth clarifying that the assembly program I gave is a
&lt;em&gt;hypothetical, idealized&lt;/em&gt; hello world program, and in practice not even the
assembly program is safe from bloat. After it&amp;rsquo;s wrapped up in an ELF, even after
stripping, the binary bloats up to &lt;strong&gt;157×&lt;/strong&gt; the size of the
actual machine code. I had hoped this would be more intuitively clear, but the
take-away is that the ideal program is a pipe dream, not a standard to which the
others are held. As the infinite frictionless plane in vacuum is to physics,
that assembly program is to compilers.&lt;/p&gt;
&lt;p&gt;I also made the mistake of including the runtime in the table. What I wanted you
to notice about the timestamp is that it &lt;em&gt;rounds to zero&lt;/em&gt; for 15 of the 21 test
cases, and arguably only one or two approach the realm of human perception.
It&amp;rsquo;s meant to lend balance to the point I&amp;rsquo;m making with the number of syscalls:
despite the complexity on display, the user generally can&amp;rsquo;t even tell. The other
problem with including the runtimes is that it makes it look like a benchmark,
which it&amp;rsquo;s not (you&amp;rsquo;ll notice that if you grep for &amp;ldquo;benchmark&amp;rdquo;, you will find no
results).&lt;/p&gt;
&lt;p&gt;Another improvement would have been to group rows of the table by orders of
magnitude (in terms of number of syscalls), and maybe separate the outliers in
each group. There is little difference between many of the languages in the
middle of the table, but when one of them is your favorite language, &amp;ldquo;stacking
it up&amp;rdquo; against its competitors like this is a good way to get the reader&amp;rsquo;s blood
pumping and bait some flames. If your language appears to be represented
unfavorably on this chart, you&amp;rsquo;re likely to point out the questionable
methodology, golf your way to a more generous sample code, etc; things I could
have done myself were I trying to make a benchmark rather than a point about
complexity.&lt;/p&gt;
&lt;p&gt;And hidden therein is my actual point: complexity. There has long been a trend
in computing of endlessly piling on the abstractions, with no regard for the
consequences. The web is an ever growing mess of complexity, with larger and
larger blobs of inscrutable JavaScript being shoved down pipes with no regard
for the pipe&amp;rsquo;s size or the bridge toll charged by the end-user&amp;rsquo;s telecom.
Electron apps are so far removed from hardware that their jarring non-native UIs
can take seconds to respond and eat up the better part of your RAM to merely
show a text editor or chat application.&lt;/p&gt;
&lt;p&gt;The PC in front of me is literally five thousand times faster than the graphing
calculator in my closet - but the latter can boot to a useful system in a
fraction of a millisecond, while my PC takes almost a minute. Productivity per
CPU cycle per Watt is the lowest it&amp;rsquo;s been in decades, and is orders of
magnitude (plural) beneath its potential. So far as most end-users are
concerned, computers haven&amp;rsquo;t improved in meaningful ways in the past 10 years,
and in many respects have become worse. The cause is well-known: programmers
have spent the entire lifetime of our field recklessly piling abstraction on top
of abstraction on top of abstraction. We&amp;rsquo;re more concerned with shoving more
spyware at the problem than we are with optimization, outside of a small number
of high-value problems like video decoding.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Programs have grown fat and
reckless in scope, and it affects literally everything, even down to the last
bastion of low-level programming: C.&lt;/p&gt;
&lt;p&gt;I use syscalls as an approximation of this complexity. Even for one of the
simplest possible programs, there is a huge amount of abstraction and complexity
that comes with many approaches to its implementation. If I just print &amp;ldquo;hello
world&amp;rdquo; in Python, users are going to bring along almost a million lines of code
to run it, the fraction of which isn&amp;rsquo;t dead code is basically a rounding error.
This isn&amp;rsquo;t &lt;em&gt;always&lt;/em&gt; a bad thing, but it often is and no one is thinking about
it.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the true message I wanted you to take away from my article: most
programmers aren&amp;rsquo;t thinking about this complexity. Many choose tools because
it&amp;rsquo;s easier for them, or because it&amp;rsquo;s what they know, or because developer time
is more expensive than the user&amp;rsquo;s CPU cycles or battery life and the engineers
aren&amp;rsquo;t signing the checks. I hoped that many people would be surprised at just
how much work their average programming language could end up doing even when
given simple tasks.&lt;/p&gt;
&lt;p&gt;The point was not that your programming language is wrong, or that being higher
up on the table is better, or that programming languages should be blindly
optimizing these numbers. The point is, if these numbers surprised you, then you
should find out why! I&amp;rsquo;m a systems programmer — I want you to be
interested in your systems! And if this surprises you, I wonder what else
might&amp;hellip;&lt;/p&gt;
&lt;p&gt;I know that article didn&amp;rsquo;t do a good job of explaining any of this. I&amp;rsquo;m sorry.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Now to address more specific comments:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What the fuck is a syscall&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;This question is more common with users of the languages which make more of
them, ironically. A syscall is when your program asks the kernel to do something
for it. This causes a transition from &lt;em&gt;user space&lt;/em&gt; to &lt;em&gt;kernel space&lt;/em&gt;. This
transition is one of the more expensive things your programs can do, but a
program that doesn&amp;rsquo;t make any syscalls is not a useful program: syscalls are
necessary to do any kind of I/O (input or output). &lt;a href=&#34;https://en.wikipedia.org/wiki/System_call&#34;&gt;Wikipedia
page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Linux, you can use the &lt;a href=&#34;https://linux.die.net/man/1/strace&#34;&gt;strace&lt;/a&gt; tool to
analyze the syscalls your programs are making, which is how I obtained the
numbers in the original article.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This &amp;ldquo;benchmark&amp;rdquo; is biased against JIT&amp;rsquo;d and interpreted languages&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Yes, it is. It &lt;em&gt;is&lt;/em&gt; true that many programming environments have to factor
in a &amp;ldquo;warm up&amp;rdquo; time. This argument on its face-value is apparently validated by
the cargo-culted (and often correct) wisdom that benchmarks should be conducted
with timers in-situ, post warm-up period, with the measured task being
repeated many times so that trends become more obvious.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; It&amp;rsquo;s precisely these
details, which the conventional benchmarking wisdom aims to obscure, that I&amp;rsquo;m
trying to cast a light on. While a benchmark which shows how quickly a bunch of
programming languages can print &amp;ldquo;hello world&amp;rdquo; a million times&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; might be
interesting, it&amp;rsquo;s not what I&amp;rsquo;m going for here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rust is doing important things with those syscalls&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;My opinion on this is mixed: yes, stack guards are useful. However, my &amp;ldquo;hello
world&amp;rdquo; program has zero chance of causing a stack overflow. In theory, Rust
should be able to reckon whether or not many programs are at risk of stack
overflow.  If not, it can ask the programmer to specify some bounds, or it can
emit the stack guards &lt;em&gt;only in those cases&lt;/em&gt;. The worst option is panicking, and
I&amp;rsquo;m surprised that Crustaceans feel like this is sufficient. Funny, given their
obsession with &amp;ldquo;zero cost&amp;rdquo; abstractions, that a nonzero-cost abstraction would
be so fiercely defended. They&amp;rsquo;re already used to overlong compile times, adding
more analysis probably won&amp;rsquo;t be noticed ;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go is doing important things with those syscalls&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;On this I wholly disagree. I hate the Go runtime, it&amp;rsquo;s the worst thing about an
otherwise great language. Go programs are almost impossible to debug for having
to sift through mountains of unrelated bullshit the program is doing, all to
support a concurrency/parallelism model that I also strongly dislike. There are
some bad design decisions in Golang and stracing the average Go program brings a
lot of them to light. Illumos has many of its own problems, but &lt;a href=&#34;http://dtrace.org/blogs/wesolows/2014/12/29/golang-is-trash/&#34;&gt;this
article&lt;/a&gt; about
porting Go to it covers a number of related problems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wow, Zig is competitive with assembly?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeah, I totally had the same reaction. I&amp;rsquo;m interested to see how it measures up
under more typical workloads. People keep asking me what I think about Zig in
general, and I think it has potential, but I also have a lot of complaints. It&amp;rsquo;s
not likely to replace C for me, but it might have a place somewhere in my stack.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;For efficient display of unskippable 30 second video ads, of course. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This approach is the most &amp;ldquo;fair&amp;rdquo; for comparison&amp;rsquo;s sake, but it also often obscures a lot of the practical value of the benchmark in the first place. For example, how often is the branch predictor and L1 cache going to be warmed up in favor of the measured code in practice? &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;All of them being handily beaten by &lt;code&gt;/bin/yes &amp;quot;hello world&amp;quot;&lt;/code&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Hello world</title>
      <link>./2020/01/04/Slow.html</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>./2020/01/04/Slow.html</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s say you ask your programming language to do the simplest possible task:
print out &amp;ldquo;hello world&amp;rdquo;. Generally this takes two syscalls: write and exit.
The following assembly program is the ideal Linux x86_64 program for this
purpose. A perfect compiler would emit this hello world program for any
language.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bits 64
section .text
global _start
_start:
	mov rdx, len
	mov rsi, msg
	mov rdi, 1
	mov rax, 1
	syscall

	mov rdi, 0
	mov rax, 60
	syscall

section .rodata
msg: db &amp;quot;hello world&amp;quot;, 10
len: equ $-msg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Most languages do a whole lot of other crap other than printing out &amp;ldquo;hello
world&amp;rdquo;, even if that&amp;rsquo;s all you asked for.&lt;/p&gt;
&lt;table class=&#34;table table-bordered&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Test case&lt;/th&gt;
      &lt;th&gt;Source&lt;/th&gt;
      &lt;th&gt;Execution time&lt;/th&gt;
      &lt;th&gt;Total syscalls&lt;/th&gt;
      &lt;th&gt;Unique syscalls&lt;/th&gt;
      &lt;th&gt;Size (KiB)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Assembly&lt;/strong&gt; (x86_64)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#tests&#34;&gt;test.S&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8.6 KiB*&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Zig&lt;/strong&gt; (small)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testzig&#34;&gt;test.zig&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;10.3 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Zig&lt;/strong&gt; (safe)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testzig&#34;&gt;test.zig&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;11.3 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;C&lt;/strong&gt; (musl, static)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testc&#34;&gt;test.c&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;95.9 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;C&lt;/strong&gt; (musl, dynamic)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testc&#34;&gt;test.c&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;602 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;C&lt;/strong&gt; (glibc, static*)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testc&#34;&gt;test.c&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2295 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;C&lt;/strong&gt; (glibc, dynamic)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testc&#34;&gt;test.c&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;65&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;2309 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testrs&#34;&gt;test.rs&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;123&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;244 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Crystal&lt;/strong&gt; (static)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testcr&#34;&gt;test.cr&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;144&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;935 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Go&lt;/strong&gt; (static w/o cgo)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testgo&#34;&gt;test.go&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;152&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;1661 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;D&lt;/strong&gt; (dmd)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testd&#34;&gt;test.d&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;152&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;5542 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;D&lt;/strong&gt; (ldc)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testd&#34;&gt;test.d&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;181&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;10305 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Crystal&lt;/strong&gt; (dynamic)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testcr&#34;&gt;test.cr&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;183&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;2601 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Go&lt;/strong&gt; (w/cgo)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testgo&#34;&gt;test.go&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;211&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;3937 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Perl&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testpl&#34;&gt;test.pl&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.00s real&lt;/td&gt;
      &lt;td&gt;255&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;5640 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testjava&#34;&gt;Test.java&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.07s real&lt;/td&gt;
      &lt;td&gt;226&lt;/td&gt;
      &lt;td&gt;26&lt;/td&gt;
      &lt;td&gt;15743 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Node.js&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testjs&#34;&gt;test.js&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.04s real&lt;/td&gt;
      &lt;td&gt;673&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;36000 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Python 3&lt;/strong&gt; (PyPy)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testpy&#34;&gt;test.py&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.68s real&lt;/td&gt;
      &lt;td&gt;884&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;9909 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Julia&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testjl&#34;&gt;test.jl&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.12s real&lt;/td&gt;
      &lt;td&gt;913&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;344563 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Python 3&lt;/strong&gt; (CPython)&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testpy&#34;&gt;test.py&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.02s real&lt;/td&gt;
      &lt;td&gt;1200&lt;/td&gt;
      &lt;td&gt;33&lt;/td&gt;
      &lt;td&gt;15184 KiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href=&#34;#testrb&#34;&gt;test.rb&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;0.04s real&lt;/td&gt;
      &lt;td&gt;1401&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;1283 KiB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;div style=&#34;text-align: right&#34;&gt;
  &lt;small&gt;* See notes for this test case&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;This table is sorted so that the number of syscalls goes up, because I reckon
more syscalls is a decent metric for how much shit is happening that you didn&amp;rsquo;t
ask for (i.e. &lt;code&gt;write(&amp;quot;hello world\n&amp;quot;); exit(0)&lt;/code&gt;). Languages with a JIT fare much
worse on this than compiled languages, but I have deliberately chosen not to
account for this.&lt;/p&gt;
&lt;p&gt;These numbers are real. This is more complexity that someone has to debug, more
time your users are sitting there waiting for your program, less disk space
available for files which actually matter to the user.&lt;/p&gt;
&lt;h3 id=&#34;environment&#34;&gt;Environment&lt;/h3&gt;
&lt;p&gt;Tests were conducted on January 3rd, 2020.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc 9.2.0&lt;/li&gt;
&lt;li&gt;glibc 2.30&lt;/li&gt;
&lt;li&gt;musl libc 1.1.24&lt;/li&gt;
&lt;li&gt;Linux 5.4.7 (Arch Linux)&lt;/li&gt;
&lt;li&gt;Linux 4.19.87 (vanilla, Alpine Linux) is used for musl libc tests&lt;/li&gt;
&lt;li&gt;Go 1.13.5&lt;/li&gt;
&lt;li&gt;Rustc 1.40.0&lt;/li&gt;
&lt;li&gt;Zig 0.5.0&lt;/li&gt;
&lt;li&gt;OpenJDK 11.0.5 JRE&lt;/li&gt;
&lt;li&gt;Crystal 0.31.1&lt;/li&gt;
&lt;li&gt;NodeJS 13.5.0&lt;/li&gt;
&lt;li&gt;Julia 1.3.1&lt;/li&gt;
&lt;li&gt;Python 3.8.1&lt;/li&gt;
&lt;li&gt;PyPy 7.3.0&lt;/li&gt;
&lt;li&gt;Ruby 2.6.4p114 (2019-10-01 rev 67812)&lt;/li&gt;
&lt;li&gt;dmd 1:2.089.0&lt;/li&gt;
&lt;li&gt;ldc 2:1.18.0&lt;/li&gt;
&lt;li&gt;Perl 5.30.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For each language, I tried to write the program which would give the most
generous scores without raising eyebrows at a code review. The size of all
files which must be present at runtime (interpreters, stdlib, libraries, loader,
etc) are included. Binaries were stripped where appropriate.&lt;/p&gt;
&lt;p&gt;This was not an objective test, this is just an approximation that I hope will
encourage readers to be more aware of the consequences of their abstractions,
and their exponential growth as more layers are added.&lt;/p&gt;
&lt;h3 id=&#34;tests&#34;&gt;test.S&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;bits 64
section .text
global _start
_start:
	mov rdx, len
	mov rsi, msg
	mov rdi, 1
	mov rax, 1
	syscall

	mov rdi, 0
	mov rax, 60
	syscall

section .rodata
msg: db &amp;quot;hello world&amp;quot;, 10
len: equ $-msg
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;nasm -f elf64 test.S
gcc -o test -static -nostartfiles -nostdlib -nodefaultlibs
strip test: 8.6 KiB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This program only works on x86_64 Linux.&lt;/li&gt;
&lt;li&gt;The size depends on how you measure it:&lt;br /&gt;
&lt;em&gt;Instructions + data alone&lt;/em&gt;: 52 bytes&lt;br /&gt;
&lt;em&gt;Stripped ELF&lt;/em&gt;: 8.6 KiB&lt;br /&gt;
&lt;em&gt;Manually minified ELF&lt;/em&gt;: &lt;a href=&#34;http://timelessname.com/elfbin/&#34;&gt;142 bytes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testzig&#34;&gt;test.zig&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;const std = @import(&amp;quot;std&amp;quot;);

pub fn main() !void {
    const stdout = try std.io.getStdOut();
    try stdout.write(&amp;quot;hello world\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# small
zig build-exe test.zig --release-small --strip
# safe
zig build-exe test.zig --release-safe --strip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Written with the assistance of Andrew Kelly (maintainer of Zig)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testc&#34;&gt;test.c&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;int puts(const char *s);

int main(int argc, char *argv[]) {
    puts(&amp;quot;hello world&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# dynamic
gcc -O2 -o test test.c
strip test

# static
gcc -O2 -o test -static test.c
strip test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;glibc programs can never truly be statically linked. The size reflects this.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testrs&#34;&gt;test.rs&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;fn main() {
    println!(&amp;quot;hello world&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;rustc -C opt-levels=s test.rs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The final binary is dynamically linked with glibc, which is included in the
size.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testgo&#34;&gt;test.go&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;os&amp;quot;

func main() {
    os.Stdout.Write([]byte(&amp;quot;hello world\n&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# dynamic
go build -o test test.go

# static w/o cgo
GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o test -ldflags &#39;-extldflags &amp;quot;-f no-PIC -static&amp;quot;&#39; -buildmode pie -tags &#39;osusergo netgo static_build&#39; test.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Aside: it is getting way too goddamn difficult to build static Go binaries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The statically linked test was run on Alpine Linux with musl libc. It doesn&amp;rsquo;t
link to libc in theory, but hey.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testjava&#34;&gt;Test.java&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;public class Test {
    public static void main(String[] args) {
        System.out.println(&amp;quot;hello world&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;javac Test.java
java Test
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;testcr&#34;&gt;test.cr&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;puts &amp;quot;hello world\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# Dynamic
crystal build -o test test.cr

# Static
crystal build --static -o test test.cr
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Crystal tests were run on Alpine Linux with musl libc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testjs&#34;&gt;test.js&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;hello world&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;node test.js
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;testjl&#34;&gt;test.jl&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;println(&amp;quot;hello world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;julia test.jl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Julia numbers were provided by a third party&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testpy&#34;&gt;test.py&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;print(&amp;quot;hello world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# cpython
python3 test.py
# pypy
pypy3 test.py
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;testpl&#34;&gt;test.pl&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;print &amp;quot;hello world\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;perl test.pl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Passing /dev/urandom into perl is equally likely to print &amp;ldquo;hello world&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testd&#34;&gt;test.d&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import std.stdio;
void main()
{
    writeln(&amp;quot;hello world&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# dmd
dmd -O test.d
# ldc
ldc -O test.d
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;testrb&#34;&gt;test.rb&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;puts &amp;quot;hello world\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;ruby test.rb
&lt;/code&gt;&lt;/pre&gt;</description>
    </item><item>
      <title>Managing my dotfiles as a git repository</title>
      <link>./2019/12/30/dotfiles.html</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/12/30/dotfiles.html</guid>
      <description>&lt;p&gt;There are many tools for managing your dotfiles - user-specific configuration
files. GNU stow is an example. I&amp;rsquo;ve tried a few solutions over the years, but I
settled on a very simple system several years ago which has served me very well
in the time since: my $HOME is a git repository. &lt;a href=&#34;https://git.sr.ht/~sircmpwn/dotfiles&#34;&gt;This
repository&lt;/a&gt;, in fact. This isn&amp;rsquo;t an
original idea, but I&amp;rsquo;m not sure where I first heard it from either, and I&amp;rsquo;ve
extended upon it somewhat since.&lt;/p&gt;
&lt;p&gt;The key to making this work well is my one-byte &lt;code&gt;.gitignore&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this line, and git will ignore all of the files in my $HOME directory, so I
needn&amp;rsquo;t worry about leaving personal files, music, videos, other git
repositories, and so on, in my public dotfiles repo. But, in order to track
anything at all, we need to override the gitignore file on a case-by-case basis
with &lt;code&gt;git add -f&lt;/code&gt;, or &lt;code&gt;--force&lt;/code&gt;. To add my vimrc, I used the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add -f .vimrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then I can commit and push normally, and .vimrc is tracked by git. The gitignore
file does not apply to any files which are already being tracked by git, so any
future changes to my vimrc show up in git status, git diff, etc, and can be
easilly committed with &lt;code&gt;git commit -a&lt;/code&gt;, or added to the staging area normally
with &lt;code&gt;git add&lt;/code&gt; — using &lt;code&gt;-f&lt;/code&gt; is no longer necessary. Setting up a new
machine is quite easy. After the installation, I run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~
git init
git remote add origin git@git.sr.ht:~sircmpwn/dotfiles
git fetch
git checkout -f master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A quick log-out and back in and I feel right at $HOME. Additionally, I have
configured $HOME as a prefix, so that ~/bin is full of binaries, ~/lib has
libraries, and so on; though I continue to use ~/.config rather than ~/etc. I
put $HOME/bin ahead of anything else in my path, which allows me to shadow
system programs with wrapper scripts as necessary. For example, ~/bin/xdg-open
is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;%%:*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; in
	http&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;https&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;*.pdf&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; qutebrowser &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
	mailto&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; aerc &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
	*&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; /usr/bin/xdg-open &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Replacing the needlessly annoying-to-customize xdg-open with one that just
does what I want, falling back to /usr/bin/xdg-open if necessary. Many other
non-shadowed scripts and programs are found in ~/bin as well.&lt;/p&gt;
&lt;p&gt;However, not all of my computers are configured equally. Some run different
Linux (or non-Linux) distributions, or have different concerns being desktops,
servers, laptops, phones, etc. It&amp;rsquo;s often useful for this reason to be able to
customize my configuration for each host. For example, before $HOME/bin in my
$PATH, I have $HOME/bin/$(hostname). I also run several machines on
different architectures, so I include $HOME/bin/$(uname -m)&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; as well. To
customize my sway configuration to consider the different device configurations
of each host, I use the following directive in ~/.config/sway/config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include ~/.config/sway/`hostname`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then I have a host-specific configuration there, also tracked by git so I can
conveniently update one machine from another. I take a similar approach to
per-host configuration for many other pieces of software I use.&lt;/p&gt;
&lt;p&gt;Rather than using (and learning) any specialized tools, I find my needs quite
adequately satisfied by a simple composition of several Unix primitives with a
tool I&amp;rsquo;m already very familiar with: git. Version controlling your configuration
files is a desirable trait even with other systems, so why not ditch the
middleman?&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;code&gt;uname -m&lt;/code&gt; prints out the system architecture. Try it for yourself, I bet it&amp;rsquo;ll read &amp;ldquo;x86_64&amp;rdquo; or maybe &amp;ldquo;aarch64&amp;rdquo;. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>PinePhone review</title>
      <link>./2019/12/18/PinePhone-review.html</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/12/18/PinePhone-review.html</guid>
      <description>&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: Holy shit! This is the phone I have always wanted. I have never been
this excited about the mobile sector before. However: the software side is
totally absent — phone calls are very dubious, SMS is somewhat dubious,
LTE requires some hacks, and everything will have to be written from the ground
up.&lt;/p&gt;
&lt;p&gt;I have a PinePhone developer edition model, which I paid for out of pocket&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
and which took an excruciatingly long time to arrive. When it finally arrived,
it came with no SIM or microSD card (expected), and the eMMC had some half-assed
version of Android on it which just boot looped without POSTing to anything
useful&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. This didn&amp;rsquo;t bother me in the slightest — like any other
computer I&amp;rsquo;ve purchased, I planned on immediately flashing my own OS on it. My
Linux distribution of choice for it is
&lt;a href=&#34;https://postmarketos.org/&#34;&gt;postmarketOS&lt;/a&gt;, which is basically the mobile OS I&amp;rsquo;d
build if I wanted to build a mobile OS.&lt;/p&gt;
&lt;p&gt;Let me make this clear: &lt;strong&gt;right now, there are very few people, perhaps only
dozens, for whom this phone is the right phone, given the current level of
software support&lt;/strong&gt;. I am not using it as my daily driver, and I won&amp;rsquo;t for some
time. The only kind of person I would recommend this phone to is a developer who
believes in the phone and wants to help build the software necessary for it to
work.  However, it seems to me that all of the right people &lt;em&gt;are&lt;/em&gt; working on the
software end of this phone — everyone I&amp;rsquo;d expect from the pmOS community,
from KDE, from the kernel hackers — this phone has an unprecedented level
of community support and the software &lt;em&gt;will&lt;/em&gt; be written.&lt;/p&gt;
&lt;p&gt;So, what&amp;rsquo;s it actually like?&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Expand for a summary of the specs&lt;/summary&gt;
  &lt;p&gt;
    The device is about
    &lt;abbr title=&#34;The thickness of a GameBoy cartridge&#34;&gt;1 cm thick&lt;/abbr&gt;
    and weighs
    &lt;abbr
      title=&#34;The weight of one GameBoy Color, with batteries, without cartridge&#34;
    &gt;188 grams&lt;/abbr&gt;. The screen is about 16 cm tall, of which 1.5 cm is bezel,
    and &lt;abbr
      title=&#34;About the width and height of a GameBoy color, plus 1 inch of height&#34;
    &gt;7.5 cm wide&lt;/abbr&gt; (5 mm of bezel). The physical size and weight is very
    similar to my daily driver, a Samsung Galaxy J7 Refine. It has a USB-C port,
    which I understand can be reconfigured for DisplayPort, and a standard
    headphone jack and speakers, both of which sound fine in my experience. The
    screen is 720x1440, and looks about as nice as any other phone. It has
    front- and back-facing cameras, which I&#39;ve yet to get working (I understand
    that someone has got them working at some point), plus a flash/lamp on the
    back, and an &lt;abbr
      title=&#34;Note that the only values for R, G, and B that I&#39;ve managed to get working are 0.0 and 1.0 each, for a total of 7 possible colors (including off)&#34;
    &gt;RGB LED&lt;/abbr&gt; on the front.
  &lt;/p&gt;
  &lt;p&gt;
    The eMMC is 16G and, side note, had &lt;em&gt;seventeen&lt;/em&gt; partitions on it when
    I first got the phone. 2G of RAM, 4 cores. It&#39;s not very powerful, but in my
    experience it runs lightweight UIs (such as &lt;a
    href=&#34;https://swaywm.org&#34;&gt;sway&lt;/a&gt;) just fine. With very little effort by
    way of power management, and with obvious power sinks left unfixed, the
    battery lasts about 5 hours.
  &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;In short, I&amp;rsquo;m quite satisfied with it, but I&amp;rsquo;ve never had especially strenuous
demands of my phone. I haven&amp;rsquo;t run any benchmarks on the GPU, but it seems
reasonably fast and the open-source Lima driver supports GLESv2. The modem is
supported by &lt;a href=&#34;https://01.org/ofono&#34;&gt;Ofono&lt;/a&gt;, which is a telephony daemon based on
dbus — however, I understand that we can just open &lt;code&gt;/dev/ttyUSB1&lt;/code&gt; and talk
to the modem ourselves, and I may just write a program that does this. Using
Ofono, I have successfully spun up LTE internet, sent and received SMS messages,
and placed and answered phone calls - though the last one without working
audio. A friend from KDE, Bhushan Shah, is working on this and rumor has it that
a call has successfully been placed. I have not had success with MMS, but I
think it&amp;rsquo;s possible. WiFi works. All of this with zero blobs and a kernel which
is&amp;hellip; admittedly, pretty heavily patched, but &lt;a href=&#34;https://gitlab.com/pine64-org/linux&#34;&gt;open
source&lt;/a&gt; and making its way upstream.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Of course, no one wants to place phone calls by typing a lengthy command into
their terminal, but that these features can be done in an annoying way means
that it&amp;rsquo;s feasible to write applications that do this in a convenient way. For
my part, I have been working on some components of a mobile-friendly Wayland
compositor, based on Sway, which I&amp;rsquo;m calling Sway Mobile for the time being. I&amp;rsquo;m
not sure if Sway will actually stick around once it becomes difficult to bend to
my will (it&amp;rsquo;s designed for keyboard-driven operation, after all), but I&amp;rsquo;m
building mobile shell components which will translate nicely to any other
wlroots-based compositors.&lt;/p&gt;
&lt;p&gt;The first of these is a simple app drawer, which I&amp;rsquo;ve dubbed
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/casa&#34;&gt;casa&lt;/a&gt;. I have a lot more stuff planned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new bar/notification drawer/quick action thing&lt;/li&gt;
&lt;li&gt;A dialer &amp;amp; call manager, maybe integrated with gnome-contacts&lt;/li&gt;
&lt;li&gt;A telephony daemon which records incoming SMS messages and pulls up the call
manager for incoming phone calls. Idea: write incoming SMS messages into a
Maildir.&lt;/li&gt;
&lt;li&gt;A new touch-friendly Wayland lock screen&lt;/li&gt;
&lt;li&gt;An on-screen keyboard program&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s a video showing casa in action:&lt;/p&gt;
&lt;p&gt;&lt;video
src=&#34;https://yukari.sr.ht/casa.webm?cache-break&#34;
style=&#34;max-width: 50%; margin: 0 auto; display: block&#34;
autoplay loop muted &gt;
Your browser does not support webm playback. Please choose a browser which
supports free and open standards.
&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;The latest version has 4 columns and uses the space a bit better. Also, in the
course of this work I put together the
&lt;a href=&#34;https://gitlab.freedesktop.org/ddevault/fdicons&#34;&gt;fdicons&lt;/a&gt; library, which may be
useful to some.&lt;/p&gt;
&lt;p&gt;I have all sorts of other small things to work on, like making audio behave
better and improving power management. I intend to contribute these tools to
postmarketOS upstream as a nice lightweight plug-and-play UI package you can
choose from when installing pmOS, either improving their existing
postmarketos-ui-sway meta-package or making something new.&lt;/p&gt;
&lt;p&gt;In conclusion: I have been waiting for this phone for years and years and years.
I have been hoping that someone would make a phone whose hardware was compatible
with upstream Linux drivers, and could &lt;em&gt;theoretically&lt;/em&gt; be used as a daily driver
if only the software were up to snuff. I wanted this because I knew that the
free software community was totally capable of building the software for such a
phone, if only the hardware existed. This is actually happening — all of
the free software people I would hope are working on the PinePhone, are working
on the PinePhone. And it&amp;rsquo;s only $150! I could buy four of them for the price of
the typical smartphone! And I just might!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;In other words, no one paid me to or even asked me to write this review. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I understand that the final production run of the PinePhone is going to ship with postmarketOS or something. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The upstream kernel actually does work if you patch in the DTS, but WiFi doesn&amp;rsquo;t work and it&amp;rsquo;s not very stable. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Developers shouldn&#39;t distribute their own software</title>
      <link>./2019/12/09/Developers-shouldnt-distribute.html</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/12/09/Developers-shouldnt-distribute.html</guid>
      <description>&lt;p&gt;An oft-heard complaint about Linux is that software distribution often takes
several forms: a Windows version, a macOS version, and&amp;hellip; a Debian version, an
Ubuntu version, a Fedora version, a CentOS version, an openSUSE version&amp;hellip; but
these complaints miss the point. The true distributable form for Linux software,
and rather for Unix software in general, is a .tar.gz file containing the source
code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This article presumes that proprietary/nonfree software is irrelevant,
and so should you.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s not to imply that end-users should take this tarball and run &lt;code&gt;./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install&lt;/code&gt; themselves. Rather, the responsibility for
end-user software distribution is on the distribution itself. That&amp;rsquo;s why we call
it a &lt;em&gt;distribution&lt;/em&gt;. This relationship may feel like an unnecessary middleman to
the software developer who just wants to get their code into their user&amp;rsquo;s hands,
but on the whole this relationship has far more benefits than drawbacks.&lt;/p&gt;
&lt;p&gt;As the old complaint would suggest, there are hundreds of variants of Linux
alone, not to mention the BSD flavors and any novel new OS that comes out next
week. Each of these environments has its own take on how the system as a whole
should be organized and operate, and it&amp;rsquo;s a fools&#39; errand for a single team to
try and make sense of it all. More often than not, software which tries to field
this responsibility itself sticks out like a sore thumb on the user&amp;rsquo;s operating
system, totally flying in the face the conventions set out by the distribution.&lt;/p&gt;
&lt;p&gt;Thankfully, each distro includes its own set of volunteers dedicated to this
specific job: packaging software for the distribution and making sure it
conforms to the norms of the target environment. This model also adds a set of
checks and balances to the system, in which the distro maintainers can audit
each other&amp;rsquo;s work for bugs and examine the software being packaged for
anti-features like telemetry or advertisements, patching it out as necessary.
These systems keep malware out of the repositories, handle distribution of
updates, cryptographically verifying signatures, scaling the distribution out
across many mirrors - it&amp;rsquo;s a robust system with decades of refinement.&lt;/p&gt;
&lt;p&gt;The difference in trust between managed software repositories like Debian,
Alpine Linux, Fedora, and so on; and unmanaged software repositories like PyPI,
npm, Chrome extensions, the Google Play store, Flatpak, etc — is starkly
obvious. Debian and its peers are full of quality software which integrates well
into the host system and is free of malware. Unmanaged repositories, however,
are &lt;a href=&#34;https://www.zdnet.com/article/two-malicious-python-libraries-removed-from-pypi/&#34;&gt;constant sources&lt;/a&gt; for crapware and malware. I don&amp;rsquo;t trust
developers to publish software with my best interests in mind, and developers
shouldn&amp;rsquo;t ask for that level of trust. It&amp;rsquo;s only through a partnership with
distributions that we can build a mutually trustworthy system for software
distribution.&lt;/p&gt;
&lt;p&gt;Some developers may complain that distros ship their software too slowly, but
you shouldn&amp;rsquo;t sweat it. End-user distros ship updates reasonably quickly, and
server distros ship updates at a schedule which meets the user&amp;rsquo;s needs. This
inconsistent pace in release schedules among free software distributions is a
feature, not a bug, and allows the system to work to the needs of its specific
audience. You should use a distro that ships updates to &lt;em&gt;you&lt;/em&gt; at the pace you
wish, and let your users do the same.&lt;/p&gt;
&lt;p&gt;So, to developers: just don&amp;rsquo;t worry about distribution! Stick a tarball on your
release page and leave the rest up to distros. And to users: install packages
from your distro&amp;rsquo;s repositories, and learn how its packaging process works so
you can get involved when you find a package missing. It&amp;rsquo;s not as hard as it
looks, and they could use your help. For my part, I work both as a developer,
packager, and end-user, publishing my software as tarballs, packaging some of it
up for my &lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=&amp;amp;branch=edge&amp;amp;arch=x86_64&amp;amp;maintainer=Drew+DeVault&#34;&gt;distro of choice&lt;/a&gt;, report bugs to other maintainers, and field
requests from maintainers of other distros as necessary. Software distribution
is a social system and it works.&lt;/p&gt;
</description>
    </item><item>
      <title>Take action to save .org and prosecute those who sold out the internet</title>
      <link>./2019/11/29/dotorg.html</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/11/29/dotorg.html</guid>
      <description>&lt;p&gt;As many of you have no doubt heard, control of the .org registry has been sold
to private interests. There have been attempts to call them to reason, like
&lt;a href=&#34;https://savedotorg.org/&#34;&gt;Save .ORG&lt;/a&gt;, but let&amp;rsquo;s be realistic: they knew what
they&amp;rsquo;re doing is wrong, the whole time. If they were a commercial entity, our
appeals would fall on deaf ears and that would be the end of it. But, they&amp;rsquo;re
not a commercial entity - so our appeals may fall on deaf ears, but that doesn&amp;rsquo;t
have to be the end of it.&lt;/p&gt;
&lt;p&gt;The level of corruption on display by the three organizations involved in this
scam: ICANN (Internet Corporation for Assigned Names and Numbers), ISOC (The
Internet Society), and PIR (Public Interest Registry), is astounding and very
illegal. If you are not familiar with the matter, click this to read a summary:&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Summary of the corrupt privatization of .org&lt;/summary&gt;
  &lt;p&gt;
    The governance of names on the internet is kind of complicated. ISOC
    oversees a lot of activities in internet standards and governance, but their
    role in this mess is as the parent company of PIR. PIR is responsible for
    the .org registry, which oversees the governance of .org directly and
    collects fees for every sale of a .org domain. ICANN is the broader
    authority which oversees all domain allocation on the internet, and also
    collects a fee for every domain sold. There&#39;s a complex web of documents and
    procedures which govern these three organizations, and the name system as a
    whole, and all three of them were involved in this process. Each of these
    organizations is a non-profit, except for PIR, which in the course of this
    deal is trying to convert to a B corp.
  &lt;/p&gt;
  &lt;p&gt;
    ICANN can set price limits on the sale of .org domains. In March of 2019,
    they proposed removing these price caps entirely. During the period for
    public comment, they received 3,300 comments against, and 6 in favor. On May
    13, they removed these price caps anyway.
  &lt;/p&gt;
  &lt;p&gt;
    In November 2019, ISOC announced that they had approved the sale of PIR, the
    organization responsible for .org, to Ethos Capital, for an unspecified
    amount. According to
    &lt;a
      href=&#34;https://www.internetsociety.org/board-of-trustees/minutes/147&#34;
      rel=&#34;nofollow noopener&#34;
    &gt;the minutes&lt;/a&gt;, the decision to approve this sale was unanimously voted on
    by the board. Additionally, it seems that Goldman Sachs had been involved in
    the sale to some degree.
  &lt;/p&gt;
  &lt;p&gt;
    Fadi Chehadé became the CEO of ICANN in 2012. In 2016, he leaves his
    position before it expires to start a consulting company, and he later joins
    Abry Partners. One of the 3 partners is Erik Brooks. They later acquire
    Donuts, a private company managing domains. Donuts co-founder Jon Nevett
    becomes the CEO of PIR in December 2018. On May 7th, Chehadé registers
    EthosCapital.com, and on May 13th ICANN decided to remove the price caps
    despite 0.2% support from the public. On May 14th, the following day, Ethos
    Capital was incorporated, with Brooks as the CEO. In November 2019, ISOC
    approved the acquisition of PIR by Ethos Capital, a for-profit company.
  &lt;/p&gt;
  &lt;p&gt;
    These are the names of the criminals who sold the internet. If you want to
    read more, &lt;a
      href=&#34;https://www.privateinternetaccess.com/blog/2019/11/isoc-pir-ethos-capital-deal-timeline/&#34;
      rel=&#34;noopener&#34;
    &gt;Private Internet Access&lt;/a&gt; has a good write-up.
  &lt;/p&gt;
  &lt;p&gt;Okay, now let&#39;s talk about what you can do about it.&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;If you are familiar with the .org heist, then like me, you&amp;rsquo;re probably pissed
off. Here&amp;rsquo;s how you can take action: all of these organizations are 501c3
non-profits. The sale of a non-profit to a for-profit entity like this is
illegal without very specific conditions being met. Additionally, this kind of
behavior is not the sort the IRS likes to see in a tax-exempt organization.
Therefore, we can take the following steps to put a stop to this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write to the CA and VA attorney general offices encouraging them to
investigate the misbehavior of these three non-profits, which are
incorporated in their respective states.&lt;/li&gt;
&lt;li&gt;File form 13909 with the IRS, encouraging them to review the organization&amp;rsquo;s
non-profit status.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This kind of behavior is illegal. The sale of a non-profit requires a letter
from the Attorneys General in both California (ICANN) and Virginia (ISOC, PIR).
Additionally, much of this behavior qualifies as &amp;ldquo;self-dealing&amp;rdquo;, or leveraging
one&amp;rsquo;s power within an organization for their own benefit, rather than the
benefit of the organization. To report this, I&amp;rsquo;ve prepared a letter to the CA
and VA Attorney&amp;rsquo;s General offices, which you can read here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yukari.sr.ht/ag-letter.pdf&#34;&gt;Letter to the Attorney General&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I encourage you to consider writing a letter of your own, but I would not
recommend copying and pasting this letter. However, this kind of behavior is
also illegal in the eyes of the IRS, and a form is provided for this purpose.
Form 13909 is the appropriate means for reporting this behavior. You can
download a pre-filled form here, and I do encourage you to submit one this
yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yukari.sr.ht/dotorg-form-13909.pdf&#34;&gt;Form 13909 for ICANN and ISOC complaints (PDF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yukari.sr.ht/dotorg-form-13909.odg&#34;&gt;Form 13909 for ICANN and ISOC complaints (ODG)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This only includes complaints for ICANN and ISOC, as PIR is seeking to lose its
non-profit status anyway. You can print out the PDF, fill in your details on
both pages, and mail it to the address printed on the form; or you can download
the ODG, open it up with LibreOffice Draw, and fill in the remaining details
digitally, then email it to the address shown on the page.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Happy Thanksgiving! Funny how this all happened right when the American public
would be distracted&amp;hellip;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Crash course in LibreOffice Draw: press F2, then click and drag to make a new textbox. Select text and use Ctrl+[ to reduce the font size to something reasonable. The red button on the toolbar along the top will export the result as a PDF. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Software developers should avoid traumatic changes</title>
      <link>./2019/11/26/Avoid-traumatic-changes.html</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/11/26/Avoid-traumatic-changes.html</guid>
      <description>&lt;p&gt;A lot of software has gone through changes which, in retrospect, I would
describe as &amp;ldquo;traumatic&amp;rdquo; to their communities. I recognize these sorts of changes
by their effect: we might have pulled through in the end, but only after a lot
of heartbreak, struggle, and hours of wasted hacking; but the change left a scar
on the community.&lt;/p&gt;
&lt;p&gt;There are two common cases in which a change risks introducing this kind of
trauma:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It requires everyone in the community, or nearly everyone, to overhaul their
code to get it &lt;strong&gt;working&lt;/strong&gt; again&lt;/li&gt;
&lt;li&gt;It requires everyone in the community, or nearly everyone, to overhaul their
code to get it &lt;strong&gt;idiomatic&lt;/strong&gt; again&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s call these cases, respectively, strong and weak trauma. While these are
both traumatic changes, the kind of trauma they inflict on the community is
different. The first kind is more severe, but the latter is a bad idea, too. We
can examine these through two case-studies in Python: the (in)famous transition
to Python 3, and the less notorious introduction of asyncio.&lt;/p&gt;
&lt;p&gt;In less than one month, Python 2 will reach its end of life, and even as a
staunch advocate of Python 3, I too have some software which is not going to
make it to the finish line in time&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. There&amp;rsquo;s no doubt that Python 3 is much,
much better than Python 2. However, the transition was poorly handled, and
upgrading can be no small task for some projects. The result has been hugely
divisive and intimately familiar to anyone who works with Python, creating
massive rifts in the community and wasting millions of hours of engineer time
addressing. This kind of &amp;ldquo;strong&amp;rdquo; trauma is fairly easy to spot in advance.&lt;/p&gt;
&lt;p&gt;The weaker kind of traumatic change is more subtle, and less talked about. It&amp;rsquo;s
a slow burn, and it takes a long time for its issues to manifest. Consider the
case of asyncio: clearly it&amp;rsquo;s an improvement for Python, whose previous attempts
at concurrency have fallen completely flat. The introduction of async/await and
coroutines throughout the software ecosystem is something I&amp;rsquo;m generally very
pleased about. You&amp;rsquo;ll see me reach for threads to solve a problem when hell
freezes over, and no earlier, so I&amp;rsquo;m quite fond of first-class coroutines.&lt;/p&gt;
&lt;p&gt;Unfortunately, this has a chilling effect on existing Python code.  The
introduction of asyncio has made large amounts of code idiomatically obsolete.
Requests, the darling of the Python world, is effectively useless in a
theoretical idiomatic post-asyncio world. The same is true of Flask, SQLAlchemy,
and many, many other projects. Just about anything that does I/O is unidiomatic
now.&lt;/p&gt;
&lt;p&gt;Since nothing has actually &lt;em&gt;broken&lt;/em&gt; with this change, the effects are more
subtle than with strong traumatic changes. The effect of asyncio has been to
hasten the onset of code rot. Almost all of SourceHut&amp;rsquo;s code pre-dates asyncio,
for example, and I&amp;rsquo;m starting to feel the limitations of the pre-asyncio model.
The opportunity to solve this problem by rewriting with asyncio in mind,
however, also presents me a chance to rewrite in anything else, and reevaluate
my choice of Python for the project entirely. It&amp;rsquo;s a tough decision to think
about — the mature and diverse ecosystem of libraries that help to make a
case for Python is dramatically reduced when asyncio support is a consideration.&lt;/p&gt;
&lt;p&gt;It may take years for the trauma to fully manifest, but the rift is still there
and can only grow. Large amounts of code is rotting and will have to be thrown
away for the brave new asyncio world. The introduction of asyncio has made
another clear &amp;ldquo;before&amp;rdquo; and &amp;ldquo;after&amp;rdquo; in the Python ecosystem. The years in between
will be rough, because all new Python code will either leverage the rotting
pre-asyncio ecosystem or suffer through an immature post-asyncio ecosystem.
It&amp;rsquo;ll likely turn out for the better — years from now.&lt;/p&gt;
&lt;p&gt;And sometimes these changes &lt;em&gt;are&lt;/em&gt; for the better, but they should be carefully
thought out, and designed to minimize the potential impact. In practical terms,
it&amp;rsquo;s for this reason that I urge caution with ideas like adding generics to
Go. In a post-generics world, a large amount of the Go ecosystem will suddenly
become unidiomatic, and breaking changes will required to bring it up to spec.
Let&amp;rsquo;s think carefully about it, eh?&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Eh, kind of. I&amp;rsquo;m theoretically behind the effort to drop Python 2 from Alpine Linux, but the overhaul is tons of work and the time I can put into the effort isn&amp;rsquo;t going to be enough to finish before 2020. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>China</title>
      <link>./2019/11/20/China.html</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/11/20/China.html</guid>
      <description>&lt;p&gt;This article will be difficult to read and was difficult to write. I hope that
you can stomach the uncomfortable nature of this topic and read my thoughts in
earnest.  I usually focus on technology-related content, but at the end of the
day, this is my personal blog and I feel that it would betray my personal
principles to remain silent. I&amp;rsquo;ve made an effort to provide citations for all of
my assertions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: if you are interested in conducting an independent review of the
factuality of the claims expressed in this article, please &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;contact
me&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The keyboard I&amp;rsquo;m typing these words into bears &amp;ldquo;Made in China&amp;rdquo; on the bottom.
The same is true of the monitor I&amp;rsquo;m using to edit the article. It&amp;rsquo;s not true of
all of my electronics — the graphics processing unit which is driving the
monitor was made in Taiwan&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and my phone was made in
Vietnam.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; Regardless, there&amp;rsquo;s no doubt that my life would be,
to some degree, worse off if not for trade with China. Despite this, I am
prepared to accept the consequences of severing economic relations with China.&lt;/p&gt;
&lt;p&gt;How bad would being cut-off from China&amp;rsquo;s economy be? We&amp;rsquo;re a net importer from
China, and by over 4 times the volume.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; Let&amp;rsquo;s assume, in
the worst case, trade ties were completely severed. The United States would be
unable to buy $155B worth of electronics, which we already have domestic
manufacturing capabilities for&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; and which have a productive
life of several years. We could definitely stand to get used to repairing and
reusing these instead of throwing them out. We&amp;rsquo;d lose $34B in mattresses and
furniture — same story. The bulk of our imports from China are luxury
goods that we can already make here at home&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; — it&amp;rsquo;s just
cheaper to buy them from China. But cheaper for whom?&lt;/p&gt;
&lt;p&gt;This gets at the heart of the reason why we&amp;rsquo;re tied to China economically. It&amp;rsquo;s
economically productive &lt;em&gt;for the 1%&lt;/em&gt; to maintain a trade relationship with
China. The financial incentives don&amp;rsquo;t help any Americans, and in fact, most of
us are hurt by this relationship.&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; Trade is what keeps
us shackled to the Chinese Communist Party government, but it&amp;rsquo;s not beneficial
to anyone but those who are already obscenely rich, and certainly not for our
poorest — who, going into 2020, are as likely to be high school dropouts
as they are to be doctors.&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;So, we can cut off China. Why should we? Let&amp;rsquo;s lay out the facts: China is
conducting human rights violations on the largest scale the world has seen since
Nazi Germany. China executes political prisoners&lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; and
harvests their organs for transplant to sick elites on an industrial scale,
targeting and killing civilians based on not only political, but also ethnic and
religious factors. This is commonly known as genocide. China denies using the
organs of prisoners, but there&amp;rsquo;s credible doubt&lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; from
the scientific community.&lt;/p&gt;
&lt;p&gt;Recent evidence directly connecting executions to organ harvesting is somewhat
unreliable, but I don&amp;rsquo;t think China deserves the benefit of the doubt.
China is a world leader in executions, and is believed to conduct more
executions than the rest of the world combined.&lt;sup id=&#34;fnref:10&#34;&gt;&lt;a href=&#34;#fn:10&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;
Wait times for organ transplantation are extraordinarily low in
China,&lt;sup id=&#34;fnref:11&#34;&gt;&lt;a href=&#34;#fn:11&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;11&lt;/a&gt;&lt;/sup&gt; on the order of weeks — in most of the developed
world these timeframes are measured in terms of years,&lt;sup id=&#34;fnref:12&#34;&gt;&lt;a href=&#34;#fn:12&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;12&lt;/a&gt;&lt;/sup&gt; and China has
been unable to explain the source for tens of thousands of transplants in the
past&lt;sup id=&#34;fnref:13&#34;&gt;&lt;a href=&#34;#fn:13&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;13&lt;/a&gt;&lt;/sup&gt;. And, looking past recent evidence, China directly admitted to
using the organs of executed prisoners in 2005.&lt;sup id=&#34;fnref:14&#34;&gt;&lt;a href=&#34;#fn:14&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;14&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;These atrocities are being committed against cultural minorities to further
China&amp;rsquo;s power. The UN published a statement in August 2018 stating that they
have credible reports of over a million ethnic Uighurs being held in internment
camps in Xinjiang,&lt;sup id=&#34;fnref:15&#34;&gt;&lt;a href=&#34;#fn:15&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;15&lt;/a&gt;&lt;/sup&gt; imprisoned with various other ethnic
minorities from the region. Leaks in November 2019 reported by the New York
Times showed that China admits the imprisoned have committed no crimes other
than dissent,&lt;sup id=&#34;fnref:16&#34;&gt;&lt;a href=&#34;#fn:16&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;16&lt;/a&gt;&lt;/sup&gt; and that the camps were to be run with, quote,
&amp;ldquo;absolutely no mercy&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s nice to believe that we would have stood up to Nazi Germany if we had been
there in the 1940&amp;rsquo;s. China is our generation&amp;rsquo;s chance to prove ourselves of that
conviction. We talk a big game about fighting against white nationalists in our
own country, and pride ourselves on standing up against &amp;ldquo;fascists&amp;rdquo;. It&amp;rsquo;s time we
turned attention to the real fascists, on the world stage.&lt;/p&gt;
&lt;p&gt;Instead, the staunch capitalism of America, and the West as a whole, has swooped
in to leverage Chinese fascism for a profit. Marriott Hotels apologized for
listing Hong Kong, Macau, and Taiwan as countries separate from China.&lt;sup id=&#34;fnref:17&#34;&gt;&lt;a href=&#34;#fn:17&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;17&lt;/a&gt;&lt;/sup&gt;
Apple removed the Taiwanese flag from iOS in China and the territories it
claims.&lt;sup id=&#34;fnref:18&#34;&gt;&lt;a href=&#34;#fn:18&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;18&lt;/a&gt;&lt;/sup&gt; Activision/Blizzard banned several players for making pro-Hong
Kong statements in tournaments and online.&lt;sup id=&#34;fnref:19&#34;&gt;&lt;a href=&#34;#fn:19&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;19&lt;/a&gt;&lt;/sup&gt; These behaviors make me
ashamed to be an American.&lt;/p&gt;
&lt;p&gt;Fuck that.&lt;/p&gt;
&lt;p&gt;A brief history lesson: Hong Kong was originally controlled by the United
Kingdom at the end of the Opium Wars. It&amp;rsquo;s beyond the scope of this article, but
it&amp;rsquo;ll suffice to say that the United Kingdom was brutal and out of line, and the
end result is that Hong Kong became a British colony. Because of this, it was
protected from direct Chinese influence during China&amp;rsquo;s turbulent years
following, and they were insulated from the effects of the Great Leap Forward
and the Cultural Revolution, which together claimed tens of millions of lives
and secured the Communist Party of China&amp;rsquo;s power into the present.&lt;/p&gt;
&lt;p&gt;On July 1st, 1997, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Sino-British_Joint_Declaration&#34;&gt;Sino-British Joint
Declaration&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=k7YzJzq1Mvk&#34;&gt;went
into effect&lt;/a&gt;, and Hong Kong was
turned over to China. The agreement stipulated that Hong Kong would remain
effectively autonomous and self-governing for a period of 50 years —
until 2047. China has been gradually and illegally eroding that autonomy
ever since. Today, Hong Kong citizens have effectively no representation in
their government. The Legislative Council of Hong Kong has been deliberately
engineered by China to be pro-Beijing — a majority of the council is
selected through processes with an inherent pro-Beijing bias, giving Hong Kong
effectively no autonomous power to pass laws.&lt;sup id=&#34;fnref:20&#34;&gt;&lt;a href=&#34;#fn:20&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;20&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Hong Kong&amp;rsquo;s executive branch is even worse. The Chief Executive of Hong Kong
(Carrie Lam) is elected by a committee of 1,200 members largely controlled by
pro-Beijing seats, from a pool of pro-Beijing candidates, and the people have
effectively no representation in the election. The office has been held by
pro-Beijing politicians since it was established.&lt;sup id=&#34;fnref:21&#34;&gt;&lt;a href=&#34;#fn:21&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;21&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The ongoing protests in Hong Kong were sparked by a mainland attempt to rein
in Hong Kong&amp;rsquo;s judicial system in a similar manner, with the introduction of the
&amp;ldquo;Fugitive Offenders and Mutual Legal Assistance in Criminal Matters Legislation
(Amendment) Bill 2019&amp;rdquo;,&lt;sup id=&#34;fnref:22&#34;&gt;&lt;a href=&#34;#fn:22&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;22&lt;/a&gt;&lt;/sup&gt; which would have allowed the authorities
to extradite suspects awaiting trial to mainland China. These protests inspired
the Hong Kong people to stand up against all of the injustices they have faced
from China&amp;rsquo;s illegal encroachments on their politics. The protesters have five
demands:&lt;sup id=&#34;fnref:23&#34;&gt;&lt;a href=&#34;#fn:23&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;23&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Complete withdrawal of the extradition bill&lt;/li&gt;
&lt;li&gt;No prosecution of the protesters&lt;/li&gt;
&lt;li&gt;Retraction of the characterization of the protests as &amp;ldquo;riots&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Establish an independent inquiry into police misconduct&lt;/li&gt;
&lt;li&gt;Resignation of Carrie Lam and the implementation of universal suffrage&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Their first demand has been met, but the others are equally important and the
protests show no signs of slowing. Unfortunately, China shows no signs of
slowing their crackdown either, and have been consistently escalating the
matter. The police are now threatening to use live rounds on the
protesters,&lt;sup id=&#34;fnref:24&#34;&gt;&lt;a href=&#34;#fn:24&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;24&lt;/a&gt;&lt;/sup&gt; and people are already being shot in the
streets.&lt;sup id=&#34;fnref:25&#34;&gt;&lt;a href=&#34;#fn:25&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;25&lt;/a&gt;&lt;/sup&gt; China is going to kill the protesters, [again][tiananmen].&lt;/p&gt;
&lt;p&gt;The third demand — the retraction of the characterization of the
demonstrations as &amp;ldquo;riots&amp;rdquo; — and the government&amp;rsquo;s refusal to meet it,
conveys a lot about China&amp;rsquo;s true intentions. Chinese law defines rioting as a
capital offense,&lt;sup id=&#34;fnref:26&#34;&gt;&lt;a href=&#34;#fn:26&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;26&lt;/a&gt;&lt;/sup&gt; and we&amp;rsquo;ve already demonstrated their
willingness to execute political prisoners on a massive scale. These protesters
are going to be killed if their demands aren&amp;rsquo;t met.&lt;sup id=&#34;fnref:27&#34;&gt;&lt;a href=&#34;#fn:27&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;27&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Hong Kong is the place where humanity makes its stand against oppressors. The
people of Hong Kong have been constant allies to the West, and their liberty is
at stake. If we want others to stand up for us when our liberties are on the
line, then it&amp;rsquo;s our turn to pay it forward now. The founding document of the
United States of America&lt;sup id=&#34;fnref:28&#34;&gt;&lt;a href=&#34;#fn:28&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;28&lt;/a&gt;&lt;/sup&gt; describes the rights they&amp;rsquo;re defending as
&amp;ldquo;unalienable&amp;rdquo; — endowed upon all people by their Creator. The people of
Hong Kong are our friends and we&amp;rsquo;re watching them get killed for rights that we
hold dear in our own nation&amp;rsquo;s founding principles.&lt;/p&gt;
&lt;p&gt;We have a legal basis for demanding these rights for Hong Kong&amp;rsquo;s people —
China is blatantly violating their autonomy, which they agreed to uphold
in 1984. The United Kingdom should feel obligated to step in, but they&amp;rsquo;ll need
the support of the international community, which we need to be prepared to give
them. We need to make an ultimatum: if China uses deadly force in Hong Kong,
the international community will respond in kind.&lt;/p&gt;
&lt;p&gt;China isn&amp;rsquo;t the only perpetrator of genocide today, but they are persecuting our
friends. China has the second highest GDP&lt;sup id=&#34;fnref:29&#34;&gt;&lt;a href=&#34;#fn:29&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;29&lt;/a&gt;&lt;/sup&gt; in the world, and somehow
this makes it okay. If we won&amp;rsquo;t stand up to them, then who will? I call for a
worldwide boycott of Chinese products, and of companies who kowtow to their
demands or accept investment from China. I call for international condemnation
of the Communist Party of China&amp;rsquo;s behavior and premise for governance. And I
call for an ultimatum to protect our allies from slaughter.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;An island in the sea east of China governed by the sovereign Republic of China. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Which, admittedly, raises concerns of its own. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.census.gov/foreign-trade/balance/c5700.html&#34;&gt;US Census Bureau, International Trade Data&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.lg.com/us/press-release/lg-electronics-to-build-us-factory-for-home-appliances-in-tennessee&#34;&gt;LG&lt;/a&gt;, &lt;a href=&#34;http://download.intel.com/newsroom/kits/22nm/pdfs/Global-Intel-Manufacturing_FactSheet.pdf&#34;&gt;Intel&lt;/a&gt; (PDF) &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.trademap.org/Bilateral_TS.aspx?nvpm=1%7C842%7C%7C156%7C%7CTOTAL%7C%7C%7C2%7C1%7C1%7C1%7C2%7C1%7C1%7C1%7C1&#34;&gt;ITC Trade Map&lt;/a&gt; &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Source(s): Ebenstein, Avraham, et al. &amp;ldquo;Understanding the Role of China in the ‘Decline’of US Manufacturing.&amp;rdquo; Manuscript, Hebrew University of Jerusalem (2011); &lt;a href=&#34;https://www.epi.org/publication/the-china-toll-deepens-growth-in-the-bilateral-trade-deficit-between-2001-and-2017-cost-3-4-million-u-s-jobs-with-losses-in-every-state-and-congressional-district/&#34;&gt;The China toll deepens&lt;/a&gt;, Robert E. Scott and Zane Mokhiber, Economic Policy Institute &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Source: Ulbrich, Timothy R., and Loren M. Kirk. &amp;ldquo;It’s time to broaden the conversation about the student debt crisis beyond rising tuition costs.&amp;rdquo; American journal of pharmaceutical education 81.6 (2017): 101. &lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:8&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A political prisoner is someone who is imprisoned for political reasons, rather than legal reasons. In the eyes of Chinese law, there may be a legal standing for the imprisonment of some of these people, but because this is often based on dissent from the single political party, I consider these prisoners political as well. A related term is &amp;ldquo;prisoner of conscience&amp;rdquo;, and for the purposes of this article I do not distinguish between the two; the execution of either kind of prisoner is a crime against humanity regardless. &lt;a href=&#34;#fnref:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:9&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Trey, T., et al. &amp;ldquo;Transplant medicine in China: need for transparency and international scrutiny remains.&amp;rdquo; American Journal of Transplantation 16.11 (2016): 3115-3120. &lt;a href=&#34;#fnref:9&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:10&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amnesty.org/en/latest/news/2017/04/china-must-come-clean-about-capital-punishment/&#34;&gt;Death Penalty: World’s biggest executioner China must come clean about ‘grotesque’ level of capital punishment&lt;/a&gt;, Amnesty International, 11 April 2017 &lt;a href=&#34;#fnref:10&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:11&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Jensen, Steven J., ed. The ethics of organ transplantation. CUA Press, 2011. &lt;a href=&#34;#fnref:11&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:12&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;UK has some of the best times in the developed world, and averages about 3 years. Source: &lt;a href=&#34;https://web.archive.org/web/20110903084007/http://www.organdonation.nhs.uk/ukt/statistics/centre-specific_reports/pdf/waiting_time_to_transplant.pdf&#34;&gt;NHS&lt;/a&gt; &lt;a href=&#34;#fnref:12&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:13&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Matas, David, and David Kilgour. &amp;ldquo;An independent investigation into allegations of organ harvesting of Falun Gong practitioners in China.&amp;rdquo; Electronic document accessed September 5 (2007): 2008. &lt;a href=&#34;#fnref:13&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:14&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20140304045314/http://www.thetimes.co.uk/tto/news/world/asia/article2612313.ece&#34;&gt;China to ‘tidy up’ trade in executed prisoners’ organs&lt;/a&gt;, the UK Times, December 3 2005 &lt;a href=&#34;#fnref:14&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:15&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bbc.com/news/world-asia-china-45147972&#34;&gt;China Uighurs: One million held in political camps, UN told&lt;/a&gt;, BBC, 10 August 2018 &lt;a href=&#34;#fnref:15&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:16&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nytimes.com/interactive/2019/11/16/world/asia/china-xinjiang-documents.html&#34;&gt;‘Absolutely No Mercy’: Leaked Files Expose How China Organized Mass Detentions of Muslims&lt;/a&gt;, New York Times, 16 November 2019 &lt;a href=&#34;#fnref:16&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:17&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nytimes.com/2018/01/11/business/china-marriott-tibet-taiwan.html&#34;&gt;Marriott to China: We Do Not Support Separatists&lt;/a&gt;, New York Times, 11 January 2018 &lt;a href=&#34;#fnref:17&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:18&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://qz.com/1723334/apple-removes-taiwan-flag-emoji-in-hong-kong-macau-in-ios-13-1-1/&#34;&gt;Apple bows to China by censoring Taiwan flag emoji&lt;/a&gt;, Quartz, 7 October 2019 &lt;a href=&#34;#fnref:18&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:19&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.npr.org/2019/10/08/768245386/blizzard-entertainment-bans-esports-player-after-pro-hong-kong-comments&#34;&gt;Blizzard Entertainment Bans Esports Player After Pro-Hong Kong Comments&lt;/a&gt;, NPR, 8 October 2019 &lt;a href=&#34;#fnref:19&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:20&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Legislative_Council_of_Hong_Kong#Procedure&#34;&gt;Legislative Council of Hong Kong, Wikipedia&lt;/a&gt; &lt;a href=&#34;#fnref:20&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:21&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Chief_Executive_of_Hong_Kong#List_of_Chief_Executives_of_Hong_Kong&#34;&gt;List of Chief Executives of Hong Kong&lt;/a&gt;, Wikipedia &lt;a href=&#34;#fnref:21&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:22&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hklii.hk/eng/hk/legis/ord/503/index.html&#34;&gt;https://www.hklii.hk/eng/hk/legis/ord/503/index.html&lt;/a&gt; &lt;a href=&#34;#fnref:22&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:23&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://focustaiwan.tw/news/acs/201906270014.aspx&#34;&gt;https://focustaiwan.tw/news/acs/201906270014.aspx&lt;/a&gt; &lt;a href=&#34;#fnref:23&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:24&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.washingtonpost.com/world/hong-kong-police-pummel-university-with-water-cannon-as-officer-hit-by-arrow/2019/11/17/f004c978-091f-11ea-8054-289aef6e38a3_story.html&#34;&gt;Hong Kong police move on university campus, threaten live rounds, retreat before growing flames&lt;/a&gt;, The Washington Post, 17 November 2019
[tiananmen]: &lt;a href=&#34;https://en.wikipedia.org/wiki/1989_Tiananmen_Square_protests&#34;&gt;https://en.wikipedia.org/wiki/1989_Tiananmen_Square_protests&lt;/a&gt; &lt;a href=&#34;#fnref:24&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:25&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://streamable.com/0pexa&#34;&gt;Video (graphic)&lt;/a&gt; &lt;a href=&#34;#fnref:25&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:26&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Criminal Law of the People&amp;rsquo;s Republic of China, &lt;a href=&#34;https://www.cecc.gov/resources/legal-provisions/criminal-law-of-the-peoples-republic-of-china&#34;&gt;translation provided by US Congressional-Executive Commission of China&lt;/a&gt; &lt;a href=&#34;#fnref:26&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:27&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;As pointed out by Hong Kongers reading this article, Hong Kong has a &lt;a href=&#34;https://en.wikipedia.org/wiki/Public_Order_Ordinance&#34;&gt;separate definition of rioting&lt;/a&gt;, which is not a capital offense. For my part, I am not entirely convinced that China isn&amp;rsquo;t planning to use the &amp;ldquo;riots&amp;rdquo; classification as justification for a violent response. &lt;a href=&#34;#fnref:27&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:28&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.archives.gov/founding-docs/declaration-transcript&#34;&gt;Declaration of Independence, full text&lt;/a&gt; &lt;a href=&#34;#fnref:28&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:29&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)&#34;&gt;List of countries by GDP (nominal) - Wikipedia&lt;/a&gt; &lt;a href=&#34;#fnref:29&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, November 2019</title>
      <link>./2019/11/15/Status-update-November-2019.html</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/11/15/Status-update-November-2019.html</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s update is especially exciting, because today marks the 1 year
anniversary of Sourcehut &lt;a href=&#34;https://drewdevault.com/2018/11/15/sr.ht-general-availability.html&#34;&gt;opening it&amp;rsquo;s alpha&lt;/a&gt; to public
registration. I wrote a &lt;a href=&#34;https://sourcehut.org/blog/2019-11-15-sourcehut-1-year-alpha/&#34;&gt;nice long article&lt;/a&gt; which goes into
detail about what Sourcehut accomplished in 2019, what&amp;rsquo;s to come for 2020, and
it lays out the entire master plan for your consideration. Be sure to give that
a look if you have the time. I haven&amp;rsquo;t slowed down on my other projects, though,
so here&amp;rsquo;re some more updates!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been pushing hard on the VR work this month, with lots of help from Simon
Ser. We&amp;rsquo;ve put together &lt;a href=&#34;https://git.sr.ht/~sircmpwn/wxrc&#34;&gt;wxrc&lt;/a&gt; - Wayland XR
Compositor - which does what it says on the tin. It&amp;rsquo;s similar to what you&amp;rsquo;ve
seen in my earlier updates, but it&amp;rsquo;s a bespoke C project instead of a
Godot-based compositor, resulting in something much lighter weight and more
efficient. The other advantage is that it&amp;rsquo;s based on OpenXR, thanks to &lt;a href=&#34;https://gitlab.freedesktop.org/monado/monado/merge_requests?scope=all&amp;amp;utf8=%E2%9C%93&amp;amp;state=all&amp;amp;author_username=ddevault&#34;&gt;our
many&lt;/a&gt; &lt;a href=&#34;https://gitlab.freedesktop.org/monado/monado/merge_requests?scope=all&amp;amp;utf8=%E2%9C%93&amp;amp;state=all&amp;amp;author_username=emersion&#34;&gt;contributions&lt;/a&gt; to Monado, an open-source
OpenXR runtime - the previous incarnations were based on SteamVR, which is
a proprietary runtime and proprietary API. We&amp;rsquo;ve also got 3D Wayland clients
working as of this week, check out our video:&lt;/p&gt;
&lt;video src=&#34;https://yukari.sr.ht/wxrc-demo3.webm&#34; muted autoplay loop&gt;
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
&lt;/video&gt;
&lt;p&gt;This work has generated more patches for a large variety of projects - Mesa,
Wayland, Xorg, wlroots, sway, new Vulkan and OpenXR standards, and more. This
is really cross-cutting work and we&amp;rsquo;re making improvements across the whole
graphics ecosystem to support it.&lt;/p&gt;
&lt;p&gt;Speaking of Wayland, the upcoming Sway release is looking like it&amp;rsquo;s going to be
really good. I mentioned this last month, but we&amp;rsquo;re still on track for getting
lots of great features in - VNC support, foreign toplevel management (taskbars),
input latency reductions, drawing tablet support, and more. I&amp;rsquo;m pretty excited.
I wrote chapters 9 and 9.1 for the Wayland book this month as well.&lt;/p&gt;
&lt;p&gt;In aerc news, thanks entirely to its contributors and not to me, lots of new
features have been making their way in. Message templates are one of them, which
you can take advantage of to customize the reply and forwarded message
templates, or make new templates of your own. aerc has learned AUTH LOGIN
support as well, and received a number of bugfixes. ctools has also seen a
number of patches coming in, including support for echo, tee, and nohup, along
with several bug fixes.&lt;/p&gt;
&lt;p&gt;In totally off-the-wall news, I&amp;rsquo;ve &lt;a href=&#34;./japanese.html&#34;&gt;started a page&lt;/a&gt; cataloguing my
tools and recommendations for Japanese language learners.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all I&amp;rsquo;ve got for you today, I hope it&amp;rsquo;s enough! Thank you for your
continued love and support, I&amp;rsquo;m really proud to be able to work on these
projects for you.&lt;/p&gt;
</description>
    </item><item>
      <title>An old-school shell hack on a line printer</title>
      <link>./2019/10/30/Line-printer-shell-hack.html</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/10/30/Line-printer-shell-hack.html</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been too long since I last did a good hack, for no practical reason other
than great hack value. In my case, these &lt;a href=&#34;https://drewdevault.com/2016/03/22/Integrating-a-VT220-into-my-life.html&#34;&gt;often amount&lt;/a&gt; to a nostalgia
for an age of computing I wasn&amp;rsquo;t present for. In a recent bid to capture more of
this nostalgia, I recently picked up a dot matrix line printer, specifically the
Epson LX-350 printer. This one is nice because it has a USB port, so I don&amp;rsquo;t
have to break out my pile of serial cable hacks to get it talking to Linux 😁&lt;/p&gt;
&lt;p&gt;This is the classic printer style, with infinite paper and a lovely noise during
printing. They are also fairly simple to operate - you can just write text
directly to &lt;code&gt;/dev/lp&lt;/code&gt; (or &lt;code&gt;/dev/usb/lp9&lt;/code&gt; in my case) and it&amp;rsquo;ll print it out.
Slightly more sophisticated instructions can be written to them with ANSI escape
sequences, just like a terminal. They can also be rigged up to CUPS, then you
can use something like &lt;code&gt;man -t 5 scdoc&lt;/code&gt; to produce printouts like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/gHCA.jpg&#34;&gt;&lt;img src=&#34;https://sr.ht/gHCA.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Plugging the printer into Linux and writing out pages isn&amp;rsquo;t much for hack value,
however. What I really wanted to make was something resembling an old-school
TTY - teletypewriter. So I wrote some &lt;a href=&#34;https://git.sr.ht/~sircmpwn/lpsh&#34;&gt;glue code in
Golang&lt;/a&gt;, and soon enough I had a shell:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; sandbox=&#34;allow-same-origin allow-scripts
allow-popups&#34;
src=&#34;https://spacepub.space/videos/embed/d8943b2d-8280-497b-85ec-bc282ec2afdc&#34;
frameborder=&#34;0&#34; allowfullscreen style=&#34;width: 100%&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;The glue code I wrote for this is fairly straightforward. In the simplest form,
it spins up a pty (pseudo-terminal), runs &lt;code&gt;/bin/sh&lt;/code&gt; in it, and writes the pty
output into the line printer device. For those unaware, a pseudo-terminal is the
key piece of software infrastructure for running interactive text applications.
Applications which want to do things like print colored text, move
the cursor around and draw a TUI, and so on, will open &lt;code&gt;/dev/tty&lt;/code&gt; to open the
current TTY device. For most applications used today, this is a
&amp;ldquo;pseudo-terminal&amp;rdquo;, or pty, which is a terminal emulated in userspace - i.e. by
your terminal emulator. However, your terminal emulator is &lt;em&gt;emulating&lt;/em&gt; a
terminal - the control sequences applications send to these are
backwards-compatible with 50 years of computing history.  Interfaces like these
are the namesake of the TTY.&lt;/p&gt;
&lt;p&gt;Visual terminals came onto the scene later on, and in the classic computing
tradition, the old hands complained that it was less useful - you could no
longer write notes on your backlog, tear off a page and hand it to a colleague,
or &lt;a href=&#34;https://en.wikipedia.org/wiki/Wite-Out&#34;&gt;white-out&lt;/a&gt; mistakes. Early
&lt;a href=&#34;https://en.wikipedia.org/wiki/Computer_terminal&#34;&gt;visual terminals&lt;/a&gt; could also
be plugged directly into a line printer, and you could configure them to echo to
the printer or print out a screenfull of text at a time. A distinct advantage of
visual terminals is not having to deal with so much bloody paper, a problem that
I&amp;rsquo;ve become acutely familiar with in the past few days&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Getting back to the glue code, I chose Golang because setting up a TTY is a bit
of a hassle in C, but in Golang it&amp;rsquo;s pretty straightforward. There is a serial
port and in theory I could have plugged it in and spawned a getty on the
resulting serial device - but (1) it&amp;rsquo;d be write-only, so not especially
interactive without &lt;em&gt;hardware&lt;/em&gt; hacks, and (2) I didn&amp;rsquo;t feel like digging out my
serial cables. So:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;git.sr.ht/~sircmpwn/pty&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// fork of github.com/kr/pty
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;winsize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Winsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;Cols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;160&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;Rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;TERM=lp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;COLUMNS=%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;tty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;StartWithSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;winsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;P.S. We&amp;rsquo;re going to dive through the code in detail now. If you just want more
cool videos of this in action, skip to the bottom.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I set the TERM environment variable to &lt;code&gt;lp&lt;/code&gt;, for line printer, which doesn&amp;rsquo;t
really exist but prevents most applications from trying anything too tricksy
with their escape codes. The &lt;code&gt;tty&lt;/code&gt; variable here is an &lt;code&gt;io.ReadWriter&lt;/code&gt; whose
output is sent to the printer and whose input is sourced from wherever, in my
case from the stdin of this process&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;For a little more quality-of-life, I looked up Epson&amp;rsquo;s proprietary ANSI escape
sequences and found out that you can tell the printer to feed back and forth in
216th&amp;quot; increments with the j and J escape sequences. The following code will
feed 2.5&amp;quot; out, then back in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\x1BJ\xD8\x1BJ\xD8\x1BJ\x6C&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\x1Bj\xD8\x1Bj\xD8\x1Bj\x6C&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which happens to be the perfect amount to move the last-written line up out of
the printer for the user to read, then back in to be written to some more. A
little bit of timing logic in a goroutine manages the transition between &amp;ldquo;spool
out so the user can read the output&amp;rdquo; and &amp;ldquo;spool in to write some more output&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lpmgr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// TODO: Runtime configurable option? Discover printers? dunno
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;OpenFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/dev/usb/lp9&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;O_RDWR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;0755&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;feed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\n\n\n\r&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;250&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Millisecond&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;c1&#34;&gt;// Increase the timeout after input
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;feed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\x1Bj\xD8\x1Bj\xD8\x1Bj\x6C&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;feed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;lptl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;After&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Millisecond&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;feed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;feed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\x1BJ\xD8\x1BJ\xD8\x1BJ\x6C&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;lptl&lt;/code&gt; is a work-in-progress thing which tweaks the outgoing data for some
quality-of-life changes, like changing backspace to ^H. Then, the main event
loop looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;inch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;outch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lpmgr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;outch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;inbuf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inbuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;tty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inbuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;inch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;outbuf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;outbuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;outbuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;outch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The tty will echo characters written to it, so we just write to it from stdin
and increase the form feed timeout closer to the user&amp;rsquo;s input so that it&amp;rsquo;s not
constantly feeding in and out as you write. The resulting system is pretty
pleasant to use! I spent about hour working on improvements to it on a &lt;a href=&#34;https://live.drewdevault.com&#34;&gt;live
stream&lt;/a&gt;. You can watch the system in action on the
archive here:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;370&#34; sandbox=&#34;allow-same-origin allow-scripts&#34;
src=&#34;https://spacepub.space/videos/embed/a8be6c87-9267-452e-8d3e-dd206880fa98&#34;
frameborder=&#34;0&#34; allowfullscreen style=&#34;width: 100%&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;If you were a fly on the wall when Unix was written, it would have looked a lot
like this. And remember: &lt;a href=&#34;https://www.gnu.org/fun/jokes/ed-msg.html&#34;&gt;ed is the standard text
editor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;?&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Don&amp;rsquo;t worry, I recycled it all. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;In the future I want to make this use libinput or something, or eventually make a kernel module which lets you pair a USB keyboard with a line printer to make a TTY directly. Or maybe a little microcontroller which translates a USB keyboard into serial TX and forwards RX to the printer. Possibilities! &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, October 2019</title>
      <link>./2019/10/15/Status-update-October-2019.html</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/10/15/Status-update-October-2019.html</guid>
      <description>&lt;p&gt;Last month, I gave you an update at the conclusion of a long series of travels.
But, I wasn&amp;rsquo;t done yet - this month, I spent a week in Montreal for &lt;a href=&#34;https://xdc2019.x.org/&#34;&gt;XDC&lt;/a&gt;.
Simon Ser put up &lt;a href=&#34;https://emersion.fr/blog/2019/xdc2019-wrap-up/&#34;&gt;a great write-up&lt;/a&gt; which goes over a lot of the
important things we discussed there. It was a wonderful conference and well
worth the trip - but I truly am sick of travelling. Now, I can enjoy some time
at home, working on free and open source software.&lt;/p&gt;
&lt;p&gt;I have a video to share today, of a workflow on git.sr.ht that I&amp;rsquo;m very excited
about: sending patchsets as emails from the web.&lt;/p&gt;
&lt;video src=&#34;https://sr.ht/_fUk.webm&#34; controls muted&gt;
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
&lt;/video&gt;
&lt;p&gt;Sourcehut&amp;rsquo;s development plans can be described in three broad strokes: (1) make
a bunch of services (or: primitives for a development hub); (2) rig them all up
with APIs and webhooks; and (3) teach them how to talk to each other. Over the
past year, (1) and (2) are mostly complete, and (3) is now underway. Teaching
git.sr.ht and lists.sr.ht to talk to each other is an important step, because it
will give us a web-based code review flow which is backed by emails. This meets
an original design goal of Sourcehut: to build user-friendly tools on top of
existing systems.&lt;/p&gt;
&lt;p&gt;The other end of this work is on lists.sr.ht, but for now it&amp;rsquo;s indirect: I&amp;rsquo;ve
also been working on &lt;a href=&#34;https://github.com/libgit2/pygit2/pulls?q=is%3Apr+author%3Addevault+is%3Aclosed&#34;&gt;pygit2&lt;/a&gt; fleshing out the Odb backend API, so
that I can make a pygit2 repo which is backed by the git.sr.ht API. From there,
it&amp;rsquo;ll be easy to teach lists.sr.ht about git.sr.ht - and perhaps other git
services as well.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also a fourth stage of Sourcehut: giving back to the free software
community. To this end, I intend to spend Sourcehut&amp;rsquo;s profits on sponsoring
motivated and talented free software developers to work on self-directed
projects. I&amp;rsquo;m very excited to announce that there&amp;rsquo;s progress here as well:
&lt;a href=&#34;https://emersion.fr&#34;&gt;Simon Ser&lt;/a&gt; is now joining Sourcehut and will be doing just
that: self-directed free software projects. He&amp;rsquo;s written more about this on &lt;a href=&#34;https://emersion.fr/blog/2019/working-full-time-on-open-source/&#34;&gt;his
blog&lt;/a&gt; and I&amp;rsquo;ll
be writing more on &lt;a href=&#34;https://sourcehut.org&#34;&gt;sourcehut.org&lt;/a&gt; later.&lt;/p&gt;
&lt;p&gt;Wrapping up Sourcehut news, I&amp;rsquo;ll leave you with an out-of-context screenshot of
a mockup I made this month:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/_yhw.png&#34;&gt;&lt;img src=&#34;https://sr.ht/_yhw.png&#34; alt=&#34;Screenshot of a Sourcehut DNS service showing DNS records managed by zonefiles in a git repository&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s move on to Wayland news. We&amp;rsquo;ve started the planning for the next sway
release, and it&amp;rsquo;s shaping up to be really cool. We expect to ship patches which
can reduce input latency to as low as 1ms, introduce the foreign toplevel
management protocol for better mate-panel support, and introduce damage tracking
to our screencopy protocol - which is being used to make a VNC server for
sway and other wlroots-based compositors; and proper drawing tablet support.
We&amp;rsquo;re also making strong headway on a long-term project to overhaul rendering
and DRM in wlroots, with the long term goal of achieving the holy grail levels
of performance on any device.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wayland-book.com&#34;&gt;The Wayland book&lt;/a&gt; is also in good shape. A lot of
people have purchased the drafts - over a hundred! Thank you for picking it up,
and please send your feedback along. I completed chapter 8 this month. I also
expect to receive the last few parts for my second POWER9 machine today, and I
plan on using this to test Wayland, Mesa, etc - on ppc64le. The &lt;a href=&#34;https://drewdevault.com/2019/10/10/RaptorCS-redemption.html&#34;&gt;first POWER9
machine&lt;/a&gt; is now provisioned and humming along in the Sourcehut
datacenter, by the way.&lt;/p&gt;
&lt;p&gt;VR work has also been chugging along again this month. I&amp;rsquo;ve started contributing
to &lt;a href=&#34;https://gitlab.freedesktop.org/monado/monado/merge_requests?scope=all&amp;amp;utf8=%E2%9C%93&amp;amp;state=merged&amp;amp;author_username=ddevault&#34;&gt;Monado&lt;/a&gt;, which is basically to OpenXR as Mesa is to OpenGL. I&amp;rsquo;ve
seen merged an overhaul to their build system, an overhaul for their dated
Wayland backend, and even some deeper work ensuring conformance with the OpenXR
specification. A lot of this work has also been in getting to know everyone and
planning the future of the project, as it&amp;rsquo;s still in early stages.&lt;/p&gt;
&lt;p&gt;To quickly summarize my other various projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ctools&lt;/strong&gt; has seen many small improvements and bug fixes, and has grown the
dirname, rmdir, env, and sleep utilities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;aerc&lt;/strong&gt; has also seen small improvements and bug fixes, but has also learned
about sorting and will soon grow a threaded message list&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chopsui&lt;/strong&gt; is stirring in its sleep, and I&amp;rsquo;ve been giving some new attention
to its design problems in the hopes that the next iteration will be the
correct design for a new GUI toolkit.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~sircmpwn/wshowkeys&#34;&gt;&lt;strong&gt;wshowkeys&lt;/strong&gt;&lt;/a&gt; is a new little tool I
built to display your keypresses on-screen during a Wayland session, useful
for live streaming or video recording&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;9front&lt;/strong&gt; has been eating some of my evenings lately, and I&amp;rsquo;ve been making
small improvements to various tools and improving Plan 9 support among some
packages in the Go ecosystem. I have more plans for this&amp;hellip; stay tuned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s all I&amp;rsquo;ve got for today. Thank you for your support! Oh, and one last
note: I&amp;rsquo;ve been invited to the &lt;a href=&#34;https://github.com/users/ddevault/sponsorship&#34;&gt;Github sponsors
program&lt;/a&gt;, so if you want to
donate through it Github will match your donation for a little while. Cheers!&lt;/p&gt;
</description>
    </item><item>
      <title>How to fuck up software releases</title>
      <link>./2019/10/12/how-to-fuck-up-releases.html</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/10/12/how-to-fuck-up-releases.html</guid>
      <description>&lt;p&gt;I manage releases for a bunch of free &amp;amp; open-source software. Just about every
time I ship a release, I find a novel way to fuck it up. Enough of these
fuck-ups have accumulated now that I wanted to share some of my mistakes and how
I (try to) prevent them from happening twice.&lt;/p&gt;
&lt;p&gt;At first, I did everything manually. This is fine enough for stuff with simple
release processes - stuff that basically amounts to tagging a commit, pushing
it, and calling it a day. But even this gets tedious, and I&amp;rsquo;d often make a
mistake when picking the correct version number. So, I wrote a small script:
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/dotfiles/tree/master/bin/semver&#34;&gt;semver&lt;/a&gt;. &lt;code&gt;semver patch&lt;/code&gt; bumps the patch version, &lt;code&gt;semver minor&lt;/code&gt; bumps the minor version, and
&lt;code&gt;semver major&lt;/code&gt; bumps the major version, based on semantic versioning. I got into
the habit of using this script instead of making the tags manually. The next
fuckup soon presented itself: when preparing the
&lt;a href=&#34;https://git-scm.com/docs/git-shortlog&#34;&gt;shortlog&lt;/a&gt;, I would often feed it the
wrong commits, and the changelog would be messed up. So, I updated the script to
run the appropriate shortlog command and pre-populate the annotated tag with it,
launching the editor to adjust the changelog as necessary.&lt;/p&gt;
&lt;p&gt;Soon I wanted to apply this script to other projects, but not all of them used
semantic versioning. I updated it to work for projects which just use
&lt;code&gt;major.minor&lt;/code&gt; versions as well. However, another problem arose: some projects
have the version number specified in the Makefile or meson.build. I would
frequently fuck this up in many creative ways: forgetting it entirely; updating
it but not committing it; updating it and committing it, but tagging the wrong
commit; etc. &lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt; in particular was
difficult because I also had to update the soversion, which had special
requirements. To address these issues, I added a custom &lt;code&gt;.git/_incr_version&lt;/code&gt;
script which can add additional logic on a per-repo basis, and updated semver to
call this script if present.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Eventually, I went on vacation and shipped a release while I was there. The
&lt;code&gt;_incr_version&lt;/code&gt; script I had put into &lt;code&gt;.git&lt;/code&gt; on my home workstation wasn&amp;rsquo;t
checked into version control and didn&amp;rsquo;t come with me on vacation, leading to yet
another fucked up release. I moved it from &lt;code&gt;.git/_incr_version&lt;/code&gt; to
&lt;code&gt;contrib/_incr_version&lt;/code&gt;. I made the mistake, however, of leaving the old path in
as a fallback, which meant that I never noticed that &lt;em&gt;another&lt;/em&gt; project&amp;rsquo;s script
was still in &lt;code&gt;.git&lt;/code&gt; until I went on another vacation and fucked up another
release. Add a warning which detects if the script is at the old path&amp;hellip;&lt;/p&gt;
&lt;p&gt;Some of my projects don&amp;rsquo;t use semantic versioning at all, but still have all of
these other gotchas, so I added an option to just override the automatic version
increment with a user-specified override. For a while, this worked well. But,
inevitably, no matter how much I scripted away my mistakes I would always find a
new and novel way of screwing up. The next one came when I shipped a release
while on an Alpine Linux machine, which ships Busybox instead of GNU tools.
Turns out Busybox gzip produces output which does not match the GNU output,
which means the tarballs I signed locally differed from the ones generated by
Github. Update the signing script to save the tarball to disk (previously,
it lived in a pipe) and upload these alongside the releases&amp;hellip;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Surely, there are no additional ways to fuck it up at this point. I must have
every base covered, right? Wrong. Dead wrong. On the very next release I
shipped, I mistakenly did everything from a feature branch, and shipped
experimental, incomplete code in a stable release. Update the script to warn if
the master branch isn&amp;rsquo;t checked out&amp;hellip; Then, of course, another fuckup: I tagged
a release without pulling first, and when I pushed, git happily rejected my
branch and accepted the tag - shipping an outdated commit as the release. Update
the script to &lt;code&gt;git pull&lt;/code&gt; first&amp;hellip;&lt;/p&gt;
&lt;p&gt;I am doomed to creatively outsmart my tools in releases. If you&amp;rsquo;d like to save
yourself from some of the mistakes I&amp;rsquo;ve made, you can &lt;a href=&#34;https://git.sr.ht/~sircmpwn/dotfiles/tree/master/bin/semver&#34;&gt;find my semver script
here&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Each of these &lt;code&gt;_incr_version&lt;/code&gt; scripts proved to have many bugs of their own, of course. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Eli Schwartz of Arch Linux also sent a patch to Busybox which made their gzip implementation consistent with GNU&amp;rsquo;s. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>RaptorCS&#39;s redemption: the POWER9 machine works</title>
      <link>./2019/10/10/RaptorCS-redemption.html</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/10/10/RaptorCS-redemption.html</guid>
      <description>&lt;p&gt;This is a follow-up to my earlier article, &amp;ldquo;&lt;a href=&#34;https://drewdevault.com/2019/09/23/RaptorCS-Blackbird-a-horror-story.html&#34;&gt;RaptorCS POWER9 Blackbird PC: An
expensive mistake&lt;/a&gt;&amp;rdquo;. Since I published that article, I&amp;rsquo;ve been in
touch with Raptor and they&amp;rsquo;ve been much more communicative and helpful. I now
have a working machine!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/OTyo.jpeg&#34; alt=&#34;Picture of uname -sm showing &amp;ldquo;Linux ppcle64&amp;rdquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;After I published my article, Raptor reached out and apologised for my
experience. They offered a full refund, but I agreed to work on further
diagnosis now that we had opened a dialogue&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. They identified that my CPU was
defective and sent me a replacement, then we found the mainboard to be
defective, too, and the whole thing was shipped back and replaced. I installed
the new hardware into the datacenter today and it was quite pleasant to get up
and running. Raptor assures me that my nightmares with the old board are
atypical, and if the new board is representative of the usual user experience, I
would have to agree. The installation was completely painless.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;However, I refuse to give any company credit for waking up their support team
only when a scathing article about them frontpages on Hacker News. I told them I
wouldn&amp;rsquo;t publish a positive follow-up unless they also convinced me that the
support experience had been fixed for the typical user as well. To this end,
Raptor has made a number of substantive changes. To quote their support staff:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;After investigation, we are implementing new mechanisms to avoid support
issues like the one you experienced. We now have a
&lt;a href=&#34;https://twitter.com/RaptorCompSys/status/1176432946670186498&#34;&gt;self-serve RMA generation system&lt;/a&gt;
which would have significantly reduced your wait time, and are taking measures
to ensure that tickets are no longer able to be ignored by front line support
staff. We believe we have addressed the known failure modes at this time, and
management will be keeping a close eye on the operation of the support system
to ensure that new failure modes are handled rapidly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They&amp;rsquo;ve tweeted this about their new self-service RMA system as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;ve made it easy to submit RMA requests for defective products on our Web
site. Simply go to your account, select the &amp;ldquo;Submit RMA Request&amp;rdquo; link, and
fill out the form.  Your product will be warranty checked and, if valid, you
will receive an RMA number and shipping address!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;— @RaptorCompSys via &lt;a href=&#34;https://twitter.com/RaptorCompSys/status/1176432946670186498&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They&amp;rsquo;re also working on other improvements to make the end-user experience
better, including &lt;a href=&#34;https://wiki.raptorcs.com/wiki/Main_Page&#34;&gt;more content on the
wiki&lt;/a&gt;, such as a &lt;a href=&#34;https://wiki.raptorcs.com/wiki/Troubleshooting/Support_Request_Checklist&#34;&gt;flowchart for
dealing with common
problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to Raptor for taking the problem seriously, quickly fixing the problems
with my board, and for addressing the systemic problems which led to the
failure of their support system.&lt;/p&gt;
&lt;p&gt;On the subject of the working machine, I am quite impressed with it so far.
Installation was a breeze, it compiles the kernel on 32 threads from spinning
rust in 4m15s, and I was able to get KVM working without much effort. I have
christened it &amp;ldquo;flandre&amp;rdquo;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, which I think is fitting. I plan on bringing it up
as a build slave for builds.sr.ht in the coming weeks/months, and offering
ppc64le builds on Sourcehut in the near future. I have another board which was
generously donated by another Raptor customer&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;, which arrived last week and
that I hope to bring up and use for testing Wayland before introducing it to the
Sourcehut fleet.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;P.S. For those interested in more details of the actual failures:&lt;/p&gt;
&lt;p&gt;This machine is so badly broken that it would actually be hilarious if the
manufacturer had been more present in the troubleshooting process. I think the
best way to sum it up is &amp;ldquo;FUBAR&amp;rdquo;. Among problems I encountered were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The CPU experiences a &amp;ldquo;ZCAL failure&amp;rdquo; (???)&lt;/li&gt;
&lt;li&gt;The BMC (responsible for bringing up the main CPU(s)) had broken ethernet,
making login over SSH impossible&lt;/li&gt;
&lt;li&gt;The BMC&amp;rsquo;s getty would boot loop, making login over serial impossible&lt;/li&gt;
&lt;li&gt;The BMC&amp;rsquo;s u-Boot would boot loop if the TX pin on the serial cable was plugged
in, making diagnosing issues from that stage impossible&lt;/li&gt;
&lt;li&gt;petitboot&amp;rsquo;s ncurses output was being piped into a shell and executed (what the fuck?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the immortal words of James Mickens, &amp;ldquo;I HAVE NO TOOLS BECAUSE I HAVE
DESTROYED MY TOOLS WITH MY TOOLS.&amp;rdquo; A staff member at Raptor tells me:
&amp;ldquo;Your box ended up on my desk [&amp;hellip;] This is easily the most broken board I&amp;rsquo;ve
seen, ever, and that includes prototypes. This will help educate us for a while
to come due to the unique nature of some of the faults.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Not sure what can cause such an impressive cacophony of failures, but it&amp;rsquo;s so
catastrophic that I can easily believe that this is far from typical. The
hardware is back in Raptor&amp;rsquo;s hands now, and I would be interested to hear about
their insights after further diagnosis.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;They did refund the RAM which was unfulfilled from my original order. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;They did give me a little heart attack, however, by sending the replacement CPU to me in the same box I had returned the faulty CPU back to them with - a box which I had labelled &amp;ldquo;BAD CPU&amp;rdquo;. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Sourcehut virtual machines are named after their purpose, but our physical servers are named after &lt;a href=&#34;https://en.wikipedia.org/wiki/Touhou_Project&#34;&gt;Touhou&lt;/a&gt; characters. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This happened prior to any of the problems with the first machine. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Why Collabora really added Digital Restrictions Management to Weston</title>
      <link>./2019/10/07/HDCP-in-Weston.html</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/10/07/HDCP-in-Weston.html</guid>
      <description>&lt;p&gt;A recent article from Collabora, &lt;a href=&#34;https://www.collabora.com/news-and-blog/blog/2019/10/03/why-hdcp-support-in-weston-is-a-good-thing/&#34;&gt;Why HDCP support in Weston is a good
thing&lt;/a&gt;, proports to offer a lot of insight into why
&lt;a href=&#34;https://en.wikipedia.org/wiki/High-bandwidth_Digital_Content_Protection&#34;&gt;HDCP&lt;/a&gt; - a Digital Restrictions Management (DRM) related technology - was
added to &lt;a href=&#34;https://gitlab.freedesktop.org/wayland/weston&#34;&gt;Weston&lt;/a&gt; - a well known basic Wayland compositor which was once
the reference compositor for Wayland. But this article is gaslighting you.
There is one reason and one reason alone that explains why HDCP support landed
in Weston.&lt;/p&gt;
&lt;p&gt;Q: Why was HDCP added to Weston?&lt;/p&gt;
&lt;p&gt;A: $$$$$&lt;/p&gt;
&lt;p&gt;Why does Collabora want you to &lt;em&gt;believe&lt;/em&gt; that HDCP support in Weston is a good
thing? Let&amp;rsquo;s look into this in more detail. First: &lt;em&gt;is&lt;/em&gt; HDCP a bad thing?&lt;/p&gt;
&lt;p&gt;DRM (Digital Restrictions Management) is the collective term for software which
attempts to restrict the rights of users attempting to access digital media.
It&amp;rsquo;s mostly unrelated to Direct Rendering Manager, an important Linux subsystem
for graphics which is closely related to Wayland. Digital Restrictions
Management is software used by media owners to prevent you from enjoying their
content except in specific, pre-prescribed ways.&lt;/p&gt;
&lt;p&gt;There is universal agreement among the software community that DRM is
ineffective. Ultimately, these systems are defeated by the simple fact that no
amount of DRM can stop you from pointing your camera at your screen and pushing
record. But in practice, we don&amp;rsquo;t even need to resort to that - these systems
are far too weak to demand such measures. &lt;a href=&#34;https://www.amazon.com/HSV321/dp/B07C6KCBYB&#34;&gt;Here&amp;rsquo;s a $100 device on Amazon which
can break HDCP&lt;/a&gt;. DRM is shown to be impossible even in &lt;em&gt;theory&lt;/em&gt;, as the
decryption keys have to live somewhere in your house in order to watch movies
there. Exfiltrating them is just a matter of putting forth the effort.  For most
users, it hardly requires any effort to bypass DRM - they can just punch &amp;ldquo;watch
[name of movie] for free&amp;rdquo; into Google. It&amp;rsquo;s well-understood and rather obvious
that DRM systems completely and entirely fail at their stated goal.&lt;/p&gt;
&lt;p&gt;No reasonable engineer would knowingly agree to adding a broken system like that
to their system, and trust me - the entire engineering community has been made
well-aware of these faults. Any other system with these obvious flaws would be
discarded immediately, and if the media industry hadn&amp;rsquo;t had their hands firmly
clapped over their ears, screaming &amp;ldquo;la la la&amp;rdquo;, and throwing money at the
problem, it would have been. But, just adding a broken system isn&amp;rsquo;t necessarily
going to hurt much.  The problem is that, in its failure to achieve its stated
goals, DRM brings with it some serious side-effects. DRM is closely tied to
nonfree software - the RIAA mafia wants to keep their garbage a secret, after
all. Moreover, DRM takes away the freedom to play your media when and where you
want. Why should you have to have an internet connection? Why can&amp;rsquo;t you watch it
on your ancient iPod running Rockbox? DRM exists to restrict users from doing
what they want. More sinisterly, it exists to further the industry&amp;rsquo;s push to
end consumer ownership of its products - preferring to steal from you monthly
subscription fees and lease the media to you. Free software maintainers are
responsible for protecting their users from this kind of abuse, and putting DRM
into our software betrays them.&lt;/p&gt;
&lt;p&gt;The authors are of the opinion that HDCP support in Weston does not take away
any rights from users. It doesn&amp;rsquo;t &lt;em&gt;stop&lt;/em&gt; you from doing anything. This is true,
in the same way that killing environmental regulations doesn&amp;rsquo;t harm the
environment. Adding HDCP support is handing a bottle of whiskey to an abusive
husband. And the resulting system - and DRM as a whole - is known to be
inherently broken and ineffective, a fact that they even acknowledge in their
article. This feature &lt;em&gt;enables&lt;/em&gt; media companies to abuse &lt;em&gt;your&lt;/em&gt; users. Enough
cash might help some devs to doublethink their way out of it, but it&amp;rsquo;s true all
the same. They added these features to help abusive companies abuse their users,
in the hopes that they&amp;rsquo;ll send back more money or more patches. They say as much
in the article, it&amp;rsquo;s no secret.&lt;/p&gt;
&lt;p&gt;Or, let&amp;rsquo;s give them the benefit of the doubt: perhaps their bosses forced them
to add this&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. There have been other developers on this ledge, and I&amp;rsquo;ve talked
them down. Here&amp;rsquo;s the thing: it worked. Their organizations didn&amp;rsquo;t pursue DRM
any further. You are not the lowly code monkey you may think you are. Engineers
have real power in the organization. You can say &amp;ldquo;no&amp;rdquo; and it&amp;rsquo;s your
responsibility to say &amp;ldquo;no&amp;rdquo; when someone asks you to write unethical code.&lt;/p&gt;
&lt;p&gt;Some of the people I&amp;rsquo;ve spoken to about HDCP for Wayland, particularly for
Weston, are of the opinion that &amp;ldquo;a protocol for it exists, therefore we will
implement it&amp;rdquo;. This is reckless and stupid. We already know what happens when
you bend the knee to our DRM overlords: look at Firefox. In 2014, Mozilla
added DRM to Firefox after a year of fighting against its standardization in the
W3C (a &lt;a href=&#34;https://en.wikipedia.org/wiki/Regulatory_capture&#34;&gt;captured&lt;/a&gt; organization which governs&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; web standards). They
capitulated, and it did absolutely nothing to stop them from being steamrolled
by Chrome&amp;rsquo;s growing popularity. Their market-share freefall didn&amp;rsquo;t even slow
down in 2014, or in any year since&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Collabora went down without a fight in
the first place.&lt;/p&gt;
&lt;p&gt;Anyone who doesn&amp;rsquo;t recognize that self-interested organizations with a great
deal of resources are working against &lt;em&gt;our&lt;/em&gt; interests as a free software
community is an idiot. We are at war with the bad actors pushing these systems,
and they are to be &lt;a href=&#34;https://en.wikipedia.org/wiki/No_quarter&#34;&gt;given no quarter&lt;/a&gt;.
Anyone who realizes this and turns a blind eye to it is a coward. Anyone who
doesn&amp;rsquo;t stand up to their boss, sits down, implements it in our free software
ecosystem, and cashes their check the next Friday - is not only a coward, but a
traitor to their users, their peers, and to society as a whole.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;HDCP support in Weston is a good thing&amp;rdquo;? It&amp;rsquo;s a good thing for &lt;em&gt;you&lt;/em&gt;, maybe.
It&amp;rsquo;s a good thing for media conglomerates which want our ecosystem crushed
underfoot. It&amp;rsquo;s a bad thing for your users, and you know it, Collabora. Shame on
you for gaslighting us.&lt;/p&gt;
&lt;p&gt;However&amp;hellip; the person who &lt;em&gt;reverts&lt;/em&gt; these changes is a hero, even in the face of
past mistakes. Weston, Collabora, you still have a chance to repent. Do what you
know is right and stand by those principles in the future.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;P.S. To make sure I&amp;rsquo;m not writing downers all the time, rest assured that the
next article will bring good news - RaptorCS has been working hard to correct
the issues I raised in my last article.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This is just for the sake of argument. I&amp;rsquo;ve spoken 1-on-1 with some of the developers responsible and they stand by their statements as their personal opinions. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Or at least attempts to govern. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/File:StatCounter-browser-ww-monthly-200901-201905.png&#34;&gt;Source: StatCounter&lt;/a&gt;. Measuring browser market-share is hard, collect your grain of salt &lt;a href=&#34;https://en.wikipedia.org/wiki/Usage_share_of_web_browsers&#34;&gt;here&lt;/a&gt;. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>RaptorCS POWER9 Blackbird PC review</title>
      <link>./2019/09/23/RaptorCS-Blackbird-a-horror-story.html</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/09/23/RaptorCS-Blackbird-a-horror-story.html</guid>
      <description>&lt;p&gt;&lt;strong&gt;November 2018&lt;/strong&gt;: Ordered &lt;a href=&#34;https://www.raptorcs.com/content/BK1B01/intro.html&#34;&gt;Basic Blackbird
Bundle&lt;/a&gt; w/32 GB RAM:
$1,935.64&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2019-12-23&lt;/strong&gt;: This article was originally titled &amp;ldquo;RaptorCS POWER9
Blackbird PC: An expensive mistake&amp;rdquo;. Please read the follow-up article,
published 2019-10-10:
&lt;a href=&#34;https://drewdevault.com/2019/10/10/RaptorCS-redemption.html&#34;&gt;RaptorCS&amp;rsquo;s redemption: the POWER9 machine works&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 2019&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Order ships, and arrives without RAM. It had been long enough that I didn&amp;rsquo;t
realize the order had only been partially fulfilled, so I order some RAM from
the &lt;a href=&#34;https://wiki.raptorcs.com/wiki/POWER9_Hardware_Compatibility_List/Memory&#34;&gt;list of recommended chips&lt;/a&gt; ($338.40), along with the other necessities
that I didn&amp;rsquo;t purchase from Raptor: a case ($97.99) and a PSU ($68.49), and grab
some hard drives I have lying around. Total cost: about $2,440. Worth it to get
POWER9 builds working on builds.sr.ht!&lt;/p&gt;
&lt;p&gt;I carefully put everything together, consulting the manual at each step, plug in
a display, and turn it on. Lights come on, things start whizzing, and the screen
comes to life - and promptly starts boot looping.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 27th&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Support ticket created. What&amp;rsquo;s going on with my board?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 28th&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Support gets back to me the next day with a suggestion which is unrelated to the
problem, but no matter - I spoke with volunteers in the IRC channel a few hours
earlier and we found out that - whoops! - I hadn&amp;rsquo;t connected the CPU power to
the motherboard. This is the end of the PEBKAC errors, but not the end of the
problems. The machine gets further ahead in the boot - almost to &amp;ldquo;petitboot&amp;rdquo;,
and then the display dies and the machine reveals no further secrets.&lt;/p&gt;
&lt;p&gt;I sent an update to the support team.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 1st&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We have normally only seen this type of failure when there is a RAM-related
fault, or if the PSU is underpowered enough that bringing the CPUs online at
full power causes a power fault and immediate safety power off.&lt;/p&gt;
&lt;p&gt;Can you watch the internal lights while the system is booting, and see if the
power LED cluster immediately changes from green to orange as the system stops
responding over SSH?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The IRC channel suspects this is not related to the problem. Regardless, I reply
a few hours later with two videos showing the boot up process from power-out to
display death, with the internal LEDs and the display output clearly visible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 4th&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Any progress on this issue?&amp;rdquo;, I ask.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 15th&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Hi guys, I&amp;rsquo;m still experiencing this problem. If you&amp;rsquo;re unsure of the issue I
would like to send the board back to you for diagnosis or a refund.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;July 25th&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorry for the delay. Having senior support check out the videos.&lt;/p&gt;
&lt;p&gt;Thanks for writing back. We should have something for you by tomorrow during
the day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;July 31st&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi Drew.&lt;/p&gt;
&lt;p&gt;The videos are being reviewed this week. Thank you for sending them.&lt;/p&gt;
&lt;p&gt;Please stay tuned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;September 15th&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No reply from support. I have since bought a little more hardware for
self-diagnosis, namely the necessary pieces to connect to the two (or is it 3?)
serial ports. I manage to get a log, which points to several failures, but none
of them seem to be related to the problem at hand (they do indicate some network
failures, which would explain why I can&amp;rsquo;t log into the BMC over SSH for further
diagnosis). And the getty is looping, so I can&amp;rsquo;t log in on the serial console to
explore any further.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That was a week ago. Radio silence since.&lt;/p&gt;
&lt;p&gt;So, 10 months after I placed an order for a POWER9 machine, 3 months after I
received it (without the RAM I purchased, no less), and over $2,500 invested&amp;hellip;
it&amp;rsquo;s clear that buying the Blackbird was an expensive mistake. Maybe someday
I&amp;rsquo;ll get it working. If I do, I doubt the &amp;ldquo;support&amp;rdquo; team will have been
involved. Currently my best bet seems to be waiting for some apparent staff
member (the only apparent staff member) who idles in the IRC channel on Freenode
and allegedly comes online from time to time.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not alone in these problems. Here are some (anonymized) quotes I&amp;rsquo;ve heard
from others while trying to troubleshoot this on IRC.&lt;/p&gt;
&lt;p&gt;On support:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ugh, ddevault, yeah. [Blackbird ownership] has not been a smooth experience
for me, either.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;my personal theory is that they have really bad ticket software that &amp;lsquo;loses&amp;rsquo;
tickets somehow&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On reliability:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve found openbmc&amp;rsquo;s networking to be&amp;hellip; a bit unreliable&amp;hellip; maybe 20% of the
time it does not responed[sic]/does not respond fast enough to networking
requests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;yeah the vga handoff failing doesn&amp;rsquo;t surprise me (other people here have
reported it). but the BMC not getting a DHCP lease is odd. (well maybe not
that odd if you look at the crumminess of the OpenBMC software stack&amp;hellip;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, yeah, don&amp;rsquo;t buy from Raptor Computer Systems. It&amp;rsquo;s too large and unwieldly
to be an effective paper weight, either!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Erratta&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2019-09-24 @ 00:19 UTC&lt;/em&gt;: Raptor has reached out and apologized for my support
experience. We are discussing these problems in more detail now. They have also
issued a refund for the unshipped RAM.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2019-09-24 @ 00:51 UTC&lt;/em&gt;: Raptor believes the CPU to be faulty and is shipping a
replacement. They attribute the delay to having to reach out to IBM about the
problem, but don&amp;rsquo;t have a satisfactory answer to why the support process failed.
I understand it&amp;rsquo;s being discussed internally.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2019-09-24 @ 13:08 UTC&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;After investigation, we are implementing new mechanisms to avoid support
issues like the one you experienced. We now have a self-serve RMA generation
system which would have significantly reduced your wait time, and are taking
measures to ensure that tickets are no longer able to be ignored by front line
support staff. We believe we have addressed the known failure modes at this
time, and management will be keeping a close eye on the operation of the
support system to ensure that new failure modes are handled rapidly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They&amp;rsquo;ve tweeted this about their new self-service RMA system as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;ve made it easy to submit RMA requests for defective products on our Web
site. Simply go to your account, select the &amp;ldquo;Submit RMA Request&amp;rdquo; link, and
fill out the form.  Your product will be warranty checked and, if valid, you
will receive an RMA number and shipping address!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;— @RaptorCompSys via &lt;a href=&#34;https://twitter.com/RaptorCompSys/status/1176432946670186498&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I agree that this shows positive improvements and a willingness to continue
making improvements in their support experience. Thanks to Raptor for taking
these concerns seriously. I hope to have a working Blackbird system soon, and
will publish a follow-up review when the time comes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2019-10-08 @ 22:30 UTC&lt;/em&gt; A source quoted anonymously in this article asked me to
remove their quote, after a change of heart. They feel that the attention this
article has received has made their statement reach beyond the level of
dissatisfaction they had with Raptor at the time.&lt;/p&gt;
</description>
    </item><item>
      <title>Don&#39;t sacrifice the right ideas to win the right words</title>
      <link>./2019/09/17/The-wrong-words-but-the-right-ideas.html</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/09/17/The-wrong-words-but-the-right-ideas.html</guid>
      <description>&lt;p&gt;There is a difference between free software and open-source software. But you
have to squint to see it. Software licenses which qualify for one title but not
the other are exceptionally rare.&lt;/p&gt;
&lt;p&gt;A fascination with linguistics is common among hackers, and I encourage and
participate in language hacking myself. Unfortunately, that seems to seep into
the Free Software Foundation&amp;rsquo;s message a bit too much. Let&amp;rsquo;s see if any of this
rings familiar:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s not actually open source, but free software. You see, &amp;ldquo;open source&amp;rdquo; is a
plot by the commercial software industry to subvert the &amp;ldquo;free software&amp;rdquo;
movement&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;No, it&amp;rsquo;s free-as-in-freedom, not free-as-in-beer. Sometimes we call it &amp;ldquo;libre&amp;rdquo;
software, borrowing the French or Spanish word, because in English&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What you&amp;rsquo;re referring to as Linux, is in fact, GNU/Linux, or as I&amp;rsquo;ve recently
taken to calling it, GNU plus Linux. Linux is not an operating system&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What do all of these have in common? The audience already agrees with the
speaker on the ideas, but this becomes less so with every word. This kind of
pedantry lacks tact and pushes people away from the movement. No one wants to
talk to someone who corrects them like this, so people shut down and stop
listening. The speaker gains the self-satisfaction that comes with demonstrating
that you&amp;rsquo;re smarter than someone else, but the cost is pushing that person away
from the very ideals you&amp;rsquo;re trying to clarify. This approach doesn&amp;rsquo;t help the
movement, it&amp;rsquo;s just being a dick.&lt;/p&gt;
&lt;p&gt;For this reason, even though I fully understand the difference between free and
open-source software, I use the terms basically interchangeably. In practice
they are effectively the same thing. Then, I preach the ideologies behind free
software even when discussing open-source software.  The ideas are what matters,
the goal is to get people thinking on your wavelength. If they hang around long
enough, they&amp;rsquo;ll start using your words, too.  That&amp;rsquo;s how language works.&lt;/p&gt;
&lt;p&gt;The crucial distinction of the free software movement is less about &amp;ldquo;free
software&amp;rdquo;, after all, and more about copyleft. But, because the FSF pushes
copyleft &lt;em&gt;and&lt;/em&gt; free software, and because many FSF advocates are pedantic and
abrasive, many people check out before they&amp;rsquo;re told the distinction between free
software and copyleft. This leads to the listener &lt;em&gt;equivocating&lt;/em&gt; free software
with copyleft software, which undermines the message and hurts both.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;This lack of tact is why I find it difficult to accept the FSF as a
representative of the movement I devote myself to. If your goal is to strengthen
the resolve and unity of people who already agree with you by appealing to
tribalism, then this approach is effective - but remember that it strengthens
the opposing tribes, too. If your goal is to grow the movement and win the
hearts and minds of the people, then you need to use more tact in your language.
Turn that hacker knack for linguistic hacking towards &lt;em&gt;this&lt;/em&gt; goal, of thinking
over how your phrasing and language makes different listeners feel. The
resulting literature will be much more effective.&lt;/p&gt;
&lt;p&gt;Attack the systems and individuals who brought about the circumstances that
frustrate your movement, but don&amp;rsquo;t attack their victims. It&amp;rsquo;s not the user&amp;rsquo;s
fault that they were raised on proprietary software. The system which installed
proprietary software on their school computers is the one to blame. Our goals
should be things like introducing Linux to the classroom, petitioning our
governments to require taxpayer-funded software to be open source, eliminating
Digital Restrictions Management&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, pushing for right to repair, and so on. Why
is &amp;ldquo;get everyone to say &amp;lsquo;libre&amp;rsquo; instead of &amp;lsquo;open-source&amp;rsquo;&amp;rdquo; one of our goals
instead?&lt;/p&gt;
&lt;p&gt;An aside: sometimes language &lt;em&gt;is&lt;/em&gt; important. When someone has the wrong words
but the right ideas, it&amp;rsquo;s not a big deal. When someone has the wrong &lt;em&gt;ideas&lt;/em&gt; and
is appropriating the words to support them, that&amp;rsquo;s a problem. This is why I
still come down hard on companies which gaslight users with faux-open software
licenses like the Commons Clause or the debacle with RedisLabs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: this article is not about Richard Stallman. I have no comment on the
recent controversies.&lt;/em&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;For those unaware, copyleft is any &amp;ldquo;viral&amp;rdquo; license, where using copyleft code requires also using a copyleft license for your derived work.  Free software is just software which meets the &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.html&#34;&gt;free software definition&lt;/a&gt;, which is in practice just about all free &lt;em&gt;and&lt;/em&gt; open-source software, including MIT or BSD licensed works. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This kind of pedantry, which deliberately misrepresents the acronym (which is rightly meant to be &amp;ldquo;Digital Rights Management&amp;rdquo;), is more productive, since the people insulted by it are not the victims of DRM, but the perpetrators of it. Also, &amp;ldquo;Digital Rights Management&amp;rdquo; is itself a euphemism, or perhaps more accurately a kind of doublespeak, which invites a similar response. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, September 2019</title>
      <link>./2019/09/15/Status-update-September-2019.html</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/09/15/Status-update-September-2019.html</guid>
      <description>&lt;p&gt;Finally home again after a long series of travels! I spent almost a month in
Japan, then visited my sister&amp;rsquo;s new home in Hawaii on the way eastwards, then
some old friends in Seattle, and finally after 5½ long weeks, it&amp;rsquo;s home sweet
home here in Philadelphia. At least until I leave for
&lt;a href=&#34;https://xdc2019.x.org/&#34;&gt;XDC&lt;/a&gt; in Montreal 2 weeks from now. Someday I&amp;rsquo;ll have
some rest&amp;hellip; throughout all of these wild travels, I&amp;rsquo;ve been hard at work on my
free software projects. Let&amp;rsquo;s get started with this month&amp;rsquo;s status update!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/iuDE.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;small&gt;Great view from a hike on O&#39;ahu&lt;/small&gt;
&lt;/p&gt;
&lt;p&gt;First, Wayland news. I&amp;rsquo;m happy to share with you that the Wayland book is now
more than halfway complete, and I&amp;rsquo;ve made the drafts available online for a
discounted price: &lt;a href=&#34;https://wayland-book.com&#34;&gt;The Wayland Protocol&lt;/a&gt;. Thanks to
all of my collaborators and readers who volunteered to provide feedback! There&amp;rsquo;s
more Wayland-related news still, as this month marked the release of &lt;a href=&#34;https://github.com/swaywm/sway/releases/tag/1.2&#34;&gt;sway
1.2&lt;/a&gt; and &lt;a href=&#34;https://github.com/swaywm/wlroots/releases/tag/0.7.0&#34;&gt;wlroots 0.7.0&lt;/a&gt;. I like this release
because it&amp;rsquo;s light on new features - showing that sway is maturing into a stable
and reliable Wayland desktop. The features which were added are subtle and serve
to improve sway&amp;rsquo;s status as a member of the broader ecosystem - sway 1.2
supports the new &lt;a href=&#34;https://github.com/mate-desktop/mate-panel/pull/991&#34;&gt;layer shell support in the MATE panel&lt;/a&gt;, and the
same improvements are already helping with the development of other software.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/9Oro.png&#34;&gt;&lt;img src=&#34;https://sr.ht/9Oro.png&#34; alt=&#34;Screenshot of MATE panel running on sway&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;small&gt;Rest assured, the weird alignment issues were fixed&lt;/small&gt;
&lt;/p&gt;
&lt;p&gt;On the topic of &lt;a href=&#34;https://aerc-mail.org&#34;&gt;aerc&lt;/a&gt;, I still haven&amp;rsquo;t gotten around to
that write-up responding to &lt;a href=&#34;http://www.kroah.com/log/blog/2019/08/14/patch-workflow-with-mutt-2019/&#34;&gt;Greg KH&amp;rsquo;s post&lt;/a&gt;&amp;hellip; but I will. Travels have
made it difficult to sit down for a while and do some serious long-term project
planning. Regardless, the current plans have still been being executed well.
Notmuch support continues to improve thanks to Reto Brunner&amp;rsquo;s help, completions
are improving throughout, and heaps of little features - signatures, unread
message counts, :prompt, forward-as-attachment - are now supported.&lt;/p&gt;
&lt;p&gt;I also spent some time this month working on Simon Ser&amp;rsquo;s
&lt;a href=&#34;https://mrsh.sh&#34;&gt;mrsh&lt;/a&gt;. I cleaned up call frames, implemented the &lt;code&gt;return&lt;/code&gt;
builtin, finished the &lt;code&gt;pwd&lt;/code&gt; builtin, improved readline support, fleshed out job
control, and made many other small improvements. With mrsh nearing completion,
I&amp;rsquo;ve started up another project: &lt;a href=&#34;https://git.sr.ht/~sircmpwn/ctools&#34;&gt;ctools&lt;/a&gt;. This provides the rest of the
POSIX commands required of a standard scripting environment (it replaces
coreutils or busybox). I&amp;rsquo;m taking this one pretty seriously from the start -
every command has full POSIX.1-2017 support with a conformance test and a man
page, in one C source file and no dependencies. If you&amp;rsquo;re looking for a good
afternoon project (or weekend, for some utilities), how about picking up your
favorite &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/&#34;&gt;POSIX&lt;/a&gt; tool and
sending along an implementation?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://builds.sr.ht/~sircmpwn/job/88955&#34;&gt;&lt;img src=&#34;https://sr.ht/DSxS.png&#34; alt=&#34;Screenshot of ctools test suite&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With these projects, along with ~mcf&amp;rsquo;s &lt;a href=&#34;https://git.sr.ht/~mcf/cproc&#34;&gt;cproc&lt;/a&gt;,
we&amp;rsquo;re starting to see a simple and elegant operating system come together -
exactly the kind I wish we already had. To track our progress towards this goal,
I&amp;rsquo;ve put up &lt;a href=&#34;https://arewesimpleyet.org&#34;&gt;arewesimpleyet.org&lt;/a&gt;. A day may soon
come when computers become the again elegant and simple tools they were always
meant to be! At least if we assume &amp;ldquo;within a few decades&amp;rdquo; as a valid definition
of &amp;ldquo;soon&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;To cover SourceHut news briefly: we hit 10,000 users this month! And it&amp;rsquo;s
continued to grow since, up to 10,649 users at the time of writing. On the
subject of feature development, with Denis Laxalde&amp;rsquo;s help we&amp;rsquo;re starting to put
together a Debian repository for installing the services on Debian hosts. On
todo.sr.ht, users without accounts can now create and comment on tickets via
email. I also redesigned &lt;a href=&#34;https://sourcehut.org&#34;&gt;sourcehut.org&lt;/a&gt;, adding a blog
with a greater breadth of topics than we&amp;rsquo;ll see on the sr.ht-announce mailing
list.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for this month! I enjoyed my vacation and some much needed time away
from work&amp;hellip; though for me a &amp;ldquo;day off&amp;rdquo; is a day where I write less than 1,000
lines of code. Thank you again for your support - it means the world to me. I&amp;rsquo;ll
see you next month!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/1cuE.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;small&gt;Had the best seats at a concert in Tokyo!&lt;/small&gt;
&lt;/p&gt;
</description>
    </item><item>
      <title>How I decide between many programming languages</title>
      <link>./2019/09/08/Enough-to-decide.html</link>
      <pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/09/08/Enough-to-decide.html</guid>
      <description>&lt;p&gt;I have a few old standards in my toolbelt that I find myself calling upon most
often, but I try to learn enough about many programming languages to reason
about whether or not they&amp;rsquo;re suitable to any use-case I&amp;rsquo;m thinking about. The
best way is to learn by doing, so getting a general impression of the utility of
many languages helps equip you with the knowledge of whether or not they&amp;rsquo;d be
useful for a particular problem even if you don&amp;rsquo;t know them yet.&lt;/p&gt;
&lt;p&gt;Only included are languages which I feel knowledgable enough about to comment
on, there are many that aren&amp;rsquo;t here and which I encourage you to research.&lt;/p&gt;
&lt;h2 id=&#34;c&#34;&gt;C&lt;/h2&gt;
&lt;p&gt;Pros: good performance, access to low-level tooling, useful in systems
programming, statically typed, standardized and venerable, the lingua franca,
universal support on all platforms.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Cons: string munging, extensible programming, poor availability of ergonomic
libraries in certain domains, has footguns, some programmers in the wild think
the footguns are useful.&lt;/p&gt;
&lt;style&gt;
.bullshit {
    color: white;
    font-style: italic;
    font-weight: bold;
    text-shadow: -1px -1px 0 #000,
           1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
}
&lt;/style&gt;
&lt;h2 id=&#34;go&#34;&gt;Go&lt;/h2&gt;
&lt;p&gt;Pros: fast, conservative, good package manager and a healthy ecosystem, standard
library is well designed, best in class for many problems, has a spec and
multiple useful implementations, easy interop with C.&lt;/p&gt;
&lt;p&gt;Cons: the runtime is too complicated, no distinction between green threads and
real threads (meaning all programs deal with the problems of the latter).&lt;/p&gt;
&lt;h2 id=&#34;rust&#34;&gt;Rust&lt;/h2&gt;
&lt;p&gt;Pros: it&amp;rsquo;s &lt;em class=&#34;bullshit&#34;&gt;SAFE&lt;/em&gt;, useful for systems programming,
better than C++, ecosystem which is diverse but just short of the npm disease,
easy interop with C.&lt;/p&gt;
&lt;p&gt;Cons: far too big, non-standardized, only one meaningful implementation.&lt;/p&gt;
&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;
&lt;p&gt;Pros: easy and fast to get things done, diverse package ecosystem of reasonably
well designed packages, deeply extensible, useful for server-side web software.&lt;/p&gt;
&lt;p&gt;Cons: bloated, poor performance, dynamically typed, cpython internals being
available to programmers has led to an implementation monoculture.&lt;/p&gt;
&lt;h2 id=&#34;javascript&#34;&gt;JavaScript&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;* and all of its derivatives, which ultimately inherit its problems.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Pros: functional but with an expressive and C-like syntax, ES6 improved on many
fronts, async/await/promises are well designed, no threading.&lt;/p&gt;
&lt;p&gt;Cons: dynamic types, package ecosystem is a flaming pile, many JS programmers
aren&amp;rsquo;t very good at it and they make ecosystem-defining libraries anyway, born
in web browsers and inherited their many flaws.&lt;/p&gt;
&lt;h2 id=&#34;java&#34;&gt;Java&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;* and all of its derivatives, which ultimately inherit its problems.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Pros: has had enough long-term investment to be well understood and reasonably
fast.&lt;/p&gt;
&lt;p&gt;Cons: hella boilerplate, missing lots of useful things, package management, XML
is everywhere, not useful for low-level programming (this applies to all
Java-family languages).&lt;/p&gt;
&lt;h2 id=&#34;c-1&#34;&gt;C#&lt;/h2&gt;
&lt;p&gt;Pros: less boilerplate than Java, reasonably healthy package ecosystem, good
access to low level tools for interop with C, async/await started here.&lt;/p&gt;
&lt;p&gt;Cons: ecosystem is in turmoil because Microsoft cannot hold a singular vision,
they became open-source too late and screwed over Mono.&lt;/p&gt;
&lt;h2 id=&#34;haskell&#34;&gt;Haskell&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;* and every other functional-oriented programming language in its class, such
as elixir, erlang, most lisps, even if they resent being lumped together&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Pros: it&amp;rsquo;s &lt;em class=&#34;bullshit&#34;&gt;FUNCTIONAL&lt;/em&gt;, reasonably fast, useful
when the answer to your problem is more important than the means by which you
find it, good for research-grade&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; compilers.&lt;/p&gt;
&lt;p&gt;Cons: it&amp;rsquo;s &lt;em class=&#34;bullshit&#34;&gt;FUNCTIONAL&lt;/em&gt;, somewhat inscrutable, awful
package management, does not fit well into its environment, written by people
who wish the world could be described with a pure function and design software
as if it could.&lt;/p&gt;
&lt;h2 id=&#34;perl&#34;&gt;Perl&lt;/h2&gt;
&lt;p&gt;Pros: &lt;a href=&#34;https://github.com/Perl/perl5/blob/blead/Configure&#34;&gt;entertaining&lt;/a&gt;, best in class at regexes/string munging,
useful for making hacky kludges when such solutions are appropriate.&lt;/p&gt;
&lt;p&gt;Cons: inscrutable, too extensible, too much junk/jank.&lt;/p&gt;
&lt;h2 id=&#34;lua&#34;&gt;Lua&lt;/h2&gt;
&lt;p&gt;Pros: embeddable &amp;amp; easily plugged into its host, fairly simple, portable.&lt;/p&gt;
&lt;p&gt;Cons: 1-based indexing is objectively bad, the upstream maintainers are kind of
doing their own thing and no one really likes it.&lt;/p&gt;
&lt;h2 id=&#34;posix-shell-scripts&#34;&gt;POSIX Shell scripts&lt;/h2&gt;
&lt;p&gt;Pros: nothing can string together commands better, if you learn 90% of it then
you can make pretty nice and expressive programs with it for a certain class of
problem, standardized (I do not use bash).&lt;/p&gt;
&lt;p&gt;Cons: most people learn only 10% of it and therefore make pretty bad and
unintuitive programs with it, not useful for most complex tasks.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Disclaimer: I don&amp;rsquo;t like the rest of these programming languages and would not
use them to solve any problem. If you don&amp;rsquo;t want your sacred cow gored, leave
here.&lt;/p&gt;
&lt;h2 id=&#34;c-2&#34;&gt;C++&lt;/h2&gt;
&lt;p&gt;Pros: none&lt;/p&gt;
&lt;p&gt;Cons: ill-defined, far too big, &lt;em class=&#34;bullshit&#34;&gt;
Object Oriented Programming&lt;/em&gt;, loads of baggage, ecosystem that buys into
its crap, enjoyed by bad programmers.&lt;/p&gt;
&lt;h2 id=&#34;php&#34;&gt;PHP&lt;/h2&gt;
&lt;p&gt;Pros: none&lt;/p&gt;
&lt;p&gt;Cons: every PHP programmer is bad at programming, the language is designed to
accommodate them with convenient footguns (or faceguns) at every step, and the
ecosystem is accordingly bad. No, PHP7 doesn&amp;rsquo;t fix this. Use a real programming
language, jerk.&lt;/p&gt;
&lt;h2 id=&#34;ruby&#34;&gt;Ruby&lt;/h2&gt;
&lt;p&gt;Pros: It&amp;rsquo;s both &lt;em class=&#34;bullshit&#34;&gt;ENTERPRISE&lt;/em&gt; and &lt;em
class=&#34;bullshit&#34;&gt;HIP&lt;/em&gt; at the same time, and therefore effective at herding a
group of junior to mid-level programmers in a certain direction, namely towards
your startup&amp;rsquo;s exit.&lt;/p&gt;
&lt;p&gt;Cons: bloated, awful performance, before Node.js took off this is what all of
those programmers used.&lt;/p&gt;
&lt;h2 id=&#34;scala&#34;&gt;Scala&lt;/h2&gt;
&lt;p&gt;Pros: more expressive than Java, useful for &lt;em class=&#34;bullshit&#34;&gt;Big
Data&lt;/em&gt; problems.&lt;/p&gt;
&lt;p&gt;Cons: Java derivative, type system requires a PhD to comprehend, too siloed from
Java, meaning it gets all of the disadvantages of being a Java ecosystem member
but few of the advantages. The type system is so needlessly complicated that it
basically cripples the language on its own merits alone.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Except one, and it can go suck an egg for all I care. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;but not production-grade. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Building interactive SSH applications</title>
      <link>./2019/09/02/Interactive-SSH-programs.html</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/09/02/Interactive-SSH-programs.html</guid>
      <description>&lt;p&gt;After the announcement of [shell access for builds.sr.ht jobs]&lt;a href=&#34;https://drewdevault.com/2019/08/19/Introducing-shell-access-for-builds.html&#34;&gt;builds
announcement&lt;/a&gt;, a few people sent me some questions, wondering how this sort of
thing is done. Writing interactive SSH applications is actually pretty easy, but
it does require some knowledge of the pieces involved and a little bit of
general Unix literacy.&lt;/p&gt;
&lt;p&gt;On the server, there are three steps which you can meddle with using OpenSSH:
authentication, the shell session, and the command. The shell is pretty easily
manipulated. For example, if you set the user&amp;rsquo;s login shell to
&lt;code&gt;/usr/bin/nethack&lt;/code&gt;, then &lt;a href=&#34;https://www.nethack.org/&#34;&gt;nethack&lt;/a&gt; will run when they log in. Editing
this is pretty straightforward, just pop open &lt;code&gt;/etc/passwd&lt;/code&gt; as root and set
their shell to your desired binary. If the user SSHes into your server with a
TTY allocated (which is done by default), then you&amp;rsquo;ll be able to run a curses
application or something interactive.&lt;/p&gt;
&lt;script
  id=&#34;asciicast-CQ5iaFl8kMnOGV3x0TeI7vfjV&#34;
  src=&#34;https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js&#34; async
&gt;&lt;/script&gt;
&lt;p&gt;&lt;noscript&gt;&lt;i&gt;This article includes third-party JavaScript content from
asciinema.org, a free- and open-source platform that I trust.&lt;/i&gt;&lt;/noscript&gt;&lt;/p&gt;
&lt;p&gt;However, a downside to this is that, if you choose a &amp;ldquo;shell&amp;rdquo; which does not
behave like a shell, it will break when the user passes additional command line
arguments, such as &lt;code&gt;ssh user@host ls -a&lt;/code&gt;. To address this, instead of overriding
the shell, we can override the &lt;em&gt;command&lt;/em&gt; which is run. The best place to do this
is in the user&amp;rsquo;s &lt;code&gt;authorized_keys&lt;/code&gt; file. Before each line, you can add options
which apply to users who log in with that key. One of these options is the
&amp;ldquo;command&amp;rdquo; option. If you add this to &lt;code&gt;/home/user/.ssh/authorized_keys&lt;/code&gt; instead:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;command=&amp;quot;/usr/bin/nethack&amp;quot; ssh-rsa ... user
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then it&amp;rsquo;ll use the user&amp;rsquo;s shell (which should probably be &lt;code&gt;/bin/sh&lt;/code&gt;) to run
&lt;code&gt;nethack&lt;/code&gt;, which will work regardless of the command supplied by the user (which
is stored into &lt;code&gt;SSH_ORIGINAL_COMMAND&lt;/code&gt; in the environment, should you need it).
There are probably some other options you want to set here, as well, for
security reasons:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;restrict,pty,command=&amp;quot;...&amp;quot; ssh-rsa ... user
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The full list of options you can set here is available in the &lt;code&gt;sshd(8)&lt;/code&gt; man
page. &lt;code&gt;restrict&lt;/code&gt; just turns off most stuff by default, and &lt;code&gt;pty&lt;/code&gt; explicitly
re-enables TTY allocation, so that we can do things like curses. This will work
if you want to explicitly authorize specific people, one at a time, in your
&lt;code&gt;authorized_keys&lt;/code&gt; file, to use your SSH-driven application.  However, there&amp;rsquo;s
one more place where we can meddle: the &lt;code&gt;AuthorizedKeysCommand&lt;/code&gt; in
&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;. Instead of having OpenSSH read from the
&lt;code&gt;authorized_keys&lt;/code&gt; file in the user&amp;rsquo;s home directory, it can execute an arbitrary
program and read the &lt;code&gt;authorized_keys&lt;/code&gt; file from its stdout. For example, on
Sourcehut we use something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AuthorizedKeysCommand /usr/bin/gitsrht-dispatch &amp;quot;%u&amp;quot; &amp;quot;%h&amp;quot; &amp;quot;%t&amp;quot; &amp;quot;%k&amp;quot;
AuthorizedKeysUser root
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Respectively, these format strings will supply the command with the username
attempting login, the user&amp;rsquo;s home directory, the type of key in use (e.g.
&lt;code&gt;ssh-rsa&lt;/code&gt;), and the base64-encoded key itself. More options are available - see
&lt;code&gt;TOKENS&lt;/code&gt;, in the &lt;code&gt;sshd_config(8)&lt;/code&gt; man page. The key supplied here can be used to
identify the user - on Sourcehut we look up their SSH key in the database. Then
you can choose whether or not to admit the user based on any logic of your
choosing, and print an appropriate &lt;code&gt;authorized_keys&lt;/code&gt; to stdout. You can also
take this opportunity to forward this information along to the command that gets
executed, by appending them to the command option or by using the environment
options.&lt;/p&gt;
&lt;h2 id=&#34;how-this-works-on-buildssrht&#34;&gt;How this works on builds.sr.ht&lt;/h2&gt;
&lt;p&gt;We use a somewhat complex system for incoming SSH connections, which I won&amp;rsquo;t go
into here - it&amp;rsquo;s only necessary to support multiple SSH applications on the same
server, like git.sr.ht and builds.sr.ht. For builds.sr.ht, we accept all
connections and authenticate later on. This means our AuthorizedKeysCommand is
quite simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# We just let everyone in at this stage, authentication is done later on.&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;key_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b64key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;command=&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;buildsrht-shell &amp;#39;{b64key}&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,restrict,pty &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{key_type} {b64key} somebody&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The command, &lt;code&gt;buildsrht-shell&lt;/code&gt;, does some more interesting stuff. First, the
user is told to connect with a command like &lt;code&gt;ssh builds@buildhost connect &amp;lt;job ID&amp;gt;&lt;/code&gt;, so we use the &lt;code&gt;SSH_ORIGINAL_COMMAND&lt;/code&gt; variable to grab the command line
they included:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SSH_ORIGINAL_COMMAND&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shlex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Usage: ssh ... connect &amp;lt;job ID&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;connect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tail&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Usage: ssh ... connect &amp;lt;job ID&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we do some authentication, fetching the job info from the local job runner
and checking their key against meta.sr.ht (the authentication service).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;b64key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8080/job/{job_id}/info&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;No such job found.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;meta_origin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;meta.sr.ht&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{meta_origin}/api/ssh-key/{b64key}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;owner&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;404&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;We don&amp;#39;t recognize your SSH key. Make sure you&amp;#39;ve added it to &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;your account.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;{get_origin(&amp;#39;meta.sr.ht&amp;#39;, external=True)}/keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Temporary authentication failure. Try again later.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;You are not permitted to connect to this job.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two modes from here on out: connecting and tailing. The former logs
into the local build VM, and the latter prints the logs to the terminal.
Connecting looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Opens a shell on the build VM&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;naturaltime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utcnow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deadline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Your VM will be terminated {limit}, or when you log out.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8080/job/{job_id}/claim&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;tty&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/dev/tty&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O_RDWR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dup2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;subprocess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ssh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-qt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;-p&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;UserKnownHostsFile=/dev/null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;StrictHostKeyChecking=no&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;LogLevel=quiet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;build@localhost&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bash&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:8080/job/{job_id}/terminate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is pretty self explanatory, except perhaps for the dup2 - we just open
&lt;code&gt;/dev/tty&lt;/code&gt; and make &lt;code&gt;stdin&lt;/code&gt; a copy of it. Some interactive applications
misbehave if stdin is not a tty, and this mimics the normal behavior of SSH.
Then we log into the build VM over SSH, which with stdin/stdout/stderr rigged up
like so will allow the user to interact with the build VM. After that completes,
we terminate the VM.&lt;/p&gt;
&lt;p&gt;This is mostly plumbing work that just serves to get the user from point A to
point B. The tail functionality is more application-like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Tails the build logs to stdout&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;logs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cfg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;builds.sr.ht::worker&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;buildlogs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subprocess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Popen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tail&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-f&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;procs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# holy bejeezus this is hacky&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;manifest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;procs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subprocess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Popen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tail -f {shlex.quote(path)} | &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;awk &amp;#39;{ print &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;[&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shlex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;] &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; $0 }&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;task&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tasks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;procs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;connect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;task&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tasks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;running&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tail&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This&amp;hellip; I&amp;hellip; let&amp;rsquo;s just pretend you never saw this. And that&amp;rsquo;s how SSH access to
builds.sr.ht works!&lt;/p&gt;
</description>
    </item><item>
      <title>Shell access for builds.sr.ht CI</title>
      <link>./2019/08/19/Introducing-shell-access-for-builds.html</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/08/19/Introducing-shell-access-for-builds.html</guid>
      <description>&lt;p&gt;Have you ever found yourself staring at a failed CI build, wondering desperately
what happened? Or, have you ever needed a fresh machine on-demand to test out an
idea in? Have you been working on Linux, but need to test something on OpenBSD?
Starting this week, builds.sr.ht can help with all of these problems, because
you can now SSH into the build environment.&lt;/p&gt;
&lt;small class=&#34;text-muted&#34;&gt;
  If you didn&#39;t know, &lt;a href=&#34;https://sourcehut.org&#34;&gt;Sourcehut&lt;/a&gt; is the 100%
  open/libre software forge for hackers, complete with git and Mercurial
  hosting, CI, mailing lists, and more - with no JavaScript. Try it out!
&lt;/small&gt;
&lt;p&gt;The next time your build fails on builds.sr.ht, you&amp;rsquo;ll probably notice the
following message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/thL-.png&#34; alt=&#34;Screenshot of builds.sr.ht showing a prompt to SSH into the failed buildVM and examine it&#34;&gt;&lt;/p&gt;
&lt;p&gt;After the build fails, we process everything normally - sending emails,
webhooks, and so on - but keep the VM booted for an additional 10 minutes. If
you do log in during this window, we keep the VM alive until you log out or
until your normal build time limit has elapsed. Once you&amp;rsquo;ve logged in, you get a
shell and can do anything you like, such as examining the build artifacts or
tweaking the source and trying again.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh -t builds@azusa.runners.sr.ht connect 81809
Connected to build job #81809 (failed):
https://builds.sr.ht/jobs/~sircmpwn/81809
Your VM will be terminated 4 hours from now, or when you log out.

bash-5.0 $
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also connect to any build over SSH by adding &lt;code&gt;shell: true&lt;/code&gt; to your build
manifest. When you do, the VM will be kept alive after all of the tasks have
finished (even if it doesn&amp;rsquo;t fail) so you can SSH in. You can also SSH in before
the tasks have finished, and tail the output of the build in your terminal. An
example use case might be getting a fresh Alpine environment to test build your
package on:&lt;/p&gt;
&lt;script
  id=&#34;asciicast-wnLYZwDuvkbIHwgTdmnqtQpXh&#34;
  src=&#34;https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js&#34; async
&gt;&lt;/script&gt;
&lt;p&gt;&lt;noscript&gt;&lt;i&gt;This article includes third-party JavaScript content from
asciinema.org, a free- and open-source platform that I trust.&lt;/i&gt;&lt;/noscript&gt;&lt;/p&gt;
&lt;p&gt;This was accomplished with a simple build manifest:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;image: alpine/edge
shell: true
sources:
- https://git.alpinelinux.org/aports
tasks:
- &amp;quot;prep-abuild&amp;quot;: |
    abuild-keygen -an
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since build manifests run normally in advance of your shell login, you can do
things like install your preferred editor and dotfiles, pull down your SSH keys
through &lt;a href=&#34;https://man.sr.ht/tutorials/builds.sr.ht/using-build-secrets.md&#34;&gt;build
secrets&lt;/a&gt;, or
anything else you desire to set up a comfortable working environment.&lt;/p&gt;
&lt;p&gt;Furthermore, by leveraging the &lt;a href=&#34;https://man.sr.ht/builds.sr.ht/api.md&#34;&gt;builds.sr.ht
API&lt;/a&gt;, you can write scripts which take
advantage of the shell features. Need a NetBSD shell? With a little scripting
you can get something like this working:&lt;/p&gt;
&lt;script
  id=&#34;asciicast-8etTNE7Ptgmu6hO3cVDlvrAal&#34;
  src=&#34;https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js&#34; async
&gt;&lt;/script&gt;
&lt;p&gt;With experimental multiarch support being rolled out, soon you&amp;rsquo;ll be just a few
keystrokes away from an ARM or PowerPC shell, too.&lt;/p&gt;
&lt;p&gt;I want to expand more on SSH access in the future. Stay tuned and &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;let me
know&lt;/a&gt; if you have any cool ideas!&lt;/p&gt;
</description>
    </item><item>
      <title>Status update, August 2019</title>
      <link>./2019/08/15/Status-update-August-2019.html</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/08/15/Status-update-August-2019.html</guid>
      <description>&lt;p&gt;Outside my window, the morning sun can be seen rising over the land of the
rising sun, as I sip from a coffee purchased at the konbini down the street. I
almost forgot to order it, as the staffer behind the counter pointed out with a
smile and a joke that, having been told in Japanese, mostly went over my head.
It&amp;rsquo;s on this quiet Osaka morning I write today&amp;rsquo;s status update - there are lots
of existing developments to share!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with sourcehut news. I deployed a cool feature yesterday - SSH
access to builds.sr.ht. You can now SSH into a failed build to examine the
failure and investigate the root cause. You can also get a shell on-demand for
any build image, including for experimental arm64 support. I&amp;rsquo;ll be writing a
full-length blog post going into detail about this feature later in the week.
Additionally, with contributor Ryan Chan&amp;rsquo;s help, man.sr.ht received a huge
overhaul which moved wikis out of man.sr.ht&amp;rsquo;s dedicated git subsystem and into
git.sr.ht repositories, allowing you to make your wiki out of a branch of your
main project repo or browse the git data on the web. I&amp;rsquo;ll be posting more sr.ht
news to sr.ht-announce later today if you want to hear more!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/thL-.png&#34; alt=&#34;Screenshot of a failed build on builds.sr.ht offering SSH access to the buildenvironment&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://git.sr.ht/~sircmpwn/aerc/refs/0.2.0&#34;&gt;aerc 0.2.0&lt;/a&gt; has been released,
which included nearly 200 changes from 34 contributors. I&amp;rsquo;m grateful to the
community for this crazy amount of support - working together we&amp;rsquo;ll make aerc
amazing in no time. Highlights include maildir and sendmail transports, search
and filtering, support for &lt;code&gt;mailto:&lt;/code&gt; links, tab completion, and more. We haven&amp;rsquo;t
slowed down since, and the next release already has support lined up for
notmuch, more tab completion support, and more features for mail composition. In
related news, Greg Kroah-Hartman of Linux kernel fame was kind enough to &lt;a href=&#34;http://www.kroah.com/log/blog/2019/08/14/patch-workflow-with-mutt-2019/&#34;&gt;write
up&lt;/a&gt;
details about his email workflow to help guide the direction of aerc. I&amp;rsquo;ll be
writing a follow-up post next week explaining how aerc aims to solve the
problems he lays out.&lt;/p&gt;
&lt;p&gt;Sway and wlroots continue chugging along as well, with the release of Sway
1.2-rc1 coming earlier this week. This release adds many features from the
recent i3 4.17 release, and adds a handful of small features and bug fixes. The
corresponding wlroots release will be pretty cool, too, adding support for
direct scanout and fixing dozens of bugs. I&amp;rsquo;d like to draw your attention as
well to a cool project from the Sway community: Jason Francis&amp;rsquo;s
&lt;a href=&#34;https://github.com/cyclopsian/wdisplays&#34;&gt;wdisplays&lt;/a&gt;, a GUI for arranging and
configuring displays on wlroots-based desktops. The changes necessary for it to
work will land in sway 1.2, and users building from git can try it out today.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/iyU4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;On the DRM leasing and VR for Wayland work I was discussing in the last update,
I&amp;rsquo;m happy to share that I&amp;rsquo;ve got it working with SteamVR! I&amp;rsquo;ve written a
&lt;a href=&#34;./2019/08/09/DRM-leasing-and-VR-for-Wayland.html&#34;&gt;detailed blog post&lt;/a&gt; which
explains all of the work that went into this project, if you want to learn about
it in depth and watch some cool videos summing up the work. There&amp;rsquo;s still a lot
of work to do in negotiating the standardization of new interfaces to support
this feature in several projects, but all of the unknowns have been discovered
and answered. We will have VR on Wayland soon. I plan on making my way to the
&lt;a href=&#34;https://monado.dev/&#34;&gt;Monado&lt;/a&gt; and &lt;a href=&#34;https://www.khronos.org/openxr&#34;&gt;OpenXR&lt;/a&gt; to
help realize a top-to-bottom free software VR stack designed with Wayland in
mind. I&amp;rsquo;ll also be joining many members of the wlroots gang at
&lt;a href=&#34;https://xdc2019.x.org/&#34;&gt;XDC&lt;/a&gt; in October, where I hope to meet the people
working on OpenXR.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also invested more time into my Wayland book, because I&amp;rsquo;ve realized that at
my current pace it won&amp;rsquo;t be done any time soon. It&amp;rsquo;s now about half complete and
I&amp;rsquo;ve picked up the pace considerably. If you&amp;rsquo;re interested in helping review the
drafts, please let me know!&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for today. Thank you for your continued support!&lt;/p&gt;
&lt;small class=&#34;text-muted&#34;&gt;
This work was possible thanks to users who support me financially. Please
consider &lt;a href=&#34;./donate&#34;&gt;donating to my work&lt;/a&gt; or &lt;a
href=&#34;https://sourcehut.org&#34;&gt;buying a sourcehut.org subscription&lt;/a&gt;. Thank you!
&lt;/small&gt;
</description>
    </item><item>
      <title>DRM leasing: VR for Wayland</title>
      <link>./2019/08/09/DRM-leasing-and-VR-for-Wayland.html</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/08/09/DRM-leasing-and-VR-for-Wayland.html</guid>
      <description>&lt;p&gt;As those who read my &lt;a href=&#34;./2019/07/15/Status-update-July-2019.html&#34;&gt;status updates&lt;/a&gt;
have been aware, recently I&amp;rsquo;ve been working on bringing VR to Wayland (and vice
versa). The deepest and most technical part of this work is &lt;em&gt;DRM leasing&lt;/em&gt;
(Direct Rendering Manager, &lt;em&gt;not&lt;/em&gt; Digital Restrictions Management), and I think
it&amp;rsquo;d be good to write in detail about what&amp;rsquo;s involved in this part of the
effort. This work has been sponsored by &lt;a href=&#34;https://status.im/&#34;&gt;Status.im&lt;/a&gt;, as part
of an effort to build a comprehensive Wayland-driven VR workspace. When we got
started, most of the plumbing was missing for VR headsets to be useful on
Wayland, so this has been my focus for a while. The result of this work is
summed up in this crappy handheld video:&lt;/p&gt;
&lt;video src=&#34;https://yukari.sr.ht/steamvr.webm&#34; controls&gt;
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
&lt;/video&gt;
&lt;p&gt;Keith Packard, a long time Linux graphics developer, &lt;a href=&#34;https://keithp.com/blogs/DRM-lease/&#34;&gt;wrote several blog posts
documenting his work implementing this feature for
X11&lt;/a&gt;. My journey was somewhat similar,
though thanks to his work I was able to save a lot of time. The rub of this idea
is that the Wayland compositor, the DRM (Direct Rendering Manager) master, can
&amp;ldquo;lease&amp;rdquo; some of its resources to a client so they can drive your display
directly. DRM is the kernel subsystem we use for enumerating and setting modes,
allocating pixel buffers, and presenting them in sync with the display&amp;rsquo;s refresh
rate. For a number of reasons, minimizing latency being an important one, VR
applications prefer to do these tasks directly rather than be routed through the
display server like most applications are. The main tasks for implementing this
for Wayland were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Draft a &lt;a href=&#34;https://lists.freedesktop.org/archives/wayland-devel/2019-July/040768.html&#34;&gt;protocol extension&lt;/a&gt; for issuing DRM leases&lt;/li&gt;
&lt;li&gt;Write implementations for &lt;a href=&#34;https://github.com/swaywm/wlroots/pull/1730&#34;&gt;wlroots&lt;/a&gt; and &lt;a href=&#34;https://github.com/swaywm/sway/pull/4289&#34;&gt;sway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a &lt;a href=&#34;https://git.sr.ht/~sircmpwn/kmscube&#34;&gt;simple test client&lt;/a&gt; working&lt;/li&gt;
&lt;li&gt;Draft a Vulkan extension for leasing via Wayland&lt;/li&gt;
&lt;li&gt;Write an implementation for &lt;a href=&#34;https://gitlab.freedesktop.org/mesa/mesa/merge_requests/1509&#34;&gt;Mesa&amp;rsquo;s Vulkan WSI implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a more complex &lt;a href=&#34;https://git.sr.ht/~sircmpwn/xrgears&#34;&gt;Vulkan test client&lt;/a&gt; working&lt;/li&gt;
&lt;li&gt;Add support to &lt;a href=&#34;https://gitlab.freedesktop.org/xorg/xserver/merge_requests/248&#34;&gt;Xwayland&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s break down exactly what was necessary for each of these steps.&lt;/p&gt;
&lt;h2 id=&#34;wayland-protocol-extension&#34;&gt;Wayland protocol extension&lt;/h2&gt;
&lt;p&gt;Writing a protocol extension was the first order of business. There was an
&lt;a href=&#34;https://lists.freedesktop.org/archives/wayland-devel/2018-January/036652.html&#34;&gt;earlier attempt&lt;/a&gt; which petered off in January. I started
with this, by cleaning it up based on my prior experience writing protocols,
normalizing much of the terminology and style, and cleaning up the state
management. After some initial rounds of review, there were some questions to
answer. The most important ones were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do we identify the display? Should we send the EDID, which may be
bigger than the maximum size of a Wayland message?&lt;/li&gt;
&lt;li&gt;Are there security concerns? Could malicious clients read from framebuffers
they weren&amp;rsquo;t given a lease for?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The EDID I ended up sending in a side channel (file descriptor to shared
memory), and the latter was proven to be a non-issue by writing a malicious
client and demonstrating that the kernel rejects its attempts to do evil.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;event&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;edid&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;description&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;summary=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;edid&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    The compositor may send this event once the connector is created to
    provide a file descriptor which may be memory-mapped to read the
    connector&amp;#39;s EDID, to assist in selecting the correct connectors
    for lease. The fd must be mapped with MAP_PRIVATE by the recipient.

    Note that not all displays have an EDID, and this event will not be
    sent in such cases.
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;edid&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fd&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;summary=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;EDID file descriptor&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;uint&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;summary=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;EDID size, in bytes&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/event&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A few more changes would happen to this protocol in the following weeks, but
this was good enough to move on to&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;wlroots--sway-implementation&#34;&gt;wlroots &amp;amp; sway implementation&lt;/h2&gt;
&lt;p&gt;After a chat with Scott Anderson (the maintainer of DRM support in wlroots) and
thanks to his timely refactoring efforts, the stage was well set for introducing
this feature to wlroots. I had a good idea of how it would take shape. &lt;a href=&#34;https://github.com/swaywm/wlroots/pull/1730/files#diff-77b17feac8a8af251811a20e5b9bbdd1&#34;&gt;Half of
the work&lt;/a&gt; - the state machine which maintains the server-side
view of the protocol - is well trodden ground and was fairly easy to put
together. Despite being a well-understood problem in the wlroots codebase, these
state machines are always a bit tedious to implement correctly, and I was still
to flushing out bugs well into the remainder of this workstream.&lt;/p&gt;
&lt;p&gt;The other half of this work was in &lt;a href=&#34;https://github.com/swaywm/wlroots/pull/1730/files#diff-8b05a774317ee8e87d51422170f82d4b&#34;&gt;the DRM subsystem&lt;/a&gt;. We
decided that we&amp;rsquo;d have leased connectors appear &amp;ldquo;destroyed&amp;rdquo; to the compositor,
and thus the compositor would have an opportunity to clean it up and stop using
them, similar to the behavior of when an output is hotplugged. Further changes
were necessary to have the DRM internals elegantly carry around some state for
the leased connector and avoid using the connector itself, as well as dealing
with the termination of the lease (either by the client or by the compositor).
With all of this in place, it&amp;rsquo;s a &lt;a href=&#34;https://github.com/swaywm/wlroots/pull/1730/files#diff-8b05a774317ee8e87d51422170f82d4bR1601&#34;&gt;simple matter&lt;/a&gt; to enumerate
the DRM object IDs for all of the resources we intend to lease and issue the
lease itself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nobjects&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nconns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_drm_connector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WLR_DRM_CONN_LEASED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;nobjects&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* connector */&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* crtc */&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* primary plane */&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* cursor plane */&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_overlays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* overlay planes */&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nobjects&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;wlr_log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WLR_ERROR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Attempted DRM lease with &amp;lt;= 0 objects&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;wlr_log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WLR_DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Issuing DRM lease with the %d objects:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nobjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nobjects&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nconns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_drm_connector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;primary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;wlr_log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WLR_DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;connector: %d crtc: %d primary plane: %d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;primary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;wlr_log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WLR_DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;cursor plane: %d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_overlays&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;wlr_log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WLR_DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;+%zd overlay planes:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_overlays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_overlays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;overlays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;wlr_log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WLR_DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;overlay plane: %d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;overlays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lease_fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drmModeCreateLease&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nobjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lessee_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lease_fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lease_fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;wlr_log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WLR_DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Issued DRM lease %d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lessee_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nconns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_drm_connector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lessee_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lessee_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lessee_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lessee_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WLR_DRM_CONN_LEASED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lease_terminated_cb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lease_terminated_cb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lease_terminated_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lease_terminated_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;wlr_output_destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lease_fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://github.com/swaywm/sway/pull/4289&#34;&gt;sway implementation&lt;/a&gt; is very simple. I added a note in wlroots
which exposes whether or not an output is considered &amp;ldquo;non-desktop&amp;rdquo; (a property
which is set for most VR headsets), then sway just rigs up the lease manager and
offers all non-desktop outputs for lease.&lt;/p&gt;
&lt;h2 id=&#34;kmscube&#34;&gt;kmscube&lt;/h2&gt;
&lt;p&gt;Testing all of this required the use of a simple test client. During his earlier
work, Keith wrote some patches on top of
&lt;a href=&#34;https://gitlab.freedesktop.org/mesa/kmscube/&#34;&gt;kmscube&lt;/a&gt;, a simple Mesa demo
which renders a spinning cube directly via DRM/KMS/GBM. A &lt;a href=&#34;https://git.sr.ht/~sircmpwn/kmscube/commit/60d89ef1d9304427a1289174d9a311ab06e39b44&#34;&gt;few simple
tweaks&lt;/a&gt; was suitable to get this working through my protocol
extension, and for the first time I saw something rendered on my headset through
sway!&lt;/p&gt;
&lt;video src=&#34;https://yukari.sr.ht/vr.webm&#34; controls&gt;
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
&lt;/video&gt;
&lt;h2 id=&#34;vulkan&#34;&gt;Vulkan&lt;/h2&gt;
&lt;p&gt;Vulkan has a subsystem called WSI - Window System Integration - which handles
the linkage between Vulkan&amp;rsquo;s rendering process and the underlying window system,
such as Wayland, X11, or win32. Keith added an extension to this system called
&lt;a href=&#34;https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VK_EXT_acquire_xlib_display&#34;&gt;VK_EXT_acquire_xlib_display&lt;/a&gt;, which lives on top
of &lt;a href=&#34;https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VK_EXT_direct_mode_display&#34;&gt;VK_EXT_direct_mode_display&lt;/a&gt;, a system for
driving displays directly with Vulkan. As the name implies, this system is
especially X11-specific, so I&amp;rsquo;ve drafted my own VK extension for Wayland:
VK_EXT_acquire_wl_display. This is the crux of it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;command&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;successcodes=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;VK_SUCCESS&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;errorcodes=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;VK_ERROR_INITIALIZATION_FAILED&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;proto&amp;gt;&amp;lt;type&amp;gt;&lt;/span&gt;VkResult&lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;vkAcquireWaylandDisplayEXT&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&amp;lt;/proto&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;param&amp;gt;&amp;lt;type&amp;gt;&lt;/span&gt;VkPhysicalDevice&lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;physicalDevice&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;param&amp;gt;&lt;/span&gt;struct &lt;span class=&#34;nt&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;wl_display&lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;* &lt;span class=&#34;nt&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;display&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;param&amp;gt;&lt;/span&gt;struct &lt;span class=&#34;nt&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;zwp_drm_lease_manager_v1&lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;* &lt;span class=&#34;nt&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;manager&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;param&amp;gt;&amp;lt;type&amp;gt;&lt;/span&gt;int&lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;nConnectors&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;param&amp;gt;&amp;lt;type&amp;gt;&lt;/span&gt;VkWaylandLeaseConnectorEXT&lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;* &lt;span class=&#34;nt&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;pConnectors&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/command&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I chose to leave it up to the user to enumerate the leasable connectors from the
Wayland protocol, then populate these structs with references to the connectors
they want to lease:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;type&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;category=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;struct&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;VkWaylandLeaseConnectorEXT&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;member&amp;gt;&lt;/span&gt;struct &lt;span class=&#34;nt&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;zwp_drm_lease_connector_v1&lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;* &lt;span class=&#34;nt&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;pConnectorIn&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&amp;lt;/member&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;member&amp;gt;&amp;lt;type&amp;gt;&lt;/span&gt;VkDisplayKHR&lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;displayOut&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&amp;lt;/member&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, this was the result of some iteration and design discussions with other
folks knowledgable in these topics. I owe special thanks to Daniel Stone for
sitting down with me (figuratively, on IRC) and going over ideas for how to
design the Vulkan API. Armed with this specification, I now needed a Vulkan
driver which supported it.&lt;/p&gt;
&lt;h2 id=&#34;implementing-the-vk-extension-in-mesa&#34;&gt;Implementing the VK extension in Mesa&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mesa3d.org/&#34;&gt;Mesa&lt;/a&gt; is the premier free software graphics suite
powering graphics on Linux and other operating systems. It includes an
implementation of OpenGL and Vulkan for several GPU vendors, and is the home of
the userspace end of AMDGPU, Intel, nouveau, and other graphics drivers. A
specification is nothing without its implementation, so I set out to
implementing this extension for Mesa. In the end, it turned out to be much
simpler than the corresponding X version. This is the complete code for the WSI
part of this feature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;drm_lease_handle_lease_fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zwp_drm_lease_v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zwp_drm_lease_v1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;int32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leased_fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wsi_display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leased_fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;drm_lease_handle_finished&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zwp_drm_lease_v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zwp_drm_lease_v1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wsi_display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zwp_drm_lease_v1_listener&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drm_lease_listener&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;drm_lease_handle_lease_fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;drm_lease_handle_finished&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/* VK_EXT_acquire_wl_display */&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;VkResult&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;wsi_acquire_wl_display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VkPhysicalDevice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;physical_device&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                       &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wsi_device&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi_device&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                       &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                       &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zwp_drm_lease_manager_v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                       &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nConnectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                       &lt;span class=&#34;n&#34;&gt;VkWaylandLeaseConnectorEXT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wsi_display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wsi_display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wsi_device&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VK_ICD_WSI_PLATFORM_DISPLAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

   &lt;span class=&#34;cm&#34;&gt;/* XXX no support for mulitple leases yet */&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VK_ERROR_INITIALIZATION_FAILED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;cm&#34;&gt;/* XXX no support for mulitple connectors yet */&lt;/span&gt;
   &lt;span class=&#34;cm&#34;&gt;/* The solution will eventually involve adding a listener to each
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * connector, round tripping, and matching EDIDs once the lease is
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * granted. */&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nConnectors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VK_ERROR_INITIALIZATION_FAILED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zwp_drm_lease_request_v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lease_request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;zwp_drm_lease_manager_v1_create_lease_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nConnectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;zwp_drm_lease_request_v1_request_connector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lease_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                 &lt;span class=&#34;n&#34;&gt;connectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pConnectorIn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zwp_drm_lease_v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drm_lease&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;zwp_drm_lease_request_v1_submit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lease_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;zwp_drm_lease_request_v1_destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lease_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;zwp_drm_lease_v1_add_listener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drm_lease&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drm_lease_listener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;wl_display_roundtrip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VK_ERROR_INITIALIZATION_FAILED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nconn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;drmModeResPtr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drmModeGetResources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;drmModeObjectListPtr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lease&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drmModeGetLease&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count_connectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lease&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lease&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
         &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wsi_display_connector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;wsi_display_get_connector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsi_device&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
         &lt;span class=&#34;cm&#34;&gt;/* TODO: Match EDID with requested connector */&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;connectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nconn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;displayOut&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;wsi_display_connector_to_handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
         &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nconn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;drmModeFreeResources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VK_SUCCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rigging it up to each driver&amp;rsquo;s WSI shim is pretty straightforward from this
point. I only did it for radv - AMD&amp;rsquo;s Vulkan driver (cause that&amp;rsquo;s the hardware I
was using at the time) - but the rest should be trivial to add. Equipped with a
driver in hand, it&amp;rsquo;s time to make a Real VR Application work on Wayland.&lt;/p&gt;
&lt;h2 id=&#34;xrgears&#34;&gt;xrgears&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.com/lubosz/xrgears&#34;&gt;xrgears&lt;/a&gt; is another simple demo application
like kmscube - but designed to render a VR scene. It leverages Vulkan and
&lt;a href=&#34;http://www.openhmd.net/&#34;&gt;OpenHMD&lt;/a&gt; (Open Head Mounted Display) to display this
scene and stick the camera to your head. With the Vulkan extension implemented,
it was a fairly simple matter to &lt;a href=&#34;https://git.sr.ht/~sircmpwn/xrgears/commit/41ef1d1dfe3e56766d1f8b72b335567eb7842d04&#34;&gt;rig up a Wayland backend&lt;/a&gt;. The
result:&lt;/p&gt;
&lt;video src=&#34;https://yukari.sr.ht/xrgears.webm&#34; controls&gt;
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
&lt;/video&gt;
&lt;h2 id=&#34;xwayland&#34;&gt;Xwayland&lt;/h2&gt;
&lt;p&gt;The final step was to integrate this extension with Xwayland, so that X
applications which took advantage of Keith&amp;rsquo;s work would work via Xwayland. This
ended up being more difficult than I expected for one reason in particular:
modes. Keith&amp;rsquo;s Vulkan extension is designed in two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Convert an RandR output into a VkDisplayKHR&lt;/li&gt;
&lt;li&gt;Acquire a lease for a set of VkDisplayKHRs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Between these steps, you can query the modes (available resolutions and refresh
rates) of the display. However, the Wayland protocol I designed does not let you
query modes until &lt;em&gt;after&lt;/em&gt; you get the DRM handle, at which point you should
query them through DRM, thus reducing the number of sources of truth and
simplifying things considerably. This is arguably a design misstep in the
original Vulkan extension, but it&amp;rsquo;s shipped in a lot of software and is beyond
fixing. So how do we deal with it?&lt;/p&gt;
&lt;p&gt;One way (which was suggested at one point) would be to change the protocol to
include the relevant mode information, so that Xwayland could populate the RandR
modes from it. I found this distasteful, because it was making the protocol more
complex for the sake of a legacy system. Another option would be to make a
second protocol which includes this extra information especially for Xwayland,
but this also seemed like a compromise that compositors would rather not make.
Yet another option would be to have Xwayland request a lease with zero objects
and scan connectors itself, but zero-object leases are not possible.&lt;/p&gt;
&lt;p&gt;The option I ended up going with is to have Xwayland open the DRM device itself
and scan connectors there. This is less palatable because (1) we can&amp;rsquo;t be sure
which DRM device is correct, and (2) we can&amp;rsquo;t be sure Xwayland will have
permission to read it. We&amp;rsquo;re still not sure how best to solve this in the long
term. As it stands, this approach is sufficient to get it working in the common
case. The code looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RRModePtr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;xwl_get_rrmodes_from_connector_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connector_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nmode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;npref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;drmDevicePtr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;devices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;drmModeConnectorPtr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;drmModeModeInfoPtr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;RRModePtr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rrmodes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nmode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;npref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/* TODO: replace with zero-object lease once kernel supports them */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drmGetDevices2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DRM_NODE_PRIMARY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;devices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;devices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nodes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ErrorF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Failed to enumerate DRM devices&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;drm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;devices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nodes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;O_RDONLY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;drmFreeDevices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;devices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drmModeGetConnector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connector_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ErrorF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;drmModeGetConnector failed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;rrmodes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xallocarray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count_modes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RRModePtr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rrmodes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ErrorF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Failed to allocate connector modes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/* This spaghetti brought to you courtesey of xf86RandrR12.c
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * It adds preferred modes first, then non-preferred modes */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pref&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count_modes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;modes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DRM_MODE_TYPE_PREFERRED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;xRRModeInfo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;RRModePtr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rrmode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nameLength&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hdisplay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dotClock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hSyncStart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hsync_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hSyncEnd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hsync_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hTotal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;htotal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hSkew&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hskew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vdisplay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vSyncStart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vsync_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vSyncEnd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vsync_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vTotal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vtotal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;modeFlags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

                &lt;span class=&#34;n&#34;&gt;rrmode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RRModeGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;modeInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kmode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rrmode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;rrmodes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nmode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rrmode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nmode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nmode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;npref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;npref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rrmodes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A simple update to the Wayland protocol was necessary to add the &lt;code&gt;CONNECTOR_ID&lt;/code&gt;
atom to the RandR output, which is used by Mesa&amp;rsquo;s Xlib WSI code for acquiring
the display, and was reused here to line up a connector offered by the Wayland
compositor with a connector found in the kernel. The &lt;a href=&#34;https://gitlab.freedesktop.org/xorg/xserver/merge_requests/248&#34;&gt;rest of the
changes&lt;/a&gt; were pretty simple, and the result is that SteamVR works,
capping everything off nicely:&lt;/p&gt;
&lt;video src=&#34;https://yukari.sr.ht/steamvr.webm&#34; controls&gt;
  Your web browser does not support the webm video codec. Please consider using
  web browsers that support free and open standards.
&lt;/video&gt;
</description>
    </item><item>
      <title>FOSS contributor tracks</title>
      <link>./2019/07/29/FOSS-contributor-tracks.html</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/07/29/FOSS-contributor-tracks.html</guid>
      <description>&lt;p&gt;Just like many companies have different advancement tracks for their employees
(for example, a management track and an engineering track), similar concepts
exist in free software projects. One of the roles of a maintainer is to help
contributors develop into the roles which best suit them. I&amp;rsquo;d like to explain
what this means to me in my role as a maintainer of several projects, though I
should mention upfront that I&amp;rsquo;m just some guy and, while I can explain what has
and hasn&amp;rsquo;t worked for me, I can&amp;rsquo;t claim to have all of the answers. People are
hard.&lt;/p&gt;
&lt;p&gt;There are lots of different tasks which need doing on a project. A few which
come up fairly often include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;End-user support&lt;/li&gt;
&lt;li&gt;Graphic design&lt;/li&gt;
&lt;li&gt;Marketing&lt;/li&gt;
&lt;li&gt;Release planning&lt;/li&gt;
&lt;li&gt;Reviewing code&lt;/li&gt;
&lt;li&gt;Translations&lt;/li&gt;
&lt;li&gt;Triaging tickets&lt;/li&gt;
&lt;li&gt;Writing code&lt;/li&gt;
&lt;li&gt;Writing documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Within these tasks there&amp;rsquo;s room still for more specialization - different
modules have different maintainers, each contributor&amp;rsquo;s skills may be applicable
to different parts of the codebase, some people may like blogging about the
project where others like representing the project at conferences, and so on. To
me, one of my most important jobs is to figure out these relationships between
tasks and people.&lt;/p&gt;
&lt;p&gt;There are several factors that go into this. Keeping an eye on code reviews,
social channels, etc, gives you a good pulse on what people are good at now.
Talking with them directly and discussing possible future work is a good way to
understand what they want to work on. I also often consider what they could be
good at but don&amp;rsquo;t have exposure to yet, and encourage them to take on more of
these tasks. The most common case where I try to get people to branch out is
code review - once they&amp;rsquo;ve contributed to a module they&amp;rsquo;re put on the shortlist
for reviewers for future changes to nearby code. Don&amp;rsquo;t be afraid to take risks -
a few bugs is a small price to pay for an experienced contributor.&lt;/p&gt;
&lt;p&gt;This also touches on another key part of this work - fostering collaboration.
For example, if someone is taking on a cross-cutting task, I&amp;rsquo;ll give them the
names of experts on all of the affected modules so they can ask questions and
seek buy-in on their approach. Many developers aren&amp;rsquo;t interested in end-user
support, so getting people who are interested in this to bubble up technical
issues when they&amp;rsquo;re found is helpful as well.&lt;/p&gt;
&lt;p&gt;The final step is to gradually work your way out of the machine. Just like you
onboard someone with feature development or code review, you can onboard people
with maintainer tasks. If someone asks you to connect them to experts on some
part of the code, defer to a senior contributor - who has likely asked you the
same question at some point. Ask a contributor to go over the shortlog and
prepare a draft for the next release notes. Pull a trusted contributor aside and
ask them what they think needs to be improved in the project - then ask them to
make those improvements, and equip them with any tools they need to accomplish
it.&lt;/p&gt;
&lt;p&gt;One role I tend to reserve for myself is conflict prevention and moderation. I
keep a light watch on collaboration channels and periodically sync with major
contributors, keeping a pulse for the flow of information through the project.
When arguments start brewing or things start getting emotional, I try to notice
early and smooth things over before they get heated. At an impasse, I&amp;rsquo;ll make a
final judgement call on a feature, design decision, or whatever else. By making
the decision, I aim to make it neither party&amp;rsquo;s fault that someone didn&amp;rsquo;t get
their way. Instead, I point any blame at myself, and rely on the mutual trust
between myself and the contributors to see the decision through amicably. When
this works correctly, it can help preserve a good relationship between each
party.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re lucky, the end result is a project which can grow arbitrarily large,
with contributors bringing a variety of skills to support each other at every
level and enjoy the work they&amp;rsquo;re doing. The bus factor is low and everyone
maintains a healthy and productive relationship with the project - yourself
included.&lt;/p&gt;
</description>
    </item><item>
      <title>Status update, July 2019</title>
      <link>./2019/07/15/Status-update-July-2019.html</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/07/15/Status-update-July-2019.html</guid>
      <description>&lt;p&gt;Today I received the keys to my new apartment, which by way of not being
directly in the middle of the city&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; saves me a decent chunk of money - and
allows me to proudly announce that I have officially broken even on doing free
software full time! I owe a great deal of thanks to all of you who have &lt;a href=&#34;https://drewdevault.com/donate&#34;&gt;donated
to support my work&lt;/a&gt; or purchased a paid
&lt;a href=&#34;https://sourcehut.org&#34;&gt;SourceHut&lt;/a&gt; account. I&amp;rsquo;ve dreamed of sustainably working
on free software for a long, long time, and I&amp;rsquo;m very grateful for all of your
support in helping realize that dream. Now let me share with you what your money
has bought over the past month!&lt;/p&gt;
&lt;p&gt;First, my &lt;a href=&#34;https://drewdevault.com/make-a-blog&#34;&gt;make a blog&lt;/a&gt; offer has closed
for the time being, and the world is now 13 blogs richer for it. Be sure to
check them out! I have also started a mailing list for tech writers: the &lt;a href=&#34;https://lists.sr.ht/~sircmpwn/free-writers-club&#34;&gt;free
writers club&lt;/a&gt;, which I
encourage anyone using free software to blog about technology to join for
editorial advice, software recommendations, and periodic reminders to keep
writing. The offer to get paid for your own new blog will reopen in the future,
keep an eye out!&lt;/p&gt;
&lt;p&gt;As far as projects are concerned, lots of good stuff this month. aerc has been
making excellent progress. We just pulled in the first batch of patches adding
maildir support, and will soon have sendmail and mbox support as well. We&amp;rsquo;ve
also begun on mouse support, and you can now click to switch between tabs. The
initial patches for tab completion have also been added. Additional changes
include an :unsubscribe command to unsubscribe from marketing emails and mailing
lists, basic search functionality, OAuth IMAP authentication, changing config
options at runtime, and DNS lookups to complete your settings in the new account
wizard more quickly. Building more upon these features, and a handler for mailto
links, are the main blockers for aerc 0.2.0.&lt;/p&gt;
&lt;p&gt;In Wayland news, VR work continues. I&amp;rsquo;ve taken on the goal of implementing DRM
leasing for Wayland, which will allow VR applications to take exclusive control
over the headset&amp;rsquo;s graphical resources from Wayland compositor. A similar
technology exists for X11, and I&amp;rsquo;ve written a Wayland protocol for the same
purpose on Wayland. I&amp;rsquo;ve also written a Vulkan extension to utilize this
protocol in Vulkan&amp;rsquo;s WSI layer. I&amp;rsquo;ve written implementations of these for
wlroots, sway, mesa, and the radv (AMD) Vulkan driver. The result: a working VR
demo on Sway (audio warning):&lt;/p&gt;
&lt;p&gt;&lt;video src=&#34;https://yukari.sr.ht/xrgears.webm&#34; controls&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s still some details to sort out on the standardization of these
extensions, which are under discussion now. In the coming weeks I hope to have
an implementation for Xwayland (which will get working games based on Steam&amp;rsquo;s
OpenVR runtime), and get a proof-of-concept of a VR-driven Wayland compositor
based on the demo shown in the previous status update. Exciting stuff!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also had time to write a few more chapters for my Wayland book, which I&amp;rsquo;ll
be speeding up my work on. I&amp;rsquo;ll soon be leaving for an extended trip to Japan,
and on these grueling flights I&amp;rsquo;ll have plenty of time to work on it. In
additional Wayland news, we&amp;rsquo;ve been chugging along with small bugfixes and
improvements to wlroots and sway, and implementing more plumbing work to round
out our implementation of everything. Our work continues to evolve into the most
robust Wayland implementation available today, and I can only see it getting
stronger.&lt;/p&gt;
&lt;p&gt;On SourceHut, I have plenty of developments to share, but will leave the details
for the &lt;a href=&#34;https://lists.sr.ht/~sircmpwn/sr.ht-announce&#34;&gt;sr.ht-announce mailing
list&lt;/a&gt;. The most exciting news is
that &lt;a href=&#34;https://alpinelinux.org&#34;&gt;Alpine Linux&lt;/a&gt;, my favorite Linux distribution,
has completed their mailing list infrastructure migration to &lt;a href=&#34;https://lists.alpinelinux.org&#34;&gt;their own
lists.sr.ht instance&lt;/a&gt;! I&amp;rsquo;ve also been hard at
work expanding lists.sr.ht&amp;rsquo;s capabilities to this end. The other big piece of
news was announced on my blog last week: &lt;a href=&#34;https://drewdevault.com/2019/07/08/Announcing-annotations-for-sourcehut.html&#34;&gt;code
annotations&lt;/a&gt;.
All of our services have also been upgraded to Alpine 3.10, and the Alpine
mirror reorganized a bit to make future upgrades smooth.  There&amp;rsquo;s all sorts of
other goodies to share, but I&amp;rsquo;ll leave the rest for the sr.ht-announce post
later today.&lt;/p&gt;
&lt;p&gt;All sorts of other little things have gotten done, like sending patches upstream
for kmscube fixes, minor improvements to scdoc, writing a new build system for
mrsh, improvements to openring&amp;hellip; but I&amp;rsquo;m running out of patience and I imagine
you are, too. Again I&amp;rsquo;m eternally grateful for your support: thank you. I&amp;rsquo;ll see
you again for the next status update, same time next month!&lt;/p&gt;
&lt;small class=&#34;text-muted&#34;&gt;
This work was possible thanks to users who support me financially. Please
consider &lt;a href=&#34;./donate&#34;&gt;donating to my work&lt;/a&gt; or &lt;a
href=&#34;https://sourcehut.org&#34;&gt;buying a sourcehut.org subscription&lt;/a&gt;. Thank you!
&lt;/small&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I can see city hall out the window of my old apartment &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Announcing code annotations for SourceHut</title>
      <link>./2019/07/08/Announcing-annotations-for-sourcehut.html</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/07/08/Announcing-annotations-for-sourcehut.html</guid>
      <description>&lt;p&gt;Today I&amp;rsquo;m happy to announce that code annotations are now available for
&lt;a href=&#34;https://sourcehut.org&#34;&gt;SourceHut&lt;/a&gt;! &lt;img style=&#34;display: inline; height: 1.2rem&#34;
src=&#34;./img/party.png&#34; /&gt; These allow you to decorate your code with arbitrary
links and markdown. The end result looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;: Annotations were ultimately removed from sourcehut.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/w767.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;small class=&#34;text-muted&#34;&gt;
  &lt;a href=&#34;https://sourcehut.org&#34;&gt;SourceHut&lt;/a&gt; is the &#34;hacker&#39;s forge&#34;, a
  100% open-source platform for hosting Git &amp;amp; Mercurial repos, bug trackers,
  mailing lists, continuous integration, and more. No JavaScript required!
&lt;/small&gt;
&lt;p&gt;The annotations shown here are sourced from a JSON file which you can generate
and upload during your CI process. It looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;98bc0394a2f15171fb113acb5a9286a7454f22e7&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;markdown&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;lineno&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1 reference&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;- [../main.c:123](https://example.org)&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;lineno&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;colno&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;len&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#L6&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can probably infer from this that annotations are very powerful. Not only
can you annotate your code&amp;rsquo;s semantic elements to your heart&amp;rsquo;s content, but you
can also do exotic things we haven&amp;rsquo;t thought of yet, for every programming
language you can find a parser for.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be going into some detail on the thought process that went into this
feature&amp;rsquo;s design and implementation in a moment, but if you&amp;rsquo;re just excited and
want to try it out, here are a few interesting annotated repos to browse:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~sircmpwn/scdoc/tree/master/src/main.c&#34;&gt;~sircmpwn/scdoc&lt;/a&gt;: man page generator (C)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~sircmpwn/aerc/tree/master/widgets/msgviewer.go&#34;&gt;~sircmpwn/aerc&lt;/a&gt;: TUI email client (Go)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~mcf/cproc/tree/master/scan.c&#34;&gt;~mcf/cproc&lt;/a&gt;: C compiler (C)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here are the docs for generating your own: &lt;a href=&#34;https://man.sr.ht/git.sr.ht/annotations.md&#34;&gt;annotations on
git.sr.ht&lt;/a&gt;. Currently annotators are
available for C and Go, and I intend to write another for Python. For the rest,
I&amp;rsquo;ll be relying on the community to put together annotators for their favorite
programming languages, and to help me expand on the ones I&amp;rsquo;ve built.&lt;/p&gt;
&lt;h2 id=&#34;design&#34;&gt;Design&lt;/h2&gt;
&lt;p&gt;A lot of design thought went into this feature, but I knew one thing from the
outset: I wanted to make a generic system that users could use to annotate their
source code in any manner they chose. My friend Andrew Kelley (of
&lt;a href=&#34;https://ziglang.org/&#34;&gt;Zig&lt;/a&gt; fame) once expressed to me his frustration with
GitHub&amp;rsquo;s refusal to implement syntax highlighting for &amp;ldquo;small&amp;rdquo; languages, citing
a shortage of manpower. It&amp;rsquo;s for this reason that it&amp;rsquo;s important to me that
SourceHut&amp;rsquo;s open-source platform allows users large and small to volunteer to
build the perfect integration for their needs - I don&amp;rsquo;t scale alone&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;To get a head start for the most common use-cases - scanning source files and
linking references and definitions together - the best approach was unclear. I
spent a lot of time studying &lt;a href=&#34;http://ctags.sourceforge.net/&#34;&gt;ctags&lt;/a&gt;, for
example, which supports a huge set of programming languages, but unfortunately
only finds definitions. I thought about combining this with another approach for
finding references, but the only generic library with lots of parsers I&amp;rsquo;m aware
of is &lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments&lt;/a&gt;, and I didn&amp;rsquo;t necessarily want to bring
Python into every user&amp;rsquo;s CI process if they weren&amp;rsquo;t already using it. That
approach would also make it more difficult to customize the annotations for each
language. Other options I considered were
&lt;a href=&#34;http://cscope.sourceforge.net/&#34;&gt;cscope&lt;/a&gt; and
&lt;a href=&#34;https://www.gnu.org/software/global/&#34;&gt;gtags&lt;/a&gt;, but the former doesn&amp;rsquo;t have many
programming languages supported (making the tradeoff questionable), and the
latter just uses Pygments anyway.&lt;/p&gt;
&lt;p&gt;So I decided: I&amp;rsquo;m going to write my own annotators for each language. Or at
least the languages I use the most:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C, because I like it but also because
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/scdoc&#34;&gt;scdoc&lt;/a&gt; is the demo repo shown on the
&lt;a href=&#34;https://sourcehut.org&#34;&gt;SourceHut marketing page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Python, because SourceHut is largely written in Python and using it to browse
itself would be cool.&lt;/li&gt;
&lt;li&gt;Go, because parts of SourceHut are written in it but also because I use it a
lot for &lt;a href=&#34;https://git.sr.ht/~sircmpwn/aerc&#34;&gt;my own projects&lt;/a&gt;. I also knew that
Go had at least &lt;em&gt;some&lt;/em&gt; first-class support for working with its AST - and boy
was I in for a surprise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these initial languages decided, let&amp;rsquo;s turn to the implementations.&lt;/p&gt;
&lt;h2 id=&#34;annotating-c-code&#34;&gt;Annotating C code&lt;/h2&gt;
&lt;p&gt;I began with the C annotator, because I knew it would be the most difficult.
There does not exist any widely available standalone C parsing library to
provide C programs with access to an AST. There&amp;rsquo;s LLVM, but I have a deeply held
belief that programming language compiler and introspection tooling should be
implemented in the language itself. So, I set about to write a C parser from
scratch.&lt;/p&gt;
&lt;p&gt;Or, almost from scratch. There exist two standard POSIX tools for writing
compilers with: &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/lex.html&#34;&gt;lex&lt;/a&gt; and &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/yacc.html&#34;&gt;yacc&lt;/a&gt;, which are respectively a lexer
generator and a compiler compiler. Additionally, there are &lt;a href=&#34;http://www.quut.com/c/ANSI-C-grammar-y.html&#34;&gt;pre-fab lex and
yacc files&lt;/a&gt; which &lt;em&gt;mostly&lt;/em&gt;
implement the C11 standard grammar. However, C is &lt;a href=&#34;https://eli.thegreenplace.net/2007/11/24/the-context-sensitivity-of-cs-grammar/&#34;&gt;not a context-free
language&lt;/a&gt;, so additional work was necessary to track typedefs and use
them to change future tokens emitted by the scanner. A little more work was also
necessary for keeping track of line and column numbers in the lexer. Overall,
however, this was relatively easy, and in less than a day&amp;rsquo;s work I had a fully
functional C11 parser.&lt;/p&gt;
&lt;p&gt;However, my celebration was short-lived as I started to feed my parser C
programs from the wild. The GNU C Compiler, GCC, implements many C extensions,
and their use, while inadvisable, is extremely common. Not least of the
offenders is glibc, and thus running my parser on any system with glibc headers
installed would likely immediately run into syntax errors.  GCC&amp;rsquo;s extensions are
not documented in the form of an addendum to the C specification, but rather as
end-user documentation and a 15 million lines-of-code compiler for you to
reverse engineer. It took me almost a week of frustration to get a parser which
worked passably on a large subset of the C programs found in the wild, and I
imagine I&amp;rsquo;ll be dealing with GNU problems for years to come. Please don&amp;rsquo;t use C
extensions, folks.&lt;/p&gt;
&lt;p&gt;In any case, the result now works fairly well for a lot of programs, and I have
plans on expanding it to integrate more nicely with build systems like meson.
Check out the code here: &lt;a href=&#34;https://git.sr.ht/~sircmpwn/annotatec&#34;&gt;annotatec&lt;/a&gt;. The
features of the C annotator include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Annotating function definitions with a list of files/linenos which call them&lt;/li&gt;
&lt;li&gt;Linking function calls to the definition of that function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the future I intend to add support for linking to external symbols as well -
for example, linking to the POSIX spec for functions specified by POSIX, or to
the Linux man pages for Linux calls. It would also be pretty cool to support
linking between related projects, so that wlroots calls in sway can be linked to
their declarations in the wlroots repo.&lt;/p&gt;
&lt;h2 id=&#34;annotating-go-code&#34;&gt;Annotating Go code&lt;/h2&gt;
&lt;p&gt;The Go annotator was far easier. I started over my morning cup of coffee today
and I was finished with the basics by lunch. Go has a bunch of support in the
standard library for parsing and analyzing Go programs - I was very impressed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/go/ast/&#34;&gt;go/ast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/go/scanner/&#34;&gt;go/scanner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/go/token/&#34;&gt;go/token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/go/types/&#34;&gt;go/types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To support Go 1.12&amp;rsquo;s go modules, the experimental (but good enough)
&lt;a href=&#34;https://godoc.org/golang.org/x/tools/go/packages&#34;&gt;packages&lt;/a&gt; module is available
as well. All of this is nicely summarized by a lovely document in the &lt;a href=&#34;https://github.com/golang/example/tree/master/gotypes&#34;&gt;golang
examples repository&lt;/a&gt;. The
type checker is also available as a library, something which is less common even
among languages with parsers-as-libraries, and allows for many features which
would be very difficult without it. Nice work, Go!&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://git.sr.ht/~sircmpwn/annotatego&#34;&gt;resulting annotator&lt;/a&gt; clocks in at
just over 250 lines of code - compare that to the C annotator&amp;rsquo;s ~1,300 lines of
C, lex, and yacc source code. The Go annotator is more featureful, too, it can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Link function calls to their definitions, and in reverse&lt;/li&gt;
&lt;li&gt;Link method calls to their definitions, and in reverse&lt;/li&gt;
&lt;li&gt;Link variables to their definitions, even in other files&lt;/li&gt;
&lt;li&gt;Link to godoc for symbols defined in external packages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I expect a lot more to be possible in the future. It might get noisy if you turn
everything on, so each annotation type is gated behind a command line flag.&lt;/p&gt;
&lt;h2 id=&#34;displaying-annotations&#34;&gt;Displaying annotations&lt;/h2&gt;
&lt;p&gt;Displaying these annotations required a bit more effort than I would have liked,
but the end result is fairly clean and reusable. Since SourceHut uses Pygments
for syntax highlighting, I ended up writing a &lt;a href=&#34;http://pygments.org/docs/formatterdevelopment/&#34;&gt;custom
Formatter&lt;/a&gt; based on the existing
Pygments HtmlFormatter. The result is the [AnnotationFormatter]&lt;a href=&#34;https://git.sr.ht/~sircmpwn/git.sr.ht/tree/master/gitsrht/annotations.py&#34;&gt;git.sr.ht
formatter&lt;/a&gt;, which splices annotations into the highlighted code. One downside of
this approach is that it works at the token level - a more sophisticated
implementation will be necessary for annotations that span more than a single
token. Annotations are fairly expensive to render, so the rendered HTML is
stowed in Redis.&lt;/p&gt;
&lt;h2 id=&#34;the-future&#34;&gt;The future?&lt;/h2&gt;
&lt;p&gt;I intend to write a Python annotator soon, and I&amp;rsquo;ll be relying on the community
to build more. If you&amp;rsquo;re looking for a fun weekend hack and a chance to learn
more about your favorite programming language, this&amp;rsquo;d be a great project. The
format for annotations on SourceHut is also pretty generalizable, so I encourage
other code forges to reuse it so that our annotators are useful on every code
hosting platform.&lt;/p&gt;
&lt;p&gt;builds.sr.ht will also soon grow first-class support for making these annotators
available to your build process, as well as for making an OAuth token available
(ideally with a limited set of permissions) to your build environment. Rigging
up an annotator is a bit involved today (&lt;a href=&#34;https://man.sr.ht/git.sr.ht/annotations.md&#34;&gt;though the docs
help&lt;/a&gt;), and streamlining that
process will be pretty helpful. Additionally, this feature is only available for
git.sr.ht, though it should generalize to hg.sr.ht fairly easily and I hope
we&amp;rsquo;ll see it available there soon.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also looking forward to seeing more novel use-cases for annotation. Can we
indicate code coverage by coloring a gutter alongside each line of code? Can we
link references to ticket numbers in the comments to your bug tracker? If you
have any cool ideas, I&amp;rsquo;m all ears. Here&amp;rsquo;s that list of cool annotated repos to
browse again, if you made it this far and want to check them out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~sircmpwn/scdoc/tree/master/src/main.c&#34;&gt;~sircmpwn/scdoc&lt;/a&gt;: man page generator (C)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~sircmpwn/aerc/tree/master/widgets/msgviewer.go&#34;&gt;~sircmpwn/aerc&lt;/a&gt;: TUI email client (Go)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~mcf/cproc/tree/master/scan.c&#34;&gt;~mcf/cproc&lt;/a&gt;: C compiler (C)&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;For the syntax highlighting problem, by the way, this is accomplished by using Pygments. Improvements to Pygments reach not only SourceHut, but a large community of projects, making the software ecosystem better for everyone. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Absence of certain features in IRC considered a feature</title>
      <link>./2019/07/01/Absence-of-features-in-IRC.html</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/07/01/Absence-of-features-in-IRC.html</guid>
      <description>&lt;p&gt;The other day a friend of mine (an oper on Freenode) wanted to talk about IRC
compared to its peers, such as Matrix, Slack, Discord, etc. The ensuing
discussion deserves summarization here. In short: I&amp;rsquo;m glad that IRC doesn&amp;rsquo;t have
the features that are &amp;ldquo;showstoppers&amp;rdquo; for people choosing other platforms, and
I&amp;rsquo;m worried that attempts to bring these showstopping &amp;ldquo;features&amp;rdquo; to IRC will
worsen the platform for the people who use it now.&lt;/p&gt;
&lt;p&gt;On IRC, features like embedded images, a nice UX for messages longer than a few
lines (e.g. pasted code), threaded messages, etc; are absent. Some sort of
&amp;ldquo;graceful degradation&amp;rdquo; to support mixed channels with clients which support
these features and clients which don&amp;rsquo;t may be possible, but it still &lt;em&gt;degrades&lt;/em&gt;
the experience for many people. By instead making everyone work within the
limitations of IRC, we establish a shared baseline, and expressing yourself
within these limitations is not only possible but makes a better experience for
everyone.&lt;/p&gt;
&lt;p&gt;Remember that [not everyone is like you][old hardware]. I regularly chat with
people on ancient hardware that slows to a crawl when a web browser is
running&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, or people working from a niche operating system for which porting a
graphical client is a herculean task, or people with accessibility concerns for
whom the &amp;ldquo;one line of text per statement&amp;rdquo; fits nicely into their TTS&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; system
and screenreading Slack is a nightmare.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s consider what happens when these features are added but non-uniformly
available. Let&amp;rsquo;s use rich text as an example and examine the fallback
implementation. Which of these is better?&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(A) &amp;lt;user&amp;gt; check out [this website](&lt;a href=&#34;https://example.org&#34;&gt;&lt;a href=&#34;https://example.org&#34;&gt;https://example.org&lt;/a&gt;&lt;/a&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(B) &amp;lt;user&amp;gt; check out this website: &lt;a href=&#34;https://example.org&#34;&gt;&lt;a href=&#34;https://example.org&#34;&gt;https://example.org&lt;/a&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Example B is what people naturally do when rich text is unavailable, and most
clients will recognize it as a link and make it clickable anyway. But many
clients cannot and will not display example A as a link, which makes it harder
to read. Example A also makes phishing &lt;em&gt;much&lt;/em&gt; easier.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s another example: how about a nice UI for long messages, such as pasted
code snippets? Let&amp;rsquo;s examine how three different clients would implement this:
(1) a GUI client, (2) a TUI&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; client, and (3) a client which refuses to
implement it or is unmaintained&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The first case is the happy path, we probably get a little scrollbox that the
user can interact with their mouse. Let&amp;rsquo;s say &lt;a href=&#34;https://weechat.org/&#34;&gt;Weechat&lt;/a&gt;
takes up option 2, but how do they do that? Some terminal emulators have mouse
support, so they could have a similar box, but since Weechat is primarily
keyboard-driven (and some terminal emulators do not support mice!), a
keyboard-based alternative will be necessary. Now we have to have some kind of
command or keybinding for scrolling through the message, and picking which of
the last few long messages we want to scroll through. This will have to be
separate from scrolling through the backlog normally, of course. The third
option is the worst: they just see a hundred lines pasted into their backlog,
which is already highly scorned behavior on most IRC channels. Only the GUI
users come away from this happy, and on IRC they&amp;rsquo;re in the minority.&lt;/p&gt;
&lt;p&gt;Some IRC clients (Matrix) have this feature today, but most Matrix users don&amp;rsquo;t
realize what a nuisance they&amp;rsquo;re being on the chat. Here&amp;rsquo;s what they see:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/VOeY.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;And here&amp;rsquo;s what I see:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/HZ7Z.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Conservative improvements built on top of existing IRC norms, such as &lt;a href=&#34;https://thelounge.chat/&#34;&gt;The
Lounge&lt;/a&gt;, are much better. Most people post images on
IRC as URLs, which clients can do a quick HEAD request against and embed if the
mimetype is appropriate:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/9RsR.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;For most of these features, I think that people who have and think they need
them are in fact unhappier for having them. What are some of the most common
complaints from Slack users et al? &amp;ldquo;It&amp;rsquo;s distracting.&amp;rdquo; &amp;ldquo;It&amp;rsquo;s hard to keep up
with what people said while I was away.&amp;rdquo; &amp;ldquo;Threads get too long and hard to
understand.&amp;rdquo; Does any of this sound familiar? Most of these problems are caused
by or exacerbated by features which are missing from IRC.  It&amp;rsquo;s distracting
because your colleagues are posting gifs all day. It&amp;rsquo;s hard to keep up with
because the infinite backlog encourages a culture of catching up rather than
setting the expectation that conversations are ephemeral&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;. Long conversations
shouldn&amp;rsquo;t be organized into threads, but moved into email or another medium more
suitable for that purpose.&lt;/p&gt;
&lt;p&gt;None of this even considers what &lt;em&gt;is&lt;/em&gt; good about IRC. It&amp;rsquo;s a series of
decentralized networks built on the shoulders of volunteers. It&amp;rsquo;s venerable and
well-supported with hundreds of client and server implementations. You can
connect to IRC manually using telnet and have a pretty good user experience!
Accordingly, &lt;a href=&#34;https://drewdevault.com/2018/03/10/How-to-write-an-IRC-bot.html&#34;&gt;a working IRC bot can be written in about 2
minutes&lt;/a&gt;. No one is trying to monetize you on IRC.
It&amp;rsquo;s free, in both meanings, and nothing which has come since has presented a
compelling alternative. I&amp;rsquo;ve used IRC all day, every day for over ten years, and
that&amp;rsquo;s not even half of IRC&amp;rsquo;s lifetime. It&amp;rsquo;s outlived everything else by years
and years, and it&amp;rsquo;s not going anywhere soon.&lt;/p&gt;
&lt;p&gt;In summary, I like IRC the way it is. It has problems which we ought to address,
but many people focus on the wrong problems. The culture that it fosters is good
and worth preserving, even at the expense of the features users of other
platforms demand - or those users themselves.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;P.S. A friend pointed out that the migration of non-hackers away from IRC is
like a reverse &lt;a href=&#34;https://en.wikipedia.org/wiki/Eternal_September&#34;&gt;Eternal September&lt;/a&gt;, which sounds &lt;em&gt;great&lt;/em&gt; 😉&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Often, I &lt;em&gt;am&lt;/em&gt; this person. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Text to speech.
[old hardware]: &lt;a href=&#34;https://drewdevault.com/2019/01/23/Why-I-use-old-hardware.html&#34;&gt;https://drewdevault.com/2019/01/23/Why-I-use-old-hardware.html&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Text user interface &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;IRC is over 30 years old and has barely changed since - so using unmaintained or barely-maintained clients is not entirely uncommon nor wrong. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Many people have bouncers which allow them to catch up the last few lines, and keep logs which they can reference later if necessary. This is nice to have but adds enough friction to keep the expectation that discussions are ephemeral, which has a positive effect on IRC culture. &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, June 2019</title>
      <link>./2019/06/15/Status-update-June-2019.html</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/06/15/Status-update-June-2019.html</guid>
      <description>&lt;p&gt;Summer is in full swing here in Philadelphia. Last night I got great views of
Jupiter and a nearly-full Moon, and my first Saturn observation of the year.  I
love astronomy on clear Friday nights, there&amp;rsquo;s always plenty of people coming
through the city. And today, on a relaxing lazy Saturday, waiting for friends
for dinner later, I have the privilege of sharing another status report with
you.&lt;/p&gt;
&lt;p&gt;First, I want to talk about some work I&amp;rsquo;ve done with blogs lately. On the bottom
of this article you&amp;rsquo;ll find a few blog posts from around the net. This is
populated with &lt;a href=&#34;https://git.sr.ht/~sircmpwn/openring&#34;&gt;openring&lt;/a&gt;, a small Go tool
I made to fetch a few articles from a list of RSS feeds. A couple of other
people have added this to their own sites as well, and I hope to use this to
encourage the growth of a network of bloggers supporting each other without any
nonfree or centralized software. I&amp;rsquo;ll write about this in its own article in
time. I&amp;rsquo;ve also made an &lt;a href=&#34;./make-a-blog&#34;&gt;open offer&lt;/a&gt; to give $20 to anyone who
wants to make their own blog, and so far 5 new blogs have taken me up on the
offer. Maybe you&amp;rsquo;ll be the next?&lt;/p&gt;
&lt;p&gt;Other side projects have seen some nice progress this month, too.
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/wio&#34;&gt;Wio&lt;/a&gt; has received a few patches from Leon
Plickat improving the UX, and I understand more are on the way. I&amp;rsquo;m also happy
to tell you that the RISC-V musl libc port I was working on is heading upstream
and slated for inclusion in the next release! Big thanks to everyone who helped
with that, and to Rich Felker for reviewing it and assembling the final patches.
I was also able to find some time this month to contribute to
&lt;a href=&#34;https://git.sr.ht/~emersion/mrsh&#34;&gt;mrsh&lt;/a&gt;, adding support for job IDs, the
&lt;code&gt;wait&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, and &lt;code&gt;continue&lt;/code&gt; builtins, and a handful of other improvements.
I&amp;rsquo;m really excited about mrsh, it&amp;rsquo;s getting close to completion. My friend
Luminarys also finally released &lt;a href=&#34;https://synapse-bt.org/&#34;&gt;synapse 1.0&lt;/a&gt;, a
bittorrent client that I had a &lt;a href=&#34;https://github.com/Luminarys/synapse/commit/ac92bb424c3d7d99905f4c0988c924001b688080#diff-d981183863e690e9f0f2bd20145a7a16&#34;&gt;hand in
designing&lt;/a&gt;,
and &lt;a href=&#34;https://github.com/ddevault/receptor&#34;&gt;building&lt;/a&gt;
&lt;a href=&#34;https://broca.synapse-bt.org/&#34;&gt;frontends&lt;/a&gt; for. Congrats, Lumi! This one has
been a long time coming.&lt;/p&gt;
&lt;p&gt;Alright, now for some updates on the larger, long-term projects. The initial
pre-release of aerc &lt;a href=&#34;./2019/06/03/Announcing-aerc-0.1.0.html&#34;&gt;shipped&lt;/a&gt; two weeks
ago! Even since then it&amp;rsquo;s already attracted a flurry of patches from the
community. I&amp;rsquo;m tremendously excited about this project, I think it has heaps of
potential and a community is quickly forming to help us live up to it. Since
0.1.0 it&amp;rsquo;s already grown support for formatting the index list, swapped the
Python dependency for POSIX awk, grown temporary accounts and the ability to
view headers, and more. I&amp;rsquo;ve already started planning 0.2.0 - check out &lt;a href=&#34;https://todo.sr.ht/~sircmpwn/aerc2?search=label:%22blocker%22%20status%3Aopen&#34;&gt;the
list of
blockers&lt;/a&gt;
for a sneak peek.&lt;/p&gt;
&lt;p&gt;The Godot+Wayland workstream has picked up again, and I&amp;rsquo;ve secured some VR
hardware (an HTC Vive) and started working on &lt;a href=&#34;https://github.com/swaywm/wlroots/issues/1723&#34;&gt;planning the changes
necessary&lt;/a&gt; for first-class VR
support on wlroots. In the future I also would like to contribute with the
OpenXR and OpenHMD efforts for bringing a full-stack free software solution for
VR. I also did a proof-of-concept 3D Wayland compositor that I intend to
translate to VR once I have the system up and running on Wayland:&lt;/p&gt;
&lt;p&gt;&lt;video src=&#34;https://yukari.sr.ht/godot3d.webm&#34; muted autoplay controls&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;In other respects, sway &amp;amp; wlroots have been somewhat quiet. We&amp;rsquo;ve been focusing
on small bug fixes and quality-of-life improvements, while some beefier changes
are stewing on the horizon. wlroots has seen some slow and steady progress on
refining its DRM implementation, improvements to which are going to lead to even
further improved performance and capability of the downstream compositors -
notably, direct scan-out has just been merged with the help of Scott Anderson
and Simon Ser.&lt;/p&gt;
&lt;p&gt;In SourceHut news, the most exciting is perhaps that todo.sr.ht has grown an API
and webhooks! That makes it the last major sr.ht service to gain these features,
which unblocks a lot of other stuff in the pipeline. The biggest workstream
unblocked by this is dispatch.sr.ht, which has an design proposal for an
overhaul under discussion on the development list. This&amp;rsquo;ll open the door for
features like building patches sent to mailing lists, linking tickets to
commits, and much more. I&amp;rsquo;ve also deployed another compute server to pick up the
load as git.sr.ht grows to demand more resources, which frees up the box it used
to be on with more space for smaller services to get comfortable. I was also
happy to bring Ludovic Chabant, the driving force behind hg.sr.ht, with me to
attend a Mercurial conference in Paris, where I learned heaps about the
internals (and externals, to be honest) of Mercurial. Cool things are in store
here, too! Big thanks to the Mercurial maintainers for being so accommodating of
my ignorance, and for putting on a friendly and productive conference.&lt;/p&gt;
&lt;p&gt;In the next month, I&amp;rsquo;m moving aerc to the backburner and turning my focus back
to SourceHut &amp;amp; wlroots VR. I&amp;rsquo;m getting a consistent stream of great patches for
aerc to review, so I&amp;rsquo;m happy to leave it in the community&amp;rsquo;s hands for a while.
For SourceHut, the upcoming dispatch workstream is going to be a huge boon to
the community there. On its coattails will come more powerful data import &amp;amp;
export tools, giving the users more ownership and autonomy over their data, and
perhaps following this will be some nice improvements to git.sr.ht. I&amp;rsquo;m also
going to try and find time to invest more in Alpine Linux on RISC-V this month.&lt;/p&gt;
&lt;p&gt;From the bottom of my heart, thank you again for lending your support. I&amp;rsquo;ve
never been busier, happier, and more productive than I have been since working
on FOSS full-time. Let&amp;rsquo;s keep building awesome software together.&lt;/p&gt;
&lt;small class=&#34;text-muted&#34;&gt;
This work was possible thanks to users who support me financially. Please
consider &lt;a href=&#34;./donate&#34;&gt;donating to my work&lt;/a&gt; or &lt;a
href=&#34;https://sourcehut.org&#34;&gt;buying a sourcehut.org subscription&lt;/a&gt;. Thank you!
&lt;/small&gt;
</description>
    </item><item>
      <title>My personal journey from MIT to GPL</title>
      <link>./2019/06/13/My-journey-from-MIT-to-GPL.html</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/06/13/My-journey-from-MIT-to-GPL.html</guid>
      <description>&lt;p&gt;As I got started writing open source software, I generally preferred the MIT
license. I actually made fun of the &amp;ldquo;copyleft&amp;rdquo; GPL licenses, on the grounds that
they are less free. I still hold this opinion today: the GPL license is less
free than the MIT license - but today, I believe this in a good way.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t yet, I suggest reading the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT
license&lt;/a&gt; - it&amp;rsquo;s very short. It satisfies
the four essential freedoms guaranteed of &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.html&#34;&gt;free
software&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The right to use the software for any purpose.&lt;/li&gt;
&lt;li&gt;The right to study the source code and change it as you please.&lt;/li&gt;
&lt;li&gt;The right to redistribute the software to others.&lt;/li&gt;
&lt;li&gt;The right to distribute your modifications to the software.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The MIT license basically allows you to do whatever you want with the software.
It&amp;rsquo;s one of the most hands-off options: &amp;ldquo;here&amp;rsquo;s some code, you can do anything
you want with it.&amp;rdquo; I favored this because I wanted to give users as much freedom
to use my software as possible. The GPL, in addition to being a &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;much more
complex tome to understand&lt;/a&gt;, is more
restrictive. The GPL forces you to use the GPL for derivative works as well.
Clearly this affords you less freedom to use the software. Obligations are the
opposite of freedoms.&lt;/p&gt;
&lt;p&gt;When I first got into open source, I was still a Windows user. As I gradually
waded deeper and deeper into the free software pond, I began to use Linux more
often&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Even once I started using Linux as my daily driver, however, it took
a while still for the importance of free software to set in. But this
realization is inevitable, for a programmer immersed in Linux. It radically
changes your perspective when all of the software you use guarantees these four
freedoms. If I&amp;rsquo;m curious about how something works, I can usually be reading the
code within a few seconds. I can find the author&amp;rsquo;s name and email in the git
blame and shoot them some questions. And when I find a bug, I can fix it and
send them a patch.&lt;/p&gt;
&lt;p&gt;The weight of these possibilities did not occur to me immediately, instead
slowly becoming evident over time. Today, this cycle is almost muscle memory.
Pulling down source, grepping for files related to an itch I need to scratch,
compiling and installing the modified version, and sending my work upstream -
it&amp;rsquo;s become second nature to me. These days, on the rare occasion that I run
into some proprietary software, this all grinds to a halt. It&amp;rsquo;s like miscounting
the number of steps on your staircase in the dark. These moments drive the truth
home: Free software is good. It&amp;rsquo;s starkly better than the alternative. And
copyleft defends it. Now that I&amp;rsquo;ve had a taste, you bet your ass I&amp;rsquo;m not going
to give it up.&lt;/p&gt;
&lt;p&gt;As the number of hours I&amp;rsquo;ve spent on FOSS projects grew from tens of hours, to
hundreds, to thousands and tens of thousands, I&amp;rsquo;ve learned that the effort I
sink into my work far outstrips the effort required to reuse my work. The
collective effort of the free software community amounts to tens of millions of
hours of work, which you can download at touch of a button, for free. If the
people with their fingers on that button held these same ideals, we wouldn&amp;rsquo;t
need the GPL. The reality, however, is that we live in a capitalist world. Our
socialist free software utopia is ripe for exploitation by capitalists, and
they&amp;rsquo;ll be rewarded for doing so. Capitalism is about enriching yourself - not
enriching your users and certainly not enriching society.&lt;/p&gt;
&lt;p&gt;Your parents probably taught you about the Golden Rule when you were young: do
unto others as you would have them do unto you. The GPL is the legal embodiment
of this Golden Rule: in exchange for benefiting from my hard work, you just have
to extend me the same courtesy. Its the unfortunate acknowledgement that we&amp;rsquo;ve
created a society that incentivises people to forget the Golden Rule. I give
people free software because I want them to reciprocate with the same. That&amp;rsquo;s
really all the GPL does. Its restrictions just protect the four freedoms in
derivative works. Anyone who can&amp;rsquo;t agree to this is looking to exploit your work
for their gain - and definitely not yours.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t plan on relicensing my historical projects, but my new projects have
used the GPL family of licenses for a while now. I think you should seriously
consider it as well.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Fun fact: the first time I used Linux was as a teenager, in order to get around the internet filtering software my parents had installed on our Windows PC at home. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Initial pre-release of aerc: an email client for your terminal</title>
      <link>./2019/06/03/Announcing-aerc-0.1.0.html</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/06/03/Announcing-aerc-0.1.0.html</guid>
      <description>&lt;p&gt;After years of painfully slow development, the &lt;a href=&#34;https://aerc-mail.org&#34;&gt;aerc email
client&lt;/a&gt; has seen a huge boost in its pace of development
recently. This leads to today&amp;rsquo;s announcement: &lt;a href=&#34;https://git.sr.ht/~sircmpwn/aerc/refs/0.1.0&#34;&gt;aerc 0.1.0 is now
available&lt;/a&gt;! After my transition to &lt;a href=&#34;https://drewdevault.com/2019/01/15/Im-doing-FOSS-full-time.html&#34;&gt;working on free software full
time&lt;/a&gt; allowed me to spend more time on more projects, I was able
to invest considerably more time into aerc. Your support led us here: thank you
to all of the people who &lt;a href=&#34;https://drewdevault.com/donate&#34;&gt;donate to my work&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve prepared a short webcast demonstrating aerc&amp;rsquo;s basic features - give it a
watch if you&amp;rsquo;re curious about what aerc looks like &amp;amp; what makes it interesting.&lt;/p&gt;
&lt;video controls&gt;
  &lt;source src=&#34;https://yukari.sr.ht/aerc-intro.webm&#34;&gt;&lt;/source&gt;
  &lt;source src=&#34;https://yukari.sr.ht/aerc-intro.mp4&#34;&gt;&lt;/source&gt;
  A video would be shown here, but your web browser does not support it.
&lt;/video&gt;
&lt;p&gt;In summary, aerc is an email client which runs in your terminal emulator. If
you&amp;rsquo;re coming from mutt, you&amp;rsquo;ll appreciate its more efficient &amp;amp; reliable
networking, a keybinding system closer to vims, and embedded terminal emulator
allowing you to compose emails and read new ones at the same time. It builds on
this foundation with a lot of new and exciting features. For example, its
&amp;ldquo;filter&amp;rdquo; feature allows us to review patches with syntax highlighting:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/JoqH.png&#34; alt=&#34;Screenshot of aerc displaying a patch&#34;&gt;&lt;/p&gt;
&lt;p&gt;The embedded terminal emulator also allows us convenient access to nearby git
repositories for running tests against incoming patches, pushing the changes
once accepted, or anything else you might want to do. Want to run
&lt;a href=&#34;https://weechat.org/&#34;&gt;Weechat&lt;/a&gt; in an aerc tab? Just like that, aerc has a chat
client! Writing emails in vim, manipulating git &amp;amp; hg repositories, playing
nethack to kill some time&amp;hellip; all stuff you never realized your email client was
missing.&lt;/p&gt;
&lt;p&gt;I plan on extending aerc in the future with more integrations with version
control systems, calendar &amp;amp; contacts support, and more email configurations like
notmuch and JMAP. Please consider
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/aerc&#34;&gt;contributing&lt;/a&gt; if you&amp;rsquo;re interested in writing
a little Go, or &lt;a href=&#34;https://drewdevault.com/donate&#34;&gt;donating monthly&lt;/a&gt; to ensure I
always have time to work on this and other free software projects. Give aerc a
try and let me know what you think!&lt;/p&gt;
</description>
    </item><item>
      <title>What is a fork, really, and how GitHub changed its meaning</title>
      <link>./2019/05/24/What-is-a-fork.html</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/05/24/What-is-a-fork.html</guid>
      <description>&lt;p&gt;The fork button on GitHub - with the little number next to it for depositing
dopamine into your brain - is a bit misleading. GitHub co-opted the meaning of
&amp;ldquo;fork&amp;rdquo; to trick you into participating in their platform more. They did this in
a well-intentioned way, for the sake of their pull requests feature, but
ultimately this design is self-serving and causes some friction when
contributors venture out of their GitHub sandbox and into the rest of the
software development ecosystem. Let&amp;rsquo;s clarify what &amp;ldquo;fork&amp;rdquo; really means, and what
we do without GitHub&amp;rsquo;s concept of one - for it is in this difference that we
truly discover how git is a &lt;em&gt;distributed&lt;/em&gt; version control system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: I am the founder of &lt;a href=&#34;https://sourcehut.org&#34;&gt;SourceHut&lt;/a&gt;, a
product which competes with GitHub and embraces the &amp;ldquo;bazaar&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&amp;rdquo; model described
in this article.&lt;/p&gt;
&lt;p&gt;On GitHub, a fork refers to a copy of a repository used by a contributor&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; to
stage changes they&amp;rsquo;d like to propose upstream. Prior to GitHub (and in many
places still today), we&amp;rsquo;d call such a repository a &amp;ldquo;personal branch&amp;rdquo;. A personal
branch doesn&amp;rsquo;t need to be published to be useful - you can just &lt;code&gt;git clone&lt;/code&gt; it
locally and make your changes there without pushing them to a public, hosted
repository. Using &lt;a href=&#34;https://git-send-email.io&#34;&gt;email&lt;/a&gt;, you can send changes from
your local, unpublished repository for consideration upstream. Outside of
GitHub and its imitators, most contributors to a project don&amp;rsquo;t have a published
version of their repository online at all, skipping that step and saving some
time.&lt;/p&gt;
&lt;p&gt;In some cases, however, it&amp;rsquo;s useful to publish your personal branch online. This
is often done when a team of people is working on a long-lived branch to later
propose upstream - for example, I&amp;rsquo;ve been doing this while working on the RISC-V
port of musl libc. It gives us a space to collaborate and work while preparing
changes which will eventually be proposed upstream, as well as a place for
interested testers to obtain our experimental work to try themselves. This is
also done by individuals, such as Greg Kroah-Hartman&amp;rsquo;s Linux branches, which are
useful for testing upcoming changes to the Linux kernel.&lt;/p&gt;
&lt;p&gt;Greg is not alone in publishing a repo like this. In fact, there are &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/&#34;&gt;hundreds of
kernel trees like this&lt;/a&gt;. These act as staging areas for long-term
workstreams, or for the maintainers of many subsystems of the kernel.  Changes
in these repositories gradually flow upwards towards the &amp;ldquo;main&amp;rdquo; tree,
&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/&#34;&gt;torvalds/linux&lt;/a&gt;. The precise meaning of &amp;ldquo;linux&amp;rdquo; is rather loose
in this context. An argument could be made that torvalds/linux is Linux, but
that definition wouldn&amp;rsquo;t capture the LTS branches. Many distros also apply their
own patches on top of Torvalds, perhaps sourcing them from the maintainers of
drivers they need a bugfix for, or they maintain their own independent trees
which periodically pull in lump sums of changes from other trees - meaning that
the simple definition might not include the version of Linux which is installed
on your computer, either. This ambiguity is a feature - each of these trees is a
valid definition of Linux in its own right.&lt;/p&gt;
&lt;p&gt;This is the sense in which git is &amp;ldquo;distributed&amp;rdquo;. The idea of a canonical
upstream is not written in stone in the way that GitHub suggests it might be.
After all, open-source software is a collaborative endeavour. What makes Jim&amp;rsquo;s
branch more important that John&amp;rsquo;s branch? John&amp;rsquo;s branch is definitely more
important if it has the bugfixes you need. In fact, your branch, based on Jim&amp;rsquo;s,
with some patches cherry-picked from John, and a couple of fixes of your own
mixed in, may in fact be the best version of the software for you.&lt;/p&gt;
&lt;p&gt;This is how the git community gets along without the GitHub model of &amp;ldquo;forks&amp;rdquo;.
This design has allowed the largest and most important projects in the world to
flourish, and git was explicitly designed around this model. We refer to this as
the &amp;ldquo;bazaar&amp;rdquo; model, the metaphor hopefully being fairly obvious at this point.
There is another model, which GitHub embodies instead: the cathedral. In this
model, the project has a central home and centralized governance, run by a small
number of people. The cathedral doesn&amp;rsquo;t necessarily depend on the GitHub idea of
&amp;ldquo;forks&amp;rdquo; and pull requests - that is, you can construct a cathedral with
email-driven development or some other model - but on GitHub the bazaar option
is basically absent.&lt;/p&gt;
&lt;p&gt;In the introduction I said that GitHub attempts to replace an existing meaning
for &amp;ldquo;fork&amp;rdquo;. So what does forking actually mean, then? Consider a project with
the cathedral model. What happens when there&amp;rsquo;s a schism in the church? The
answer is that some of the contributors can take the code, put up a new branch
somewhere, and stake a flag in the ground. They rename it and commit to
maintaining it entirely independently of the original project, and encourage
contributors, new and old alike, to abandon the old dogma in favor of theirs.
At this point, the history&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; begins to diverge. The new contingent pulls in
all of the patches that were denied upstream and start that big refactoring to
mold it in their vision. The project has been &lt;strong&gt;forked&lt;/strong&gt;. A well known example
is when ffmpeg was forked to create libav.&lt;/p&gt;
&lt;p&gt;This is usually a traumatic event for the project, and can have repercussions
that last for years. The precise considerations that should go into forking a
project, these repercussions and how to address them, and other musings are
better suited for a separate article. But this is what &amp;ldquo;fork&amp;rdquo; meant before
GitHub, and this meaning is still used today - albeit more ambiguously.&lt;/p&gt;
&lt;p&gt;If &amp;ldquo;fork&amp;rdquo; already had this meaning, why did GitHub adopt their model? The
answer, as it often will be, is centralization of power. GitHub is a
proprietary, commercial service, and their ultimate goal is to turn a profit.
The design of GitHub&amp;rsquo;s fork and pull request model creates a cathedral that
keeps people on their platform in a way that a bazaar would not. A distributed
version control system like git, built on a distributed communications protocol
like email, is hard to disrupt with a centralized service. So GitHub designed
their own model.&lt;/p&gt;
&lt;p&gt;As a parting note, I would like to clarify that this isn&amp;rsquo;t a condemnation of
GitHub. I still use their service for a few projects, and appreciate the
important role GitHub has played in the popularization of open source. However,
I think it&amp;rsquo;s important to examine the services we depend on, to strive to
understand their motivations and design. I also hope the reader will view the
software ecosystem through a more interesting lens for having read this article.
Thank you for reading!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Did you know that GitHub also captured the meaning of &amp;ldquo;pull request&amp;rdquo;
from git&amp;rsquo;s own &lt;a href=&#34;https://www.git-scm.com/docs/git-request-pull&#34;&gt;request-pull&lt;/a&gt;
tool? git request-pull prepares an email which will ask the recipient to fetch
changes from a public repository and integrate them into their own branch. This
is used when a patch is insufficient - for example, when Linux subsystem
maintainers want to ship a large group of changes to Torvalds for the next
kernel release. Again, the original version is distributed and bazaar-like,
whereas GitHub&amp;rsquo;s is centralized and makes you stay on their platform.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Not the bazaar version control system, but bazaar the concept. This is explained later in the article. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;And by bots to increase their reputation, and by confused users who don&amp;rsquo;t know what the button means. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Git history in particular, but also the other kind. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, May 2019</title>
      <link>./2019/05/15/Status-update-May-2019.html</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/05/15/Status-update-May-2019.html</guid>
      <description>&lt;p&gt;This month, it seems the most exciting developments again come from the realm of
email. I&amp;rsquo;ve got cool email-related news to share for aerc, lists.sr.ht, and
todo.sr.ht, and many cool developments in my other projects to share.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with lists.sr.ht: I have broken ground on the web-based patch review
tools! I promised these features when I started working on sourcehut, to make
the email-based workflow more enticing to those who would rather work on the
web. Basically, this gives us a Github or Gerrit-esque review UI for patches
which arrive on the mailing list. Thanks to &lt;a href=&#34;https://git.sr.ht/~emersion/python-emailthreads&#34;&gt;a cool
library&lt;/a&gt; Simon Ser wrote for
me&amp;hellip; almost a year ago&amp;hellip; I&amp;rsquo;m able to take a thread of emails discussing a
patch and organically convert them into inline feedback on the web.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lists.sr.ht/~philmd/qemu/patches/5556&#34;&gt;&lt;img src=&#34;https://sr.ht/sjtE.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;small style=&#34;display: block; text-align: center;&#34;&gt;
  Click the screenshot to visit this page on the web
&lt;/small&gt;
&lt;p&gt;This is generated from organic discussions where the participants don&amp;rsquo;t have to
do anything special to participate - in the discussion this screenshot is
generated from, the participants aren&amp;rsquo;t even aware that this process is taking
place. This approach allows users who prefer a web-based workflow to interact
with traditional email-based patch review seamlessly. Future improvements will
include detecting new revisions of a patch, side-by-side diff and diffs between
different versions of a patch, and using the web interface to review a patch -
which will generate an email on the list. I&amp;rsquo;d also like to extend git.sr.ht with
web support for git send-email, allowing you to push to your git repo and send a
patch off to the mailing list from the web. It should also be possible to
combine this with dispatch.sr.ht to have bidirectional code reviews between
mailing lists and Github, Gitlab, etc - with no one on either side being any the
wiser to the preferred workflow of the other.&lt;/p&gt;
&lt;p&gt;In other exciting email-related news, aerc2 now supports composing emails -
a feature which has been a long time coming, and was not even present in aerc1!
Check it out:&lt;/p&gt;
&lt;script
  id=&#34;asciicast-CqTukJZoTq7ZgPmsjhIbQyUjb&#34;
  src=&#34;https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js&#34; async
&gt;&lt;/script&gt;
&lt;p&gt;Outgoing email configuration supports SMTP, STARTTLS, and SMTPS, with sendmail
support planned. Outgoing emails are edited with our embedded terminal emulator
using vim, or your favorite &lt;code&gt;$EDITOR&lt;/code&gt;. Still to come: replying to emails &amp;amp; PGP
support. I could use your help here! If you want a chance to write some cool Go
code, stop by the IRC channel and say hello: &lt;a href=&#34;http://webchat.freenode.net/?channels=aerc&amp;amp;uio=d4&#34;&gt;#aerc on
irc.freenode.net&lt;/a&gt;. Once aerc
matures a little bit, I also want to start working on a git integration which
will continue making email an even more compelling platform for software
development.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s talk about Wayland next. I&amp;rsquo;ve been shipping release candidates for sway
1.1 - &lt;a href=&#34;https://github.com/swaywm/sway/issues/3861#issuecomment-487073065&#34;&gt;check out the provisional changelog
here&lt;/a&gt;. The
highlights are probably the ability to inhibit idle with arbitrary criteria, and
touch support for swaybar. The release candidates have been pretty quiet - we
might end up shipping this as early as rc4. wlroots 0.6.0 was also released,
though for end-users it doesn&amp;rsquo;t include much. We&amp;rsquo;ve removed the long-deprecated
wl_shell, and have made plans to start removing other deprecated protocols. I&amp;rsquo;ve
also been working with the broader Wayland community on establishing a
governance model for protocol standardization - &lt;a href=&#34;https://lists.freedesktop.org/archives/wayland-devel/2019-May/040532.html&#34;&gt;read the latest draft
here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also started working on a Wayland book! It&amp;rsquo;s intended as a comprehensive
reference on the Wayland protocol, useful for authors hoping to write both
Wayland compositors and Wayland clients. It does not go into all of the
nitty-gritty details necessary for writing a Wayland compositor for Linux (that
is, the sort of knowledge necessary for using wlroots, or even making wlroots
itself), but that&amp;rsquo;ll be a task for another time. Instead, I focus on the Wayland
protocol itself, explaining how the wire protocol works and the purpose and
usage of each interface in &lt;code&gt;wayland.xml&lt;/code&gt;, as well as &lt;code&gt;libwayland&lt;/code&gt;. I intend to
sell this book, but when you buy it you&amp;rsquo;ll receive a DRM-free CC-NC-ND copy that
you can share freely with your friends.&lt;/p&gt;
&lt;p&gt;Before I move on from Wayland news, also check out
&lt;a href=&#34;https://wio-project.org/&#34;&gt;Wio&lt;/a&gt; if you haven&amp;rsquo;t yet - I wrote a blog post about
it &lt;a href=&#34;https://drewdevault.com/2019/05/01/Announcing-wio.html&#34;&gt;here&lt;/a&gt;. In short: I
made a novel new Wayland compositor in my spare time which behaves like plan 9&amp;rsquo;s
Rio.  See the blog post for more details!&lt;/p&gt;
&lt;p&gt;Following the success of &lt;a href=&#34;https://git-send-email.io&#34;&gt;git-send-email.io&lt;/a&gt;, I
published a similar website last week: &lt;a href=&#34;https://git-rebase.io&#34;&gt;git-rebase.io&lt;/a&gt;.
The purpose of this website is to teach readers how to use git rebase,
explaining how to use its primitives to accomplish common high-level tasks in a
way that leaves the reader equipped to apply those primitives to novel
high-level tasks in the course of their work. I hope you find it helpful! I&amp;rsquo;ve
also secured git-filter-branch.io and git-bisect.io to explain additional
useful, but confusing git commands in the future.&lt;/p&gt;
&lt;p&gt;Brief updates for other projects: I&amp;rsquo;ve been ramping up RISC-V work again,
helping Golang test their port, testing out u-Boot, and working on the Alpine
port some more. cozy has seen only a little progress, but the parser is
improving and it&amp;rsquo;s now emitting a (very incomplete) AST for source files you
feed to it. Godot is on hold pending additional upstream bandwidth for code
review.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for today! Thank you so much for your support. It&amp;rsquo;s pretty clear by
now that my productivity is way higher now that I&amp;rsquo;m able to work full-time on
open source, thanks to your support. I&amp;rsquo;ll see you for next month&amp;rsquo;s update!&lt;/p&gt;
&lt;small class=&#34;text-muted&#34;&gt;
This work was possible thanks to users who support me financially. Please
consider &lt;a href=&#34;./donate&#34;&gt;donating to my work&lt;/a&gt; or &lt;a
href=&#34;https://sourcehut.org&#34;&gt;buying a sourcehut.org subscription&lt;/a&gt;. Thank you!
&lt;/small&gt;
</description>
    </item><item>
      <title>Webcast: Reviewing git &amp; mercurial patches with email</title>
      <link>./2019/05/13/Git-email-webcast.html</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/05/13/Git-email-webcast.html</guid>
      <description>&lt;p&gt;With the availability of new resources like
&lt;a href=&#34;https://git-send-email.io&#34;&gt;git-send-email.io&lt;/a&gt;, I&amp;rsquo;ve been working on making the
email-based workflow more understandable and accessible to the world. One thing
that&amp;rsquo;s notably missing from this tutorial, however, is the maintainer side of
the work. I intend to do a full write-up in the future, but for now I thought
it&amp;rsquo;d be helpful to clarify my workflow a bit with a short webcast. In this
video, I narrate my workflow as I review a few
&lt;a href=&#34;https://sourcehut.org&#34;&gt;sourcehut&lt;/a&gt; patches and participate in some dicsussions.&lt;/p&gt;
&lt;video src=&#34;https://yukari.sr.ht/git-screencast.webm&#34; controls&gt;
  Your browser does not support HTML5 video, or webm video.
&lt;/video&gt;
&lt;p&gt;Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mutt.org/&#34;&gt;mutt&lt;/a&gt;: my email client&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~sircmpwn/dotfiles/tree/master/.config/mutt/muttrc&#34;&gt;my personal mutt config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~sircmpwn/dotfiles/tree/master/bin/semver&#34;&gt;my &amp;ldquo;semver&amp;rdquo; script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also check out &lt;a href=&#34;https://git.sr.ht/~sircmpwn/aerc2&#34;&gt;aerc&lt;/a&gt;, a replacement for mutt
that I&amp;rsquo;ve been working on over the past year or two. I will be writing more
about that project soon.&lt;/p&gt;
</description>
    </item><item>
      <title>Calculating your donation&#39;s value following Patreon&#39;s fee changes</title>
      <link>./2019/05/06/Calculate-your-doation-fees-for-Patreon.html</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/05/06/Calculate-your-doation-fees-for-Patreon.html</guid>
      <description>&lt;p&gt;In January 2018, I wrote a blog post which included a &lt;a href=&#34;https://drewdevault.com/2018/01/16/Fees-on-donation-platforms.html&#34;&gt;fee
calculator&lt;/a&gt;.
Patreon &lt;a href=&#34;https://www.patreon.com/new-creator-plans&#34;&gt;changes their fee model
tomorrow&lt;/a&gt;, and it&amp;rsquo;s time for an
updated calculator. I&amp;rsquo;m grandfathered into the old fees, so not much has changed
for me, but I want to equip Patreon users - creators and supporters - with more
knowledge of how their money is moving through the platform.&lt;/p&gt;
&lt;p&gt;Patreon makes money by siphoning some money off the top of a donation flow
between supporters and creators. Because of the nature of its business (a
private, VC-backed corporation), the siphon&amp;rsquo;s size and semantics are prone to
change in undesirable ways, since VC&amp;rsquo;s expect infinite growth and a private
business generally puts profit first. For this reason, I diversify my income, so
that when Patreon makes these changes it limits their impact on my financial
well-being.  Even so, Patreon is the biggest of my donation platforms,
representing over $500/month at the time of writing (&lt;a href=&#34;https://drewdevault.com/donate/&#34;&gt;full breakdown
here&lt;/a&gt;)&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;So, for any patrons who are curious about where their money goes, here&amp;rsquo;s a handy
calculator to help you navigate the complex fees. Enjoy!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I don&amp;rsquo;t normally ask you to share my posts, but the Patreon community
is too distributed for me to effectively reach them alone. Please share this
with your Patreon creators and communities!&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt;Sorry, the calculator requires JavaScript.&lt;/noscript&gt;&lt;/p&gt;
&lt;div id=&#34;react-root&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;./js/donation-calc.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this calculator does not include the withdrawal fee. When the creator
withdraws their funds from the platform, an additional fee is charged, but the
nature of that fee changes depending on the frequency with which they make
withdrawals and the total amount of money they make from all patrons - which is
information that&amp;rsquo;s not easily available to the average patron for using with
this calculator. For details on the withdrawal fees, see &lt;a href=&#34;https://support.patreon.com/hc/en-us/articles/203913489-What-are-my-options-to-receive-payout-&#34;&gt;Patreon&amp;rsquo;s support
article on the
subject&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One question that&amp;rsquo;s been left unanswered is how many times Patreon is going to
charge patrons for each creator they support. Previously, they batched payments
and only accordingly charged the payment processing fees once. However, along
with these changes, they&amp;rsquo;re going to charge payment processing fees for each
creator, but they haven&amp;rsquo;t lowered the payment processing fees. When we take a
look at our bank returns in the coming months, if Patreon is still batching
payments internally&amp;hellip; hmm, where is the extra money going? We&amp;rsquo;ll have to wait
and see.&lt;/p&gt;
&lt;h2 id=&#34;founding-creators&#34;&gt;What are founding creators?&lt;/h2&gt;
&lt;p&gt;Creators who used the Patreon platform prior to 2019-05-07 are &amp;ldquo;founding
creators&amp;rdquo;, and have different rates. They have different rates for each plan,
and lower payment processing fees. Founding creators are also not usually lite
creators, but were grandfathered into the pro plan.&lt;/p&gt;
&lt;h2 id=&#34;charge-up-front&#34;&gt;What does charge up front mean?&lt;/h2&gt;
&lt;p&gt;Some creators have the option to charge you as soon as you join the platform,
rather than once monthly or per-creation. This results in higher payment
processing fees for founding creators, as Patreon cannot batch the charge
alongside with your other creators.&lt;/p&gt;
&lt;h2 id=&#34;which-plan&#34;&gt;How do I know what plan my creator uses?&lt;/h2&gt;
&lt;p&gt;We can guess which plan our creator uses by looking at the features they use on
Patreon. Here are some giveaways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If they have different membership tiers, they use the Pro plan or better.&lt;/li&gt;
&lt;li&gt;If they offer merch through Patreon, they use the Premium plan.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also just reach out to your creator and ask!&lt;/p&gt;
&lt;!-- Hack to get footnotes from javascript to work --&gt;
&lt;p&gt;&lt;span style=&#34;display: none&#34;&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This is supplemented with my Sourcehut income as well, which is covered in the recent &lt;a href=&#34;https://lists.sr.ht/~sircmpwn/sr.ht-discuss/%3C20190426160729.GC1351@homura.localdomain%3E&#34;&gt;Q1 financial report&lt;/a&gt;, as well as some &lt;a href=&#34;./consulting&#34;&gt;consulting work&lt;/a&gt;, which I don&amp;rsquo;t publish numbers for. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This is an assumption based on public PayPal and Stripe payment processing rates. In practice, it&amp;rsquo;s likely that Patreon has a volume discount with their payment processors. Patreon does not publish these rates. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Announcing Wio: A clone of Plan 9&#39;s Rio for Wayland</title>
      <link>./2019/05/01/Announcing-wio.html</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/05/01/Announcing-wio.html</guid>
      <description>&lt;p&gt;For a few hours here and there over the past few months, I&amp;rsquo;ve been working on a
side project: &lt;a href=&#34;https://wio-project.org&#34;&gt;Wio&lt;/a&gt;. I&amp;rsquo;ll just let the (3 minute)
screencast do the talking first:&lt;/p&gt;
&lt;p&gt;&lt;video src=&#34;https://yukari.sr.ht/wio.webm&#34; controls&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this video begins with several seconds of grey video. This is normal.&lt;/p&gt;
&lt;p&gt;In short, Wio is a Wayland compositor based on wlroots which has a similar look
and feel to Plan 9&amp;rsquo;s Rio desktop. It works by running each application in its
own nested Wayland compositor, based on &lt;a href=&#34;https://www.hjdskes.nl/projects/cage/&#34;&gt;Cage&lt;/a&gt; - yet another wlroots-based
Wayland compositor. I used Cage in &lt;a href=&#34;https://drewdevault.com/2019/04/23/Using-cage-for-a-seamless-RDP-Wayland-desktop.html&#34;&gt;last week&amp;rsquo;s RDP article&lt;/a&gt;, but
here&amp;rsquo;s another cool use-case for it.&lt;/p&gt;
&lt;p&gt;The behavior this allows for (each window taking over its parent&amp;rsquo;s window,
rather than spawning a new window) has been something I wanted to demonstrate on
Wayland for a very long time. This is a good demonstration of how Wayland&amp;rsquo;s
fundamentally different and conservative design allows for some interesting
use-cases which aren&amp;rsquo;t possible at all on X11.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also given Wio some nice features which are easy thanks to wlroots, but
difficult on Plan 9 without kernel hacking. Namely, these are multihead support,
HiDPI support, and support for the wlroots layer shell protocol. Several other
wlroots protocols were invited to the party, useful for taking screenshots,
redshift, and so on. Layer shell support is particularly cool, since programs
like swaybg and waybar work on Wio.&lt;/p&gt;
&lt;p&gt;In terms of Rio compatability, Wio has a ways to go. I would seriously
appreciate help from users who are interested in improving Wio. Some notably
missing features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any kind of filesystem resembling Rio&amp;rsquo;s window management filesystem. In
theory this ought to be do-able with FUSE, at least in part (/dev/text might
be tough).&lt;/li&gt;
&lt;li&gt;Running every application in its own namespace, for double the Plan 9&lt;/li&gt;
&lt;li&gt;Hiding/showing windows (that menu entry is dead)&lt;/li&gt;
&lt;li&gt;Joint improvements with Cage to bring greater support for Wayland features,
like client-side window resize/move, fullscreen windows, etc&lt;/li&gt;
&lt;li&gt;Damage tracking to avoid re-rendering everything on every frame, saving
battery life and GPU time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping, please join the IRC channel and say hello:
&lt;a href=&#34;http://webchat.freenode.net/?channels=%23wio&amp;amp;uio=MTA9dHJ1ZSYxMT0xNzQmMTM9ZmFsc2U4c&#34;&gt;#wio on irc.freenode.net&lt;/a&gt;. For Wio&amp;rsquo;s source code and other
information, visit the website at &lt;a href=&#34;https://wio-project.org&#34;&gt;wio-project.org&lt;/a&gt;.&lt;/p&gt;
</description>
    </item><item>
      <title>The &#34;shut up and get back to work&#34; coding style guide</title>
      <link>./2019/04/29/Shut-up-and-get-back-to-work-style.html</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/04/29/Shut-up-and-get-back-to-work-style.html</guid>
      <description>&lt;p&gt;So you&amp;rsquo;re starting a new website, and you open the first CSS file. What style do
you use? Well, you hate indenting with spaces passionately. You know tabs are
right because they&amp;rsquo;re literally made for this, and they&amp;rsquo;re only one byte, and
these god damn spaces people with their bloody spacebars&amp;hellip;&lt;/p&gt;
&lt;p&gt;Shut up and use spaces. That&amp;rsquo;s how CSS is written&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. And you, mister web
programmer, coming out of your shell and dipping your toes into the world of
Real Programming, writing your first Golang program: use tabs, jerk. There&amp;rsquo;s
only one principle that matters in coding style: don&amp;rsquo;t rock the boat. Just do
whatever the most common thing is in the language you&amp;rsquo;re working in. Write your
commit messages the same way as everyone else, too. Then shut up and get back to
work. This hill isn&amp;rsquo;t worth dying on.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re working on someone else&amp;rsquo;s project, this goes double. Don&amp;rsquo;t get snippy
about their coding style. Just follow their style guide, and if there isn&amp;rsquo;t one,
just make your code look like the code around it. It&amp;rsquo;s none of your goddamn
business how they choose to style their code.&lt;/p&gt;
&lt;p&gt;Shut up and get back to work.&lt;/p&gt;
&lt;p&gt;Ranting aside, seriously - which style guide you use doesn&amp;rsquo;t matter nearly as
much as using one. Just pick the one which is most popular or which is already
in use by your peers and roll with it.&lt;/p&gt;
&lt;div style=&#34;margin-bottom: 5rem&#34;&gt;&lt;/div&gt;
&lt;p&gt;&amp;hellip;though since I&amp;rsquo;m talking about style anyway, take a look at this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_surface&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;wlr_surface_surface_at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_surface&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;surface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                           &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                           &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sub_x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sub_y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Do stuff
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s a lot of stupid crap which ends up in style guides, but this is by far
the worst. Look at all that wasted whitespace! There&amp;rsquo;s no room to write your
parameters on the right, and you end up with 3 lines where you could have two.
And you have to mix spaces and tabs! God dammit! This is how you should do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_surface&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;wlr_surface_surface_at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_surface&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;surface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sub_x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sub_y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Do stuff
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the extra indent to distinguish the parameters from the body and the
missing garish hellscape of whitespace. If you do this in your codebase, I&amp;rsquo;m not
going to argue with you about it, but I am going to have to talk to my therapist
about it.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;For the record, tabs are objectively better. Does that mean I&amp;rsquo;m going to write my JavaScript with tabs? Hell no! &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Using Cage for a seamless remote Wayland session</title>
      <link>./2019/04/23/Using-cage-for-a-seamless-RDP-Wayland-desktop.html</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/04/23/Using-cage-for-a-seamless-RDP-Wayland-desktop.html</guid>
      <description>&lt;p&gt;Congratulations to Jente Hidskes on &lt;a href=&#34;https://www.hjdskes.nl/blog/cage-01/&#34;&gt;the first release of
Cage&lt;/a&gt;! Cage is a Wayland compositor
designed for kiosks - though, as you&amp;rsquo;ll shortly find out, is useful in many
unexpected ways. It launches a single application, in fullscreen, and exits the
compositor when that application exits. This lets you basically add a
DRM+KMS+libinput session to any Wayland-compatible application (or X application
via XWayland) and run it in a tiny wlroots compositor.&lt;/p&gt;
&lt;p&gt;I actually was planning on writing something like this at some point (for a
project which still hasn&amp;rsquo;t really come off the ground yet), so I was excited
when Jente &lt;a href=&#34;https://www.hjdskes.nl/blog/cage/&#34;&gt;announced it&lt;/a&gt; in December. With
the addition of the &lt;a href=&#34;https://github.com/swaywm/wlroots/pull/1578&#34;&gt;RDP backend&lt;/a&gt;
in wlroots, I thought it would be cool to combine these to make a seamless
remote desktop experience. In short, I installed
&lt;a href=&#34;http://www.freerdp.com/&#34;&gt;FreeRDP&lt;/a&gt; and Cage on my laptop, and
&lt;a href=&#34;https://swaywm.org&#34;&gt;sway&lt;/a&gt; on my desktop. On my desktop, I &lt;a href=&#34;https://github.com/swaywm/wlroots/blob/master/docs/env_vars.md#rdp-backend&#34;&gt;generated TLS
certificates per the wlroots
docs&lt;/a&gt;
and ran sway like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;nv&#34;&gt;WLR_RDP_TLS_CERT_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/tls.crt &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;WLR_RDP_TLS_KEY_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/tls.key &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;WLR_BACKENDS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;rdp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;sway
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, on my laptop, I can run this script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;XDG_RUNTIME_DIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/tmp
	&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; cage sway-remote launch
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
	sleep &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; xfreerdp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;		-v homura &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;		--bpp &lt;span class=&#34;m&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;		--size 1280x800 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;		--rfx
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first branch is taken on the first run, and it starts up cage and asks it to
run this script again. The second branch then starts up xfreerdp and connects to
my desktop (its hostname is &lt;code&gt;homura&lt;/code&gt;). xfreerdp is then fullscreened and all of
my laptop&amp;rsquo;s input events are directed to it. The result is an experience which
is basically identical to running sway directly on my laptop, except it&amp;rsquo;s
actually running on my desktop and using the remote desktop protocol to send
everything back and forth.&lt;/p&gt;
&lt;p&gt;This isn&amp;rsquo;t especially practical, but it is a cool hack. It&amp;rsquo;s definitely not
network transparency like some people want, but I wasn&amp;rsquo;t aiming for that. It&amp;rsquo;s
just a neat thing you can do now that we have an RDP backend for wlroots. And
congrats again to Jente - be sure to give Cage a look and see if you can think
of any other novel use-cases, too!&lt;/p&gt;
</description>
    </item><item>
      <title>Choosing a VPN service is a serious decision</title>
      <link>./2019/04/19/Your-VPN-is-a-serious-choice.html</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/04/19/Your-VPN-is-a-serious-choice.html</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a disturbing trend in the past year or so of various VPN companies
advertising to the general, non-technical public. It&amp;rsquo;s great that the general
public is starting to become more aware of their privacy online, but I&amp;rsquo;m not a
fan of these companies exploiting public paranoia to peddle their wares. Using
a VPN in the first place has potentially grave consequences for your privacy -
and can often be worse than not using one in the first place.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s true that, generally speaking, when you use a VPN, the websites you visit
don&amp;rsquo;t have access to your original IP address, which can be used to derive your
approximate location (often not more specific than your city or neighborhood).
But that&amp;rsquo;s not true of the VPN provider themselves - who can identify you much
more precisely because you used your VPN login to access the service.
Additionally, they can promise not to siphon off your data and write it down
somewhere - tracking you, selling it to advertisers, handing it over to law
enforcement - but they &lt;em&gt;could&lt;/em&gt; and you&amp;rsquo;d be none the wiser. By routing all of
your traffic through a VPN, &lt;em&gt;you route all of your traffic through a VPN&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Another advantage offered by VPNs is that they can prevent your ISP from knowing
what you&amp;rsquo;re doing online. If you don&amp;rsquo;t trust your ISP but you do trust your VPN,
this makes a lot of sense. It also makes sense if you&amp;rsquo;re on an unfamiliar
network, like airport WiFi. However, it&amp;rsquo;s still quite important that you &lt;em&gt;do&lt;/em&gt;
trust the VPN on the other end. You need to do research. What country are they
based in, and what&amp;rsquo;s their diplomatic relationship with your home country? What
kind of power the local authorities have to force them to record &amp;amp; disclose your
traffic? Are they backed by venture capitalists who expect infinite growth, and
will they eventually have to meet those demands by way of selling your
information to advertisers? What happens to you when their business is going
poorly? How much do you trust their security competency - are they likely to be
hacked? If you haven&amp;rsquo;t answered all of these questions yourself, then you should
not use a VPN.&lt;/p&gt;
&lt;p&gt;Even more alarming than the large advertising campaigns which have been popular
in the past few months is push-button VPN services which are coming
pre-installed on consumer hardware and software. These bother me because they&amp;rsquo;re
implemented by programmers who should understand this stuff and know better than
to write the code. Opera now has a push-button VPN pre-bundled which is free and
tells you little about the service before happily sending all of your traffic
through it.  Do you trust a Chinese web browser&amp;rsquo;s free VPN to behave in your
best interests?  Purism also recently announced a collaboration with Private
Internet Access to ship a VPN in their upcoming Librem 5. I consider this highly
irresponsible of Purism, and actually discussed the matter at some length with
Todd Weaver (the CEO) over email. We need to stop making it easy for users to
siphon all of their data into the hands of someone they don&amp;rsquo;t know.&lt;/p&gt;
&lt;p&gt;For anyone who needs a VPN but isn&amp;rsquo;t comfortable using one of these companies,
there are other choices. First, consider that any website you visit with HTTPs
support (identified by the little green lock in the address bar on your web
browser) is already encrypting all of your traffic so it cannot be read or
tampered with. This discloses your IP address to the operator of that website
and discloses that you visited that website to your ISP, but does not disclose
any data you sent to them, or any content they sent to you, to your ISP or any
eavesdroppers. If you&amp;rsquo;re careful to use HTTPS (and other forms of SSL for
things like email), that can often be enough.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;If that&amp;rsquo;s not enough, the ironclad solution is
&lt;a href=&#34;https://www.torproject.org/&#34;&gt;Tor&lt;/a&gt;. When you connect to a website on Tor, it (1)
hides your IP address from the website and any eavesdroppers, (2) hides who
you&amp;rsquo;re talking to from your ISP, and (3) hides what you&amp;rsquo;re talking about from
the ISP. In some cases (onion services), it even hides the origin of the service
you&amp;rsquo;re talking to from &lt;em&gt;you&lt;/em&gt;. Tor comes with its own set of limitations and
pitfalls for privacy &amp;amp; security, which you should &lt;a href=&#34;https://2019.www.torproject.org/download/download.html.en#Warning&#34;&gt;read about and
understand&lt;/a&gt;
before using it. Bad actors on the Tor network can read and tamper with your
traffic if you aren&amp;rsquo;t using SSL or Onion routing.&lt;/p&gt;
&lt;p&gt;Finally, if you have some technical know-how, you can set up your own VPN. If
you have a server somewhere (or rent one from a VPS provider), you can install a
VPN on it. I suggest &lt;a href=&#34;https://www.wireguard.com/&#34;&gt;Wireguard&lt;/a&gt; (easiest, Linux
only) or &lt;a href=&#34;https://openvpn.net&#34;&gt;OpenVPN&lt;/a&gt; (more difficult, works on everything).
Once again, this comes with its own limitations. You&amp;rsquo;ll always be using a
consistent IP address that services you visit can remember to track you, and you
get a new ISP (whoever your VPS provider uses). This&amp;rsquo;ll generally route you
through commercial ISPs, though, who are much less likely to do obnoxious crap
like injecting ads in webpages or redirecting your failed DNS queries to &amp;ldquo;search
results&amp;rdquo; (i.e. more ads). You&amp;rsquo;ll need to vet your VPS provider and their ISP
with equal care.&lt;/p&gt;
&lt;p&gt;Understand who handles your data - encrypted and unencrypted - before you share
it.  No matter your approach, you should also always install an adblocker (I
strongly recommend &lt;a href=&#34;https://github.com/gorhill/uBlock/#installation&#34;&gt;uBlock
Origin&lt;/a&gt;), stick to
HTTPS-enabled websites, and be suspicious of and diligent about every piece of
software, every browser extension, every app you install, and every website you
visit. Most of them are trying to spy on you.&lt;/p&gt;
&lt;p&gt;Related articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://schub.io/blog/2019/04/08/very-precarious-narrative.html&#34;&gt;VPN - a Very Precarious Narrative - Dennis Schubert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.skadligkod.se/vpn/the-trustworthy-of-vpn-review-sites-and-how-affiliate-programs-affects-their-opinion/&#34;&gt;The trustworthy of VPN review sites and how affiliate programs affects their opinion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A reader points out that HTTPS can also be tampered with. If someone else administrates your computer (such as your employer), they can install custom certificates that allow them to tamper with your traffic. This is also sometimes done by software you install on your system, like antivirus software (which more times than not, is a virus itself). Additionally, anyone who can strongarm a certificate authority (state actors) may be able to issue an illegitimate certificate for the same purpose. The only communication method I know of which has no known flaws is onion routing on Tor. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Announcing first-class Mercurial support on Sourcehut</title>
      <link>./2019/04/15/Announcing-first-class-hg-support-on-sourcehut.html</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/04/15/Announcing-first-class-hg-support-on-sourcehut.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;m pleased to announce that the final pieces have fallen into place for
&lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;Mercurial&lt;/a&gt; support on
&lt;a href=&#34;https://sourcehut.org&#34;&gt;SourceHut&lt;/a&gt;, which is now on-par with our git offering.
Special thanks are owed to SourceHut contributor Ludovic Chabant, who has been
instrumental in adding Mercurial support to SourceHut. You may have heard about
it while this was still experimental - but I&amp;rsquo;m happy to tell you that we have
now completely integrated Mercurial support into SourceHut! Want to try it out?
Check out &lt;a href=&#34;https://man.sr.ht/tutorials/set-up-account-and-hg.md&#34;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mercurial support on SourceHut includes all of the trimmings, including CI
support via &lt;a href=&#34;https://builds.sr.ht&#34;&gt;builds.sr.ht&lt;/a&gt; and email-driven collaboration
on &lt;a href=&#34;https://lists.sr.ht&#34;&gt;lists.sr.ht&lt;/a&gt;. Of course, it&amp;rsquo;s also 100%
free-as-in-freedom, open source software (&lt;a href=&#34;https://hg.sr.ht/~sircmpwn/hg.sr.ht&#34;&gt;hosted on
itself&lt;/a&gt;) that you can &lt;a href=&#34;https://man.sr.ht/hg.sr.ht/installation.md&#34;&gt;deploy on your own
servers&lt;/a&gt;. We&amp;rsquo;ve tested hg.sr.ht
on some of the largest Mercurial repositories out there, including
mozilla-central and NetBSD src. The NetBSD project in particular has been very
helpful, walking us through their CVS to Hg conversion and stress-testing
hg.sr.ht with the resulting giant repositories. I&amp;rsquo;m looking forward to working
more with them in the future!&lt;/p&gt;
&lt;p&gt;The Mercurial community is actively innovating their software, and we&amp;rsquo;ll be
right behind them. I&amp;rsquo;m excited to provide a platform for elevating the Mercurial
community. There weren&amp;rsquo;t a lot of good options for Mercurial fans before
SourceHut. Let&amp;rsquo;s fix that together! SourceHut will be taking a more active role
in the Hg community, just like we have for git, and together we&amp;rsquo;ll build a great
platform for software development.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll see you in Paris in May, at the &lt;a href=&#34;https://www.mercurial-scm.org/pipermail/mercurial/2019-April/051196.html&#34;&gt;inaugural Mercurial
conference&lt;/a&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hg support on SourceHut was largely written by members of the Mercurial
community. If there are other version control communities interested in
SourceHut support, please &lt;a href=&#34;mailto:~sircmpwn/sr.ht-dev@lists.sr.ht&#34;&gt;reach out&lt;/a&gt;!&lt;/p&gt;
</description>
    </item><item>
      <title>Status update, April 2019</title>
      <link>./2019/04/15/Status-update-April-2019.html</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/04/15/Status-update-April-2019.html</guid>
      <description>&lt;p&gt;Spring is here, and I&amp;rsquo;m already miserable in the heat. Crazy weather here in
Philadelphia - I was woken up at 3 AM by my phone buzzing, telling me to take
immediate shelter from a tornado. But with my A/C cranked up and the tornado
safely passed, I&amp;rsquo;ve been able to get a lot of work done.&lt;/p&gt;
&lt;p&gt;The project with the most impressive progress is
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/aerc2&#34;&gt;aerc2&lt;/a&gt;. It can now read emails, including
filtering them through arbitrary commands for highlighting diffs or coloring
quotes, or even rendering HTML email with a TUI browser like w3m.&lt;/p&gt;
&lt;script
  id=&#34;asciicast-vy5GmO0tBjppr4G2LSQONIFjH&#34;
  src=&#34;https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js&#34; async
&gt;&lt;/script&gt;
&lt;p&gt;Here&amp;rsquo;s another demo focusing on the embedded terminal emulator which makes this
possible:&lt;/p&gt;
&lt;script
  id=&#34;asciicast-N57RaPJqwQD2h0AejLGDWrSi9&#34;
  src=&#34;https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js&#34; async
&gt;&lt;/script&gt;
&lt;p&gt;Keybindings are also working, which are configured simiarly to vim - each
keybinding simulates a series of keystrokes, which all eventually boil down to
an ex-style command. I&amp;rsquo;ve bought a domain for aerc, and I&amp;rsquo;ll be populating it
with some marketing content and a nice tour of the features soon. I hope to have
time to work on sending emails this month as well. In the immediate future, I
need to fix some crashiness that occurs in some situations.&lt;/p&gt;
&lt;p&gt;In other email-related news, &lt;a href=&#34;https://git-send-email.io&#34;&gt;git-send-email.io&lt;/a&gt; is
now live, an interactive tutorial on using email with git. This workflow is the
one sourcehut focuses on, and is also used by a large number of important free
software projects, like Linux, gcc, clang, glibc, musl, ffmpeg, vim, emacs,
coreutils&amp;hellip; and many, many more. Check it out!&lt;/p&gt;
&lt;p&gt;I also spent a fair bit of time working on lists.sr.ht this month. Alpine Linux
has provisioned some infrastructure for a likely migration from their current
mailing list solution (mlmmj+hypermail) to one based on lists.sr.ht, which I
deployed a lists.sr.ht instance to for them, and trained them on some
administrative aspects of lists.sr.ht. User-facing improvments that came from
this work include tools for importing and exporting mail spools from lists,
better access controls, moderation tools, and per-list mime whitelisting and
blacklisting. Admin-facing tools include support for a wider variety of MTA
configurations and redirects to continue supporting old incoming mail addresses
when migrating from another mailing list system.&lt;/p&gt;
&lt;p&gt;Stepping outside the realm of email, let&amp;rsquo;s talk about Wayland. Since Sway 1.0,
development has continued at a modest pace, fixing a variety of small bugs and
further improving i3 compatibility. We&amp;rsquo;re getting ready to split swaybg into a
standalone project which can be used on other Wayland compositors soon, too. I
also have been working more on Godot, and have switched gears towards adding a
Wayland backend to Godot upstream - so you can play Godot-based video games on
Wayland. I&amp;rsquo;m still working with upstream and some other interested contributors
on the best way to integrate these changes upstream, but I more or less
completed a working port with support for nearly all of Godot&amp;rsquo;s platform
abstractions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/fOvB.png&#34;&gt;&lt;img src=&#34;https://sr.ht/fOvB.png&#34; alt=&#34;Godot editor running on Wayland with HiDPI support&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In smaller project news, I spent an afternoon putting together a home-grown
video livestreaming platform a few weeks ago. The result:
&lt;a href=&#34;https://live.drewdevault.com&#34;&gt;live.drewdevault.com&lt;/a&gt;. Once upon a time I was
livestreaming programming sessions on Twitch.tv, and in the future I&amp;rsquo;d like to
do this more often on my new platform. This one is open source and built on the
shoulders of free software tools. I announce new streams on
&lt;a href=&#34;https://cmpwn.com/@sir&#34;&gt;Mastodon&lt;/a&gt;, join us for the next one!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also starting on another project called cozy, which is yak-shaving for
several other projects I have in mind. It&amp;rsquo;s kind of ambitious&amp;hellip; it&amp;rsquo;s a full
end-to-end C compiler toolchain. One of my goals (which, when completed, can
unblock other tasks before cozy as a whole is done) is to make the parser work
as a standalone library for reading, writing, and maniuplating the C AST. I&amp;rsquo;ve
completed the lexer and basic yacc grammar, and I&amp;rsquo;m working on extracting an AST
from the parser. I only started this weekend, so it&amp;rsquo;s pretty early on.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll leave you with a fun weekend project I did shortly after the last update:
&lt;a href=&#34;https://qlock.drewdevault.com/&#34;&gt;otaqlock&lt;/a&gt;. The server this runs on isn&amp;rsquo;t awash
with bandwidth and the site doesn&amp;rsquo;t work great on mobile - so your milage may
vary - but it is a cool artsy restoration project nonetheless. Until next time,
and thank you for your support!&lt;/p&gt;
&lt;small class=&#34;text-muted&#34;&gt;
This work was possible thanks to users who support me financially. Please
consider &lt;a href=&#34;./donate&#34;&gt;donating to my work&lt;/a&gt; or &lt;a
href=&#34;https://sourcehut.org&#34;&gt;buying a sourcehut.org subscription&lt;/a&gt;. Thank you!
&lt;/small&gt;
</description>
    </item><item>
      <title>NewPipe represents the best of FOSS</title>
      <link>./2019/04/02/NewPipe-represents-the-best-of-FOSS.html</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/04/02/NewPipe-represents-the-best-of-FOSS.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://newpipe.schabi.org/&#34;&gt;NewPipe&lt;/a&gt; is a free and open-source Android
application for browsing &amp;amp; watching YouTube. In my opinion, NewPipe is a perfect
case-study in why free &amp;amp; open source software is great and how our values differ
from proprietary software in important ways. There&amp;rsquo;s one simple reason: it&amp;rsquo;s
better than the proprietary YouTube app, in every conceivable way, for free.&lt;/p&gt;
&lt;p&gt;NewPipe is better because it&amp;rsquo;s user-centric software. It exists to make its
users lives better, not to enrich its overseers. Because of this, NewPipe has
many features which are deliberately omitted from the proprietary app, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No advertisements&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Playing any video in the background&lt;/li&gt;
&lt;li&gt;Downloading videos (or their audio tracks alone) to play offline&lt;/li&gt;
&lt;li&gt;Playing videos in a pop-up player&lt;/li&gt;
&lt;li&gt;Subscribing to channels without a YouTube account&lt;/li&gt;
&lt;li&gt;Importing and exporting subscriptions&lt;/li&gt;
&lt;li&gt;Showing subscriptions in chronological order&lt;/li&gt;
&lt;li&gt;It supports streaming services other than YouTube&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;YouTube supports some of these&amp;hellip; for $12/month. Isn&amp;rsquo;t that a bit excessive?
Other features it doesn&amp;rsquo;t support at all. On top of that, YouTube is constantly
gathering data about you and making decisions which put their interests ahead of
yours, whereas NewPipe never phones home and consistently adds new features that
put users first. The proprietary app is &lt;em&gt;exploitative&lt;/em&gt; of users, and NewPipe is
&lt;em&gt;empowering&lt;/em&gt; users.&lt;/p&gt;
&lt;p&gt;There are a lot of political and philosophical reasons to use &amp;amp; support free and
open source software. Sometimes it&amp;rsquo;s hard to get people on board with FOSS by
pitching them these first. NewPipe is a great model because it&amp;rsquo;s straight up
&lt;em&gt;better&lt;/em&gt;, and better for reasons that make these philosophical points obvious
and poignant. The NewPipe project was started by &lt;a href=&#34;https://schabi.org/&#34;&gt;Christian
Schabesberger&lt;/a&gt;, is co-maintained by a &lt;a href=&#34;https://github.com/orgs/TeamNewPipe/people&#34;&gt;team of 6&lt;/a&gt;, and
has been contributed to by over &lt;a href=&#34;https://github.com/TeamNewPipe/NewPipe/graphs/contributors&#34;&gt;300 people&lt;/a&gt;. You can donate
&lt;a href=&#34;https://newpipe.schabi.org/donate/&#34;&gt;here&lt;/a&gt;.  NewPipe represents the best of our community. Thanks!
&lt;img src=&#34;./img/heart.png&#34; style=&#34;display: inline; width: 1.2rem; top: 0.2rem; position: relative&#34; /&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Support your content creators with tools like Liberapay and Patreon! &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;At least in theory&amp;hellip; basic SoundCloud support is working and more services are coming soon. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Rust is not a good C replacement</title>
      <link>./2019/03/25/Rust-is-not-a-good-C-replacement.html</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/03/25/Rust-is-not-a-good-C-replacement.html</guid>
      <description>&lt;p&gt;I have a saying that summarizes my opinion of Rust compared to Go: &amp;ldquo;Go is the
result of C programmers designing a new programming language, and Rust is the
result of C++ programmers designing a new programming language&amp;rdquo;. This isn&amp;rsquo;t just
a metaphor - Go was designed by plan9 alumni, an operating system written in C
and the source of inspiration for many of Go&amp;rsquo;s features, and Rust was designed
by the folks at Mozilla - whose flagship product is one of the largest C++
codebases in the world.&lt;/p&gt;
&lt;p&gt;The values of good C++ programmers are incompatible with the values of good C
programmers&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Rust is a decent C++ replacement if you have the same goals as
C++, but if you don&amp;rsquo;t, the design has very similar drawbacks. Both Rust and C++
are what I like to call &amp;ldquo;kitchen sink&amp;rdquo; programming languages, with the obvious
implication. These languages solve problems by adding more language features. A
language like C solves problems by writing more C code.&lt;/p&gt;
&lt;p&gt;I did some back of the napkin estimates of the rate at which these languages
become more complex, based on the rate at which they add features per year. My
approach wasn&amp;rsquo;t very scientific, but I&amp;rsquo;m sure the point comes across.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C: 0.73 new features per year&lt;/strong&gt;, measured by the number of bullet points in
the C11 article on Wikipedia which summarizes the changes from C99, adjusted to
account for the fact that C18 introduced no new features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Go: 2 new features per year&lt;/strong&gt;, measured by the number of new features listed
on the Wikipedia summary of new Go versions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C++: 11.3 new features per year&lt;/strong&gt;, measured by the number of bullet points
in the C++17 article which summarizes the changes from C++14.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rust: 15 new features per year&lt;/strong&gt;, measured by the number of headers in the
release notes of major Rust versions over the past year, minus things like
linters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This speaks volumes to the stability of these languages, but more importantly it
speaks to their complexity. Over time it rapidly becomes difficult for one to
keep an up-to-date mental map of Rust and how to solve your problems
idiomatically. A Rust program written last year already looks outdated, whereas
a C program written ten years ago has pretty good odds of being just fine.
Systems programmers don&amp;rsquo;t want shiny things - we just want things that work.
That really cool feature $other_language has? Not interested. It&amp;rsquo;ll be more
trouble than it&amp;rsquo;s worth.&lt;/p&gt;
&lt;p&gt;With the philosophical wish-wash out of the way and the tone set, let me go over
some more specific problems when considering Rust as a C replacement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C is the most portable programming language&lt;/strong&gt;. Rust actually has a pretty
admirable selection of supported targets for a new language (thanks mostly to
LLVM), but it pales in comparison to C, which runs on almost &lt;em&gt;everything&lt;/em&gt;. A new
CPU architecture or operating system can barely be considered to exist until it
has a C compiler. And once it does, it unlocks access to a vast repository of
software written in C. Many other programming languages, such as Ruby and
Python, are implemented in C and you get those for free too.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C has a spec&lt;/strong&gt;. No spec means there&amp;rsquo;s nothing keeping rustc honest. Any
behavior it exhibits could change tomorrow. Some weird thing it does could be a
feature &lt;em&gt;or&lt;/em&gt; a bug. There&amp;rsquo;s no way to know until your code breaks. That they
can&amp;rsquo;t slow down to pin down exactly what defines Rust is also indicative of an
immature language.&lt;/p&gt;
&lt;iframe
  src=&#34;https://cmpwn.com/@sir/100437209244243864/embed&#34;
  class=&#34;mastodon-embed&#34;
  style=&#34;max-width: 100%; border: 0; margin: 0 auto; display: block;&#34;
  width=&#34;400&#34;&gt;&lt;/iframe&gt;
&lt;script src=&#34;https://cmpwn.com/embed.js&#34; async=&#34;async&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;C has many implementations&lt;/strong&gt;. C has many competing compilers. They all work
together stressing out the spec, fishing out the loosely defined corners, and
pinning down exactly what C is. Code that compiles in one and not another is
indicative of a bug in one of them, which gives a nice extra layer of testing to
each. By having many implementations, we force C to be well defined, and this is
good for the language and its long-term stability. Rustc could stand to have
some competition as well, maybe it would get faster&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C has a consistent &amp;amp; stable ABI&lt;/strong&gt;. The System-V ABI is supported on a wide
variety of systems and has been mostly agreed upon by now. Rust, on the other
hand, has no stable internal ABI. You have to compile and link everything all in
one go on the same version of the Rust compiler. The only code which can
interact with the rest of the ecosystem is unidiomatic Rust, written at some
kind of checkpoint between Rust and the outside world. The outside world exists,
it speaks System-V, and us systems programmers spend a lot of our time talking
to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cargo is mandatory&lt;/strong&gt;. On a similar line of thought, Rust&amp;rsquo;s compiler flags are
not stable. Attempts to integrate it with other build systems have been met with
hostility from the Rust &amp;amp; Cargo teams. The outside world exists, and us systems
programmers spend a lot of our time integrating things. Rust refuses to play
along.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Concurrency is generally a bad thing.&lt;/strong&gt; Serial programs have X problems, and
parallel programs have X&lt;sup&gt;Y&lt;/sup&gt; problems, where Y is the amount of
parallelism you introduce. Parallelism in C is a pain in the ass for sure, and
this is one reason I find Go much more suitable to those cases. However, nearly
all programs needn&amp;rsquo;t be parallel. A program which uses poll effectively is going
to be simpler, reasonably performant, and have orders of magnitude fewer bugs.
&amp;ldquo;Fearless concurrency&amp;rdquo; allows you to fearlessly employ bad software design 9
times out of 10.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Safety&lt;/strong&gt;. Yes, Rust is more safe. I don&amp;rsquo;t really care. In light of all of
these problems, I&amp;rsquo;ll take my segfaults and buffer overflows. I especially refuse
to &amp;ldquo;rewrite it in Rust&amp;rdquo; - because no matter what, rewriting an entire program
from scratch is &lt;em&gt;always&lt;/em&gt; going to introduce more bugs than maintaining the C
program ever would. I don&amp;rsquo;t care what language you rewrite it in.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;C is far from the perfect language - it has many flaws. However, its
replacement will be simpler - not more complex. Consider Go, which has had a lot
of success in supplanting C for many problems. It does this by specializing on
certain classes of programs and addressing them with the simplest solution
possible. It hasn&amp;rsquo;t completely replaced C, but it has made a substantial dent in
its problem space - more than I can really say for Rust (which has made similar
strides for C++, but definitely not for C).&lt;/p&gt;
&lt;p&gt;The kitchen sink approach doesn&amp;rsquo;t work. Rust will eventually fail to the &amp;ldquo;jack
of all trades, master of none&amp;rdquo; problem that C++ has. Wise languages designers
start small and stay small. Wise systems programmers extend this philosophy to
designing entire systems, and Rust is probably not going to be invited. I
understand that many people, particularly those already enamored with Rust,
won&amp;rsquo;t agree with much of this article. But now you know why we are still writing
C, and hopefully you&amp;rsquo;ll stop bloody bothering us about it.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Aside: the term &amp;ldquo;C/C++&amp;rdquo; infuriates me. They are completely different languages. Idiomatic C++ looks nothing like idiomatic C. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Rust does have one competing compiler, but without a spec it&amp;rsquo;s hard to define its level of compatibility and correctness, and it&amp;rsquo;s always playing catch-up. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Status update, March 2019</title>
      <link>./2019/03/15/Status-update-March-2019.html</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/03/15/Status-update-March-2019.html</guid>
      <description>&lt;p&gt;My todo list is getting completed at a pace it&amp;rsquo;s never seen before, and growing
at a new pace, too. This full-time FOSS gig is really killing it! As the good
weather finally starts to roll in, it&amp;rsquo;s time for March&amp;rsquo;s status update. Note: I
posted updates &lt;a href=&#34;https://www.patreon.com/sircmpwn/posts&#34;&gt;on Patreon&lt;/a&gt; before, but will start posting here
instead. This medium doesn&amp;rsquo;t depend on a proprietary service, allows for richer
content, and is useful for my supporters who support my work via other donation
platforms.&lt;/p&gt;
&lt;p&gt;Sway 1.0 has been released! &lt;img style=&#34;display: inline; height: 1.2rem&#34;
src=&#34;./img/party.png&#34; /&gt; I wrote a &lt;a href=&#34;./2019/03/11/Sway-1.0-released.html&#34;&gt;detailed
write-up&lt;/a&gt; on the release and our future
plans separately, which I encourage you to read if you haven&amp;rsquo;t already. However,
I do have some additional progress to share outside of the big sway 1.0 news.
In the last update, I mentioned that I got a Librem 5 devkit from Guido
Günther&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; at FOSDEM. My plans were to get this up and running with sway and
start improving touch support, and I&amp;rsquo;ve accomplished both:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/fGxf.jpg&#34; alt=&#34;A picture of a Librem5 devkit running pmOS and sway&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, I also got &lt;a href=&#34;https://postmarketos.org/&#34;&gt;postmarketOS&lt;/a&gt; running,
and I love it - I hope to work with them a lot in the future. The &lt;a href=&#34;https://github.com/swaywm/sway/pull/3711&#34;&gt;first
patch&lt;/a&gt; for improving touch support in
sway has landed and I&amp;rsquo;ll be writing more in the future. I also sent some patches
to Purism&amp;rsquo;s &lt;a href=&#34;https://source.puri.sm/Librem5/virtboard&#34;&gt;virtboard&lt;/a&gt; project, an
on-screen keyboard, making it more useful for Sway users. I hope to make an OSK
of my own at some point, with multiple layouts, CJK support, and client-aware
autocompletion, in the future. Until then, an improved virtboard is a nice
stop-gap :) I&amp;rsquo;ve also been working on wlroots a bit, including &lt;a href=&#34;https://github.com/swaywm/wlroots/pull/1578&#34;&gt;a patch adding
remote desktop support&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In other Wayland news, I&amp;rsquo;ve also taken a part time contract to build a module
integrating wlroots with the &lt;a href=&#34;https://godotengine.org/&#34;&gt;Godot game engine&lt;/a&gt;:
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/gdwlroots&#34;&gt;gdwlroots&lt;/a&gt;. The long-term goal is to
build a VR compositor based on Godot and develop standards for Wayland
applications to have 3D content. 100% of this work is free software (MIT
licensed) and will bring improvements to both the wlroots and Godot ecosystems.
Next week I&amp;rsquo;ll be starting work on adding a Wayland backend to Godot so that
Godot-based games can run on Wayland compositors directly. Here&amp;rsquo;s an example
compositor running on Godot:&lt;/p&gt;
&lt;p&gt;&amp;lt;video
src=&amp;ldquo;&lt;a href=&#34;https://sr.ht/9bV-.webm%22&#34;&gt;https://sr.ht/9bV-.webm&amp;quot;&lt;/a&gt;
autoplay muted loop controls
style=&amp;ldquo;max-width: 100%;&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/video&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve also made some significant progress on
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/aerc2&#34;&gt;aerc2&lt;/a&gt;. I have fleshed out the command
subsystem, rigged up keybindings, and implemented the message list, and along
with it all of the asynchronous communication between the UI thread, network
thread, and mail server. I think at this point most of the unknowns are solved
with aerc2, and the rest just remains to be implemented. I&amp;rsquo;m glad I chose to
rewrite it from C, though my love for C still runs deep. The Go ecosystem is
much better suited to the complex problems and dependency tree of software like
aerc, plus has a nice concurrency model for aerc&amp;rsquo;s async design.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; The next
major problem to address is the embedded terminal emulator, which I hope to
start working on soon.&lt;/p&gt;
&lt;script
  id=&#34;asciicast-pafXXANiWHY9MOH2yXdVHHJRd&#34;
  src=&#34;https://asciinema.org/a/pafXXANiWHY9MOH2yXdVHHJRd.js&#34; async
&gt;&lt;/script&gt;
&lt;p&gt;aerc2&amp;rsquo;s progress is a great example of my marginalized projects
becoming my side projects, as my side projects become my full-time job, and thus
all of them are developing at a substantially improved pace. The productivity
increase is pretty crazy. I&amp;rsquo;m really thankful to everyone who&amp;rsquo;s supporting my
work, and excited to keep building crazy cool software thanks to you.&lt;/p&gt;
&lt;p&gt;I was meaning to work on RISC-V this month, but I&amp;rsquo;ve been a little bit
distracted by everything else. However, there has been some discussion about how
to approach upstreaming and I&amp;rsquo;m planning on tackling this next week. I also
spent some time putting together a custom 1U I can install in my datacenter for
a more permanent RISC-V setup. Some of this is working towards getting RISC-V
ready for builds.sr.ht users to take advantage of - that relay is for cutting
power to the board to force a reboot when it misbehaves - but a lot of this is
also useful for my own purposes in porting musl &amp;amp; Alpine Linux.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/M7me.jpg&#34; alt=&#34;Picture of a 1U chassis with a bunch of custom components within&#34;&gt;&lt;/p&gt;
&lt;p&gt;One problem I&amp;rsquo;m still trying to solve is the microSD card. I don&amp;rsquo;t want to run
untrusted builds.sr.ht code when that microSD card is plugged in. I&amp;rsquo;ve been
working on some prototyping (breaking out the old soldering iron) to make a
microSD&amp;hellip; thing, which I can plug into this and physically cut VCC to the
microSD card with that relay I have rigged up. This is pretty hard, and my
initial attempts were unsuccessful. If anyone knowledgable about this has ideas,
please get in touch.&lt;/p&gt;
&lt;p&gt;Outside of RISC-V, I have been contributing to Alpine Linux a lot more lately in
general. I adopted the sway &amp;amp; wlroots packages, have been working on improved
PyQt support, cleaning up Python packages, clearing out the nonfree MongoDB
packages, and more. I also added a bunch of new packages for miscellaneous
stuff, including alacritty, font-noto-cjk, nethack, and Simon Ser&amp;rsquo;s
&lt;a href=&#34;https://github.com/emersion/go-dkim&#34;&gt;go-dkim&lt;/a&gt; milter. Most importantly,
however, I&amp;rsquo;ve started
&lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Python_package_policies&#34;&gt;planning&lt;/a&gt; and
&lt;a href=&#34;https://lists.alpinelinux.org/alpine-devel/6465.html&#34;&gt;discussing&lt;/a&gt; a Python
overhaul project in aports with the Alpine team, which will including cleaning
up all of the Python patches and starting on Python 2 removal. I depend a lot on
Alpine and its Python support, so I&amp;rsquo;m excited to be working on these
improvements!&lt;/p&gt;
&lt;p&gt;I have some Sourcehut news as well. Like usual, there&amp;rsquo;ll be a detailed
Sourcehut-specific update posted to the
&lt;a href=&#34;https://lists.sr.ht/~sircmpwn/sr.ht-announce&#34;&gt;sr.ht-announce&lt;/a&gt; mailing list
later on. With Ludovic Chabant&amp;rsquo;s help, there have been continued improvements to
Mercurial support, notably adding builds.sr.ht integration as of yesterday.
Thanks Ludovic! We&amp;rsquo;ve also been talking to some NetBSD folks who may be
interested in using Sourcehut to host the NetBSD code once they finish their
CVS-&amp;gt;Hg migration, and we&amp;rsquo;ve been improving the performance for large
repositories during their experiments on sr.ht.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a bunch more going on with Sourcehut - paste.sr.ht, APIs, a command line
interface for those APIs, webhooks, and more still - check out the email on
sr.ht-announce later. That&amp;rsquo;s all I have for you today. Thank you for your
support, and until next time!&lt;/p&gt;
&lt;small class=&#34;text-muted&#34;&gt;
This work was possible thanks to users who support me financially. Please
consider &lt;a href=&#34;./donate&#34;&gt;donating to my work&lt;/a&gt; or &lt;a
href=&#34;https://sourcehut.org&#34;&gt;buying a sourcehut.org subscription&lt;/a&gt;. Thank you!
&lt;/small&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A Purism employee that works closely with wlroots on the Librem 5 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;aerc&amp;rdquo; stands for &amp;ldquo;asynchronous email reading client&amp;rdquo;, after all. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Announcing the release of sway 1.0</title>
      <link>./2019/03/11/Sway-1.0-released.html</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/03/11/Sway-1.0-released.html</guid>
      <description>&lt;p&gt;1,315 days after I started the &lt;a href=&#34;https://swaywm.org&#34;&gt;sway&lt;/a&gt; project, it&amp;rsquo;s finally
time for &lt;a href=&#34;https://github.com/swaywm/sway/releases/tag/1.0&#34;&gt;sway 1.0&lt;/a&gt;! I had no
idea at the time how much work I was in for, or how many talented people would
join and support the project with me. In order to complete this project, we have
had to rewrite the entire Linux desktop nearly from scratch. Nearly 300 people
worked together, together writing over 9,000 commits and almost 100,000 lines of
code, to bring you this release.&lt;/p&gt;
&lt;p&gt;&lt;small class=&#34;text-muted&#34;&gt;Sway is an i3-compatible Wayland desktop for Linux and FreeBSD&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;1.0 is the first stable release of sway and represents a consistent, flexible,
and powerful desktop environment for Linux and FreeBSD. We hope you&amp;rsquo;ll enjoy it!
If the last sway release you used was 0.15 or earlier, you&amp;rsquo;re in for a shock.
0.15 was a buggy, frustrating desktop to use, but sway 1.0 has been completely
overhauled and represents a much more capable desktop. It&amp;rsquo;s almost impossible to
summarize all of the changes which makes 1.0 great. Sway 1.0 adds a huge variety
of features which were sorely missed on 0.x, improves performance in every
respect, offers a more faithful implementation of Wayland, and exists as a
positive political force in the Wayland ecosystem pushing for standardization
and cooperation among Wayland projects.&lt;/p&gt;
&lt;p&gt;When planning the future of sway, we realized that the Wayland ecosystem was
sorely in need of a stable &amp;amp; flexible common base library to encapsulate all of
the difficult and complex facets of building a desktop. To this end, I decided
we would build &lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt;. It&amp;rsquo;s been a
smashing success. This project has become very important to the Linux desktop
ecosystem, and the benefits we reap from it have been shared with the community
at large. &lt;a href=&#34;https://github.com/swaywm/wlroots/wiki/Projects-which-use-wlroots&#34;&gt;Dozens of projects&lt;/a&gt; are using it today, and soon you&amp;rsquo;ll
find it underneath most Linux desktops, on your phone, in your VR environment,
and more. Its influence extends beyond its borders as well, as we develop and
push for standards throughout Wayland.&lt;/p&gt;
&lt;p&gt;Through this work we have also helped to build a broader ecosystem of tools
built on interoperable standards which you may find useful in your new sway 1.0
desktop. Here are a few of my favorites - each of which is compatible with many
Wayland compositors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swaywm/swayidle&#34;&gt;swayidle&lt;/a&gt;: idle management daemon&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swaywm/swaylock&#34;&gt;swaylock&lt;/a&gt;: lock screen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/emersion/mako&#34;&gt;mako&lt;/a&gt;: notification daemon&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/emersion/grim&#34;&gt;grim&lt;/a&gt;: screenshot tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/emersion/slurp&#34;&gt;slurp&lt;/a&gt;: interactive region selection&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ammen99/wf-recorder&#34;&gt;wf-recorder&lt;/a&gt;: video capture tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Alexays/Waybar&#34;&gt;waybar&lt;/a&gt;: alternative panel&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://source.puri.sm/Librem5/virtboard&#34;&gt;virtboard&lt;/a&gt;: on-screen keyboard&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bugaevc/wl-clipboard&#34;&gt;wl-clipboard&lt;/a&gt;: xclip replacement&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xyproto/wallutils&#34;&gt;wallutils&lt;/a&gt;: fancy wallpaper manager&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;None of this would be possible without the support of sway&amp;rsquo;s and wlroots&#39;
talented contributors. Hundreds of people worked together on this. I&amp;rsquo;d like to
give special thanks to our core contributors: Brian Ashworth, Ian Fan, Ryan
Dwyer, Scott Anderson, and Simon Ser. Thanks are also in order for those who
have helped wlroots fit into the broader ecosystem - thanks to Purism for their
help on wlroots, KDE &amp;amp; Canonical for their help on protocol standardization. I
also owe thanks to all of the other projects which use wlroots, particularly
including Way Cooler, Wayfire, and Waymonad, who all have made substantial
contributions to wlroots in their pursit of the best Wayland desktop.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d also of course like to thank all of the users who have donated to support
my work, which I now do full-time, which has had and I hope will continue to
have a positive impact on the project and those around it. Please consider
&lt;a href=&#34;https://drewdevault.com/donate&#34;&gt;donating&lt;/a&gt; to support the future of sway &amp;amp;
wlroots if you haven&amp;rsquo;t yet.&lt;/p&gt;
&lt;p&gt;Though sway today is already stable and powerful, we&amp;rsquo;re not done yet. We plan to
continue improving performance &amp;amp; stability, adding useful desktop features,
taking advantage of better hardware, and bringing sway to more users. Here&amp;rsquo;s
some of what we have planned for future releases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better Wayland-native tools for internationalized input methods like CJK&lt;/li&gt;
&lt;li&gt;Better accessibility tools including improved screen reader support,
high-contrast mode, a magnifying glass tool, and so on&lt;/li&gt;
&lt;li&gt;Integration with xdg-portal &amp;amp; pipewire for interoperable screen capture&lt;/li&gt;
&lt;li&gt;Improved touch screen support for use on the &lt;a href=&#34;https://puri.sm/products/librem-5/&#34;&gt;Librem
5&lt;/a&gt; and on
&lt;a href=&#34;https://postmarketos.org/&#34;&gt;postmarketOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Better support for drawing tablets and additional hardware&lt;/li&gt;
&lt;li&gt;Sandboxing and security features&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As with all sway features, we intend to have the best-in-class implementations
of these features and set the bar as high as we can for everyone else. We&amp;rsquo;re
looking forward to your continued support!&lt;/p&gt;
</description>
    </item><item>
      <title>Sourcehut&#39;s spartan approach to web design</title>
      <link>./2019/03/04/sourcehut-design.html</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/03/04/sourcehut-design.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sourcehut.org&#34;&gt;Sourcehut&lt;/a&gt; is known for its brutalist design, with its
mostly shades-of-gray appearance, conservative color usage, and minimal
distractions throughout. This article aims to share some insights into the
philosophy that guides this design, both for the curious reader and for the
new contributor to the open-source project.&lt;/p&gt;
&lt;p&gt;The most important principle is that sr.ht is an engineering tool first and
foremost, and when you&amp;rsquo;re there it&amp;rsquo;s probably because you&amp;rsquo;re in engineering
mode. Therefore, it&amp;rsquo;s important to bring the information you&amp;rsquo;re there for to the
forefront, and minimize distractions. In practice, this means that the first
thing on any page to grab your attention should be the thing that brought you
there. Consider &lt;a href=&#34;https://git.sr.ht/~sircmpwn/git.sr.ht/tree/master/gitsrht/service.py&#34;&gt;the source file view on git.sr.ht&lt;/a&gt;. For
reference, here are similar pages on &lt;a href=&#34;https://github.com/torvalds/linux/blob/master/init/main.c&#34;&gt;GitHub&lt;/a&gt; and
&lt;a href=&#34;https://gitlab.freedesktop.org/libinput/libinput/blob/master/src/evdev.c&#34;&gt;Gitlab&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://git.sr.ht/~sircmpwn/git.sr.ht/tree/master/gitsrht/service.py&#34;&gt;&lt;img src=&#34;https://sr.ht/kkJm.png&#34; alt=&#34;Screenshot of git.sr.ht&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;style&gt;
img {
  box-shadow: 0 0 2px 2px #888;
  max-width: 90%;
}
&lt;/style&gt;
&lt;p&gt;The vast majority of the git.sr.ht page is dedicated to the source code we&amp;rsquo;re
reading here, and it&amp;rsquo;s also where most of the colors are. Your eye is drawn
straight to the content. Any additional information we show on this page is
directly relevant to the content: breadcrumbs to other parts of the tree, file
mode &amp;amp; size, links to other views on this repository. The nav can take you away
from this page, but it&amp;rsquo;s colored a light grey to avoid being distracting and
each link is another engineering tool - no marketing material or fluff. Contrast
with GitHub: a large, dark, attention grabbing navbar with links to direct you
away from the content and towards marketing pages. If you&amp;rsquo;re logged out, you get
a giant sign-up box which pushes the content halfway off the page. Colors here
are also distracting: note the large line of colorful avatars that catches your
eye despite almost certainly being unrelated to your purpose on this page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/1qdZ.png&#34; alt=&#34;Screenshot of builds.sr.ht&#34;&gt;&lt;/p&gt;
&lt;p&gt;Colors are used much more conservatively on sourcehut. If you log into
builds.sr.ht and visit the index page, you&amp;rsquo;re greeted with a large blue &amp;ldquo;submit
manifest&amp;rdquo; button, and very little color besides. This is probably why you were
here - so it&amp;rsquo;s made obvious and colorful so your eyes can quickly find it and
get on with your work. Other pages are similar: the todo.sr.ht tracker page has
a large form with a blue &amp;ldquo;submit&amp;rdquo; button for creating a new ticket, email views
on lists.sr.ht have a large blue &amp;ldquo;reply to thread&amp;rdquo; button, and
&lt;a href=&#34;https://man.sr.ht&#34;&gt;man.sr.ht&lt;/a&gt; has a large green button enticing new users
towards the tutorials. Red is also used throughout for dangerous actions, like
deleting things.  Each button also is unambiguous and relies on the text within
itself rather than the text nearby: the git.sr.ht repository deletion page uses
&amp;ldquo;Delete $reponame&amp;rdquo;, rather than &amp;ldquo;Continue&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/d6Vx.png&#34; alt=&#34;Screenshot of repo deletion UI&#34;&gt;&lt;/p&gt;
&lt;p&gt;The last important point in sourcehut&amp;rsquo;s design is the use of icons, or rather
the lack thereof. Icons are used extremely conservatively on sr.ht. Interactive
icons (things you are expected to click) are never shown without text that
clarifies what happens when you click them. Informational icons usually have a
tooltip which explains their meaning, and are quite rare - only used in cases
where real estate limits the use of text. Assigning an icon to every action or
detail is not necessary and would add more distractions to the screen.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not a particularly skilled UI designer, so keeping it simple like this also
helps to make a reasonably nice UI attainable for an engineer-oriented developer
like me. Adding new pages is generally easy and requires little thought by
applying these basic principles throughout, and the simple design doesn&amp;rsquo;t take
long to execute on. It&amp;rsquo;s not perfect, but I like it and I&amp;rsquo;ve received positive
feedback from my users.&lt;/p&gt;
</description>
    </item><item>
      <title>Tips for a disciplined git workflow</title>
      <link>./2019/02/25/Using-git-with-discipline.html</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/02/25/Using-git-with-discipline.html</guid>
      <description>&lt;p&gt;Basic git usage involves typing a few stock commands to &amp;ldquo;&lt;a href=&#34;https://xkcd.com/1597/&#34;&gt;sync everyone
up&lt;/a&gt;&amp;rdquo;. Many people who are frustrated with git become so
because they never progress beyond this surface-level understanding of how it
works. However, mastering git is easily worth your time. How much of your day is
spent using git? I would guess that there are many tools in your belt that you
use half as often and have spent twice the time studying.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xkcd.com/1205/&#34;&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/is_it_worth_the_time.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn more about git, I suggest starting with &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain&#34;&gt;Chapter
10&lt;/a&gt; of &lt;a href=&#34;https://git-scm.com/book/en/v2&#34;&gt;Pro Git&lt;/a&gt; (it&amp;rsquo;s free!), then reading chapters 2, 3,
and 7. The rest is optional. In this article, we&amp;rsquo;re going to discuss how you can
apply the tools discussed in the book to a disciplined and productive git
workflow.&lt;/p&gt;
&lt;h3 id=&#34;the-basics-writing-good-commit-messages&#34;&gt;The basics: Writing good commit messages&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://xkcd.com/1296/&#34;&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/git_commit.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may have heard this speech before, but bear with me. Generally, you should
not use &lt;code&gt;git commit -m &amp;quot;Your message here&amp;quot;&lt;/code&gt;. Start by configuring git to use
your favorite editor: &lt;code&gt;git config --global core.editor vim&lt;/code&gt;, then simply run
&lt;code&gt;git commit&lt;/code&gt; alone. Your editor will open and you can fill in the file with your
commit message. The first line should be limited to 50 characters in length, and
should complete this sentence: when applied, this commit will&amp;hellip; &amp;ldquo;Fix text
rendering in CJK languages&amp;rdquo;. &amp;ldquo;Add support for protocol v3&amp;rdquo;. &amp;ldquo;Refactor CRTC
handling&amp;rdquo;. Then, add a single empty line, and expand on this in the &lt;em&gt;extended
commit description&lt;/em&gt;, which should be hard-wrapped at 72 columns, and include
details like rationale for the change, tradeoffs and limitations of the
approach, etc.&lt;/p&gt;
&lt;p&gt;We use 72 characters because that&amp;rsquo;s &lt;a href=&#34;https://tools.ietf.org/html/rfc2822#section-2.1.1&#34;&gt;the standard width of an email&lt;/a&gt;, and
email is an important tool for git. The 50 character limit is used because the
first line becomes the subject line of your email - and lots of text like
&amp;ldquo;&lt;code&gt;[PATCH linux-usb v2 0/13]&lt;/code&gt;&amp;rdquo; can get added to beginning. You might find
wrapping your lines like this annoying and burdensome - but consider that when
working with others, they may not be reading the commit log in the same context
as you. I have a vertical monitor that I often read commit logs on, which is not
going to cram as much text into one line as your 4K 16:9 display could.&lt;/p&gt;
&lt;h3 id=&#34;each-commit-should-be-a-self-contained-change&#34;&gt;Each commit should be a self-contained change&lt;/h3&gt;
&lt;p&gt;Every commit should only contain one change - avoid sneaking in little unrelated
changes into the same commit&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Additionally, avoid breaking one change into
several commits, unless you can refactor the idea into discrete steps - each of
which represents a complete change in its own right. If you have several changes
in your working tree and only need to commit some of them, try &lt;code&gt;git add -i&lt;/code&gt; or
&lt;code&gt;git add -p&lt;/code&gt;. Additionally, every commit should compile and run all tests
successfully, and should avoid having any known bugs which will be fixed up in a
future commit.&lt;/p&gt;
&lt;p&gt;If this is true of your repository, then you can check out any commit and expect
the code to work correctly. This also becomes useful later, for example when
cherry-picking commits into a release branch. Using this approach also allows
&lt;a href=&#34;https://git-scm.com/docs/git-bisect&#34;&gt;git-bisect&lt;/a&gt; to become more useful&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;,
because if you can expect the code to compile and complete tests successfully
for every commit, you can pass &lt;code&gt;git-bisect&lt;/code&gt; a script which programmatically
tests a tree for the presence of a bug and avoid false positives. These
self-contained commits with good commit messages can also make it really easy to
prepare release notes with [git-shortlog][shortlog], [like
Linus does with Linux releases][linux-announcement].&lt;/p&gt;
&lt;h3 id=&#34;get-it-right-on-the-first-try&#34;&gt;Get it right on the first try&lt;/h3&gt;
&lt;p&gt;We now come to one of the most important features of git which distinguishes it
from its predecessors: history editing. All version control systems come with a
time machine of some sort, but before git they were mostly read-only. However,
git&amp;rsquo;s time machine is different: you can change the past. In fact, you&amp;rsquo;re
encouraged to! But a word of warning: only change a future which has yet to be
merged into a stable public branch.&lt;/p&gt;
&lt;p&gt;The advice in this article - bug-free, self-contained commits with a good commit
message - is hard to get right on the first try. Editing your history, however,
is easy and part of an effective git workflow. Familiarize yourself with
&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History&#34;&gt;git-rebase&lt;/a&gt; and use
it liberally. You can use rebase to reorder, combine, delete, edit, and split
commits. One workflow I find myself commonly using is to make some changes to a
file, commit a &amp;ldquo;fixup&amp;rdquo; commit (&lt;code&gt;git commit -m fixup&lt;/code&gt;), then use &lt;code&gt;git rebase -i&lt;/code&gt;
to squash it into an earlier commit.&lt;/p&gt;
&lt;h3 id=&#34;other-miscellaneous-tips&#34;&gt;Other miscellaneous tips&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Read the man pages! Pick a random git man page and read it now. Also, if you
haven&amp;rsquo;t read the top-level git man page (simply &lt;code&gt;man git&lt;/code&gt;), do so.&lt;/li&gt;
&lt;li&gt;At the bottom of each man page for a high-level git command is usually a list
of low-level git commands that the high-level command relies on. If you want
to learn more about how a high-level git command works, try reading these man
pages, too.&lt;/li&gt;
&lt;li&gt;Learn how to specify the commit you want with &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection&#34;&gt;rev selection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Branches are useful, but you should learn how to work without them as well to
have a nice set of tools in your belt. Use tools like &lt;code&gt;git pull --rebase&lt;/code&gt;,
&lt;code&gt;git send-email -1 HEAD~2&lt;/code&gt;, and &lt;code&gt;git push origin HEAD~2:master&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I could stand to take my own advice more often in this respect. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;In a nutshell, git bisect is a tool which does a binary search between two commits in your history, checking out the commits in between one at a time to allow you to test for the presence of a bug. In this manner you can narrow down the commit which introduced a problem.
[shortlog]: &lt;a href=&#34;https://git-scm.com/docs/git-shortlog&#34;&gt;https://git-scm.com/docs/git-shortlog&lt;/a&gt;
[linux-announcement]: &lt;a href=&#34;https://lkml.org/lkml/2019/1/6/178&#34;&gt;https://lkml.org/lkml/2019/1/6/178&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Generics aren&#39;t ready for Go</title>
      <link>./2019/02/18/Generics-arent-ready-for-Go.html</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/02/18/Generics-arent-ready-for-Go.html</guid>
      <description>&lt;p&gt;In the distance, a gradual roar begins to grow in volume. A dust cloud is
visible over the horizon. As it nears, the shouts of the oncoming angry mob can
be heard. Suddenly, it stops, and a brief silence ensues. Then the air is filled
with the clackings of hundreds of keyboards, angrily typing the owner&amp;rsquo;s opinion
about generics and Go. The clans of Java, C#, Rust, C++, TypeScript, Haskell,
and more - usually mortal enemies - have combined forces to fight in what may
become one of the greatest flamewars of our time. And none of them read more
than the title of this article before writing their comment.&lt;/p&gt;
&lt;p&gt;Have you ever seen someone write something to the effect of &amp;ldquo;I would use Go, but
I need generics&amp;rdquo;? Perhaps we can infer from this that many of the people who are
pining after generics in Go are not, in fact, Go users. Many of them are users
of another programming language that &lt;em&gt;does&lt;/em&gt; have generics, and they feel that
generics are a good fit for this language, and therefore a good fit for any
language. The inertia of &amp;ldquo;what I&amp;rsquo;m used to&amp;rdquo; comes to a violent stop when they
try to use Go. People affected by this frustration interpret it as a problem
with Go, that Go is missing some crucial feature - such as generics. But this
lack of features is itself a feature, not a bug.&lt;/p&gt;
&lt;p&gt;Go strikes me as one of the most conservative programming languages available
today. It&amp;rsquo;s small and simple, and every detail is carefully thought out. There
are very few dusty corners of Go - in large part because Go has fewer corners in
general than most programming languages. This is a major factor in Go&amp;rsquo;s success
to date, in my opinion. Nearly all of Go&amp;rsquo;s features are bulletproof, and in my
opinion are among the best implementations of their concepts in our entire
industry. Achieving this feat requires having &lt;em&gt;fewer&lt;/em&gt; features in total.
Contrast this to C++, which has too many footguns to count. You &lt;em&gt;could&lt;/em&gt; write a
book called &amp;ldquo;C++: the good parts&amp;rdquo;, but consider that such a book about Go would
just be a book about Go. There&amp;rsquo;s little room for the bad parts in such a spartan
language.&lt;/p&gt;
&lt;p&gt;So how should we innovate in Go? Consider the case of dependency management. Go
1.11 shipped with the first version of Go modules, which, in my opinion, is a
game changer. I passionately hate &lt;code&gt;$GOPATH&lt;/code&gt;, and I thought dep wasn&amp;rsquo;t much
better. dep&amp;rsquo;s problem is that it took the dependency management ideas that other
programming languages have been working with and brought the same ideas to Go.
Instead, Go modules took the idea of dependency management and rethought it from
first principles, then landed on a much more elegant solution that I think other
programming languages will spend the next few years catching up with. I like to
make an analogy to physics: dep is like &lt;a href=&#34;https://en.wikipedia.org/wiki/General_relativity&#34;&gt;General Relativity&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Standard_Model&#34;&gt;the
Standard Model&lt;/a&gt;, whereas Go modules are more like the &lt;a href=&#34;https://en.wikipedia.org/wiki/Grand_Unified_Theory&#34;&gt;Grand Unified
Theory&lt;/a&gt;. Go doesn&amp;rsquo;t settle for anything less when adding features. It&amp;rsquo;s
not a language where liberal experimentation with imperfect ideas is desirable.&lt;/p&gt;
&lt;p&gt;I feel that this applies to generics. In my opinion, generics are an imperfect
solution to an unsolved problem in computer science. None of the proposals I&amp;rsquo;ve
seen (notably &lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-contracts.md&#34;&gt;contracts&lt;/a&gt;) feel &lt;em&gt;right&lt;/em&gt; yet. Some of this is a gut
feeling, but there are tangible problems as well. For example, the space of
problems they solve intersects with other Go features, which weakens the
strength of both features. &amp;ldquo;Which solution do I use to this problem&amp;rdquo; is a
question which different people will answer differently, and consequently their
code at best won&amp;rsquo;t agree on what &amp;ldquo;idiomatic&amp;rdquo; means and at worst will be simply
incompatible.  Another problem is that the proposal changes the meaning of
idiomatic Go in the first place - suddenly huge swaths of the Go code, including
the standard library, will become unidiomatic. One of Go&amp;rsquo;s greatest strengths is
that code written 5 years ago is still idiomatic. It&amp;rsquo;s almost impossible to
write unidiomatic Go code at all.&lt;/p&gt;
&lt;p&gt;I used to sneer at the Go maintainers alongside everyone else whenever they&amp;rsquo;d
punt on generics. With so many people pining after it, why haven&amp;rsquo;t they seen
sense yet? How can they know better than all of these people? My tune changed
once I started to use Go more seriously, and now I admire their restraint.  Part
of this is an evolution of my values as a programmer in general: simplicity and
elegance are now the principles I optimize for, even if it means certain classes
of programs are simply not on the table. And I think Go should be comfortable
not being suitable for writing certain classes of programs. I don&amp;rsquo;t think
programming languages should compete with each other in an attempt to become the
perfect solution to every problem.  This is impossible, and attempts will just
create a messy kitchen sink that solves every problem poorly.&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://sr.ht/TxC_.jpg&#34;
alt=&#34;Nina Tucker from Fullmetal Alchemist&#34;
width=&#34;320&#34; /&gt;&lt;/p&gt;
&lt;p class=&#34;text-center&#34;&gt;
  &lt;small&gt;fig. 1: the result of C++&#39;s attempt to solve all problems&lt;/small&gt;
&lt;/p&gt;
&lt;p&gt;The constraints imposed by the lack of generics (and other things Go lacks)
breed creativity.  If you&amp;rsquo;re fighting Go&amp;rsquo;s lack of generics trying to do
something Your Way, you might want to step back and consider a solution to the
problem which embraces the limitations of Go instead. Often when I do this the
new solution is a much better design.&lt;/p&gt;
&lt;p&gt;So it&amp;rsquo;s my hope that Go will hold out until the right solution presents itself,
and it hasn&amp;rsquo;t yet. Rushing into it to appease the unwashed masses is a bad idea.
There are other good programming languages - use them! I personally use a wide
variety of programming languages, and though I love Go dearly, it probably only
comes in 3rd or 4th place in terms of how frequently it appears in my projects.
It&amp;rsquo;s &lt;em&gt;excellent&lt;/em&gt; in its domain and doesn&amp;rsquo;t need to awkwardly stumble into
others.&lt;/p&gt;
</description>
    </item><item>
      <title>Wayland misconceptions debunked</title>
      <link>./2019/02/10/Wayland-misconceptions-debunked.html</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/02/10/Wayland-misconceptions-debunked.html</guid>
      <description>&lt;p&gt;This article has been on my backburner for a while, but it seems Wayland FUD is
making the news again recently, so I&amp;rsquo;ve bumped up the priority a bit. For those
new to my blog, I am the maintainer of
&lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt;, a library which implements much of
the functionality required of a Wayland compositor and is arguably the single
most influential project in Wayland right now; and &lt;a href=&#34;https://swaywm.org&#34;&gt;sway&lt;/a&gt;, a
popular Wayland compositor which is nearing version 1.0. Let&amp;rsquo;s go over some of
the common misconceptions I hear about Wayland and why they&amp;rsquo;re wrong. Feel free
to pick and choose the misconceptions you believe to read and disregard the
rest.&lt;/p&gt;
&lt;p&gt;The art of hating Wayland has become a cult affair. We don&amp;rsquo;t need to put
ourselves into camps at war. Please try not to read this article through the
lens of anger.&lt;/p&gt;
&lt;h3 id=&#34;wayland-isnt-more-secure-look-at-this-keylogger&#34;&gt;Wayland isn&amp;rsquo;t more secure, look at this keylogger!&lt;/h3&gt;
&lt;p&gt;There is an &lt;a href=&#34;https://github.com/Aishou/wayland-keylogger&#34;&gt;unfortunate GitHub
project&lt;/a&gt; called &amp;ldquo;Wayland keylogger&amp;rdquo;
whose mode of operation is using &lt;code&gt;LD_PRELOAD&lt;/code&gt; to intercept calls to the
libwayland shared library and record keypresses from it. The problem with this
&amp;ldquo;critique&amp;rdquo; is stated in the &lt;code&gt;README.md&lt;/code&gt; file, though most don&amp;rsquo;t read past the
title of the repository. Wayland is only &lt;em&gt;one part&lt;/em&gt; of an otherwise secure
system. Using &lt;code&gt;LD_PRELOAD&lt;/code&gt; is effectively equivalent to rewriting client
programs to log keys themselves, and any program which is in a position to do
this has already won. If I rephrased this as &amp;ldquo;Wayland can be keylogged, assuming
the attacker can sneak some evil code into your .bashrc&amp;rdquo;, the obviousness of
this truth should become immediately apparent.&lt;/p&gt;
&lt;p&gt;Some people have also told me that they can log keys by opening &lt;code&gt;/dev/input/*&lt;/code&gt;
files and reading input events. They&amp;rsquo;re right! Try it yourself: &lt;code&gt;sudo libinput debug-events&lt;/code&gt;. The catch should also be immediately obvious: ask
yourself why this needs to be run with &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;wayland-doesnt-support-screenshotscapture&#34;&gt;Wayland doesn&amp;rsquo;t support screenshots/capture!&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/wayland-project/wayland/blob/master/protocol/wayland.xml&#34;&gt;core Wayland protocol&lt;/a&gt; does not define a mechanism for taking
screenshots. Here&amp;rsquo;s another thing it doesn&amp;rsquo;t define: how to open application
windows, like gedit and Firefox. The Wayland protocol is very conservative and
general purpose, and is built with use-cases other than desktop systems in mind.
To this end it only implements the lowest common denominator, and leaves the
rest to protocol extensions. There is a process for defining, implementing,
maturing, and standardizing these extensions, though the last part is in need of
improvements - which are under discussion.&lt;/p&gt;
&lt;p&gt;There are two protocols for the purpose of screenshots and screen recording,
which are developed by wlroots and supported by a strong majority of Wayland
compositors: &lt;a href=&#34;https://github.com/swaywm/wlroots/blob/master/protocol/wlr-screencopy-unstable-v1.xml&#34;&gt;screencopy&lt;/a&gt; and
&lt;a href=&#34;https://github.com/swaywm/wlroots/blob/master/protocol/wlr-export-dmabuf-unstable-v1.xml&#34;&gt;dmabuf-export&lt;/a&gt;, respectively for copying pixels (best for
screenshots) and exporting DMA buffers (best for real-time video capture).&lt;/p&gt;
&lt;p&gt;There are two approaches to this endorsed by different camps in Wayland: these
Wayland protocols, and a dbus protocol based on Pipewire. Progress is being made
on making these approaches talk to each other via &lt;a href=&#34;https://github.com/emersion/xdg-desktop-portal-wlr&#34;&gt;xdg-desktop-portal&lt;/a&gt;,
which will make just about every client and compositor work together.&lt;/p&gt;
&lt;h3 id=&#34;wayland-doesnt-have-a-secondary-clipboard&#34;&gt;Wayland doesn&amp;rsquo;t have a secondary clipboard!&lt;/h3&gt;
&lt;p&gt;Secondary clipboard support (aka primary selection) was first implemented as
&lt;a href=&#34;https://github.com/swaywm/wlroots/blob/master/protocol/gtk-primary-selection.xml&#34;&gt;gtk-primary-selection&lt;/a&gt; and was recently standardized as
&lt;a href=&#34;https://github.com/wayland-project/wayland-protocols/blob/master/unstable/primary-selection/primary-selection-unstable-v1.xml&#34;&gt;wp-primary-selection&lt;/a&gt;. It is supported by nearly all Wayland
compositors and clients.&lt;/p&gt;
&lt;h3 id=&#34;wayland-doesnt-support-clipboard-managers&#34;&gt;Wayland doesn&amp;rsquo;t support clipboard managers!&lt;/h3&gt;
&lt;p&gt;See &lt;a href=&#34;https://github.com/bugaevc/wl-clipboard&#34;&gt;wl-clipboard&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;wayland-isnt-suitable-for-embedded-devices&#34;&gt;Wayland isn&amp;rsquo;t suitable for embedded devices!&lt;/h3&gt;
&lt;p&gt;Some people argue that Wayland isn&amp;rsquo;t supported on embedded devices or require
proprietary blobs to work. This is &lt;em&gt;very&lt;/em&gt; untrue. Firstly, Wayland is a
protocol: the &lt;em&gt;implementations&lt;/em&gt; are the ones that need support from drivers, and
a Wayland implementation could be written for basically any driver. You could
implement Wayland by writing Wayland protocol messages on pieces of paper,
passing them to your friend in class, and having them draw your window on their
notebook with a pencil.&lt;/p&gt;
&lt;p&gt;That being said, this is also untrue of the implementations. wlroots, which
contains the most popular Wayland rendering backend, implements KMS+DRM+GBM,
which is supported by all open source graphics drivers, and uses GLESv2, which
is the most broadly supported graphics implementation, including on embedded
(which is what the &amp;ldquo;E&amp;rdquo; stands for) and most older hardware. For ancient
hardware, writing an fbdev backend is totally possible and I&amp;rsquo;d merge it in
wlroots if someone put in the time. Writing a more modern KMS+DRM+GBM
implementation for that hardware is equally possible.&lt;/p&gt;
&lt;h3 id=&#34;wayland-doesnt-have-network-transparency&#34;&gt;Wayland doesn&amp;rsquo;t have network transparency!&lt;/h3&gt;
&lt;p&gt;This is actually true! But it&amp;rsquo;s not as bad as it&amp;rsquo;s made out to be. Here&amp;rsquo;s why:
X11 forwarding works on Wayland.&lt;/p&gt;
&lt;p&gt;Wait, what? Yep: all mainstream desktop Wayland compositors have support for
&lt;strong&gt;Xwayland&lt;/strong&gt;, which is an implementation of the X11 server which translates X11
to Wayland, for backwards compatibility. X11 forwarding works with it! So if you
use X11 forwarding on Xorg today, your workflow will work on Wayland unchanged.&lt;/p&gt;
&lt;p&gt;However, Wayland itself is not network transparent. The reason for this is that
some protocols rely on file descriptors for transferring information quickly or
in bulk. One example is GPU buffers, so that the Wayland compositor can render
clients without copying data on the GPU - which improves performance
dramatically. However, little about Wayland is inherently network &lt;em&gt;opaque&lt;/em&gt;.
Things like sending pixel buffers to the compositor are already abstracted on
Wayland and a network-backed implementation could be easily made. The problem is
that no one seems to really care: all of the people who want network
transparency drank the anti-Wayland kool-aid instead of showing up to put the
work in. If you want to implement this, though, we&amp;rsquo;re here and ready to support
you! Drop by the wlroots &lt;a href=&#34;https://webchat.freenode.net/?channels=sway-devel&#34;&gt;IRC channel&lt;/a&gt; and we&amp;rsquo;re prepared to help
you implement this.&lt;/p&gt;
&lt;h3 id=&#34;wayland-doesnt-support-remote-desktop&#34;&gt;Wayland doesn&amp;rsquo;t support remote desktop!&lt;/h3&gt;
&lt;p&gt;This one is also true, but work is ongoing. Several of the pieces are in place:
screen capture and keyboard simulation are there. If an interested developer
wants to add pointer device simulation and tie it all together with librdesktop,
that would be a great boon to the Wayland ecosystem. &lt;a href=&#34;https://webchat.freenode.net/?channels=sway-devel&#34;&gt;We&amp;rsquo;re waiting to
help!&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;wayland-requires-client-side-decorations&#34;&gt;Wayland requires client side decorations!&lt;/h3&gt;
&lt;p&gt;This was actually true for a long time, but there was deep contention in the
Wayland ecosystem over this matter. We fought long and hard over this and we now
have a protocol for negotiating client- vs server-side decorations, which is now
fairly broadly supported, including among some of its opponents. You&amp;rsquo;re welcome.&lt;/p&gt;
&lt;h3 id=&#34;wayland-doesnt-support-hotkey-daemons&#34;&gt;Wayland doesn&amp;rsquo;t support hotkey daemons!&lt;/h3&gt;
&lt;p&gt;This is a feature, not a bug, but you&amp;rsquo;re free to disagree once you hear the
rationale. There are lots of problems with the idea of hotkey daemons as it
exists on X. What if there&amp;rsquo;s a conflict between several clients who want the
same hotkey? What if the user wants to pick a different hotkey? On top of this,
designing a protocol carefully to avoid keylogging concerns makes it more
difficult still.&lt;/p&gt;
&lt;p&gt;To this end, I&amp;rsquo;ve been encouraging client developers who want hotkeys to instead
use some kind of IPC mechanism and a control binary. For example, &lt;code&gt;mako&lt;/code&gt;, a
notification daemon, allows you to dismiss notifications by running the &lt;code&gt;makoctl dismiss&lt;/code&gt; command. Users are then encouraged to use the compositor&amp;rsquo;s own
keybinding facilities to execute this command. This is more flexible even
outside of keybinding - the user might want to execute this behavior through a
script, too.&lt;/p&gt;
&lt;p&gt;Still, if you &lt;em&gt;really&lt;/em&gt; want hotkeys, you should start the discussion for
standardizing a protocol. It will be an uphill battle but I believe that a
protocol which addresses everyone&amp;rsquo;s concerns is theoretically possible. &lt;em&gt;You&lt;/em&gt;
have to step up, though: no one working on Wayland today seems to care. We are
mostly volunteers working for free in our spare time.&lt;/p&gt;
&lt;h3 id=&#34;wayland-doesnt-support-nvidia&#34;&gt;Wayland doesn&amp;rsquo;t support Nvidia!&lt;/h3&gt;
&lt;p&gt;Actually, Nvidia doesn&amp;rsquo;t support us. There are three standard APIs which are
implemented by all graphics drivers in the Linux kernel: DRM (display resource
management), KMS (kernel mode setting), and GBM (generic buffer management). All
three are necessary for most Wayland compositors. Only the first two are
implemented by the Nvidia proprietary driver. In order to support Nvidia,
Wayland compositors need to add code resembling this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nvidia&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proprietary&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/* several thousand lines of code */&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/* several thousand lines of code */&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s terrible! On top of that, we cannot debug the proprietary driver, we
cannot send fixes upstream, and we cannot read the code to understand its
behavior. The mesa code (where much of the important code for many drivers
lives) is a frequent object of study among Wayland compositor developers. We
cannot do this with the proprietary drivers, and it doesn&amp;rsquo;t even implement the
APIs it needs to. They claim to be working on a replacement for GBM which they
hope will satisfy everyone&amp;rsquo;s concerns, but 52 commits in 3 years with over a
year of inactivity isn&amp;rsquo;t a great sign.&lt;/p&gt;
&lt;p&gt;To boot, Nvidia is a bad actor on Linux. Compare the talks at FOSDEM 2018
from the &lt;a href=&#34;https://archive.fosdem.org/2018/schedule/event/nouveau/&#34;&gt;nouveau developers&lt;/a&gt; (the open source Nvidia driver) and the
&lt;a href=&#34;https://archive.fosdem.org/2018/schedule/event/amd_graphics/&#34;&gt;AMDGPU developers&lt;/a&gt; (the &lt;em&gt;only&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; AMD driver - also open source). The
Nouveau developers discuss all of the ways that Nvidia makes their lives
difficult, up to and including &lt;em&gt;signed firmwares&lt;/em&gt;. AMDGPU instead talks about
the process of upstreaming their driver, discuss their new open source Vulkan
driver, and how the community can contribute - and this was presented by paid
AMD staff. I met Intel employees at XDC who were working on a continuous
integration system wherein Intel offers a massive Intel GPU farm to Mesa
developers free-of-charge for working on the open source driver. Nvidia is
clearly a force for bad on the Linux scene and for open source in general, and
the users who reward this by spending oodles of cash on their graphics cards are
not exactly in my good graces.&lt;/p&gt;
&lt;p&gt;So in short, people asking for Nvidia proprietary driver support are asking the
wrong people to spend hundreds of hours working for free to write and maintain
an implementation for &lt;em&gt;one&lt;/em&gt; driver which represents a harmful force on the Linux
ecosystem and a headache for developers trying to work with it. With respect, my
answer is no.&lt;/p&gt;
&lt;h3 id=&#34;wayland-doesnt-support-gaming&#34;&gt;Wayland doesn&amp;rsquo;t support gaming!&lt;/h3&gt;
&lt;p&gt;First-person shooters, among other kinds of games, require &amp;ldquo;locking&amp;rdquo; the pointer
to their window. This requires &lt;a href=&#34;https://github.com/wayland-project/wayland-protocols/blob/master/unstable/pointer-constraints/pointer-constraints-unstable-v1.xml&#34;&gt;a protocol&lt;/a&gt;, which was
standardized in 2015. Adoption has been slower, but it landed in wlroots several
months ago and support was added to sway a few weeks ago.&lt;/p&gt;
&lt;h3 id=&#34;in-conclusion&#34;&gt;In conclusion&lt;/h3&gt;
&lt;p&gt;At some point, some of these things have been true. Some have never been true.
It takes time to replace a 30-year incumbent. To be fair, some of these points
are true on GNOME and KDE, but none are inherently problems with the Wayland
protocol. wlroots is a dominating force in the Wayland ecosystem and the tide is
clearly moving our way.&lt;/p&gt;
&lt;p&gt;Another thing I want to note is that Xorg still works. If you find your needs
aren&amp;rsquo;t met by Wayland, just keep using X! We won&amp;rsquo;t be offended. I&amp;rsquo;m not trying
to force you to use it. Why you heff to be mad?&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;*actively maintained &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>My experiences at FOSDEM 2019</title>
      <link>./2019/02/05/FOSDEM-recap.html</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/02/05/FOSDEM-recap.html</guid>
      <description>&lt;p&gt;Currently in a plane on my way home from FOSDEM and, as seems to be a recurring
pattern when I fly long distances home after attending a conference, a recap is
readily flowing from my fingertips. This was my first year at FOSDEM, and I&amp;rsquo;m
glad that I came. I&amp;rsquo;m already excited for next year! It was also my first year
volunteering, which was equally great and another thing I expect to repeat.&lt;/p&gt;
&lt;p&gt;My biggest feeling during the event was one of incredible business. My
scatterbrained interests throughout the domain of free software came back to
haunt me as I struggled to keep up with all of the people I had to meet &amp;amp; thank,
all of the sessions I wanted to see, and all of the dinners &amp;amp; outings I wanted
to attend. Before all of the fuss, though, I was lucky enough to have a day and
a half to myself (and later with &lt;a href=&#34;https://emersion.fr&#34;&gt;Simon Ser&lt;/a&gt;) to enjoy
Brussels with.&lt;/p&gt;
&lt;p&gt;The first FOSDEM-related event I found myself was when the Arch Linux developers
graciously invited me to their dinner on Friday. I have a long friendship with
several Arch developers, but never met any in person. We were speaking in the
weeks before FOSDEM about how to save them from their subversion nightmare, and
we spoke a little bit about some ideas for fixing this, but mostly we just had a
good time and got to know each other better. Later in the week, Jerome finally
convinced me to apply to become an Arch Trusted User, and in the coming months I
hope to work with them on a nice next-generation system for Arch Linux package
maintenance.&lt;/p&gt;
&lt;p&gt;The hallway track&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; continued to be the highlight of the event. Later Friday
night, I had volunteered to staff the FOSDEM beer event&amp;rsquo;s late shift, so the
inevitability of time and biology led to missing the first half of day one. I
ended up wiggling my way into the BSD room and saw a cool talk on NetBSD - long
one of my favorites among the BSDs, and learned that the speaker had a cool
project which will save me a lot of time when adding NetBSD support to sr.ht.
Grabbed his email afterwards and met up with my friends from KDE for lunch. We
met up with Daniel Stone as well, and spoke for a while about how we&amp;rsquo;re finally
going to approach unifying and standardizing the Wayland ecosystem. This
discussion took place waiting outside the graphics room for the Pipewire talk.
Simon has been working on a portal to connect sway&amp;rsquo;s Wayland protocols with the
dbus-based ecosystem Pipewire lives in, and along with KDE&amp;rsquo;s Roman Glig they had
some interesting questions for the presenter.&lt;/p&gt;
&lt;p&gt;The second day was quite a bit different. My other role as a volunteer was doing
A/V support in the rooms. For this I got a &lt;em&gt;second&lt;/em&gt; shirt, with a different
color! I think next year I may try to collect them all. This was interesting and
slow work, and basically entailed walking down to the stage crouched down to
tweak the mic volume until someone on IRC from the war room said it was better.
I did get to observe more exciting crises over IRC from the comfort of my
relatively normal room, though, and got to play a bit with the astonishingly
sophisticated A/V setup FOSDEM uses. After that I grabbed a light lunch and
passed the time by playing Magic: the Gathering with a group we found in the
FOSDEM bar. I grabbed some Club Mates - I love them but they&amp;rsquo;re super difficult
to get in the United States - and waited until the highlight of the event: the
sr.ht and sway meetups.&lt;/p&gt;
&lt;p&gt;Big shoutout to the FOSDEM organizers for entertaining our last-minute requests
to have a space to meet users of both groups. The turnout for both rooms was
way more than I expected - almost 50! It seemed like every seat was filled. I
was also surprised at how distinct the groups where, with only a 5-10% overlap.
After making sure everyone got a sticker, there was some really great questions
and feedback from the sr.ht crowd. A particularly interesting tangent had me
defending the email choice to a skeptic and getting a lot of good feedback and
insights from the rest of the room, as well as elaborating on my plans to
improve the workflow for those less comfortable with email. There was naturally
some discussion about the crappy name and my plans to fix it, and I had the
pleasure of demoing the experimental Fedora builds live to someone who was
asking when there would be Fedora support. It was also great to meet many of the
users and contributors who I&amp;rsquo;ve been working with online, and made sure to thank
them in person - particularly Ivan Habunek, a prolific sr.ht contributor who was
part of our roaming sway/sr.ht/Arch Linux/etc clan throughout FOSDEM.&lt;/p&gt;
&lt;p&gt;The sway meetup was equally fun, and I thank the attendees for bearing with me
while I answered the post-meetup questions and comments from the sr.ht crowd -
my fault for scheduling two back-to-back sessions. We started off with a bang by
releasing sway 1.0-rc1, then turned to questions and feedback from the crowd.
Simon had a lot to say during the sway meetup as well, explaining his work and
future plans for the project, and together we also explained our somewhat novel
philosophy on project governance that I credit the success of the project to.
It&amp;rsquo;s designed to maximize contributors, and it&amp;rsquo;s entirely to their credit that
the success of sway and wlroots is owed. Speaking of the future of sway and
wlroots, I also met Guido, an engineer at Purism who works with wlroots, again
after our initial meeting at XDC 2018. This time, Guido brought a gift - a
Librem 5 dev board for the wlroots team to use. Thank you! You&amp;rsquo;ll hear more
about our work with this board in the coming months as I use it to improve touch
support for sway and send it out on loan to various wlroots project developers.&lt;/p&gt;
&lt;p&gt;I had a flight home Sunday evening so we had a hasty and delicious dinner, a
quick round of beers, and finally parted ways. An overnight in Dublin and here I
am - on the plane home to Philly, with 43% of my battery&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and an estimated 3
hours left in-flight. FOSDEM was great - a huge thanks to the organizers and
volunteers! I&amp;rsquo;m looking forward to next year.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The part of the conference which takes place in the hallway, i.e. socializing with other attendees. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Paranoia about which led me to spend some time optimizing my development environment&amp;rsquo;s power consumption a bit &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Why I chose Flask to build sr.ht&#39;s mini-services</title>
      <link>./2019/01/30/Why-I-built-sr.ht-with-Flask.html</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/01/30/Why-I-built-sr.ht-with-Flask.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sr.ht&#34;&gt;sr.ht&lt;/a&gt; is a large, production-scale suite of web applications (I
call them &amp;ldquo;mini-services&amp;rdquo;, as they strike a balance between microservices and
monolithic applications) which are built in Python with
&lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt;. David Lord, one of the maintainers of Flask,
reached out to me when he heard about sr.ht and saw that it was built with
Flask. At his urging, I&amp;rsquo;d like to share the rationale behind the decision and
how it&amp;rsquo;s turned out in the long run.&lt;/p&gt;
&lt;p&gt;I have a long history of writing web applications with Flask, so much so that I
think I&amp;rsquo;ve lost count of them by now - at least 15, if not 20. Flask&amp;rsquo;s
simplicity and flexibility is what keeps bringing me back. Frameworks like
Django or Rails are much different: they are the kitchen sink, and then some. I
generally don&amp;rsquo;t need the whole kitchen sink, and if I were given it, I would
want to change some details. Flask is nice because it gives you the basics and
lets you build what you need on top of it, and you&amp;rsquo;re never working around a
cookie-cutter system which doesn&amp;rsquo;t cut your cookies in quite the way you need.&lt;/p&gt;
&lt;p&gt;In sr.ht&amp;rsquo;s case in particular, though, I have chosen to extend Flask with &lt;a href=&#34;https://git.sr.ht/~sircmpwn/core.sr.ht&#34;&gt;a new
module&lt;/a&gt; common to all sr.ht projects. After all, each service of
sr.ht has a lot in common with the rest. Some of the things that live in this
core module are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shared jinja2 templates and stylesheets&lt;/li&gt;
&lt;li&gt;Shared rigging for &lt;a href=&#34;https://www.sqlalchemy.org/&#34;&gt;SQLAlchemy&lt;/a&gt; (ORM)&lt;/li&gt;
&lt;li&gt;Shared rigging for &lt;a href=&#34;https://alembic.sqlalchemy.org/en/latest/&#34;&gt;Alembic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~sircmpwn/core.sr.ht/tree/master/srht/validation.py&#34;&gt;A little validation module&lt;/a&gt; I&amp;rsquo;m very proud of&lt;/li&gt;
&lt;li&gt;API behavior, webhooks, OAuth, etc, which are consistent throughout sr.ht&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The mini-service-oriented architecture allows sr.ht services to be deployed
ala-carte for users who only need a fraction of what we offer. This design
requires a lot of custom code to integrate all of the services with each other -
for example, all of the services use a single shared config file, which contains
both shared config options and service-specific configuration. sr.ht also uses a
novel approach to authentication, in which both user logins and API
authentication is delegated to an external service, meta.sr.ht, requiring
further custom code still. core.sr.ht additionally provides common SQLAlchemy
mixins for things like user tables, which have many common properties, but for
each service may have service-specific columns as well.&lt;/p&gt;
&lt;p&gt;Django provides their own ORM, their own authentication, their own models, and
more. In order to meet the design constraints of sr.ht, I&amp;rsquo;d have spent twice as
long ripping out the rest of Django&amp;rsquo;s bits and fixing anything that broke in the
resulting mess. With Flask, these bits were never written for me in the first
place, which gives me the freedom to implement this design greenfield. Flask is
small and what code it does bring to the table is highly pluggable.&lt;/p&gt;
&lt;p&gt;Though it&amp;rsquo;s well suited to many of my needs, I don&amp;rsquo;t think Flask is perfect. A
few things I dislike about it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First-class &lt;a href=&#34;http://jinja.pocoo.org/&#34;&gt;jinja2&lt;/a&gt; support is probably out of
scope.&lt;/li&gt;
&lt;li&gt;flask.Flask and flask.Blueprint should be the same thing.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m not a fan of Flask&amp;rsquo;s approach to configuration. I have a better(?) config
module that I drag around to all of my projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And to summarize the good:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It provides a nice no-nonsense interface for requests, responses, and routing.&lt;/li&gt;
&lt;li&gt;It has a lot of nice hooks for adding your own middleware.&lt;/li&gt;
&lt;li&gt;It doesn&amp;rsquo;t do much more than that, which means you&amp;rsquo;re free to choose and
compose other tools to make up the difference.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think that on the whole it&amp;rsquo;s quite good. There are frameworks which are
smaller still - but I think Flask hits a sweet spot. If you&amp;rsquo;re making a
monolithic web app and can live within the on-rails Django experience, you might
want to use it. But if you are making smaller apps or need to rig things up in a
unique way - something I find myself doing almost every time - Flask is probably
for you.&lt;/p&gt;
</description>
    </item><item>
      <title>Why I use old hardware</title>
      <link>./2019/01/23/Why-I-use-old-hardware.html</link>
      <pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/01/23/Why-I-use-old-hardware.html</guid>
      <description>&lt;p&gt;Recently I was making sure my main laptop is ready for travel&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, which mostly
just entails syncing up the latest version of my music collection. This laptop
is a Thinkpad X200, which turns 11 years old in July and is my main workstation
away from home (though I bring a second monitor and an external keyboard for
long trips). This laptop is a great piece of hardware. 100% of the hardware is
supported by the upstream Linux kernel, including the usual offenders like WiFi
and Bluetooth. Niche operating systems like 9front and Minix work great, too.
Even coreboot works! It&amp;rsquo;s durable, user-serviceable, light, and still looks
brand new after all of these years. I love all of these things, but there&amp;rsquo;s no
denying that it&amp;rsquo;s 11 years behind on performance innovations.&lt;/p&gt;
&lt;p&gt;Last year &lt;a href=&#34;https://kde.org&#34;&gt;KDE&lt;/a&gt; generously &lt;a href=&#34;https://drewdevault.com/2018/04/28/KDE-Sprint-retrospective.html&#34;&gt;invited me&lt;/a&gt; to and
sponsored my travel to their development sprint in Berlin. One of my friends
there teased me - in a friendly way - about my laptop, asking why I used such an
old system. There was a pensive moment when I answered: &amp;ldquo;it forces me to
empathise with users who can&amp;rsquo;t use high-end hardware&amp;rdquo;. I showed him how it could
cold boot to a productive &lt;a href=&#34;https://swaywm.org&#34;&gt;sway&lt;/a&gt; desktop in &amp;lt;30 seconds,
then I installed KDE to compare. It doubled the amount of disk space in use,
took almost 10x as long to reach a usable desktop, and had severe rendering
issues with my old Intel GPU.&lt;/p&gt;
&lt;p&gt;To be clear, KDE is a wonderful piece of software and my first recommendation to
most non-technical computer users who ask me for advice on using Linux. But
software often grows to use the hardware you give it. Software developers tend
to be computer enthusiasts, and use enthusiast-grade hardware. In reality, this
high-end hardware isn&amp;rsquo;t really &lt;em&gt;necessary&lt;/em&gt; for most applications outside of
video encoding, machine learning, and a few other domains.&lt;/p&gt;
&lt;p&gt;I do have a more powerful workstation at home, but it&amp;rsquo;s not really anything
special. I upgrade it very infrequently. I bought a new mid-range GPU which is
able to drive my four displays&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; last year, I&amp;rsquo;ve added the occasional hard
drive as it gets full, and I replaced the case with something lighter weight 3
years ago. Outside of those minor upgrades, I&amp;rsquo;ve been using the same desktop
workstation for 7 years, and intend to use it for much longer. My servers are
similarly running on older hardware which is spec&amp;rsquo;d to their needs (actually, I
left a lot of room to grow and &lt;em&gt;still&lt;/em&gt; was able to buy old hardware).&lt;/p&gt;
&lt;p&gt;My 11-year-old laptop can compile the Linux kernel from scratch in 20 minutes,
and it can play 1080p video in real-time. That&amp;rsquo;s all I need! Many users cannot
afford high-end computer hardware, and most have better things to spend their
money on. And you know, I work hard for my money, too - if I can get a computer
which can do nearly 5 &lt;em&gt;billion&lt;/em&gt; operations per second for $60, that should be
sufficient to solve nearly any problem. No doubt, there are faster laptops out
there, many of them with similarly impressive levels of compatibility with my
ideals. But why bother?&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;To &lt;a href=&#34;https://fosdem.org/2019/&#34;&gt;FOSDEM&lt;/a&gt; - see you there! &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I have a variety of displays and display configurations for the purpose of continuously testing sway/wlroots in those situations &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>I&#39;m going to work full-time on free software</title>
      <link>./2019/01/15/Im-doing-FOSS-full-time.html</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/01/15/Im-doing-FOSS-full-time.html</guid>
      <description>&lt;p&gt;Sorry for posting two articles so close to each other - but this is important!
As I&amp;rsquo;m certain many of you know, I maintain a large collection of free software
projects, including &lt;a href=&#34;https://github.com/swaywm/sway&#34;&gt;sway&lt;/a&gt;, &lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt;, &lt;a href=&#34;https://sr.ht&#34;&gt;sr.ht&lt;/a&gt;,
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/scdoc&#34;&gt;scdoc&lt;/a&gt;, &lt;a href=&#34;https://git.sr.ht/~sircmpwn/aerc2&#34;&gt;aerc&lt;/a&gt;, and &lt;a href=&#34;https://git.sr.ht/~sircmpwn&#34;&gt;many&lt;/a&gt;, &lt;a href=&#34;https://github.com/ddevault&#34;&gt;many&lt;/a&gt;
more. I contribute to more still, working on projects like &lt;a href=&#34;https://alpinelinux.org&#34;&gt;Alpine
Linux&lt;/a&gt;, &lt;a href=&#34;https://git.sr.ht/~emersion/mrsh&#34;&gt;mrsh&lt;/a&gt;, &lt;a href=&#34;https://musl-libc.org&#34;&gt;musl libc&lt;/a&gt;, and anything else I can. Until
now, I&amp;rsquo;ve been working on these in my spare time, but just under a year ago I
wrote &amp;ldquo;&lt;a href=&#34;https://drewdevault.com/2018/02/24/The-road-to-sustainable-FOSS.html&#34;&gt;The path to sustainably working on FOSS full-time&lt;/a&gt;&amp;rdquo; laying out
my future plans.  Today I&amp;rsquo;m proud to tell you that, thanks to everyone&amp;rsquo;s
support, I&amp;rsquo;ll be working on free software full-time starting in February.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m so excited! I owe many people a great deal of thanks. To everyone who has
donated to my fosspay, Patreon, and LiberaPay accounts: thank you. To all of the
sr.ht users who chose to pay for their account despite it being an alpha: thank
you. I also owe a thanks to all of the amazing contributors who give their spare
time towards making the projects I maintain even better, without whom my
software wouldn&amp;rsquo;t be anywhere near as useful to anyone.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t want to make grandiose promises right away, but I&amp;rsquo;m confident that
increasing my commitment to open source to this degree is going to have a major
impact on my projects. For now, my primary focus is sr.ht: its paid users make
up the majority of the funding. Relatedly, I plan to invest more time in Alpine
Linux on RISC-V and making RISC-V builds available to the sr.ht community.  Sway
and wlroots are in good shape as we quickly approach sway 1.0, and for this
reason I want to give a higher priority to my smaller, more neglected projects
like aerc for the time being. As I learn more about my bandwidth under these new
conditions, I&amp;rsquo;ll expand my plans accordingly.&lt;/p&gt;
&lt;p&gt;I need to clarify that despite choosing to work full-time on these projects, my
income is going to be negative for a while. I have enough savings and income now
that I feel comfortable making the leap, and I plan on working my ass off before
my runway ends to earn the additional subscriptions to sr.ht and donations to
fosspay et al that will make this decision sustainable in the long term. If that
doesn&amp;rsquo;t happen before I get near the end of my runway, I&amp;rsquo;ll have to start
looking for different work again. I&amp;rsquo;m depending on your continued support. If
you appreciate my work but haven&amp;rsquo;t yet, please consider &lt;a href=&#34;https://meta.sr.ht/billing/initial&#34;&gt;buying a subscription
to sr.ht&lt;/a&gt; or &lt;a href=&#34;./donate&#34;&gt;donating to my general
projects fund&lt;/a&gt;. Thank you!&lt;/p&gt;
&lt;p&gt;All said, words cannot describe how excited I am. It&amp;rsquo;s been my dream for years
to work on these projects full-time. Hitting this critical threshold of funding
allows me to tremendously accelerate the progress of these projects. If you were
impressed by what I built in my spare time, just wait until you see what we can
accomplish now!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/YsHI.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;From the bottom of my heart, thank you for your support!&lt;/p&gt;
&lt;p&gt;P.S: I&amp;rsquo;ll see you at &lt;a href=&#34;https://fosdem.org/2019/&#34;&gt;FOSDEM&lt;/a&gt;! Ask me for a sticker.&lt;/p&gt;
</description>
    </item><item>
      <title>Backups &amp; redundancy at sr.ht</title>
      <link>./2019/01/13/Backups-and-redundancy-at-sr.ht.html</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/01/13/Backups-and-redundancy-at-sr.ht.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sr.ht&#34;&gt;sr.ht&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is &lt;a href=&#34;https://git.sr.ht/~sircmpwn?search=sr.ht&#34;&gt;100% open source&lt;/a&gt; and I encourage
people to install it on their own infrastructure, especially if they&amp;rsquo;ll be
sending patches upstream. However, I am equally thrilled to host sr.ht for you
on the &amp;ldquo;official&amp;rdquo; instance, and most users find this useful because the
maintenance burden is non-trivial. Today I&amp;rsquo;ll give you an idea of what your
subscription fee pays for. In this first post on ops at sr.ht, I&amp;rsquo;ll talk about
backups and redundancy. In future posts, I&amp;rsquo;ll talk about security, high
availability, automation, and more.&lt;/p&gt;
&lt;p&gt;As sr.ht is still in the alpha phase, high availability has been on the
backburner. However, data integrity has always been of paramount importance to
me. The very earliest versions of sr.ht, from well before it was even trying to
be a software forge, made a point to never lose a single byte of user data.
Outages are okay - so long as when service is restored, everything is still
there. Over time I&amp;rsquo;m working to make outages a thing of the past, too, but let&amp;rsquo;s
start with backups.&lt;/p&gt;
&lt;p&gt;There are several ways that sr.ht stores data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Important data on the filesystem (e.g. bare git repositories)&lt;/li&gt;
&lt;li&gt;Important persistent data in PostgreSQL&lt;/li&gt;
&lt;li&gt;Unimportant ephemeral data in Redis (&amp;amp; caches)&lt;/li&gt;
&lt;li&gt;Miscellaneous filesystem storage, like the operating system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of this data is important and kept redundant (PostgreSQL, git repos), and
others are unimportant and is not redundant. For example, I store a rendered
Markdown cache for git.sr.ht in Redis. If the Redis cluster goes &lt;em&gt;poof&lt;/em&gt;, the
source Markdown is still available, so I don&amp;rsquo;t bother backing up Redis. Most
services run in a VM and I generally don&amp;rsquo;t store important data on these - the
hosts usually only have one hard drive with no backups and no redundancy. If the
host dies, I have to reprovision all of those VMs.&lt;/p&gt;
&lt;p&gt;Other data is more important. Consider PostgreSQL, which contains some of the
most important data for sr.ht. I have one master PostgreSQL server, a dedicated
server in the space I colocate in my home town of Philadelphia. I run sr.ht on
this server, but I also use it for a variety of other projects - I maintain many
myself, and I volunteer as a sysadmin for more still. This box (named Remilia)
has four hard drives configured in a ZRAID (ZFS). I buy these hard drives from a
variety of vendors, mostly Western Digital and Seagate, and from different
batches - reducing the likelihood that they&amp;rsquo;ll fail around the same time. ZFS is
well-known for it&amp;rsquo;s excellent design, featureset and for simply keeping your
data intact, and I don&amp;rsquo;t trust any other filesystem with important data. I take
ZFS snapshots every 15 minutes and retain them for 30 days. These snapshots are
important for correcting the &amp;ldquo;oh shit, I rm&amp;rsquo;d something important&amp;rdquo; mistakes -
you can mount them later and see what the filesystem looked like at the time
they were taken.&lt;/p&gt;
&lt;p&gt;On top of this, the PostgreSQL server is set up with two additional important
features: continuous archiving and streaming replication. Continuous archiving
has PostgreSQL writing each transaction to log files on disk, which represents a
re-playable history of the entire database, and allows you to restore the
database to any point in time. This helps with &amp;ldquo;oh shit, I dropped an important
table&amp;rdquo; mistakes. Streaming replication ships changes to an off-site standby
server, in this case set up in my second colocation in San Francisco (the main
backup box, which we&amp;rsquo;ll talk about more shortly). This takes a near real-time
backup of the database, and has the advantage of being able to quickly failover
to it as the primary database during maintenance and outages (more on this
during the upcoming high availability article). Soon I&amp;rsquo;ll be setting up a second
failover server as well, on-site.&lt;/p&gt;
&lt;p&gt;So there are multiple layers to this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ZFS &amp;amp; zraid prevents disk failure from causing data loss&lt;/li&gt;
&lt;li&gt;ZFS snapshots allows retrieving filesystem-level data from the past&lt;/li&gt;
&lt;li&gt;Continuous archiving allows retrieving database-level data from the past&lt;/li&gt;
&lt;li&gt;Streaming replication prevents datacenter existence failure from causing data
loss&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having multiple layers of data redundancy here protects sr.ht from a wide
variety of failure modes, and also protects each redundant system from itself -
if any of these systems fails, there&amp;rsquo;s another place to get this data from.&lt;/p&gt;
&lt;p&gt;The off-site backup in San Francisco (this box is called Konpaku) has a whopping
52T of storage in two ZFS pools, named &amp;ldquo;small&amp;rdquo; (4T) and &amp;ldquo;large&amp;rdquo; (48T). The
PostgreSQL standby server lives in the small pool, and &lt;a href=&#34;https://www.borgbackup.org/&#34;&gt;borg
backups&lt;/a&gt; live in the large pool. This has the same
ZFS snapshotting and retention policy as Remilia, and also has drives sourced
from a variety of vendors and batches. Borg is how important filesystem-level
data is backed up, for example git repositories on git.sr.ht. Borg is nice
enough to compress, encrypt, and deduplicate its backups for us, which I take
hourly with a cronjob on the machines which own that data. The retention policy
is hourly backups stored for 48 hours, daily backups for 2 weeks, and weekly
backups stored indefinitely.&lt;/p&gt;
&lt;p&gt;There are two other crucial steps in maintaining a working backup system:
monitoring and testing. The old wisdom is &amp;ldquo;you don&amp;rsquo;t have backups until you&amp;rsquo;ve
tested them&amp;rdquo;. The simplest monitoring comes from cron - when I provision a new
box, I make sure to set &lt;code&gt;MAILTO&lt;/code&gt;, make sure sendmail works, and set up a
deliberately failing cron entry to ensure I hear about it when it breaks. I also
set up zfs-zed to email me whenever ZFS encounters issues, which also has a test
mode you should use. For testing, I periodically provision private replicas of
sr.ht services from backups and make sure that they work as expected. PostgreSQL
replication is fairly new to my setup, but my intention is to switch the primary
and standby servers on every database upgrade for HA&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; purposes, which
conveniently also tests that each standby is up-to-date and still replicating.&lt;/p&gt;
&lt;p&gt;To many veteran sysadmins, a lot of this is basic stuff, but it took me a long
time to learn how all of this worked and establish a set of best practices for
myself. With the rise in popularity of managed ops like AWS and GCP, it seems
like ops &amp;amp; sysadmin roles are becoming less common. Some of us still love the
sound of a datacenter and the greater level of control you have over your
services, and as a bonus my users aren&amp;rsquo;t worrying about $bigcorp having access
to their data.&lt;/p&gt;
&lt;p&gt;The next ops thing on my todo list is high availability, which is still
in-progress on sr.ht. When it&amp;rsquo;s done, expect another blog post!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;sr.ht is a software project hosting website, with git hosting, ticket tracking, continuous integration, mailing lists, and more. &lt;a href=&#34;https://sr.ht&#34;&gt;Try it out!&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;High availability &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Patches welcome</title>
      <link>./2019/01/01/Patches-welcome.html</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>./2019/01/01/Patches-welcome.html</guid>
      <description>&lt;p&gt;Happy new year! This is always a weird &amp;ldquo;holiday&amp;rdquo; for me, since all of the fun
happened last night. Today is just kind of&amp;hellip; I guess a chance for everyone to
sober up before work tomorrow? It does tend to invite a sense of reflection and
is the ideal time to plan for the year ahead. One of my goals in 2019 is to
change more people&amp;rsquo;s thinking about the open source community and what it means
to count among their number.&lt;/p&gt;
&lt;p&gt;I think there&amp;rsquo;s a certain mode of thinking which lends itself to a more
productive free software community and a happier free software contributor. Free
software is not &lt;em&gt;theirs&lt;/em&gt; - it&amp;rsquo;s &lt;em&gt;ours&lt;/em&gt;. Linux doesn&amp;rsquo;t belong to Linus Torvalds.
Firefox doesn&amp;rsquo;t belong to Mozilla, vim doesn&amp;rsquo;t belong to Bram Moolenaar, and
ffmpeg doesn&amp;rsquo;t belong to Fabrice Bellard. These projects belong to everyone.
That includes you! In this way, we reap the benefits of open source, but we also
shoulder the responsibilities. I&amp;rsquo;m not referring to some abstract sense of
reponsibility, but the tangible ones, like fixing bugs or developing new
features.&lt;/p&gt;
&lt;p&gt;One of the great things about this community is how easy it is to release your
software under a FOSS license. You have no obligations to the software once it&amp;rsquo;s
released, except the obligations you hold yourself to (i.e. &amp;ldquo;if this software
makes my computer work, and I want to use my computer, I need to keep this
software in good working order&amp;rdquo;). It&amp;rsquo;s important for users to remember that
they&amp;rsquo;re not entitled to anything other than the rights laid out in the license,
too. You&amp;rsquo;re not entitled to bug fixes or new features - you&amp;rsquo;re &lt;em&gt;empowered&lt;/em&gt; by
free software to make those changes yourself.&lt;/p&gt;
&lt;p&gt;Sometimes, when working on sway, someone says something like &amp;ldquo;oh, it&amp;rsquo;s a bug in
libwayland&amp;rdquo;. My response is generally along the lines of &amp;ldquo;I guess you&amp;rsquo;re writing
a libwayland patch then!&amp;rdquo; The goal hasn&amp;rsquo;t changed, only the route. It&amp;rsquo;s no
different from being in the weeds and realizing you need to do some refactoring
first. If a problem in some FOSS project, be it a bug or a conspicuously missing
feature, is in the way of your goals, it&amp;rsquo;s &lt;em&gt;your problem&lt;/em&gt;.  A friend of mine
recently said of a missing feature in a project they have nothing to do with:
&amp;ldquo;adding FreeBSD 12 support is not yet done, but it&amp;rsquo;s on my todo list.&amp;rdquo; I thought
that perfectly embodied the right way to think about FOSS.&lt;/p&gt;
&lt;p&gt;When applying this philosophy, you may occasionally have to deal with an
absentee maintainer or a big old pile of legacy spaghetti code. Fork it! Rewrite
it! These are tough marbles but they&amp;rsquo;re the marbles you&amp;rsquo;ve gotta deal with. It&amp;rsquo;s
not as hard as it looks.&lt;/p&gt;
&lt;p&gt;The entire world of free software is your oyster. Nothing is off-limits: if it&amp;rsquo;s
FOSS, you can work on it. Try not to be intimidated by unknown programming
languages, unfamiliar codebases, or a lack of time. You&amp;rsquo;ll pick up the new
language sooner than you think&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, all projects are similar enough when you get
down to it, and small amounts of work done infrequently adds up over a long
enough time period.  FOSS doesn&amp;rsquo;t have to move quickly, it just has to keep
moving. The Dawn spacecraft accelerated at 0.003 cm/s&lt;sup&gt;2&lt;/sup&gt; and made it to
&lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/a/a1/PIA19547-Ceres-DwarfPlanet-Dawn-RC3-AnimationFrame25-20150504.jpg&#34;&gt;another world&lt;/a&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Especially if you have a reason to learn it, like this bug you need to fix &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Actually, it visited 3. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Anatomy of a shell</title>
      <link>./2018/12/28/Anatomy-of-a-shell.html</link>
      <pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/12/28/Anatomy-of-a-shell.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been contributing where I can to Simon Ser&amp;rsquo;s &lt;a href=&#34;https://git.sr.ht/~emersion/mrsh&#34;&gt;mrsh&lt;/a&gt; project, a
work-in-progress strictly POSIX shell implementation. I worked on some small
mrsh features during my holiday travels and it&amp;rsquo;s in the forefront of my mind, so
I&amp;rsquo;d like to share some of its design details with you.&lt;/p&gt;
&lt;p&gt;There are two main components to a shell: parsing and execution. mrsh uses a
simple &lt;a href=&#34;https://en.wikipedia.org/wiki/Recursive_descent_parser&#34;&gt;recursive descent parser&lt;/a&gt; to generate an AST (Abstract Syntax
Tree, or an in-memory model of the structure of the parsed source). This design
was chosen to simplify the code and avoid dependencies like flex/bison, and is a
good choice given that performance isn&amp;rsquo;t critical for parsing shell scripts.
Here&amp;rsquo;s an example of the input source and output AST:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;say_hello&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hello &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;who&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;whoami&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
say_hello &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$who&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This script is parsed into this AST (this is the output of &lt;code&gt;mrsh -n test.sh&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;program
program
└─command_list ─ pipeline
  └─function_definition say_hello ─ brace_group
    └─command_list ─ pipeline
      └─simple_command
        ├─name ─ word_string [3:2 → 3:6] echo
        └─argument 1 ─ word_list (quoted)
          ├─word_string [3:8 → 3:14] hello
          ├─word_parameter
          │ └─name 1
          └─word_string [3:16 → 3:17] !
program
program
└─command_list ─ pipeline
  └─simple_command
    └─assignment
      ├─name who
      └─value ─ word_command ─ program
        └─command_list ─ pipeline
          └─simple_command
            └─name ─ word_string [6:7 → 6:13] whoami
program
└─command_list ─ pipeline
  └─simple_command
    ├─name ─ word_string [7:1 → 7:10] say_hello
    └─argument 1 ─ word_list (quoted)
      └─word_parameter
        └─name who
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Most of these names come directly from the &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html&#34;&gt;POSIX shell specification&lt;/a&gt;.
The parser and AST is made available as a standalone public interface of
libmrsh, which can be used for a variety of use-cases like syntax-aware text
editors, syntax highlighting (see &lt;a href=&#34;https://git.sr.ht/~emersion/mrsh/tree/master/highlight.c&#34;&gt;&lt;code&gt;highlight.c&lt;/code&gt;&lt;/a&gt;), linters, etc. The most
important use-case is, of course, task planning and execution.&lt;/p&gt;
&lt;p&gt;Most of these AST nodes becomes a &lt;em&gt;task&lt;/em&gt;. A task defines an implementation of
the following interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;task_interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * Request a status update from the task. This starts or continues it.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * `poll` must return without blocking with the current task&amp;#39;s status:
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * - TASK_STATUS_WAIT in case the task is pending
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * - TASK_STATUS_ERROR in case a fatal error occured
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * - A positive (or null) code in case the task finished
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * `poll` will be called over and over until the task goes out of the
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * TASK_STATUS_WAIT state. Once the task is no longer in progress, the
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 * returned state is cached and `poll` won&amp;#39;t be called anymore.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;	 */&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most of the time the task will just do its thing. Many tasks will have sub-tasks
as well, such as a command list executing a list of commands, or each branch of
an if statement, which it can defer to with &lt;code&gt;task_poll&lt;/code&gt;. Many tasks will wait on
an external process, in which case it can return TASK_STATUS_WAIT to have the
process &lt;code&gt;wait&lt;/code&gt;ed on. Feel free to browse the &lt;a href=&#34;https://git.sr.ht/~emersion/mrsh/tree/master/shell/task&#34;&gt;full list of tasks&lt;/a&gt; to get
an idea.&lt;/p&gt;
&lt;p&gt;One concern more specific to POSIX shells is built-in commands. Some commands
have to be built-in because they manipulate the shell&amp;rsquo;s state, such as &lt;code&gt;.&lt;/code&gt; and
&lt;code&gt;cd&lt;/code&gt;. Others, like &lt;code&gt;true&lt;/code&gt; &amp;amp; &lt;code&gt;false&lt;/code&gt;, are there for performance reasons, since
they&amp;rsquo;re simple and easily implemented internally. POSIX specifies &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_14&#34;&gt;a list of
special builtins&lt;/a&gt; which are necessary to implement in the shell
itself. There&amp;rsquo;s &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_01_01&#34;&gt;a second list&lt;/a&gt; that must be present for the shell
environment to be considered POSIX compatible (plus some reserved names like
&lt;code&gt;local&lt;/code&gt; and &lt;code&gt;pushd&lt;/code&gt; that invoke undefined behavior - mrsh aborts on these).&lt;/p&gt;
&lt;p&gt;Here are some links to more interesting parts of the code so you can explore on
your own:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~emersion/mrsh/tree/master/shell/redir.c&#34;&gt;Redirection&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://git.sr.ht/~emersion/mrsh/tree/master/shell/task/pipeline.c&#34;&gt;pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~emersion/mrsh/tree/master/shell/task/function_definition.c&#34;&gt;Function definition&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://git.sr.ht/~emersion/mrsh/tree/master/shell/task/command_function.c&#34;&gt;execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~emersion/mrsh/tree/master/builtin/dot.c&#34;&gt;The . builtin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~emersion/mrsh/tree/master/main.c&#34;&gt;main.c and the REPL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I might write more articles in the future diving into specific concepts, feel
free to shoot me an email if you have suggestions. Shoutout to Simon for
building such a cool project! I&amp;rsquo;m looking forward to contributing more until we
have a really nice strictly POSIX shell.&lt;/p&gt;
</description>
    </item><item>
      <title>Porting Alpine Linux to RISC-V</title>
      <link>./2018/12/20/Porting-Alpine-Linux-to-RISC-V.html</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/12/20/Porting-Alpine-Linux-to-RISC-V.html</guid>
      <description>&lt;p&gt;I recently received my &lt;a href=&#34;https://www.sifive.com/boards/hifive-unleashed&#34;&gt;HiFive Unleashed&lt;/a&gt;, after several excruciating
months of waiting, and it&amp;rsquo;s incredibly cool. For those unaware, the HiFive
Unleashed is the first consumer-facing Linux-capable &lt;a href=&#34;https://en.wikipedia.org/wiki/RISC-V&#34;&gt;RISC-V&lt;/a&gt; hardware.
For anyone who&amp;rsquo;s still lost, RISC-V is an &lt;a href=&#34;https://github.com/riscv&#34;&gt;open&lt;/a&gt;,
royalty-free &lt;a href=&#34;https://en.wikipedia.org/wiki/Instruction_set_architecture&#34;&gt;instruction set
architecture&lt;/a&gt;, and
the HiFive is an &lt;a href=&#34;https://github.com/sifive&#34;&gt;open&lt;/a&gt; CPU implementing it. And here
it is on my dining room table:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/JMao.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This board is &lt;em&gt;cool&lt;/em&gt;. I&amp;rsquo;m working on making this hardware available to
&lt;a href=&#34;https://meta.sr.ht&#34;&gt;builds.sr.ht&lt;/a&gt; users in the next few months, where I intend to use it to
automate the remainder of the Alpine Linux port and make it available to any
other operating systems (including non-Linux) and userspace software which are
interested in working on a RISC-V port. I&amp;rsquo;m fairly certain that this will be the
first time hardware-backed RISC-V cycles are being made available to the public.&lt;/p&gt;
&lt;p&gt;There are two phases to porting an operating system to a new architecture:
bootstrapping and, uh, porting. For lack of a better term. As part of
bootstrapping, you need to obtain a cross-compiler, port libc, and cross-compile
the basics. Bootstrapping ends once the system is &lt;em&gt;self-hosting&lt;/em&gt;: able to
compile itself. The &amp;ldquo;porting&amp;rdquo; process involves compiling all of the packages
available for your operating system, which can take a long time and is generally
automated.&lt;/p&gt;
&lt;p&gt;The first order of business is the cross-compiler. RISC-V support landed in
binutils 2.28 and gcc 7.1 several releases ago, so no need to worry about adding
a RISC-V target to our compiler. Building both with
&lt;code&gt;--target=riscv64-linux-musl&lt;/code&gt; is sufficient to complete this step. The other
major piece is the C standard library, or libc. Unlike the C compiler, this step
required some extra effort on my part - the RISC-V port of musl libc, which
Alpine Linux is based on, is a work-in-progress and has not yet been upstreamed.&lt;/p&gt;
&lt;p&gt;There does exist &lt;a href=&#34;https://github.com/riscv/riscv-musl&#34;&gt;a patch&lt;/a&gt; for RISC-V support, though it had never
been tested at a scale like this. Accordingly, I ran into several bugs, for
which I wrote several patches (&lt;a href=&#34;https://github.com/riscv/riscv-musl/pull/2&#34;&gt;1&lt;/a&gt; &lt;a href=&#34;https://github.com/riscv/riscv-musl/pull/3&#34;&gt;2&lt;/a&gt; &lt;a href=&#34;https://github.com/riscv/riscv-musl/pull/4&#34;&gt;3&lt;/a&gt;). Having a working distro
based on the RISC-V port makes a much more compelling argument for the maturity
of the port, and for its inclusion upstream, so I&amp;rsquo;m happy to have caught these
issues. Until then, I added the port and my patches to the Alpine Linux musl
package manually.&lt;/p&gt;
&lt;p&gt;A C compiler and libc implementation open the floodgates to porting a huge
volume of software to your platform. The next step is to identify and port the
essential packages for a self-hosting system.  For this, Alpine has a great
&lt;a href=&#34;https://git.alpinelinux.org/cgit/aports/tree/scripts/bootstrap.sh&#34;&gt;bootstrapping script&lt;/a&gt; which handles preparing the cross-compiler
and building the base system. Many (if not most) of these packages required
patching, tweaks, and manual intervention - this isn&amp;rsquo;t a turnkey solution - but
it is an incredibly useful tool. The most important packages at this step are
the native toolchain&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, the package manager itself, and various other useful
things like tar, patch, openssl, and so on.&lt;/p&gt;
&lt;p&gt;Once the essential packages are built and the system can compile itself, the
long porting process begins. It&amp;rsquo;s generally wise to drop the cross-compiler here
and start doing native builds, if your hardware is fast enough. This is a
tradeoff, because the RISC-V system is somewhat slower than my x86_64 bootstrap
machine - but many packages require lots of manual tweaks and patching to get
cross-compiling working. The time saved by not worrying about this makes up for
the slower build times&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;There are thousands of packages, so the next step for me (and anyone else
working on a port) is to automate the remainder of the process. For me, an
intermediate step is integrating this with builds.sr.ht to organize my own work
and to make cycles available to other people interested in RISC-V. Not all
packages are going to be ported for free - but many will! Once you unlock the
programming languages - C, Python, Perl, Ruby&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, etc - most open source
software is pretty portable across architectures. One of my core goals with
sr.ht is to encourage portable software to proliferate!&lt;/p&gt;
&lt;p&gt;If any readers have their own RISC-V hardware, or want to try it with qemu, I
have a RISC-V Alpine Linux repository here&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. Something like this will install
it to /mnt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;apk add &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -X https://mirror.sr.ht/alpine/main/ &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --allow-untrusted &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --arch&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;riscv64 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --root&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/mnt &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    alpine-base alpine-sdk vim chrony
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run &lt;code&gt;/bin/busybox --install&lt;/code&gt; and &lt;code&gt;apk fix&lt;/code&gt; on first boot. This is still a work
in progress, so configuring the rest is an exercise left to the reader until I
can clean up the process and make a nice install script. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Closing note: big thanks to the help from the community in #riscv on Freenode,
and to the hard work of the Debian and Fedora teams paving a lot of the way and
getting patches out there for lots of software! I still got to have all the fun
working on musl so I wasn&amp;rsquo;t entirely on the beaten path :)&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Meaning a compiler which both &lt;em&gt;targets&lt;/em&gt; RISC-V and &lt;em&gt;runs&lt;/em&gt; on RISC-V. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I was actually really impressed with the speed of the HiFive Unleashed. The main bottleneck is the mmcblk driver - once you get files in the kernel cache things are quite pleasant and snappy. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I have all four of these now! &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://mirror.sr.ht/alpine/main/&#34;&gt;main&lt;/a&gt;, &lt;a href=&#34;https://mirror.sr.ht/alpine/community/&#34;&gt;community&lt;/a&gt;, &lt;a href=&#34;https://mirror.sr.ht/alpine/testing/&#34;&gt;testing&lt;/a&gt; &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>How to abandon a FLOSS project</title>
      <link>./2018/12/04/How-to-abandon-a-FLOSS-project.html</link>
      <pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/12/04/How-to-abandon-a-FLOSS-project.html</guid>
      <description>&lt;p&gt;It&amp;rsquo;s no secret that maintaining free and open source software is often
a burdensome and thankless job. I empathise with maintainers who lost interest
in a project, became demotivated by the endless demands of users, or are no
longer blessed with enough free time. Whatever the reason, FLOSS work is
volunteer work, and you&amp;rsquo;re free to stop volunteering at any time.&lt;/p&gt;
&lt;p&gt;In my opinion, there are two good ways to abandon a project: the &lt;em&gt;fork it&lt;/em&gt;
option and the &lt;em&gt;hand-off&lt;/em&gt; option. The former is faster and easier, and you can
pick this if you want to wash your hands of the project ASAP, but has a larger
effect on the community. The latter is not always possible, requires more work
on your part, and takes longer, but it has a minimal impact on the community.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s talk about the easy way first. Start by adding a notice to your README
that your software is now unmaintained. If you have the patience, give a few
weeks notice before you really stop paying attention to it. Inform interested
parties that they should consider forking the software and maintaining it
themselves under another name. Once a fork gains traction, update the README
again to direct would-be users to the fork. If no one forks it, you could
consider directing users to similar alternatives to your software.&lt;/p&gt;
&lt;p&gt;This approach allows you to quickly absolve yourself of responsibility. Your
software is no worse than it was yesterday, which allows users a grace period to
collect themselves and start up a fork. If you revisit your work later, you can
also become a contributor to the fork yourself, which removes the stress of
being a maintainer while still providing value to the project. Or, you can just
wash your hands of it entirely and move on to bigger and better things. This
&amp;ldquo;fork it&amp;rdquo; approach is safer than giving control of your project to passerby,
because it requires your users to acknowledge the transfer of power, instead of
being surprised by a new maintainer in a trusted package.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;fork it&amp;rdquo; approach is well suited when the maintainer wants out ASAP, or for
smaller projects with little activity. But, for active projects with a patient
maintainer, the hand-off approach is less disruptive. Start talking with some of
your major contributors about &lt;a href=&#34;./2018/06/01/How-I-maintain-FOSS-projects.html&#34;&gt;increasing their involvement&lt;/a&gt;
in the administrative side of the projects. Mentor them on doing code reviews,
ticket triage, sysadmin stuff, marketing - all the stuff you have to do - and
gradually share these responsibilities with them.  These people eventually
become productive co-maintainers, and once established you can step away from
the project with little fanfare.&lt;/p&gt;
&lt;p&gt;Taking this approach can also help you find healthier ways to be involved in
your own project. This can allow you to focus on the work you enjoy and spend
less time on the work you don&amp;rsquo;t enjoy, which might even restore your enthusiasm
for the project outright! This is also a good idea even if you aren&amp;rsquo;t planning
on stepping down - it encourages your contributors to take personal stake in the
project, which makes them more productive and engaged. This also makes your
community more resilient to &lt;a href=&#34;https://tvtropes.org/pmwiki/pmwiki.php/Main/AuthorExistenceFailure&#34;&gt;author existence failure&lt;/a&gt;, so
that when circumstance forces you to step down the project continues to be
healthy.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to always be happy in your work, and especially in your volunteer
work. If it&amp;rsquo;s not working, then change it. For me, this happens in different
ways. I&amp;rsquo;ve abandoned projects outright and sent users off to make their own fork
before.  I&amp;rsquo;ve also handed projects over to their major contributors. In some
projects I&amp;rsquo;ve appointed new maintainers and scaled back my role to a mere
contributor, and in other projects I&amp;rsquo;ve moved towards roles in marketing,
outreach, management, and stepped away from development. There&amp;rsquo;s no shame in
any of these changes - you still deserve pride in your accomplishments, and
seeking constructive solutions to burnout would do your community a great
service.&lt;/p&gt;
</description>
    </item><item>
      <title>sr.ht, the hacker&#39;s forge, now open for public alpha</title>
      <link>./2018/11/15/sr.ht-general-availability.html</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/11/15/sr.ht-general-availability.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;m happy to announce today that I&amp;rsquo;m opening &lt;a href=&#34;https://sr.ht&#34;&gt;sr.ht&lt;/a&gt; (pronounced
&amp;ldquo;sir hat&amp;rdquo;, or any other way you want) to the general public for the remainder of
the alpha period. Though it&amp;rsquo;s missing some of the features which will be
available when it&amp;rsquo;s completed, sr.ht today represents a very capable software
forge which is already serving the needs of many projects in the free &amp;amp; open
source software community. If you&amp;rsquo;re familiar with the project and ready to
register your account, you can head straight to &lt;a href=&#34;https://sr.ht&#34;&gt;the sign up
page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For those who are new, let me explain what makes sr.ht special. It provides many
of the trimmings you&amp;rsquo;re used to from sites like GitHub, Gitlab, BitBucket, and
so on, including git repository hosting, bug tracking software, CI, wikis, and
so on. However, the sr.ht model is different from these projects - where many
forges attempt to replicate GitHub&amp;rsquo;s success with a thinly veiled clone of the
GitHub UI and workflow, sr.ht is fundamentally different in its approach.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The sr.ht platform excites me more than any project in recent memory. It’s a
fresh concept, not a Github wannabe like Gitlab. I always thought that if
something is going to replace Github it would have to be a paradigm change, and
I think that’s what we’re seeing here. Drew’s project blends the wisdom of the
kernel hackers with a tasteful web interface.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div style=&#34;margin-top: -1rem; margin-bottom: 1rem&#34;&gt;&lt;small&gt;&amp;mdash;&lt;a href=&#34;https://lobste.rs/s/h1udkf/git_is_already_federated_decentralized#c_smnkic&#34;&gt;begriffs on lobste.rs&lt;/a&gt;&lt;/small&gt;&lt;/div&gt;
&lt;p&gt;The 500 foot view is that sr.ht is a &lt;a href=&#34;https://git.sr.ht/~sircmpwn/?search=sr.ht&#34;&gt;100% free and open
source&lt;/a&gt; software forge, with a hosted
version of the services running &lt;em&gt;at&lt;/em&gt; &lt;a href=&#34;https://sr.ht&#34;&gt;sr.ht&lt;/a&gt; for your
convenience. Unlike GitHub, which is almost entirely closed source, and Gitlab,
which is mostly open source but with a proprietary premium offering, all of
sr.ht is completely open source, with a copyleft license&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. You&amp;rsquo;re welcome
to install it on your own hardware, and &lt;a href=&#34;https://man.sr.ht/installation.md&#34;&gt;detailed
instructions&lt;/a&gt; are available for those who
want to do so. You can also send patches upstream, which are then integrated
into the hosted version.&lt;/p&gt;
&lt;p&gt;sr.ht is special because it&amp;rsquo;s extremely modular and flexible, designed with
interoperability with the rest of the ecosystem in mind. On top of that, sr.ht
is one of the most lightweight websites on the internet, with the average page
weighing less than 10 KiB, with &lt;strong&gt;no tracking&lt;/strong&gt; and &lt;strong&gt;no JavaScript&lt;/strong&gt;. Each
component - git hosting, continuous integration, etc - is a standalone piece of
software that integrates deeply with the rest of sr.ht &lt;em&gt;and&lt;/em&gt; with the rest of
the ecosystem outside of sr.ht. For example, you can use builds.sr.ht to compile
your GitHub pull requests, or you can keep your repos on git.sr.ht and host
everything in one place. Unlike GitHub, which favors its own in-house pull
request workflow&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, sr.ht embraces and improves upon the email-based
workflow favored by git itself, along with many of the more hacker-oriented
projects around the net. I&amp;rsquo;ve put a lot of work into making this powerful
workflow more &lt;a href=&#34;https://man.sr.ht/git.sr.ht/send-email.md&#34;&gt;accessible and
comprehensible&lt;/a&gt; to the average
hacker.&lt;/p&gt;
&lt;p&gt;The flagship product from sr.ht is its continuous integration platform,
builds.sr.ht, which is easily the most capable continuous integration system
available today. It&amp;rsquo;s so powerful that I&amp;rsquo;ve been working with multiple Linux
distributions on bringing them onboard because it&amp;rsquo;s the only platform which can
scale to the automation needs of an entire Linux distribution. It&amp;rsquo;s so powerful
that I&amp;rsquo;ve been working with maintainers of &lt;em&gt;non-Linux&lt;/em&gt; operating systems, from
BSD to even Hurd, because it&amp;rsquo;s the only platform which can even consider
supporting their needs. Smaller users are loving it, too, many of whom are
jumping ship from Travis and Jenkins in favor of the simplicity and power of
builds.sr.ht.&lt;/p&gt;
&lt;p&gt;On builds.sr.ht, simple YAML-based &lt;a href=&#34;https://man.sr.ht/builds.sr.ht/#build-manifests&#34;&gt;build
manifests&lt;/a&gt;, similar to those
you see on other platforms, are used to describe your builds. You can submit
these through the web, the API, or various integrations.  Within seconds, a
virtual machine is booted with KVM, your build environment is sent to it, and
your scripts start running. A diverse set of base images are supported on a
variety of architectures, soon to include the first hardware-backed RISC-V
cycles available to the general public. builds.sr.ht is used to automate
everything from the deployment of this Jekyll-based blog, testing GitHub pull
requests for &lt;a href=&#34;https://swaywm.org&#34;&gt;sway&lt;/a&gt;, building and testing packages for
&lt;a href=&#34;https://postmarketos.org/&#34;&gt;postmarketOS&lt;/a&gt;, and deploying complex applications
like builds.sr.ht itself. Our base images &lt;a href=&#34;https://builds.sr.ht/~sircmpwn/alpine/edge&#34;&gt;build, test, and deploy
themselves&lt;/a&gt; every day.&lt;/p&gt;
&lt;p&gt;The lists.sr.ht service is another important part of sr.ht, and a large part of
how sr.ht embraces the model used by major projects like Linux, Postgresql, git
itself, and many more. lists.sr.ht finally modernizes mailing lists, with a
powerful and elegant web interface for hacking on and talking about your
projects. Take a look at the &lt;a href=&#34;https://lists.sr.ht/~sircmpwn/sr.ht-dev&#34;&gt;sr.ht-dev&lt;/a&gt; list to see patches
developed for sr.ht itself. Another good read is the &lt;a href=&#34;https://lists.sr.ht/~emersion/mrsh-dev&#34;&gt;mrsh-dev&lt;/a&gt; list,
used for development on the &lt;a href=&#34;https://git.sr.ht/~emersion/mrsh&#34;&gt;mrsh&lt;/a&gt; project, or my own &lt;a href=&#34;https://lists.sr.ht/~sircmpwn/public-inbox&#34;&gt;public
inbox&lt;/a&gt;, where I take comments for this blog and grab-bag
discussions for my smaller projects.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve just scratched the surface, and there&amp;rsquo;s much more for you to discover. You
could look at my &lt;a href=&#34;https://git.sr.ht/~sircmpwn/scdoc&#34;&gt;scdoc&lt;/a&gt; project to get an
idea of how the git browser looks and feels. You could &lt;a href=&#34;https://todo.sr.ht/~sircmpwn&#34;&gt;browse tickets on my
todo.sr.ht profile&lt;/a&gt; to get a feel for the bug
tracking software. Or you could check out the &lt;a href=&#34;https://man.sr.ht&#34;&gt;detailed
manual&lt;/a&gt; on sr.ht&amp;rsquo;s git-powered wiki service. You could also
just &lt;a href=&#34;https://sr.ht&#34;&gt;sign up for an account&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;sr.ht isn&amp;rsquo;t complete, but it&amp;rsquo;s maturing fast and I think you&amp;rsquo;ll love it. Give it
a try, and I&amp;rsquo;m only &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;an email away&lt;/a&gt; to receive your
feedback.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Some components use the 3-clause BSD license. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A model that many have replicated in their own GitHub alternatives. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>It&#39;s not okay to pretend your software is open source</title>
      <link>./2018/10/30/Its-not-okay-to-pretend-youre-open-source.html</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/10/30/Its-not-okay-to-pretend-youre-open-source.html</guid>
      <description>&lt;p&gt;Unfortunately, I find myself writing about the Commons Clause again. For those
not in the know, the Commons Clause is an addendum designed to be added to free
software licenses. The restrictions it imposes (you cannot sell the software)
makes the resulting franken-license nonfree. I&amp;rsquo;m not going to link to the
project which brought this subject back into the discussion - they don&amp;rsquo;t deserve
the referral - but the continued proliferation of software using the Commons
Clause gives me reason to speak out against it some more.&lt;/p&gt;
&lt;p&gt;One of my largest complaints with the Commons Clause is that it hijacks
language used by open source projects to proliferate nonfree software, and
encourages software using it to do the same. Instead of being a new software
license, it tries to stick itself onto other respected licences - often the
Apache 2.0 license. The name, &amp;ldquo;Commons Clause&amp;rdquo;, is also disingenuous, hijacking
language used by respected entities like Creative Commons. In truth, the Commons
Clause serves to remove software from the commons&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Combining these
problems gives you language like &amp;ldquo;Apache+Commons Clause&amp;rdquo;, which is easily
confused with [Apache Commons][apache-commons].&lt;/p&gt;
&lt;p&gt;Projects using the Commons Clause have also been known to describe their license
as &amp;ldquo;permissive&amp;rdquo; or &amp;ldquo;open&amp;rdquo;, some even calling their software &amp;ldquo;open source&amp;rdquo;. This
is dishonest. FOSS refers to &amp;ldquo;free and open source software&amp;rdquo;. The former, free
software, is defined by the &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.en.html&#34;&gt;free software definition&lt;/a&gt;, published by
&lt;a href=&#34;https://gnu.org&#34;&gt;GNU&lt;/a&gt;. The latter, open source software, is defined by the &lt;a href=&#34;https://opensource.org/osd&#34;&gt;open source
definition&lt;/a&gt;, published by the &lt;a href=&#34;https://opensource.org&#34;&gt;OSI&lt;/a&gt;. Their definitions are very
similar, and nearly all FOSS licenses qualify under both definitions. These are
unambiguous, basic criteria which protects developers, contributors, and users
of free and open source software. These definitions are so basic, important and
well-respected that dismissing them is akin to dismissing climate change.&lt;/p&gt;
&lt;p&gt;Claiming your software is open source, permissively licensed, free software,
etc, when you use the Commons Clause, is &lt;em&gt;lying&lt;/em&gt;. These lies are pervasive among
users of the Commons Clause. The page listing &lt;a href=&#34;https://redis.io/modules&#34;&gt;Redis
Modules&lt;/a&gt;, for example, states that only software under
an OSI-approved license is listed. Six of the modules there are using nonfree
licenses, and antirez seems content to &lt;a href=&#34;https://github.com/antirez/redis-doc/pull/984&#34;&gt;ignore the problem&lt;/a&gt; until &lt;a href=&#34;https://github.com/RedisLabsModules/RediSearch/issues/518&#34;&gt;we
forget about it&lt;/a&gt;. They&amp;rsquo;re in for a long wait - we&amp;rsquo;re not going to
forget about &lt;strong&gt;shady, dishonest, and unethical companies like Redis Labs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t use nonfree software&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, but I&amp;rsquo;m not going to sit here and tell you
not to make nonfree software. You have every right to license your work in any
way you choose. However, if you choose not to use a FOSS license, you need to
own up to it. Don&amp;rsquo;t pretend that your software is something it&amp;rsquo;s not. There are
many benefits to being a member of the free software community, but you are not
entitled to them if your software isn&amp;rsquo;t. This behavior has to stop.&lt;/p&gt;
&lt;p&gt;Finally, I have some praise to offer. &lt;a href=&#34;https://dgraph.io/&#34;&gt;Dgraph&lt;/a&gt; was briefly
licensed under Apache plus the Commons Clause, and had the sort of misleading
and false information this article decries on their marketing website, docs, and
so on. However, they&amp;rsquo;ve rolled it back, and Dgraph is now using the Apache 2.0
license with no modifications.  Thank you!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This is why I often refer to it as the &amp;ldquo;Anti-Commons Clause&amp;rdquo;, though I felt that was a bit too Stallman-esque for this article.
[apache-commons]: &lt;a href=&#34;http://commons.apache.org/&#34;&gt;http://commons.apache.org/&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Free as in freedom, not as in free beer. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>How does virtual memory work?</title>
      <link>./2018/10/29/How-does-virtual-memory-work.html</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/10/29/How-does-virtual-memory-work.html</guid>
      <description>&lt;p&gt;Virtual memory is an essential part of your computer, and has been for several
decades. In my &lt;a href=&#34;./2016/05/28/Understanding-pointers.html&#34;&gt;earlier article on pointers&lt;/a&gt;, I compared memory to a
giant array of octets (bytes), and explained some of the abstractions we make
on top of that. In actual fact, memory is more complicated than a flat array of
bytes, and in this article I&amp;rsquo;ll explain how.&lt;/p&gt;
&lt;p&gt;An astute reader of my earlier article may have considered that pointers on,
say, an x86_64 system, are 64 bits long&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. With this, we can address up to
18,446,744,073,709,551,616 bytes (16 exbibytes&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;) of memory. I only have 16
GiB of RAM on this computer, so what gives? What&amp;rsquo;s the rest of the address space
for? The answer: all kinds of things! Only a small subset of your address space
is mapped to physical RAM. A system on your computer called the MMU, or Memory
Management Unit, is responsible for managing the abstraction that enables this
and other uses of your address space. This abstraction is called virtual memory.&lt;/p&gt;
&lt;p&gt;The kernel interacts directly with the MMU, and provides syscalls like
[mmap(2)][mmap] for userspace programs to do the same. Virtual memory is
typically allocated a page at a time, and given a purpose on allocation, along
with various flags (documented on the mmap page). When you call &lt;code&gt;malloc&lt;/code&gt;, libc
uses the mmap syscall to allocate pages of heap, then assigns a subset of that
to the memory you asked for. However, since many programs can run concurrently
on your system and may request pages of RAM at any time, your physical RAM can
get fragmented.  Each time the kernel hits a context switch&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, it swaps out
the page table for the next process.&lt;/p&gt;
&lt;p&gt;This is used in this way to give each process its own clean address space and to
provide memory isolation between processes, preventing them from accessing each
other&amp;rsquo;s memory. Sometimes, however, in the case of shared memory, the same
physical memory is deliberately shared with multiple processes.  Many pages can
also be any combination readable, writable, or executable - the latter meaning
that you could jump to it and execute it as native code.  Your compiled program
is a file, after all - mmap some executable pages, load it into memory, jump to
it, and huzzah: you&amp;rsquo;re running your program&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. This is how JITs, dynamic
recompiling emulators, etc, do their job. A common way to reduce risk here,
popular on *BSD, is enforcing W^X (writable XOR executable), so that a page can
be either writable or executable, but never both.&lt;/p&gt;
&lt;p&gt;Sometimes all of the memory you think you have isn&amp;rsquo;t actually there, too. If you
blow your RAM budget across your whole system, swap gets involved. This is when
pages of RAM are &amp;ldquo;swapped&amp;rdquo; to disk - as soon as your program tries to access it
again, a page fault occurs, transferring control to the kernel. The kernel
restores from swap, damning some other poor process to the fate, and returns
control to your program.&lt;/p&gt;
&lt;p&gt;Another very common use for virtual memory is for memory mapped I/O. This can
be, for example, mapping a file to memory so you can efficiently read and write
to disk. You can map other sorts of hardware, too, such as video memory. On 8086
(which is what your computer probably pretends to be when it initially
boots&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;), a simple 96x64 cell text buffer is available at address &lt;code&gt;0xB8000&lt;/code&gt;.
On my TI-Nspire CX calculator, I can read the current time from the real-time
clock at &lt;code&gt;0x90090000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In summary, MMUs arrived almost immediately on the computing scene, and have
become increasingly sophisticated ever since. Virtual memory is a powerful tool
which grants userspace programmers elegant, convenient, and efficient access to
the underlying hardware.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Fun fact: most x86_64 implementations actually use 48 bit addresses internally, for a maximum theoretical limit of 256 TiB of RAM. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I had to look that SI prefix up. This number is 2&lt;sup&gt;64&lt;/sup&gt;, by the way. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This means to switch between which process/thread is currently running on a single CPU. I&amp;rsquo;ll write an article about this sometime.
[mmap]: &lt;a href=&#34;http://man7.org/linux/man-pages/man2/mmap.2.html&#34;&gt;http://man7.org/linux/man-pages/man2/mmap.2.html&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;There are actually at least a dozen other steps involved in this process. I&amp;rsquo;ll write an article about loaders at some point, too. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;You can make it stop pretending to do this with &lt;a href=&#34;https://wiki.osdev.org/Protected_Mode&#34;&gt;an annoying complicated sequence of esoteric machine code instructions&lt;/a&gt;. An even more annoying sequence is required to &lt;a href=&#34;https://wiki.osdev.org/Setting_Up_Long_Mode&#34;&gt;enter 64-bit mode&lt;/a&gt;. It gets even better if you want to set up &lt;a href=&#34;https://wiki.osdev.org/Symmetric_Multiprocessing&#34;&gt;multiple CPU cores&lt;/a&gt;! &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Sway 1.0-beta.1 release highlights</title>
      <link>./2018/10/20/Sway-1.0-highlights.html</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/10/20/Sway-1.0-highlights.html</guid>
      <description>&lt;p&gt;1,173 days ago, I wrote sway&amp;rsquo;s &lt;a href=&#34;https://github.com/swaywm/sway/commit/6a33e1e3cddac31b762e4376e29c03ccf8f92107&#34;&gt;initial commit&lt;/a&gt;, and 8,269 commits
followed&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, written by hundreds of contributors. What started as a side
project became the most fully featured and stable Wayland desktop available, and
drove the development of what has become the dominant solution for building
Wayland compositors - &lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt;, now the
basis of 10 Wayland compositors.&lt;/p&gt;
&lt;p&gt;Sway 1.0-beta.1 was just released and is 100% compatible with the &lt;a href=&#34;https://i3wm.org/&#34;&gt;i3 X11 window
manager&lt;/a&gt;. It&amp;rsquo;s faster, prettier, sips your battery, and
supports &lt;a href=&#34;https://wayland.freedesktop.org/&#34;&gt;Wayland&lt;/a&gt; clients. When we started, I
honestly didn&amp;rsquo;t think we&amp;rsquo;d get here. When I decided we&amp;rsquo;d rewrite our internals
and build wlroots over a year ago, I didn&amp;rsquo;t think we&amp;rsquo;d get here. It&amp;rsquo;s only
thanks to an amazing team of talented contributors that we did. So what can
users expect from this release? The difference between sway 0.15 and sway 1.0 is
like night and day. The annoying bugs which plauged sway 0.15 are gone, and in
their place is a rock solid Wayland compositor with loads of features you&amp;rsquo;ve
been asking after for years. The &lt;a href=&#34;https://github.com/swaywm/sway/releases/tag/1.0-beta.1&#34;&gt;official release
notes&lt;/a&gt; are a bit thick,
so let me give you a guided tour.&lt;/p&gt;
&lt;h2 id=&#34;new-output-features&#34;&gt;New output features&lt;/h2&gt;
&lt;p&gt;Outputs, or displays, grew a lot of cool features in sway 1.0. As a reminder,
you can get the names of your outputs for use in your config file by using
&lt;code&gt;swaymsg -t get_outputs&lt;/code&gt;. What can you do with them?&lt;/p&gt;
&lt;p&gt;To rotate your display 90 degrees, use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output DP-1 transform 90
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To enable our improved HiDPI support&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output DP-1 scale 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or to enable fractional scaling (see man page for warnings about this):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output DP-1 scale 1.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also now run sway on multiple GPUs. It will pick a primary GPU
automatically, but you can override this by specifying a list of card names at
startup with &lt;code&gt;WLR_DRM_DEVICES=card0:card1:...&lt;/code&gt;. The first one will do all of the
rendering and any displays connected to subsequent cards will have their buffers
copied over.&lt;/p&gt;
&lt;p&gt;Other cool features include support for daisy-chained DisplayPort configurations
and improved Redshift support. Also, the long annoying single-output limitation
of wlc is behind us: you can now drag windows between outputs with the mouse.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;man 5 sway-output&lt;/code&gt; for more details on configuring these features.&lt;/p&gt;
&lt;h2 id=&#34;new-input-features&#34;&gt;New input features&lt;/h2&gt;
&lt;p&gt;Input devices have also matured a lot. You can get a list of their identifiers
with &lt;code&gt;swaymsg -t get_inputs&lt;/code&gt;. One oft requested feature was a better way of
configuring your keyboard layout, which you can now do in your config file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input &amp;quot;9456:320:Metadot_-_Das_Keyboard_Das_Keyboard&amp;quot; {
    xkb_options caps:escape
    xkb_numlock enabled
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We also now support drawing tablets, which you can bind to a specific output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input &amp;quot;1386:827:Wacom_Intuos_S_2_Pen&amp;quot; {
    map_to_output DP-3
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also now do crazy stuff like having multiple mice with multiple cursors,
and linking keyboards, mice, drawing tablets, and touchscreens to each other
arbitrarily. You can now have your dvorak keyboard for normal use and a second
qwerty keyboard for when your coworker comes over for a pair programming
session. You can even give your coworker the ability to focus and type into
&lt;em&gt;separate&lt;/em&gt; windows from what you&amp;rsquo;re working on.&lt;/p&gt;
&lt;h2 id=&#34;third-party-panels-lockscreens-and-more&#34;&gt;Third-party panels, lockscreens, and more&lt;/h2&gt;
&lt;p&gt;Our new layer-shell protcol is starting to take hold in the community, and
enables the use of even more third-party software on sway. One of our main
commitments to you for sway 1.0 and wlroots is to break the boundaries between
Wayland compositors and encourange standard interopable protocols - and we&amp;rsquo;ve
done so. Here are some interesting third-party layer-shell clients in the wild:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Alexays/Waybar&#34;&gt;Waybar&lt;/a&gt;, a new panel&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/emersion/mako&#34;&gt;mako&lt;/a&gt;, a notification daemon&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://source.puri.sm/Librem5/virtboard&#34;&gt;virtboard&lt;/a&gt;, an on-screen keyboard&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/emersion/slurp&#34;&gt;slurp&lt;/a&gt;, a tool to interactively select a
region of the screen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://source.puri.sm/Librem5/phosh&#34;&gt;Phosh&lt;/a&gt;, the &lt;a href=&#34;https://puri.sm/&#34;&gt;Purism&lt;/a&gt;
team&amp;rsquo;s shell for their &lt;a href=&#34;https://puri.sm/shop/librem-5/&#34;&gt;Librem 5&lt;/a&gt; phone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also added two new protocols for capturing your screen: screencopy and
dmabuf-export, respectively these are useful for screenshots and real-time
screen capture, for example to live stream on Twitch. Some third-party software
exists for these, too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/emersion/grim&#34;&gt;grim&lt;/a&gt;, for taking screenshots&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/atomnuker/wlstream&#34;&gt;wlstream&lt;/a&gt;, for recording video&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dpms-auto-locking-and-idle-management&#34;&gt;DPMS, auto-locking, and idle management&lt;/h2&gt;
&lt;p&gt;Our new &lt;code&gt;swayidle&lt;/code&gt; tool adds support for all of these features, and even works
on other Wayland compositors. To configure it, start by running the daemon in
your sway config file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exec swayidle \
    timeout 300 &#39;swaylock -c 000000&#39; \
    timeout 600 &#39;swaymsg &amp;quot;output * dpms off&amp;quot;&#39; \
       resume &#39;swaymsg &amp;quot;output * dpms on&amp;quot;&#39; \
    before-sleep &#39;swaylock -c 000000&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This example will, after 300 seconds of inactivity, lock your screen. Then after
600 seconds, it will turn off all of your outputs (and turn them back on when
you wiggle the mouse). This configuration also locks your screen before your
system goes to sleep. None of this will happen if you&amp;rsquo;re watching a video on a
supported media player (mpv, for example). For more details check out &lt;code&gt;man swayidle&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;miscellaneous-bits&#34;&gt;Miscellaneous bits&lt;/h2&gt;
&lt;p&gt;There are a few other cool features I think are worth briefly mentioning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bindsym --locked&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;swaylock has a config file now&lt;/li&gt;
&lt;li&gt;Drag and drop is supported&lt;/li&gt;
&lt;li&gt;Rich content (like images) is synced between the Wayland and X11 clipboards&lt;/li&gt;
&lt;li&gt;The layout is updated atomically, meaning that you&amp;rsquo;ll never see an in-progress
frame when resizing windows&lt;/li&gt;
&lt;li&gt;Primary selection is implemented and synced with X11&lt;/li&gt;
&lt;li&gt;Pretty much every long-standing bug has been fixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the full run-down see the &lt;a href=&#34;https://github.com/swaywm/sway/releases/tag/1.0-beta.1&#34;&gt;release
notes&lt;/a&gt;. Give the beta a
try, and we&amp;rsquo;re all looking forward to sway 1.0!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;5,044 sway commits and 3,225 wlroots commits at the time of writing. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Sway now has the best HiDPI support on Linux, period. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Go 1.11 got me to stop ignoring Go</title>
      <link>./2018/10/08/Go-1.11.html</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/10/08/Go-1.11.html</guid>
      <description>&lt;p&gt;I took a few looks at Go over the years, starting who knows when. My first
serious attempt to sit down and learn some damn Go was in 2014, when I set a new
personal best at almost 200 lines of code before I got sick of it. I kept
returning to Go because I could see how much potential it had, but every time I
was turned off for the same reason: &lt;code&gt;GOPATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You see, &lt;code&gt;GOPATH&lt;/code&gt; crossed a line. Go is opinionated, which is fine, but with
&lt;code&gt;GOPATH&lt;/code&gt; its opinions extended beyond my Go work and into the rest of my system.
As a naive new Go user, I was prepared to accept their opinions on faith - but
only within their domain. I already have opinions about how to use my computer.
I knew Go was cool, but it could be the second coming of Christ, and so long as
it was annoying to use and didn&amp;rsquo;t integrate with my workflow, I (rightfully)
wouldn&amp;rsquo;t care.&lt;/p&gt;
&lt;p&gt;Thankfully Go 1.11 solves this problem, and solves it delightfully well. I can
now keep Go&amp;rsquo;s influence contained to the Go projects I work with, and in that
environment I&amp;rsquo;m much more forgiving of anything it wants to do. And when
considered in the vacuum of Go, what it wants to do is really compelling. Go
modules are &lt;em&gt;great&lt;/em&gt;, and probably the single best module system I&amp;rsquo;ve used in any
programming language. Go 1.11 took my biggest complaint and turned it into one
of my biggest compliments. Now that the One Big Problem is gone, I&amp;rsquo;ve really
started to appreciate Go. Let me tell you about it.&lt;/p&gt;
&lt;p&gt;The most important feature of Go is its simplicity. The language is small and
it grows a small number of features in each release, which rarely touch the
language itself. Some people see this as stagnation, but I see it as stability
and I know that very little Go code in the wild, no matter how old, is going to
be unidiomatic or fail to compile. Even setting aside stability, the
conservative design of the language makes Go code in the wild remarkably
consistent. Almost all third-party Go libraries are high quality stuff. Gofmt
helps with this as well&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. The limitations of the language and the way the
stdlib gently nudges you into good patterns make it easy to write good Go code.
Most of the &amp;ldquo;bad&amp;rdquo; Go libraries I&amp;rsquo;ve found are trying to work around Go&amp;rsquo;s
limitations instead of embracing them.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s more. The concurrency model is superb. It should come as no surprise
that a language built by the alumni of Plan 9 would earn high marks in this
regard, and consequently you can scale your Go program up to be as concurrent as
you want without even thinking about it. The standard library is also excellent -
designed consistently and designed well, and I can count on one hand (or even
one finger) the number of stdlib modules I&amp;rsquo;ve encountered that feel crusty. The
type system is great, too. It&amp;rsquo;s the perfect balance of complexity and simplicity
that often effortlessly grants these traits to the abstractions you make with
it.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not even slightly bothered by the lack of generics - years as a C programmer
taught me not to need them, and I think most of the cases where they&amp;rsquo;re useful
are to serve designs which are too complicated to use anyway. I do have some
complaints, though. The concurrency model is great, but a bit too magical and
implicit.  Error handling is annoying, especially because finding the origin of
the error is unforgivably difficult, but I don&amp;rsquo;t know how to improve it. The log
module leaves a lot to be desired and can&amp;rsquo;t be changed because of legacy
support.  &lt;code&gt;interface{}&lt;/code&gt; is annoying when you have to deal with it, like when
dealing with JSON you can&amp;rsquo;t unmarshall into a struct.&lt;/p&gt;
&lt;p&gt;My hope for the future of Go is that it will continue to embrace simplicity in
the face of cries for complexity. I consider Go modules a runaway success
compared to dep, and I hope to see this story repeated&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; before hastily adding
generics, better error handling, etc. Go doesn&amp;rsquo;t need to compete with anyone
like Rust, and trying to will probably ruin what makes Go great. My one request
of the Go team: don&amp;rsquo;t make changes in Go 2.0 which make the APIs of existing
libraries unidiomatic.&lt;/p&gt;
&lt;p&gt;Though I am growing very fond of it, by no means am I turning into a Go zealot.
I still use C, Python, and more all the time and have no intention of stopping.
A programming language which tries to fill all niches is a failed programming
language. But, to those who were once like me: Go is good now! In fact, it&amp;rsquo;s
great! Try it!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I have &lt;em&gt;minor&lt;/em&gt; gripes with gofmt, but the benefits make up for it beautifully. On the other hand, I have &lt;em&gt;major&lt;/em&gt; gripes with PEP-8, and if you ever see me using it I want you to shoot me in the face. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Though hopefully with less drama. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Don&#39;t sign a CLA</title>
      <link>./2018/10/05/Dont-sign-a-CLA.html</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/10/05/Dont-sign-a-CLA.html</guid>
      <description>&lt;p&gt;A large minority of open-source projects come with a CLA, or Contributor License
Agreement, and require you to sign one before they&amp;rsquo;ll merge your patch. These
agreements typically ask you to go above and beyond the rights you afford the
project by contributing under the license the software is distributed with. And
you should never sign one.&lt;/p&gt;
&lt;p&gt;Free and open source software licenses grant explicit freedoms to three groups:
the maintainers, the users, &lt;em&gt;and&lt;/em&gt; the contributors. An important freedom is the
freedom to make changes to the software and to distribute these changes to the
public. The natural place to do so is by contributing to the upstream project,
something a project should be thankful for. A CLA replaces this gratitude with
an attempt to weaken these freedoms in a manner which may stand up to the letter
of the license, but is far from the spirit.&lt;/p&gt;
&lt;p&gt;A CLA is a kick in the groin to a contributor&amp;rsquo;s good-faith contribution to the
project. Many people, myself included, contribute to open source projects under
the assumption that my contributions will help serve a project which continues
to be open source in perpetuity, and a CLA provides a means for the project
maintainers to circumvent that. What the CLA is actually used for is to give the
project maintainers the ability to relicense your work under a more restrictive
software license, up to and including making it entirely closed source.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve seen this happen before. Consider the Redis Labs debacle, where they
adopted the nonfree&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Anti-Commons Clause&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, and used their CLA to pull along
any external contributions for the ride. As thanks for the generous time
invested by their community into their software, they yank it out from
underneath it and repurpose it to make money with an obscenely nonfree product.
Open source is a commitment to your community. Once you make it, you cannot take
it back. You don&amp;rsquo;t get the benefits associated with being an open source project
if you have an exit hatch. You may argue that it&amp;rsquo;s your right to do what you
want with your project, but making it open source is &lt;em&gt;explicitly waiving that
right&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So to you, the contributor: if you are contributing to open source and you want
it to stay that way, you should not sign a CLA. When you send a patch to a
project, you are affording them the same rights they afforded you. The
relationship is one of equals. This is a healthy balance. When you sign a CLA,
you give them unequal power over you. If you&amp;rsquo;re scratching an itch and just
want to submit the patch in good faith, it&amp;rsquo;s easy enough to fork the project and
put up your changes in a separate place. This is a right afforded to you by
every open source license, and it&amp;rsquo;s easy to do. Anyone who wants to use your
work can apply your patches on top of the upstream software. Don&amp;rsquo;t sign away
your rights!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Additional reading: &lt;a href=&#34;https://blog.hansenpartnership.com/gpl-as-the-best-licence-governance-and-philosophy/&#34;&gt;GPL as the Best Licence – Governance and Philosophy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some responses to the discussion around this article:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What about the &lt;a href=&#34;https://www.apache.org/licenses/cla-corporate.txt&#34;&gt;Apache Foundation
CLA&lt;/a&gt;?&lt;/em&gt; This CLA is one of the
better ones, because it doesn&amp;rsquo;t transfer copyright over your work to the Apache
Foundation. I have no beef with clauses 1 and 3-8. However, term 2 is too broad
and I would not sign this CLA.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What about the Linux kernel &lt;a href=&#34;https://elinux.org/Developer_Certificate_Of_Origin&#34;&gt;developer certificate of
origin&lt;/a&gt;?&lt;/em&gt; I applaud the
Linux kernel&amp;rsquo;s approach here. It covers their bases while still strongly
protecting the rights of the patch owner. It&amp;rsquo;s a short statement with little
legalese and little fanfare to agreeing to it (just add &amp;ldquo;Signed-off By&amp;rdquo; to your
commit message). I approve.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;./2018/08/22/Commons-clause-will-destroy-open-source.html&#34;&gt;Free as in freedom&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Call me petty, but I can&amp;rsquo;t in good faith call it the &amp;ldquo;Commons Clause&amp;rdquo; when its purpose is to &lt;em&gt;remove&lt;/em&gt; software from the commons. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Sway &amp; wlroots at XDC 2018</title>
      <link>./2018/09/30/Sway-wlroots-at-XDC-2018.html</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/09/30/Sway-wlroots-at-XDC-2018.html</guid>
      <description>&lt;p&gt;Just got my first full night of sleep after the return flight from Spain after
attending &lt;a href=&#34;https://xdc2018.x.org/&#34;&gt;XDC 2018&lt;/a&gt;. It was a lot of fun! I attended
along with four other major wlroots contributors. Joining me were &lt;a href=&#34;https://github.com/emersion&#34;&gt;Simon Ser
(emersion)&lt;/a&gt; (a volunteer) and &lt;a href=&#34;https://github.com/ascent12&#34;&gt;Scott Anderson
(ascent12)&lt;/a&gt; of
&lt;a href=&#34;https://www.collabora.com/&#34;&gt;Collabora&lt;/a&gt;, who work on both
&lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt; and
&lt;a href=&#34;https://github.com/swaywm/sway&#34;&gt;sway&lt;/a&gt;. &lt;a href=&#34;https://github.com/ongy&#34;&gt;ongy&lt;/a&gt; works on
wlroots, &lt;a href=&#34;https://github.com/swaywm/hsroots&#34;&gt;hsroots&lt;/a&gt;, and
&lt;a href=&#34;https://github.com/waymonad/waymonad&#34;&gt;waymonad&lt;/a&gt;, and joined us on behalf
of &lt;a href=&#34;https://www.igel.com/&#34;&gt;IGEL&lt;/a&gt;. Finally, we were joined by &lt;a href=&#34;https://github.com/agx&#34;&gt;Guido Günther
(agx)&lt;/a&gt; of &lt;a href=&#34;https://puri.sm/&#34;&gt;Purism&lt;/a&gt;, who works with us
on wlroots and on the Librem 5. This was my first time meeting most of them
face-to-face!&lt;/p&gt;
&lt;p&gt;wlroots was among the highest-level software represented at XDC. Most of the
attendees are hacking on the kernel or mesa drivers, and we had a lot to learn
from each other. The most directly applicable talk was probably VKMS (virtual
kernel mode setting), a work-in-process kernel subsystem which will be useful
for testing the complex wlroots DRM code. We had many chances to catch up with
the presenters after their talk to learn more and establish a good
relationship. We discovered from these chats that some parts of our DRM code
was buggy, and have even started onboarding some of them as contributors to sway
and wlroots.&lt;/p&gt;
&lt;p&gt;We also learned a lot from the other talks, in ways that will pay off over time.
One of my favorites was an introduction to the design of Intel GPUs, which went
into a great amount of detail into how the machine code for these GPUs worked,
why these design decisions make them efficient, and their limitations and
inherent challenges. Combined with other talks, we got a lot of insight into the
design and function of mesa, graphics drivers, and GPUs. These folks were very
available to us for further discussion and clarification after their talks, a
recurring theme at XDC and one of the best parts of the conference.&lt;/p&gt;
&lt;p&gt;Another recurring theme at XDC was talks about how mesa is tested, with the most
in-depth coverage being on Intel&amp;rsquo;s new CI platform. They provide access to Mesa
developers to test their code on &lt;em&gt;every&lt;/em&gt; generation of Intel GPU in the course
of about 30 minutes, and brought some concrete data to the table to show that it
really works to make their drivers more stable. I took notes that you can expect
to turn into builds.sr.ht features! And since these folks were often available
for chats afterwards, I think they were taking notes, too.&lt;/p&gt;
&lt;p&gt;I also met many of the driver developers from AMD, Intel, and Nvidia; all of
whom had interesting insights and were a pleasure to hang out with. In fact,
Nvidia&amp;rsquo;s representatives were the first people I met! On the night of the
kick-off party, I led the wlroots clan to the bar for beers and introduced
myself to the people who were standing there - who already knew me from my
writings critical of Nvidia. Awkward! A productive conversation ensued
regardless, where I was sad to conclude that we still aren&amp;rsquo;t going to see any
meaningful involvement in open source from Nvidia. Many of their engineers are
open to it, but I think that the engineering culture at Nvidia is unhealthy and
that the engineers have very little influence. We made our case and brought up
points they weren&amp;rsquo;t thinking about, and I can only hope they&amp;rsquo;ll take them home
and work on gradually improving the culture.&lt;/p&gt;
&lt;p&gt;Unfortunately, Wayland itself was somewhat poorly represented. Daniel Stone (a
Wayland &amp;amp; Weston maintainer) was there, and Roman Glig (of KDE), but some KDE
folks had to cancel and many people I had hoped to meet were not present. Some
of the discussions I wanted to have about protocol standardization and
cooperation throughout Wayland didn&amp;rsquo;t happen. Regardless, the outcome of XDC was
very positive - we learned a lot and taught a lot. We found new contributors to
our projects, and have been made into new contributors for everyone else&amp;rsquo;s
projects.&lt;/p&gt;
&lt;p&gt;Big shoutout to the X Foundation for organizing the event, and to the beautiful
city of A Coruña for hosting us, and to University of A Coruña for sharing their
university - which consequently led to meeting some students there that used
Sway and wanted to contribute! Thanks as well to the generous sponsors, both for
sponsoring the event and for sending representatives to give talks and meet the
community.&lt;/p&gt;
</description>
    </item><item>
      <title>Getting started with qemu</title>
      <link>./2018/09/10/Getting-started-with-qemu.html</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/09/10/Getting-started-with-qemu.html</guid>
      <description>&lt;p&gt;I often get asked questions about using my software, particularly sway, on
hypervisors like VirtualBox and VMWare, as well as for general advice on
which hypervisor to choose. My answer is always the same: qemu. There&amp;rsquo;s no
excuse to use anything other than qemu, in my books. But I can admit that it
might be a bit obtuse to understand at first. qemu&amp;rsquo;s greatest strength is also
its greatest weakness: it has so many options that it&amp;rsquo;s hard to know which ones
you need just to get started.&lt;/p&gt;
&lt;p&gt;qemu is the swiss army knife of virtualisation, much like ffmpeg is the swiss
army knife of multimedia (which comes as no surprise, given that both are written
by Fabrice Bellard). I run a dozen permanent VMs with qemu, as well as all of
the ephemeral VMs used on &lt;a href=&#34;https://meta.sr.ht&#34;&gt;builds.sr.ht&lt;/a&gt;. Why is it better
than all of the other options? Well, in short: qemu is fast, portable, better
supported by guests, and has more features than Hollywood. There&amp;rsquo;s nothing other
hypervisors can do that qemu can&amp;rsquo;t, and there&amp;rsquo;s plenty qemu can that they
cannot.&lt;/p&gt;
&lt;p&gt;Studying the full breadth of qemu&amp;rsquo;s featureset is something you can do over
time. For now, let&amp;rsquo;s break down a simple Linux guest installation. We&amp;rsquo;ll start
by downloading some install media (how about &lt;a href=&#34;https://alpinelinux.org/&#34;&gt;Alpine
Linux&lt;/a&gt;, I like Alpine Linux) and preparing a virtual
hard drive.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -O https://nl.alpinelinux.org/alpine/v3.8/releases/x86_64/alpine-standard-3.8.0-x86_64.iso
qemu-img create -f qcow2 alpine.qcow2 16G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes a 16G virtual hard disk in a file named alpine.qcow2, the qcow2
format being a format which appears to be 16G to the guest (VM), but only
actually writes to the host any sectors which were written to by the guest in
practice. You can also expose this as a block device on your local system (or a
remote system!) with qemu-nbd if you need to. Now let&amp;rsquo;s boot up a VM using our
install media and virtual hard disk:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qemu-system-x86_64 \
    -enable-kvm \
    -m 2048 \
    -nic user,model=virtio \
    -drive file=alpine.qcow2,media=disk,if=virtio \
    -cdrom alpine-standard-3.8.0-x86_64.iso \
    -sdl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a lot to take in. Let&amp;rsquo;s break it down:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-enable-kvm&lt;/strong&gt;: This enables use of the KVM (kernel virtual machine) subsystem
to use hardware accelerated virtualisation on Linux hosts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-m 2048&lt;/strong&gt;: This specifies 2048M (2G) of RAM to provide to the guest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-nic user,model=virtio&lt;/strong&gt;: Adds a virtual &lt;strong&gt;n&lt;/strong&gt;etwork &lt;strong&gt;i&lt;/strong&gt;nterface
&lt;strong&gt;c&lt;/strong&gt;ontroller, using a virtual LAN emulated by qemu. This is the most
straightforward way to get internet in a guest, but there are other options (for
example, you will probably want to use &lt;code&gt;-nic tap&lt;/code&gt; if you want the guest to do
networking directly on the host NIC). &lt;code&gt;model=virtio&lt;/code&gt; specifies a special
&lt;code&gt;virtio&lt;/code&gt; NIC model, which is used by the virtio kernel module in the guest to
provide faster networking.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-drive file=alpine.qcow2,media=disk,if=virtio&lt;/strong&gt;: This attaches our virtual
disk to the guest. It&amp;rsquo;ll show up as &lt;code&gt;/dev/vda&lt;/code&gt;. We specify &lt;code&gt;if=virtio&lt;/code&gt; for the
same reason we did for &lt;code&gt;-nic&lt;/code&gt;: it&amp;rsquo;s the fastest interface, but requires special
guest support from the Linux virtio kernel module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-cdrom alpine-standard-3.8.0-x86_64.iso&lt;/strong&gt; connects a virtual CD drive to the
guest and loads our install media into it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-sdl&lt;/strong&gt; finally specifies the graphical configuration. We&amp;rsquo;re using the SDL
backend, which is the simplest usable graphical backend. It attaches a display
to the guest and shows it in an &lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL&lt;/a&gt; window on the
host.&lt;/p&gt;
&lt;p&gt;When you run this command, the SDL window will appear and Alpine will boot! You
can complete the Alpine installation normally, using &lt;code&gt;setup-alpine&lt;/code&gt; to install
it to the attached disk. When you shut down Alpine, run qemu again without
&lt;code&gt;-cdrom&lt;/code&gt; to start the VM.&lt;/p&gt;
&lt;p&gt;That covers enough to get you off of VirtualBox or whatever other bad hypervisor
you&amp;rsquo;re using. What else is possible with qemu? Here&amp;rsquo;s a short list of common
stuff you can look into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running pretty much any guest operating system&lt;/li&gt;
&lt;li&gt;Software emulation of non-native architectures like ARM, PPC, RISC-V&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;-spice&lt;/code&gt; instead of &lt;code&gt;-sdl&lt;/code&gt; to enable remote access to the
display/keyboard/mouse&lt;/li&gt;
&lt;li&gt;Read-only disk images with guest writes stored in RAM (&lt;code&gt;snapshot=on&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Non-graphical boot with &lt;code&gt;-nographic&lt;/code&gt; and &lt;code&gt;console=ttyS0&lt;/code&gt; configured in your
kernel command line&lt;/li&gt;
&lt;li&gt;Giving a genuine graphics card to your guest with KVM passthrough for high
performance gaming, OpenCL, etc&lt;/li&gt;
&lt;li&gt;Using &lt;a href=&#34;https://virt-manager.org/&#34;&gt;virt-manager&lt;/a&gt; or
&lt;a href=&#34;https://help.gnome.org/users/gnome-boxes/stable/&#34;&gt;Boxes&lt;/a&gt; if you want a GUI to
hold your hand&lt;/li&gt;
&lt;li&gt;And much more&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;rsquo;s really no excuse to be using any other hypervisor&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. They&amp;rsquo;re all
dogshit compared to qemu.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Especially VirtualBox. If you use VirtualBox after reading this article you make poor life choices and are an embarrassment to us all. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Conservative web development</title>
      <link>./2018/09/04/Conservative-web-development.html</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/09/04/Conservative-web-development.html</guid>
      <description>&lt;p&gt;Today I turned off my ad blocker, enabled JavaScript, opened my network monitor,
and clicked the first link on Hacker News - a New York Times article. It started
by downloading a megabyte of data as it rendered the page over the course of
eight full seconds. The page opens with an advertisement 281 pixels tall, placed
before even the title of the article. As I scrolled down, more and more requests
were made, downloading a total of 2.8 MB of data with 748 HTTP requests. An
article was weaved between a grand total of 1419 vertical pixels of ad space,
greater than the vertical resolution of my display. Another 153-pixel ad is
shown at the bottom, after the article. Four of the ads were identical.&lt;/p&gt;
&lt;p&gt;I was reminded to subscribe three times, for $1/week (after one year this would
become $3.75/week). One of these reminders attached itself to the bottom of my
screen and followed along as a scrolled. If I scrolled up, it replaced this with
a larger banner, which showed me three other articles and an ad. I was asked for
my email address once, though I would have had to fill out a captcha to submit
it. I took out my phone and repeated the experiment. It took 15 seconds to load,
and I estimate the ads took up a vertical space equal to 4 times my phone&amp;rsquo;s
vertical resolution, each ad alone taking up half of my screen.&lt;/p&gt;
&lt;p&gt;The text of the article is a total of 9037 bytes, including the title, author,
and date. I downloaded the images relevant to the article, including the
1477x1082&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; title image. Before I ran them through an optimizer, they weighed
260 KB; after, 236 KB (using only lossless optimizations). 8% of the total
download was dedicated to the content. 5 discrete external companies were
informed of my visit to the page and given the opportunity to run artibrary
JavaScript on it.&lt;/p&gt;
&lt;p&gt;If these are the symptoms, what is the cure? My basic principles are these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use no, or very little, JavaScript&lt;/li&gt;
&lt;li&gt;Use raster images sparingly, if at all, and optimize them&lt;/li&gt;
&lt;li&gt;Provide interactivity with forms and clever CSS&lt;/li&gt;
&lt;li&gt;Identify wasted bandwidth and CPU cycles and optimize them&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve been building &lt;a href=&#34;https://meta.sr.ht&#34;&gt;sr.ht&lt;/a&gt; with these principles in mind,
and I spent a few hours this optimizing it further. What do the results look
like? The heaviest page, &lt;a href=&#34;https://meta.sr.ht&#34;&gt;the marketing page&lt;/a&gt;, today weighs
&lt;strong class=&#34;text-info&#34;&gt;110 KB&lt;/strong&gt; with a cold cache, and &lt;strong
class=&#34;text-danger&#34;&gt;4.6 KB&lt;/strong&gt; warm. &lt;a href=&#34;https://github.com/&#34;&gt;A similar page&lt;/a&gt;
on GitHub.com&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; weighs &lt;strong class=&#34;text-info&#34;&gt;2900 KB&lt;/strong&gt; cold,
&lt;strong class=&#34;text-danger&#34;&gt;19.4 KB&lt;/strong&gt; warm. &lt;a href=&#34;https://git.sr.ht/~sircmpwn/linux/tree/master/init/main.c&#34;&gt;A more typical
page&lt;/a&gt; on sr.ht weighs &lt;strong class=&#34;text-info&#34;&gt;56.8 KB&lt;/strong&gt;
cold and &lt;strong class=&#34;text-danger&#34;&gt;31.9 KB&lt;/strong&gt; warm, after &lt;strong
class=&#34;text-warning&#34;&gt;2&lt;/strong&gt; HTTP requests; on GitHub &lt;a href=&#34;https://github.com/torvalds/linux/blob/master/init/main.c&#34;&gt;the same
page&lt;/a&gt; is &lt;strong class=&#34;text-info&#34;&gt;781 KB&lt;/strong&gt; cold and
&lt;strong class=&#34;text-danger&#34;&gt;57.4 KB&lt;/strong&gt; warm, &lt;strong
class=&#34;text-warning&#34;&gt;118&lt;/strong&gt; requests. This file is 29.1 KB.  The sr.ht
overhead is &lt;strong class=&#34;text-info&#34;&gt;27.6 KB&lt;/strong&gt; cold and &lt;strong
class=&#34;text-danger&#34;&gt;2.7 KB&lt;/strong&gt; warm. The GitHub overhead is respectively
&lt;strong class=&#34;text-info&#34;&gt;751.9 KB&lt;/strong&gt; and &lt;strong class=&#34;text-danger&#34;&gt;28.2
KB&lt;/strong&gt;. There&amp;rsquo;s also a 174-pixel-tall ad on GitHub encouraging me to sign
up for an account, shown before any of the content.&lt;/p&gt;
&lt;p&gt;To be fair, the GitHub page has more features. As far as I can tell, most of
these aren&amp;rsquo;t implemented &lt;em&gt;in&lt;/em&gt; the page, though, and are rather links to other
pages. Some of the features &lt;em&gt;in&lt;/em&gt; the page include a dropdown for filtering
branches and tags, popups that show detail when you hover over an avatars, some
basic interactivity in the search, all things that I can&amp;rsquo;t imagine taking up
much space. Does this justify an order of magnitude increase in resource usage?&lt;/p&gt;
&lt;p&gt;Honestly, GitHub does a pretty good job overall. Compared to our New York Times
example, they&amp;rsquo;re downright &lt;em&gt;great&lt;/em&gt;. But they could be doing better, and so could
we all. You can build beautiful, interactive websites with HTML and CSS alone,
supported by a simple backend. Pushing the complexity of rendering your
single-page app into the frontend might save you miniscule amounts of
server-side performance, but you&amp;rsquo;d just be offloading the costs onto your
visitor&amp;rsquo;s phone and sucking their battery dry.&lt;/p&gt;
&lt;p&gt;There are easy changes you can make. Enable caching on your web server, with a
generous expiry. Use a hash of your resources in the URL so that you can bust
the cache when you need to. Enable gzip for text resources, and HTTP/2. Run your
images through an optimizer, odds are they can be losslessly compressed.  There
are harder changes, too. Design your website to be usable without JavaScript,
and use small amounts of it to enhance the experience - rather than to &lt;em&gt;be&lt;/em&gt; the
experience. Use CSS cleverly to provide interactivity&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Find ways to offload
work to the server where you can&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. Measure your pages to look for places to
improve. Challenge yourself to find the simplest way of building the features
you want.&lt;/p&gt;
&lt;p&gt;And if anyone at Google is reading, you should try recommending these strategies
for speeding up pages instead of pushing self-serving faux standards like AMP.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Greater than the vertical resolution of my desktop display. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;You may have to log out to see this. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;For example, check out how I implemented the collapsable message details on the &lt;a href=&#34;https://lists.sr.ht/~sircmpwn/sr.ht-dev/%3C20180830183221.32377-1-hilobakho%40gmail.com%3E&#34;&gt;lists.sr.ht archives&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I did this when I upgraded to Font Awesome 5 recently. They want you to include some JavaScript to make their SVG icons work, but instead I wrote a &lt;a href=&#34;https://git.sr.ht/~sircmpwn/core.sr.ht/tree/srht/flask.py?id=70e75e96dc664a1b487ef02cb9936cb8f69105c0#n49&#34;&gt;dozen lines of Python&lt;/a&gt; on the backend which gave me a macro to dump the desired SVG directly into the page. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>How to make a self-hosted video livestream</title>
      <link>./2018/08/26/Self-hosted-livestreaming.html</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/08/26/Self-hosted-livestreaming.html</guid>
      <description>&lt;p&gt;I have seen some articles in the past which explain how to build the ecosystem
&lt;em&gt;around&lt;/em&gt; your video streaming, such as live chat and forums, but which leave the
actual video streaming to Twitch.tv. I made a note the last time I saw one of
these articles to write one of my own explaining the video bit. As is often the
case with video, we&amp;rsquo;ll be using the excellent &lt;a href=&#34;http://ffmpeg.org/&#34;&gt;ffmpeg&lt;/a&gt; tool
for this. If it&amp;rsquo;s A/V-related, ffmpeg can probably do it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: a demonstration video was previously shown here, but as traffic on this
article died down I took it offline to reduce unnecessary load.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;ffmpeg has a built-in &lt;a href=&#34;https://dashif.org/&#34;&gt;DASH&lt;/a&gt; output format, which is the
current industry standard for live streaming video to web browsers. It works by
splitting the output up into discrete files and using an &lt;a href=&#34;./dash/live.mpd&#34;&gt;XML
file&lt;/a&gt; (an MPD playlist) to tell the player where they are. Few
browsers support DASH natively, but
&lt;a href=&#34;https://github.com/Dash-Industry-Forum/dash.js/wiki&#34;&gt;dash.js&lt;/a&gt; can polyfill it
by periodically downloading the latest manifest and driving the video element
itself.&lt;/p&gt;
&lt;p&gt;Getting the source video into ffmpeg is a little bit beyond the scope of this
article, but I know some readers won&amp;rsquo;t be familiar with ffmpeg so I&amp;rsquo;ll have
mercy. Let&amp;rsquo;s say you want to play some static video files like I&amp;rsquo;m doing above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ffmpeg &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-re &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-stream_loop -1 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-i my-video.mkv &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will tell ffmpeg to read the input (-i) in real time (-re), and loop it
indefinitely. If instead you want to, for example, use x11grab instead to
capture your screen and pulse to capture desktop audio, try this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;    -f x11grab &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -r &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -video_size 1920x1080 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -i &lt;span class=&#34;nv&#34;&gt;$DISPLAY&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -f pulse &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -i alsa_input.usb-Blue_Microphones_Yeti_Stereo_Microphone_REV8-00.analog-stereo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This sets the framerate to 30 FPS and the video resolution to 1080p, then reads
from the X11 display &lt;code&gt;$DISPLAY&lt;/code&gt; (usually :0). Then we add pulseaudio and use my
microphone source name, which I obtained with &lt;code&gt;pactl list sources&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s add some arguments describing the output format. Your typical web browser
is a finicky bitch and has some very specific demands from your output format if
you want maximum compatability:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;    -codec:v libx264 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -profile:v baseline &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -level &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -pix_fmt yuv420p &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -preset veryfast &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -codec:a aac &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This specifices the libx264 video encoder with the baseline level 4 profile, the
most broadly compatible x264 profile, with the yuv420p pixel format, the most
broadly compatible pixel format, the veryfast preset to make sure we can encode
it in realtime, the aac audio codec. Now that we&amp;rsquo;ve specified the parameters for
the output, let&amp;rsquo;s configure the output format: DASH.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;	-f dash &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-window_size &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-remove_at_exit &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	/tmp/dash/live.mpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The window_size specifies the maximum number of A/V segments to keep in the
manifest at any time, and remove_at_exit will clean up all of the files when
ffmpeg exits. The output file is the path to the playlist to write to disk, and
the segments will be written next to it. The last step is to serve this with
nginx:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span class=&#34;k&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/dash&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;types&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;kn&#34;&gt;application/dash+xml&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;mpd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;kn&#34;&gt;video/mp4&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;m4v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;kn&#34;&gt;audio/mp4&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;m4a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;add_header&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;Access-Control-Allow-Origin&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can now point the &lt;a href=&#34;http://reference.dashif.org/dash.js/nightly/samples/dash-if-reference-player/index.html&#34;&gt;DASH reference
player&lt;/a&gt;
at &lt;code&gt;http://your-server.org/dash/live.mpd&lt;/code&gt; and see your video streaming there.
Neato! You can add dash.js to your website and you know have a fully self-hosted
video live streaming setup ready to rock.&lt;/p&gt;
&lt;p&gt;Perhaps the ffmpeg swiss army knife isn&amp;rsquo;t your cup of tea. If you want to, for
example, use &lt;a href=&#34;https://obsproject.com/&#34;&gt;OBS Studio&lt;/a&gt;, you might want to take a
somewhat different approach. The
&lt;a href=&#34;https://github.com/arut/nginx-rtmp-module&#34;&gt;nginx-rtmp-module&lt;/a&gt; provides an RTMP
(real-time media protocol) server that integrates with nginx. After adding
the DASH output, you&amp;rsquo;ll end up with something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;rtmp &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    server &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        listen 1935&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        application live &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            dash on&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            dash_path /tmp/dash&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            dash_fragment 15s&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then you can stream to &lt;code&gt;rtmp://your-server.org/live&lt;/code&gt; and your dash segments
will show up in &lt;code&gt;/tmp/dash&lt;/code&gt;. There&amp;rsquo;s no password protection here, so put it in
the stream URL (e.g. &lt;code&gt;application R9AyTRfguLK8&lt;/code&gt;) or use an IP whitelist:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;application live {
    allow publish your-ip;
    deny publish all;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want to get creative with it you can use
&lt;a href=&#34;https://github.com/arut/nginx-rtmp-module/wiki/Directives#on_publish&#34;&gt;&lt;code&gt;on_publish&lt;/code&gt;&lt;/a&gt;
to hit an web service with some details and return a non-2xx code to forbid
streaming. Have fun!&lt;/p&gt;
&lt;p&gt;I learned all of this stuff by making a bot which livestreamed Google hangouts
over the LAN to get around the participant limit at work. I&amp;rsquo;ll do a full writeup
about that one later!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here&amp;rsquo;s the full script I&amp;rsquo;m using to generate the live stream on this
page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;rm -f /tmp/playlist
mkdir -p /tmp/dash
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; file in /var/www/mirror.sr.ht/hacksway-2018/*
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;file &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /tmp/playlist
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;

ffmpeg &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-re &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-loglevel error &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-stream_loop -1 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-f concat &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-safe &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-i /tmp/playlist &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-vf &lt;span class=&#34;s2&#34;&gt;&amp;#34;drawtext=\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			fontfile=/usr/share/fonts/truetype/ttf-dejavu/DejaVuSans-Bold.ttf:\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			text=&amp;#39;%{gmtime\:%Y-%m-%d %T} UTC&amp;#39;:\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			fontcolor=white:\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			x=(w-text_w)/2:y=128:\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			box=1:boxcolor=black:\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			fontsize=72,
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;		drawtext=\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			fontfile=/usr/share/fonts/truetype/ttf-dejavu/DejaVuSans-Bold.ttf:\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			text=&amp;#39;REBROADCAST&amp;#39;:\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			fontcolor=white:\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			x=(w-text_w)/2:y=16:\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			box=1:boxcolor=black:\
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;			fontsize=48&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-codec:v libx264 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-profile:v baseline &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-pix_fmt yuv420p &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-level &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-preset veryfast &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-codec:a aac &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-f dash &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-window_size &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-remove_at_exit &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	/tmp/dash/live.mpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item><item>
      <title>The Commons Clause will destroy open source</title>
      <link>./2018/08/22/Commons-clause-will-destroy-open-source.html</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/08/22/Commons-clause-will-destroy-open-source.html</guid>
      <description>&lt;p&gt;An alarmist title, I know, but it&amp;rsquo;s true. If the &lt;a href=&#34;https://commonsclause.com/&#34;&gt;Commons
clause&lt;/a&gt; were to be adopted by all open source
projects, they would cease to be open source&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, and therefore the Commons
clause is trying to destroy open source. When this first appeared I spoke out
about it in discussion threads around the net, but didn&amp;rsquo;t think anyone would
take it seriously. Well, yesterday, some parts of Redis &lt;a href=&#34;https://redislabs.com/community/commons-clause/&#34;&gt;became proprietary
software&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Commons Clause promoted by Kevin Wang presents one of the greatest
existential threats to open source I&amp;rsquo;ve ever seen. It preys on a vulnerability
open source maintainers all suffer from, and one I can strongly relate to. It
&lt;em&gt;sucks&lt;/em&gt; to not be able to make money from your open source work. It &lt;em&gt;really&lt;/em&gt;
sucks when companies are using your work to make money for themselves. If a
solution presents itself, it&amp;rsquo;s tempting to jump at it. But the Commons Clause
doesn&amp;rsquo;t present a solution for supporting open source software. It presents a
framework for turning open source software into proprietary software.&lt;/p&gt;
&lt;p&gt;What should we do about open source maintainers not getting the funding
they need? It&amp;rsquo;s a very real problem, and one Kevin has &lt;a href=&#34;https://twitter.com/kevinverse/status/1032074268291424257&#34;&gt;explicitly asked
us&lt;/a&gt; to talk about
before we criticise his solution to it. I would be happy to share my thoughts.
I&amp;rsquo;ve struggled for many years to find a way to finance myself as the maintainer
of many dozens of projects. For a long time it has been a demotivating struggle
with no clear solutions, a struggle which at one point probably left me
vulnerable to the temptations offered by the Common Clause. But today, the
situation is clearly improving.&lt;/p&gt;
&lt;p&gt;Personally, I have a harder go of it because very little of my open source
software is appealing to the businesses that have the budget to sponsor them.
Instead, I rely on the (much smaller and less stable) recurring donations of my
individual users. When I started accepting these, I did not think that it was
going to work out. But today, I&amp;rsquo;m making far more money from these donations
than I ever thought possible&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, and I see an upwards trend which will
eventually lead me to being able to work on open source full time. If I were
able to add only a few business-level sponsorships to this equation, I think I
would easily have already reached my goals.&lt;/p&gt;
&lt;p&gt;There are other options for securing financing for open source, some of which
Redis has already been exploring. Selling a hosted and supported version of
your service is often a good call. Offering consulting support for your
software has also worked for many groups in the past. Some projects succeed with
(A)GPL for everyone and BSD for a price. These are all better avenues to
explore - making your software proprietary is a tragic alternative that should
not be considered.&lt;/p&gt;
&lt;p&gt;We need to combine these methods with a greater appreciation for open source in
the business community. Businesses need engineers - appeal to your peers so they
can appeal to the money on behalf of the projects they depend on. A $250/mo
recurring donation to would be a drop in the bucket of most businesses, but a
major boon to any open source project, with which the business will almost
certainly see tangible value-add as a result. When I get to work today I&amp;rsquo;m going
to identify open source projects we use that accept donations and make the
plea&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, and keep making the plea week over week until money is spent. You
should, too.&lt;/p&gt;
&lt;p&gt;Redis also stands out as a cautionary entry in the history of Contributor
License Agreements. Everyone who has contributed to the now-proprietary Redis
modules has had their hard work stolen and sold by RedisLabs under a proprietary
license. I do not sign CLAs and I think they&amp;rsquo;re a harmful practice for this very
reason. Asking a contributor to sign them is a slap in the face to the good will
which led them to make a contribution in the first place. Don&amp;rsquo;t sign these and
don&amp;rsquo;t ask others to.&lt;/p&gt;
&lt;p&gt;I respect antirez&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; very much, but I am sorely disappointed in him. He should
have known better and, if you&amp;rsquo;re reading this, I urge you to roll back your
misguided decision. But the Commons Clause is much more deeply disturbing. What
Kevin is doing will ruin open source software, maybe for good&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I really appreciate some of Kevin&amp;rsquo;s work. &lt;a href=&#34;https://fossa.io/&#34;&gt;FOSSA&lt;/a&gt; is a really
cool tool that can stand to provide some serious value to the open source
community. &lt;a href=&#34;https://tldrlegal.com/&#34;&gt;TL;DR Legal&lt;/a&gt; is a fantastic tool which has
already delivered a tremendous amount of value to open source, and I&amp;rsquo;ve
personally referenced it dozens of times. Thank you, honestly, for your work on
improving the legal landscape of open source. With Commons Clause, however,
Kevin has taken it too far. &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.en.html&#34;&gt;The four
freedoms&lt;/a&gt; are &lt;em&gt;important&lt;/em&gt;. The
only solution is to bury the Common Clause project. Kill the website and GitHub
repository, and we can try to forget this ever happened.&lt;/p&gt;
&lt;p&gt;I understand that turning back is going to be hard, which scares me. I know that
Kevin has already put a lot of effort into it and convinced himself that it&amp;rsquo;s
the Right Thing To Do. It takes work to write the clause, vet it for legal
issues, design a website (a beautiful one, I&amp;rsquo;ll give you that), and to promote
it among your target audience. I know how hard it is to distance yourself from
something you&amp;rsquo;ve staked your personal reputation on. You had only the best
intentions&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;, Kevin, but please step back from the ego and do the right thing -
take this down. You stand to undo all of your hard work for the open source
community in one fell swoop with this initiative. I&amp;rsquo;m begging you, stop while
it&amp;rsquo;s not too late.&lt;/p&gt;
&lt;p&gt;Man, two angry articles in a row. I have more technical articles coming up, I
promise.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Update 2018-08-23 03:00 UTC:&lt;/strong&gt; Richard Stallman of the Free Software
Foundation reached out asking me to clarify the use of &amp;ldquo;open source&amp;rdquo; in this
article. I have refered to the FSF&amp;rsquo;s document on essential freedoms as a
definition of &amp;ldquo;open source&amp;rdquo;. In fact, it is the definition of free software - a
distinct concept. The FSF does not advocate for open source software, but
particularly for free (or &amp;ldquo;libre&amp;rdquo;) software, of which there is some intersection
with open source software. For more information on the difference, refer to
&lt;a href=&#34;https://www.gnu.org/philosophy/open-source-misses-the-point.html&#34;&gt;Richard&amp;rsquo;s article on the
subject&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Under both the OSI and FSF definitions. The Commons Clause removes freedom 0 of the &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.en.html&#34;&gt;four essential freedoms&lt;/a&gt;. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://drewdevault.com/donate&#34;&gt;Figures here&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I intend to do an audit, but I have always (and I encourage you to always) kept an eye on the stuff we use as I come across it, looking for opportunities to donate. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The maintainer of Redis &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;As software gets abandoned, making the license more permissive is the last thing on the maintainer&amp;rsquo;s minds. So as the body of Commons Clause software grows, the graveyard will only ever fill. &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Honestly, this is a real problem that open source suffers from and I really appreciate the attempt to fix it, misguided as it may have been. But this is not okay, and Kevin needs to recognize the gravity of his mistake and move to correct it. &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>I don&#39;t trust Signal</title>
      <link>./2018/08/08/Signal.html</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/08/08/Signal.html</guid>
      <description>&lt;p&gt;Occasionally when Signal is in the press and getting a lot of favorable
discussion, I feel the need to step into various forums, IRC channels, and so
on, and explain why I don&amp;rsquo;t trust Signal. Let&amp;rsquo;s do a blog post instead.&lt;/p&gt;
&lt;p&gt;Off the bat, let me explain that I expect a tool which claims to be secure to
actually be secure. I don&amp;rsquo;t view &amp;ldquo;but that makes it harder for the average
person&amp;rdquo; as an acceptable excuse. If Edward Snowden and Bruce Schneier are going
to spout the virtues of the app, I expect it to &lt;em&gt;actually&lt;/em&gt; be secure when it
matters - when vulnerable people using it to encrypt sensitive communications
are targeted by smart and powerful adversaries.&lt;/p&gt;
&lt;p&gt;Making promises about security without explaining the tradeoffs you made in
order to appeal to the average user is unethical. Tradeoffs are necessary - but
self-serving tradeoffs are not, and it&amp;rsquo;s your responsibility to clearly explain
the drawbacks and advantages of the tradeoffs you make. If you make broad and
inaccurate statements about your communications product being &amp;ldquo;secure&amp;rdquo;, then
when the political prisoners who believed you are being tortured and hanged,
it&amp;rsquo;s on you. The stakes are serious. Let me explain why I don&amp;rsquo;t think Signal
takes them seriously.&lt;/p&gt;
&lt;h2 id=&#34;google-play&#34;&gt;Google Play&lt;/h2&gt;
&lt;p&gt;Why do I make a big deal out of Google Play and Google Play Services? Well, some
people might trust Google, the company. But up against nation states, it&amp;rsquo;s no
contest - Google has ties to the NSA, has been served secret subpoenas, and is
literally the world&amp;rsquo;s largest machine designed for harvesting and analyzing
private information about their users. Here&amp;rsquo;s what Google Play Services
&lt;em&gt;actually&lt;/em&gt; is: &lt;strong&gt;a rootkit&lt;/strong&gt;. Google Play Services lets Google do silent
background updates on apps on your phone and give them any permission they want.
Having Google Play Services on your phone means your phone is not secure.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;For the longest time, Signal wouldn&amp;rsquo;t work without Google Play Services, but
Moxie (the founder of Open Whisper Systems and maintainer of Signal) finally
fixed this in 2017. There was also a long time when Signal was only available on
the Google Play Store. Today, you can &lt;a href=&#34;https://signal.org/android/apk/&#34;&gt;download the APK directly from
signal.org&lt;/a&gt;, but&amp;hellip; well, we&amp;rsquo;ll
get to that in a minute.&lt;/p&gt;
&lt;h2 id=&#34;f-droid&#34;&gt;F-Droid&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s an alternative to the Play Store for Android.
&lt;a href=&#34;https://f-droid.org&#34;&gt;F-Droid&lt;/a&gt; is an open source app &amp;ldquo;store&amp;rdquo; (repository would
be a better term here) which only includes open source apps (which Signal
thankfully is).  By no means does Signal have to &lt;em&gt;only&lt;/em&gt; be distributed through
F-Droid - it&amp;rsquo;s certainly a compelling alternative. This has been proposed, and
Moxie has &lt;a href=&#34;https://github.com/signalapp/Signal-Android/issues/127&#34;&gt;definitively shut the discussion
down&lt;/a&gt;. Admittedly this
is from 2013, but his points and the arguments against them haven&amp;rsquo;t changed. Let
me quote some of his positions and my rebuttals:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No upgrade channel. Timely and automatic updates are perhaps the most
effective security feature we could ask for, and not having them would be a
real blow for the project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;F-Droid supports updates. If you&amp;rsquo;re concerned about moving your updates quickly
through the (minimal) bureaucracy of F-Droid, you can always run your own
repository. Maybe this is a lot of work?&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; I wonder how the workload compares
to &lt;a href=&#34;https://signal.org/blog/signal-and-giphy-update/&#34;&gt;animated gif search&lt;/a&gt;, a very important feature for security
concious users. I bet that &lt;a href=&#34;https://signal.org/blog/signal-foundation/&#34;&gt;50 million dollar donation&lt;/a&gt; could help,
given how many people operate F-Droid repositories on a budget of $0.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No app scanning. The nice thing about market is the server-side APK scanning
and signature validation they do. If you start distributing APKs around the
internet, it&amp;rsquo;s a reversion back to the PC security model and all of the
malware problems that came with it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Try searching the Google Play Store for &amp;ldquo;flashlight&amp;rdquo; and look at the permissions
of the top 5 apps that come up. All of them are harvesting and selling the
personal information of their users to advertisers. Is this some kind of joke?
F-Droid is a curated repository, like Linux distributions. Google Play is a
malware distributor.  Packages on F-Droid are reviewed by a human being and are
&lt;a href=&#34;https://f-droid.org/en/docs/Signing_Process/&#34;&gt;cryptographically signed&lt;/a&gt;. If you
run your own F-Droid repo this is even less of a concern.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not going to address all of Moxie&amp;rsquo;s points here, because there&amp;rsquo;s a deeper
problem to consider. I&amp;rsquo;ll get into more detail shortly. You can read the
6-year-old threads tearing Moxie&amp;rsquo;s arguments apart over and over again until
GitHub added the feature to lock threads, if you want to see a more in-depth
rebuttal.&lt;/p&gt;
&lt;h2 id=&#34;the-apk-direct-download&#34;&gt;The APK direct download&lt;/h2&gt;
&lt;p&gt;Last year Moxie added an official APK download to signal.org. He said this was
up for &amp;ldquo;&lt;a href=&#34;https://github.com/signalapp/Signal-Android/issues/127#issuecomment-286223680&#34;&gt;harm reduction&lt;/a&gt;&amp;rdquo;, to avoid people using unofficial
builds they find around the net. The download page is covered in warnings
telling you that it&amp;rsquo;s for advanced users only, it&amp;rsquo;s insecure, would you please
go to the Google Play store you stupid user. I wonder, has Moxie considered
communicating to people the risks of using the Google Play version?&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The APK direct download doesn&amp;rsquo;t even accomplish the stated goal of &amp;ldquo;harm
reduction&amp;rdquo;. The user has to manually verify the checksum, and figure out how to
do it on a phone, no less. A checksum isn&amp;rsquo;t a signature, by the way - if your
government- or workplace- or abusive-spouse-installed certificate authority gets
in the way they can replace the APK &lt;em&gt;and&lt;/em&gt; its checksum with whatever they want.
The app has to update itself, using a similarly insecure mechanism. F-Droid
handles updates and actually signs their packages. This is a no brainer, Moxie,
why haven&amp;rsquo;t you put Signal on F-Droid yet?&lt;/p&gt;
&lt;h2 id=&#34;why-is-signal-like-this&#34;&gt;Why is Signal like this?&lt;/h2&gt;
&lt;p&gt;So if you don&amp;rsquo;t like all of this, if you don&amp;rsquo;t like how Moxie approaches these
issues, if you want to use something else, what do you do?&lt;/p&gt;
&lt;p&gt;Moxie knows about everything I&amp;rsquo;ve said in this article. He&amp;rsquo;s a very smart guy
and I am under no illusions that he doesn&amp;rsquo;t understand everything I&amp;rsquo;ve put
forth. I don&amp;rsquo;t think that Moxie makes these choices because he thinks they&amp;rsquo;re
the right thing to do. He makes arguments which don&amp;rsquo;t hold up, derails threads,
leans on logical fallacies, and loops back around to long-debunked positions
when he runs out of ideas. I think this is deliberate. An open source software
team reads this article as a list of things they can improve on and gets
started. Moxie reads this and prepares for war. Moxie can&amp;rsquo;t come out and
say it openly, but he&amp;rsquo;s made the decisions he has made because they serve his
own interests.&lt;/p&gt;
&lt;p&gt;Lots of organizations which are pretending they don&amp;rsquo;t make self-serving decisions at
their customer&amp;rsquo;s expense rely on argumentative strategies like Moxie does. If
you can put together an argument which on the surface appears reasonable, but
requires in-depth discussion to debunk, passerby will be reassured that your
position is correct, and that the dissenters are just trolls. They won&amp;rsquo;t have
time to read the lengthy discussion which demonstrates that your conclusions
are wrong, especially if you draw the discussion out like Moxie does. It can be
hard to distinguish these from genuine positions held by the person you&amp;rsquo;re
talking to, but when it conveniently allows them to make self-serving plays,
it&amp;rsquo;s a big red flag.&lt;/p&gt;
&lt;p&gt;This is a strong accusation, I know. The thing which convinced me of its truth
is Signal&amp;rsquo;s centralized design and hostile attitude towards forks. In open
source, when a project is making decisions and running things in a way you don&amp;rsquo;t
like, you can always fork the project. This is one of the fundamental rights
granted to you by open source. It has a side effect Moxie doesn&amp;rsquo;t want, however.
It reduces his power over the project. Moxie has a clever solution to this:
centralized servers and trademarks.&lt;/p&gt;
&lt;h2 id=&#34;trust-federation-and-peer-to-peer-chat&#34;&gt;Trust, federation, and peer-to-peer chat&lt;/h2&gt;
&lt;p&gt;Truly secure systems do not require you to trust the service provider. This is
the point of end-to-end encryption. But we have to trust that Moxie is running
the server software he says he is. We have to trust that he isn&amp;rsquo;t writing down a
list of people we&amp;rsquo;ve talked to, when, and how often. We have to trust not only
that Moxie is trustworthy, but given that Open Whisper Systems is based in San
Francisco we have to trust that he hasn&amp;rsquo;t received a national security letter,
too (by the way, Signal doesn&amp;rsquo;t have a warrant canary). Moxie can &lt;em&gt;tell&lt;/em&gt; us he
doesn&amp;rsquo;t store these things, but he could. &lt;strong&gt;Truly secure systems don&amp;rsquo;t require
trust&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are a couple of ways to solve this problem, which can be used in tandem.
We can stop Signal from knowing when we&amp;rsquo;re talking to each other by using
peer-to-peer chats. This has some significant drawbacks, namely that both users
have to be online at the same time for their messages to be delivered to each
other. You can still fall back to peer-to-server-to-peer when one peer is
offline, however. But this isn&amp;rsquo;t the most important of the two solutions.&lt;/p&gt;
&lt;p&gt;The most important change is federation. Federated services are like email, in
that Alice can send an email from gmail.com to Bob&amp;rsquo;s yahoo.com address. I should
be able to stand up a Signal server, on my own hardware where I am in control of
the logs, and communicate freely with other Signal servers, including Open
Whisper&amp;rsquo;s servers. This distributes the security risks across hundreds of
operators in many countries with various data extradition laws. This turns what
would today be easy for the United States government to break and makes it much,
much more difficult. Federation would also open the possibility for bridging the
gap with several other open source secure chat platforms to all talk on the same
federated network - which would spurn competition and be a great move for users
of all chat platforms.&lt;/p&gt;
&lt;p&gt;Moxie forbids you from distributing branded builds of the Signal app, and if you
rebrand he forbids you from using the official Open Whisper servers. Because his
servers don&amp;rsquo;t federate, that means that users of Signal forks &lt;em&gt;cannot talk to
Signal users&lt;/em&gt;. This is a truly genius move. No fork of Signal&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; to date has
ever gained any traction, and never will, because you can&amp;rsquo;t talk to any Signal
users with them. In fact, there are no third-party applications which can
interact with Signal users in any way. Moxie can write as many blog posts which
appeal to wispy ideals and &amp;ldquo;moving ecosystems&amp;rdquo; as he wants&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;, but those are
all &lt;em&gt;really&lt;/em&gt; convenient excuses for an argument which allows him to design
systems which serve his own interests.&lt;/p&gt;
&lt;p&gt;No doubt these are non-trivial problems to solve. But I have &lt;em&gt;personally&lt;/em&gt; been
involved in open source projects which have collectively solved similarly
difficult problems a thousand times over with a combined budget on the order of
tens of thousands of dollars.&lt;/p&gt;
&lt;p&gt;What were you going to do with that 50 million dollars again?&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;But how is AOSP any better?&amp;rdquo; This is a common strawman counter-argument. Fact: There is empirical evidence which shows that Google Play Services does silent updates and can obtain any permission on your phone: a rootkit. There is no empirical evidence to suggest AOSP has similar functionality. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;No, it&amp;rsquo;s not. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Probably not, because that wouldn&amp;rsquo;t be self-serving. But I&amp;rsquo;m getting ahead of myself. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;See &lt;a href=&#34;https://github.com/LibreSignal/LibreSignal&#34;&gt;LibreSignal&lt;/a&gt; and &lt;a href=&#34;https://github.com/SilenceIM/Silence#silence-&#34;&gt;Silence&lt;/a&gt;, particularly &lt;a href=&#34;https://github.com/LibreSignal/LibreSignal/issues/37#issuecomment-217211165&#34;&gt;this thread&lt;/a&gt;. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;See &lt;a href=&#34;https://signal.org/blog/the-ecosystem-is-moving/&#34;&gt;Reflections: The ecosystem is moving&lt;/a&gt;. Yes, that&amp;rsquo;s the unedited title. &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Setting up a local dev mail server</title>
      <link>./2018/08/05/Local-mail-server.html</link>
      <pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/08/05/Local-mail-server.html</guid>
      <description>&lt;p&gt;As part of my work on &lt;a href=&#34;https://meta.sr.ht&#34;&gt;lists.sr.ht&lt;/a&gt;, it was necessary for
me to configure a self-contained mail system on localhost that I could test
with. I hope that others will go through a similar process in the future when
they set up &lt;a href=&#34;https://git.sr.ht/~sircmpwn/lists.sr.ht&#34;&gt;the code&lt;/a&gt; for hacking on
locally or when working on other email related software, so here&amp;rsquo;s a guide on
how you can set it up.&lt;/p&gt;
&lt;p&gt;There are lots of things you can set up on a mail server, like virtual mail
accounts backed by a relational database, IMAP access, spam filtering, and so
on. We&amp;rsquo;re not going to do any of that in this article - we&amp;rsquo;re just interested in
something we can test our email code with. To start, install your distribution
of &lt;code&gt;postfix&lt;/code&gt; and pop open that &lt;code&gt;/etc/postfix/main.cf&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s quickly touch on the less interesting config keys to change. If you want
the details about how these work, consult the postfix manual.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;myhostname&lt;/em&gt; should be your local hostname&lt;/li&gt;
&lt;li&gt;&lt;em&gt;mydomain&lt;/em&gt; should also be your local hostname&lt;/li&gt;
&lt;li&gt;&lt;em&gt;mydestination&lt;/em&gt; should be &lt;code&gt;$myhostname, localhost.$mydomain, localhost&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;mynetworks&lt;/em&gt; should be &lt;code&gt;127.0.0.0/8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;home_mailbox&lt;/em&gt; should be &lt;code&gt;Maildir/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also ensure your hostname is set up right in &lt;code&gt;/etc/hosts&lt;/code&gt;, something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1 homura.localdomain homura
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Okay, those are the easy ones. That just makes it so that your mail server
oversees mail delivery for the &lt;code&gt;127.0.0.0/8&lt;/code&gt; network (localhost) and delivers
mail to local Unix user mailboxes. It will store incoming email in each user&amp;rsquo;s
home directory at &lt;code&gt;~/Maildir&lt;/code&gt;, and will deliver email to other Unix users. Let&amp;rsquo;s
set up an email client for reading these emails with. Here&amp;rsquo;s my development
&lt;a href=&#34;http://mutt.org&#34;&gt;mutt&lt;/a&gt; config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set edit_headers=yes
set realname=&amp;quot;Drew DeVault&amp;quot;
set from=&amp;quot;sircmpwn@homura&amp;quot;
set editor=vim
set spoolfile=&amp;quot;~/Maildir/&amp;quot;
set folder=&amp;quot;~/Maildir/&amp;quot;
set timeout=5
color index blue default ~P
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Make any necessary edits. If you use mutt to read your normal mail, I suggest
also setting up an alias which runs &lt;code&gt;mutt -C path/to/dev/config&lt;/code&gt;. Now, you
should be able to send an email to yourself or other Unix accounts with
mutt&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Hooray!&lt;/p&gt;
&lt;p&gt;To accept email over SMTP, mozy on over to &lt;code&gt;/etc/postfix/master.cf&lt;/code&gt; and
uncomment the submission service. You&amp;rsquo;re looking for something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1:submission inet n       -       n       -       -       smtpd
#  -o syslog_name=postfix/submission
#  -o smtpd_tls_security_level=encrypt
#  -o smtpd_sasl_auth_enable=yes
#  -o smtpd_tls_auth_only=yes
#  -o smtpd_reject_unlisted_recipient=no
#  -o smtpd_client_restrictions=$mua_client_restrictions
#  -o smtpd_helo_restrictions=$mua_helo_restrictions
#  -o smtpd_sender_restrictions=$mua_sender_restrictions
#  -o smtpd_recipient_restrictions=
  -o smtpd_relay_restrictions=permit
#  -o milter_macro_daemon_name=ORIGINATING
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will permit delivery via localhost on the submission port (587) to anyone
whose hostname is in &lt;code&gt;$mydestination&lt;/code&gt;. A good old &lt;code&gt;postfix reload&lt;/code&gt; later and you
should be able to send yourself an email with SMTP:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ telnet 127.0.0.1 587
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is &#39;^]&#39;.
220 homura ESMTP Postfix
EHLO example.org
250-homura
250-PIPELINING
250-SIZE 10240000
250-VRFY
250-ETRN
250-ENHANCEDSTATUSCODES
250-8BITMIME
250-DSN
250 SMTPUTF8
MAIL FROM:&amp;lt;sircmpwn@homura&amp;gt;
250 2.1.0 Ok
RCPT TO:&amp;lt;sircmpwn@homura&amp;gt; 
250 2.1.5 Ok
DATA
354 End data with &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;.&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;
From: Drew DeVault &amp;lt;sircmpwn@homura&amp;gt;
To: Drew DeVault &amp;lt;sircmpwn@homura&amp;gt;
Subject: Hello world

Hey there 
.
250 2.0.0 Ok: queued as 8267416366B
QUIT
221 2.0.0 Bye
Connection closed by foreign host.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pull up mutt again to read this. Any software which will be sending out mail and
speaks SMTP (for example, sr.ht) can be configured now. Last step is to set up
LTMP delivery to lists.sr.ht or any other software you want to process incoming
emails. I want most mail to deliver normally - I only want LTMP configured for
my lists.sr.ht test domain. I&amp;rsquo;ll set up some transport maps for this purpose. In
&lt;code&gt;main.cf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local_transport = local:$myhostname
transport_maps = hash:/etc/postfix/transport
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then I&amp;rsquo;ll edit &lt;code&gt;/etc/postfix/transport&lt;/code&gt; and add these lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lists.homura.localdomain lmtp:unix:/tmp/lists.sr.ht-lmtp.sock
homura.localdomain local:homura
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will deliver mail normally to &lt;code&gt;$user@homura&lt;/code&gt; (my hostname), but will
forward mail sent to &lt;code&gt;$user@lists.homura&lt;/code&gt; to the Unix socket where the
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/lists.sr.ht/tree/master/listssrht-lmtp&#34;&gt;lists.sr.ht LMTP
server&lt;/a&gt; lives.&lt;/p&gt;
&lt;p&gt;Add the subdomain to &lt;code&gt;/etc/hosts&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1 lists.homura.localdomain lists.homura
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run &lt;code&gt;postmap /etc/postfix/transport&lt;/code&gt; and &lt;code&gt;postfix reload&lt;/code&gt; and you&amp;rsquo;re good to go.
If you have the lists.sr.ht daemon working, send some emails to
&lt;code&gt;~someone/example-list@lists.$hostname&lt;/code&gt; and you should see them get picked up.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Mutt crash course: run &lt;code&gt;mutt&lt;/code&gt;, press &lt;code&gt;m&lt;/code&gt; to compose a new email, enter the recipient (&lt;code&gt;$USER@$HOSTNAME&lt;/code&gt; to send to yourself) and the subject, then compose your email, exit the editor, and press &lt;code&gt;y&lt;/code&gt; to send. A few moments later the email should arrive. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Writing a Wayland compositor with wlroots: shells</title>
      <link>./2018/07/29/Wayland-shells.html</link>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/07/29/Wayland-shells.html</guid>
      <description>&lt;p&gt;I apologise for not writing about wlroots more frequently. I don&amp;rsquo;t really enjoy
working on the McWayface codebase this series of blog posts was originally
about, so we&amp;rsquo;re just going to dismiss that and talk about the various pieces of
a Wayland compositor in a more free-form style. I hope you still find it useful!&lt;/p&gt;
&lt;p&gt;Today, we&amp;rsquo;re going to talk about shells. But to make sure we&amp;rsquo;re on the same page
first, a quick refresher on surfaces. A basic primitive of the Wayland protocol
is the concept of a &amp;ldquo;surface&amp;rdquo;. A surface is a rectangular box of pixels sent
from the client to the compositor to display on-screen. A surface can source
its pixels from a number of places, including raw pixel data in memory, or
opaque handles to GPU resources that can be rendered without copying pixels on
the CPU. These surfaces can also evolve over time, using &amp;ldquo;damage&amp;rdquo; to indicate
which parts have changed to reduce the workload of the compositor when
re-rendering them. However, making a surface and filling it with pixels is not
enough to get the compositor to show them.&lt;/p&gt;
&lt;p&gt;Shells are how surfaces in Wayland are given meaning. Consider that there are
several kinds of surfaces you&amp;rsquo;ll encounter on your desktop. There are
application windows, sure, but there are also tooltips, right-click menus and
menubars, desktop panels, wallpapers, lock screens, on-screen keyboards, and so
on. Each of these has different semantics - your wallpaper cannot be minimized
or dragged around and resized, but your application windows can be.  Likewise,
your application windows cannot cover the entire screen and soak up all input
like your lock screen can. Each of these use cases is fulfilled with a &lt;em&gt;shell&lt;/em&gt;,
which generally takes a surface resource, assigns it a role (e.g.  application
window), and returns a handle with shell-specific interfaces for manipulating
it.&lt;/p&gt;
&lt;h2 id=&#34;shells-in-wlroots&#34;&gt;Shells in wlroots&lt;/h2&gt;
&lt;p&gt;I want to first discuss features common to shells as implemented by wlroots.
Each shell has a shell-specific interface that sits on top of the surface. Each
time a client connects and creates one of these, the shell raises a &lt;code&gt;wl_signal&lt;/code&gt;,
&lt;code&gt;events.new_surface&lt;/code&gt;, and passes to it a pointer to a shell-specific structure
which encapsulates that shell surface&amp;rsquo;s state.&lt;/p&gt;
&lt;p&gt;Many shells require some configuration between the creation of the shell surface
and displaying it on screen. For example, during this period application windows
will typically set the window title so that the compositor never has to show an
empty title. All Wayland interfaces aim for atomicity, so that all changes are
applied in a single fell swoop and we never display an invalid frame. This is
why Wayland is known for addressing vsync problems X suffers from, but is
pervasive across the ecosystem. Even things like setting the window title are
done atomically.&lt;/p&gt;
&lt;p&gt;So, once the client is done communiciating the new shell surface&amp;rsquo;s desired
traits to the compositor, it will commit the surface to atomically apply the
changes. The first time this happens, the client is ready to be shown, and the
shell-specific wlroots shell surface interface will communicate this to you with
the surface&amp;rsquo;s &lt;code&gt;events.map&lt;/code&gt; signal. The reverse is sometimes communicated with
&lt;code&gt;events.unmap&lt;/code&gt;, when the shell surface should be hidden.&lt;/p&gt;
&lt;h2 id=&#34;xdg-shell&#34;&gt;xdg-shell&lt;/h2&gt;
&lt;p&gt;xdg-shell is currently the only shell whose protocol is considered stable, and
it is the shell which describes application windows. You can read the xdg-shell
protocol specification (XML)
&lt;a href=&#34;https://cgit.freedesktop.org/wayland/wayland-protocols/tree/stable/xdg-shell/xdg-shell.xml&#34;&gt;here&lt;/a&gt;
(you are strongly encouraged to read through the XML for all protocols mentioned
in this article).&lt;/p&gt;
&lt;p&gt;The xdg-shell is quite complicated, as it attempts to encapsulate every feature
of a typical graphical desktop session in a single protocol. An xdg-shell
surface is a &lt;code&gt;wl_surface&lt;/code&gt; wrapped twice - once in a &lt;code&gt;xdg_surface&lt;/code&gt; and then again
in a &lt;code&gt;xdg_toplevel&lt;/code&gt; or &lt;code&gt;xdg_popup&lt;/code&gt;, depending on what kind of window it is. The
wlroots &lt;code&gt;wlr_xdg_surface&lt;/code&gt; type (the one emitted by
&lt;code&gt;xdg_shell.events.new_surface&lt;/code&gt;) contains tagged union of &lt;code&gt;wlr_xdg_toplevel&lt;/code&gt; and
&lt;code&gt;wlr_xdg_popup&lt;/code&gt;, selected from the &lt;code&gt;role&lt;/code&gt; field. You can wire up the xdg-shell
with &lt;code&gt;wlr_xdg_shell_create&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Most application windows you see are called toplevels. These windows are the
root node of a tree of surfaces which may include arbitrarily nested popups, for
example, as you navigate through a deep menu. These windows can have titles;
parent surfaces; app IDs (e.g. &amp;ldquo;gnome-calculator&amp;rdquo;); minimum and maximum sizes;
and maximized, minimized, and fullscreen states. They also often&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; draw their
own window decorations and drop shadows, and tell the compositor when you click
and drag on the titlebar to move or resize the window.  Unfortunately, if the
client is not responding or misbehaving, the user cannot use these controls to
move, resize, or minimize the window&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The compositor can tell the window to adopt a specific size, though the client
can choose to ignore this. The compositor also lets the client know when it&amp;rsquo;s
&amp;ldquo;activated&amp;rdquo;, which is used by GTK+, for example, to start rendering the caret
and render a different set of client-side decorations. It can also toggle the
fullscreen, minimized, maximized, and other states.&lt;/p&gt;
&lt;p&gt;Each of the various state transitions involved are expressed through
the &lt;code&gt;wlr_xdg_toplevel.events&lt;/code&gt; signals. The most recent atomically agreed-upon
state is stored in &lt;code&gt;wlr_xdg_toplevel.current&lt;/code&gt;. When each of the signals in
&lt;code&gt;events&lt;/code&gt; are emitted, the state change will have been applied to
&lt;code&gt;client_pending&lt;/code&gt;. However, you must consent to these changes by calling a
corresponding function on the xdg_toplevel (e.g.
&lt;code&gt;wlr_xdg_toplevel_set_fullscreen&lt;/code&gt;), which will apply the change to
&lt;code&gt;server_pending&lt;/code&gt;. You shouldn&amp;rsquo;t consider these changes atomically set until the
&lt;code&gt;wlr_surface.events.commit&lt;/code&gt; signal has been raised. At that point, you can start
showing the window in fullscreen or whatever. There&amp;rsquo;s also some
configure/ack-configure stuff going on here which may eventually become relevant
to you&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, but wlroots takes care it for the most part.&lt;/p&gt;
&lt;p&gt;The popup interface is used to show a &amp;ldquo;popup&amp;rdquo; window, which can be used for a
variety of purposes. These include context menus (or &amp;ldquo;right click&amp;rdquo; menus),
tooltips, some confirmation modals&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;, etc. The lifecycle of a popup resource
is managed similarly to that of a toplevel resource, of course with different
states that can be atomically updated. Arguably, the most fundamental of these
states is the relative X and Y position of the popup with respect to its parent
toplevel surface.&lt;/p&gt;
&lt;p&gt;The position of the popup can be influenced by an extraordinarily complicated
interface called &lt;code&gt;xdg_positioner&lt;/code&gt;, also provided by xdg-shell. Since these
articles focus on the compositor side of things, and they focus on using
wlroots, I can thankfully save you from understanding most of the specifics of
this interface. The purpose of this interface is to adjust the position and size
of &lt;code&gt;xdg_popup&lt;/code&gt; surfaces with respect to the display they live on - for example,
to prevent them from being partially off-screen. The rub is that if you&amp;rsquo;re using
wlroots, when the popup is created you can just call
&lt;code&gt;wlr_xdg_popup_unconstrain_from_box&lt;/code&gt; to deal with everything, passing it a box
which represents the available space surrounding the parent toplevel for the
popup to be placed in.&lt;/p&gt;
&lt;p&gt;Popups are also able to take &amp;ldquo;grabs&amp;rdquo;, which indicate that they should keep
focus without respect to any of the other goings-on of the seat. This is used so
that you can, for example, use the keyboard to pick items from a context menu.
Grabs are automatically handled for you with &lt;code&gt;wlr_seat&lt;/code&gt; for you. If you want to
deny or cancel grabs, you can do so through the appropriate &lt;code&gt;wlr_seat&lt;/code&gt;
interfaces.&lt;/p&gt;
&lt;p&gt;One last note: xdg-shell only recently became stable, so client support for the
stable version is hit and miss. The last unstable protocol, xdg-shell v6, is
also supported by wlroots. It mostly behaves in the same way. Eventually it
will be removed from wlroots.&lt;/p&gt;
&lt;h2 id=&#34;layer-shell&#34;&gt;layer-shell&lt;/h2&gt;
&lt;p&gt;Under the umbrella of wlroots, 8 Wayland compositors have been collaborating on
the design of a new shell for desktop shell components. The result is &lt;a href=&#34;https://github.com/swaywm/wlr-protocols/blob/master/unstable/wlr-layer-shell-unstable-v1.xml&#34;&gt;layer
shell
(XML)&lt;/a&gt;.
The purpose of this shell is to provide an interface for desktop components like
panels, lock screens, wallpapers, on-screen keyboards, notifications, and so on,
to display on your compositor.&lt;/p&gt;
&lt;p&gt;The layer-shell is organized into four discrete layers: background, bottom, top,
and overlay, which are rendered in that order. Between bottom and top,
application windows are displayed. A wallpaper client might choose to go in the
bottom layer, while a notification could show on the top layer, and a panel on
the bottom layer.&lt;/p&gt;
&lt;p&gt;The compositor&amp;rsquo;s job is to decide where to place each surface and how large the
surface can be. The client can specify either or both of its dimensions (width
and height) for the compositor to specify, then provide some hints for the
compositor to do so. The client can, for example, choose to be anchored to edges
of the screen. A notification might be anchored to &lt;code&gt;TOP | RIGHT&lt;/code&gt;, and a panel
might be anchored to &lt;code&gt;LEFT | BOTTOM | RIGHT&lt;/code&gt;. A layer surface anchored to an
edge, like our panel, can also request an exclusive zone, which is a number of
pixels from the edge that should not be occluded by other layer surfaces or
application windows. This is used, for example, when maximizing application
windows to prevent them from occluding the panel (or in sway&amp;rsquo;s case, when
arranging tiled windows).&lt;/p&gt;
&lt;p&gt;Layer surfaces also have special keyboard input semantics. Some layer surfaces
want to receive keyboard input, such as an application launcher overlay. Others
might prefer that application windows continue to receive keyboard events, such
as a notification. To this end, a layer surface can toggle a boolean indicating
its &amp;ldquo;keyboard interactivity&amp;rdquo;. For layers beneath application windows, layer
surfaces participate in keyboard focus normally, usually meaning they need to be
clicked to receive keyboard focus. Above application windows, the top-most layer
always has keyboard focus if it requests it.&lt;/p&gt;
&lt;p&gt;In wlroots, you can wire up a layer shell to the display with
&lt;code&gt;wlr_layer_shell_create&lt;/code&gt;. From there it behaves similarly to xdg-shell with
respect to the creation of new surfaces and the handling of atomic state. The
main concern of yours is that, when the surface is committed, you need to
arrange the surfaces in the affected layer and communicate the final dimensions
of the layer surface to the client with &lt;code&gt;wlr_layer_surface_configure&lt;/code&gt;. You can
implement the arrangement however you want, but you may find the &lt;a href=&#34;https://github.com/swaywm/sway/blob/master/sway/desktop/layer_shell.c#L18-L215&#34;&gt;sway
implementation&lt;/a&gt; to be a useful reference. Also check out the
wlroots &lt;a href=&#34;https://github.com/swaywm/wlroots/blob/master/examples/layer-shell.c&#34;&gt;example client&lt;/a&gt; to test out your implementation.&lt;/p&gt;
&lt;p&gt;Layer surfaces can also have popups, for example when right-clicking on a
taskbar. This borrows xdg-shell&amp;rsquo;s xdg_popup interface, except the parent is set
to the layer surface (this is explicitly allowed for through the xdg_popup spec,
and you may see future shells doing something similar). Most of your code for
xdg_popups can be reused with layer surfaces.&lt;/p&gt;
&lt;h2 id=&#34;xwayland&#34;&gt;Xwayland&lt;/h2&gt;
&lt;p&gt;Some Wayland developers turn up their nose when I refer to Xwayland as a shell,
and perhaps with good reason. However, wlroots treats Xwayland like a shell, so
the API remains consistent. For that reason, we&amp;rsquo;ll treat it as one in this
article as well.&lt;/p&gt;
&lt;p&gt;We figured that you might be writing a Wayland compositor so that you &lt;em&gt;don&amp;rsquo;t&lt;/em&gt;
have to write an X11 window manager, too. So we wrote one for you, and it&amp;rsquo;s
called &lt;code&gt;wlr_xwayland&lt;/code&gt;. This interface provides an abstraction over Xwayland
which makes it behave similarly to our other shells. It still lets you dig your
heels into it in any degree so that you can adjust the behavior of your
compositor to suit X-specific needs as necessary.&lt;/p&gt;
&lt;p&gt;The resulting wlr_xwayland API is similar to the other shells we&amp;rsquo;ve described.
We have a series of events for configuring Xwayland surfaces, a map and unmap
event, and we expose a whole bunch of info about Xwayland surfaces so you can
make the judgement call about how much or how little to obey their requests (X11
windows make more unreasonable requests than other shells, since X11 was the
wild wild west and a lot of clients took advantage of that).&lt;/p&gt;
&lt;p&gt;This should be enough to get you started, and if you have questions ask on IRC
for the time being. I could go into more detail, but I think Xwayland deserves
its own article, and probably not written by me.&lt;/p&gt;
&lt;h2 id=&#34;other-shells&#34;&gt;Other shells&lt;/h2&gt;
&lt;p&gt;There are three other shells of note. Two are not very interesting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wl_shell, the now-deprecated original desktop shell of Wayland&lt;/li&gt;
&lt;li&gt;ivi-shell, used for &amp;ldquo;in-vehicle infotainment&amp;rdquo; systems running Wayland&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wlroots supports neither (though I guess we&amp;rsquo;d accept a patch adding IVI-shell
support, maybe if the vehicle industry was open to improving that protocol&amp;hellip;),
and neither is interesting for desktops, phones, etc. You probably don&amp;rsquo;t need to
worry about them.&lt;/p&gt;
&lt;p&gt;The other is the fullscreen-shell, which is used for optimizing the rendering of
fullscreen appliations. I don&amp;rsquo;t know much about how it works, and it&amp;rsquo;s not
supported by wlroots yet; it&amp;rsquo;s not required of a functional Wayland compositor.
Maybe someday!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://cgit.freedesktop.org/wayland/wayland-protocols/tree/unstable/xdg-decoration/xdg-decoration-unstable-v1.xml&#34;&gt;But not always&lt;/a&gt;. You&amp;rsquo;re welcome. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Which is one of the reasons we made the protocol mentioned in footnote&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;For example, this is relevant for sway, which needs to reach deeper into our shell implementations to atomically syncronize the resizing of several clients at once when rearranging the layout. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Some popup windows, the GTK+ file chooser for example, prefer to make a new xdg_toplevel and assign its parent to the application window. This is useful if you want your window to show up in taskbars, be able to be minimized and maximized separately, etc. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Git is already federated &amp; decentralized</title>
      <link>./2018/07/23/Git-is-already-distributed.html</link>
      <pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/07/23/Git-is-already-distributed.html</guid>
      <description>&lt;p&gt;There have always been murmurs about &amp;ldquo;replacing GitHub with something
decentralized!&amp;rdquo;, but in the wake of the Microsoft acquisition these murmurs have
become conversations. In particular, this blog post is a direct response to
forge-net (formerly known as &lt;a href=&#34;https://github.com/git-federation/gitpub&#34;&gt;GitPub&lt;/a&gt;). They want to federate and
decentralize git using ActivityPub, the same technology leveraged by Mastodon
and PeerTube. But get this: git is already federated &lt;em&gt;and&lt;/em&gt; decentralized!&lt;/p&gt;
&lt;p&gt;I already spoke at length about how a large minority of the git community uses
email for collaboration in my &lt;a href=&#34;https://drewdevault.com/2018/07/02/Email-driven-git.html&#34;&gt;previous article&lt;/a&gt; on the subject.
Definitely give it a read if you haven&amp;rsquo;t already. In this article I want to
focus on comparing this model with the possibilities afforded by ActivityPub
and provide direction for new forge&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; projects to work towards embracing and
improving git&amp;rsquo;s email-based collaboration tools.&lt;/p&gt;
&lt;p&gt;The main issue with using ActivityPub for decentralized git forges boils down to
email simply being a better choice. The advantages of email are numerous. It&amp;rsquo;s
already standardized and has countless open source implementations, many in the
standard libraries of almost every programming language. It&amp;rsquo;s decentralized and
federated, and it&amp;rsquo;s &lt;em&gt;already&lt;/em&gt; integrated with git. Has been since day one!  I
don&amp;rsquo;t think that we should replace web forges with our email clients, not at
all. Instead, web forges should embrace email to communicate with each other.&lt;/p&gt;
&lt;p&gt;Let me give an example of how this could play out. On my platform,
&lt;a href=&#34;https://meta.sr.ht&#34;&gt;sr.ht&lt;/a&gt;, users can view their git repositories on the web
(duh). One of my goals is to add some UI features here which let them select a
range of commits and prepare a patchset for submission via &lt;a href=&#34;https://www.git-scm.com/docs/git-send-email&#34;&gt;git
send-email&lt;/a&gt;. They&amp;rsquo;ll enter an email address (or addresses) to
send the patch(es) to, and we&amp;rsquo;ll send it along on their behalf.  This email
address might be a mailing list on another sr.ht instance in the wild! If so,
the email gets recognized as a patch and displayed on the web with a pretty diff
and code review tools. Inline comments automatically get formatted as an email
response. This shows up in the user&amp;rsquo;s inbox and sr.ht gets copied on it, showing
it on the web again.&lt;/p&gt;
&lt;p&gt;I think that workflow looks an awful lot like the workflow forge-net hopes to
realize! Here&amp;rsquo;s where it gets good, though. What if the emails the user puts in
are &lt;code&gt;linux-kernel@vger.kernel.org&lt;/code&gt; and a handful of kernel maintainers? Now your
git forge can suddenly be used to contribute to the Linux kernel! ActivityPub
would build a &lt;em&gt;second&lt;/em&gt;, incompatible federation of projects, while ignoring the
already productive federation which powers many of our most important open
source projects.&lt;/p&gt;
&lt;p&gt;git over email is already supported by a tremendous amount of open source
software. There&amp;rsquo;s tools like &lt;a href=&#34;https://www.gnu.org/software/mailman/&#34;&gt;mailman&lt;/a&gt; which provide mailing lists and
public archives, or &lt;a href=&#34;https://public-inbox.org/&#34;&gt;public-inbox&lt;/a&gt;, which archives email in git,
or &lt;a href=&#34;http://jk.ozlabs.org/projects/patchwork/&#34;&gt;patchworks&lt;/a&gt; for facilitating code review over email. Some email
clients have grown features which make them more suitable for git, such as
&lt;a href=&#34;http://mutt.org&#34;&gt;mutt&lt;/a&gt;. These are the nuts and bolts of hundreds of important projects,
including Linux, *BSD, gcc, Clang, postgresql, MariaDb, emacs, vim, ffmpeg,
Linux distributions like Debian, Fedora, Arch, Alpine, and countless other
projects, including git itself! These projects are incredibly important,
foundational projects upon which our open source empire is built, and the tools
they use already provide an open, federated protocol for us to talk to.&lt;/p&gt;
&lt;p&gt;Not only is email &lt;em&gt;better&lt;/em&gt;, but it&amp;rsquo;s also &lt;em&gt;easier&lt;/em&gt; to implement. Programming
tools for email are very mature. I recently started experimenting with building
an ActivityPub service, and it was crazy difficult. I had to write a whole lot
of boilerplate and understand new and still-evolving specifications, not to
mention setting up a public-facing server with a domain and HTTPs to test
federation with other implementations. Email is comparatively easy, it&amp;rsquo;s built
into the standard library. You can shell out to git and feed the patch to the
nearest SMTP library in only a handful of lines of code. I bet every single
person who reads this article already has an email address, so the setup time
approaches zero.&lt;/p&gt;
&lt;p&gt;Email also puts the power in the hands of the user right away. On Mastodon there
are occasional problems of instance owners tearing down their instance on short
notice, taking with them all of their user&amp;rsquo;s data. If everything is being
conducted over email instead, all of the data already lives in the user&amp;rsquo;s inbox.
Freely available tools can take their mail spool and publish a new archive if
our services go down. Mail archives can be trivially made redundant across many
services. This stuff is seriously resilient to failure. Email was designed when
networks were measured in bits per second and often connected through a single
unreliable route!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not suggesting that the approach these projects use for collaboration is
perfect. I&amp;rsquo;m suggesting that we should embrace it and solve these problems
instead of throwing out the baby with the bathwater. Tools like &lt;code&gt;git send-email&lt;/code&gt;
can be confusing at first, which is why we should build tools like web forges
that smooth over the process for novices, and write better docs to introduce
people to the tools (I recently &lt;a href=&#34;https://man.sr.ht/git.sr.ht/send-email.md&#34;&gt;wrote a guide&lt;/a&gt; for sr.ht users).&lt;/p&gt;
&lt;p&gt;Additionally, many popular email clients have bastardized email to the point
where the only way to use git+email for many people starts with abandoning the
email client they&amp;rsquo;re used to using. This can also be solved by having forges
send the emails for them, and process the replies. We can also support open
source mail clients by building better tools to integrate our emails with them.
Setting up the mail servers on the other end can be difficult, too, but we
should invest in better mail server software, something which would definitely
be valuable even setting aside the matter of project forges.&lt;/p&gt;
&lt;p&gt;We need to figure out something for bugs as well, perhaps based on Debian&amp;rsquo;s work
on &lt;a href=&#34;https://www.debian.org/Bugs/&#34;&gt;Debbugs&lt;/a&gt;. Other areas of development, such as
continuous integration, I find are less difficult problems. Many build services
already support sending the build results by email, we just need to find a way
to get our patches to them (something I&amp;rsquo;m working on with sr.ht). But we should
take these problems one step at a time. Let&amp;rsquo;s focus on improving the patch
workflow git endorses, and as our solutions shake out the best solutions to our
other problems will become more and more apparent.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Forge refers to any software which provides comprehensive tools for project hosting. This originally referred to SourceForge but is now a category of software which includes GitHub, BitBucket, GitLab, Gogs/Gitea, etc. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Input handling in wlroots</title>
      <link>./2018/07/17/Input-handling-in-wlroots.html</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/07/17/Input-handling-in-wlroots.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve said before that wlroots is a &amp;ldquo;batteries not included&amp;rdquo; kind of library, and
one of the places where that is most apparent is with our approach to input
handling. We implemented a very hands-off design for input, in order to support
many use-cases: desktop input, phones with and without USB-OTG HIDs plugged in,
multiple mice bound to a single cursor, multiple keyboards per seat, simulated
input from fake input devices, on-screen keyboards, input which is processed by
the compositor but not sent to clients&amp;hellip; we support all of these use-cases and
even more. However, the drawback of our powerful design is that it&amp;rsquo;s confusing.
Very confusing.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s begin by forgetting about the Wayland part entirely. After all, wlroots is
flexible enough that you can use it without writing a Wayland compositor at all!
It can be used in a similar fashion to tools like GLFW and SDL, to abstract
low-level input (via e.g. libinput) and graphical output (via e.g. DRM). Let&amp;rsquo;s
start here, simply getting input events from wlroots in the first place.&lt;/p&gt;
&lt;p&gt;One of the fundamental building blocks of wlroots is the &lt;code&gt;wlr_backend&lt;/code&gt;,
which is a resource that abstracts the underlying hardware and exposes a
consistent API for outputs and input devices. Outputs have been discussed
elsewhere, so let&amp;rsquo;s focus just on input devices. Each backend provides an
event: &lt;a href=&#34;https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/backend.h#L17&#34;&gt;&lt;code&gt;wlr_backend.events.new_input&lt;/code&gt;&lt;/a&gt;. The signal is called with a
reference to a &lt;a href=&#34;https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_input_device.h&#34;&gt;&lt;code&gt;wlr_input_device&lt;/code&gt;&lt;/a&gt; each time a new input
device appears on the backend - for example, when you plug a mouse into your
computer when using the libinput backend.&lt;/p&gt;
&lt;p&gt;The input device can be one of five types, appropriately identified by the
&lt;code&gt;type&lt;/code&gt; field. The types are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WLR_INPUT_DEVICE_KEYBOARD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WLR_INPUT_DEVICE_POINTER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WLR_INPUT_DEVICE_TOUCH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WLR_INPUT_DEVICE_TABLET_TOOL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WLR_INPUT_DEVICE_TABLET_PAD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The type indicates which member of the anonymous union is valid. If
&lt;code&gt;wlr_input_device-&amp;gt;type == WLR_INPUT_DEVICE_KEYBOARD&lt;/code&gt;, then
&lt;code&gt;wlr_input_device-&amp;gt;keyboard&lt;/code&gt; is a valid pointer to a
&lt;a href=&#34;https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_keyboard.h&#34;&gt;&lt;code&gt;wlr_keyboard&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s examine the wlr keyboard more closely now. The keyboard struct also
provides its own events, like &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;keymap&lt;/code&gt;. If you want to process input
from this keyboard, you need to set up an &lt;a href=&#34;https://xkbcommon.org/doc/current/&#34;&gt;xkbcommon&lt;/a&gt; context for
ingesting the raw scancodes emitted by the &lt;code&gt;key&lt;/code&gt; event and converting them to
Unicode and keysyms (e.g. &amp;ldquo;Up&amp;rdquo;) with an XKB keymap. Most of the wlroots examples
&lt;a href=&#34;https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/examples/simple.c#L114&#34;&gt;implement this&lt;/a&gt; if you&amp;rsquo;re looking for a simple reference.&lt;/p&gt;
&lt;p&gt;When these events are sent, we just let you process them as you please. They do
not automatically get propagated to any Wayland clients. Communicating these
events to the clients is your responsibility, though we provide you tools to
help - we&amp;rsquo;ll get into that shortly. You don&amp;rsquo;t even have to source the input you
give to Wayland clients from a &lt;code&gt;wlr_input_device&lt;/code&gt;, you can just as easily make
them up or get them from the network or anywhere else.&lt;/p&gt;
&lt;p&gt;Before we get into details on how to send events to clients, let&amp;rsquo;s examine the
other components in your compositor&amp;rsquo;s input code. First, let&amp;rsquo;s talk about the
cursor.&lt;/p&gt;
&lt;p&gt;We provide the &lt;a href=&#34;https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_pointer.h&#34;&gt;&lt;code&gt;wlr_pointer&lt;/code&gt;&lt;/a&gt; abstraction for getting events from
a &amp;ldquo;pointer&amp;rdquo; device, like a mouse. However, because batteries are not included,
you will find that we only tell you what the pointer device is doing - we don&amp;rsquo;t
act on it. If you want to, for example, display a cursor image &lt;img
src=&#34;https://sr.ht/hf39.png&#34; style=&#34;display: inline; margin: 0; padding: 0;&#34; /&gt;
on screen which moves around when the mouse does, you need to wire this up
yourself. We have tools which can help.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s talk about getting the cursor image to show. You can source the
image from anywhere you want, but you will probably want to leverage
&lt;a href=&#34;https://github.com/swaywm/wlroots/blob/master/include/wlr/xcursor.h&#34;&gt;&lt;code&gt;wlr_xcursor&lt;/code&gt;&lt;/a&gt;. This is a small wlroots module (forked from the
&lt;code&gt;wayland-cursor&lt;/code&gt; library used by Wayland clients) which can read Xcursor themes,
the kind your user will already have installed on their system. Loading up a
cursor theme and getting the pixels from it is pretty straightforward. But what
should you do with those pixels?&lt;/p&gt;
&lt;p&gt;Well, now we have to introduce hardware cursors. Many backends support
&amp;ldquo;hardware&amp;rdquo; cursors, which is a feature provided by your low-level graphics stack
(e.g. GPU drivers) for rendering a cursor on the screen. Hardware cursors are
composited by the GPU, which means you can move the cursor around without
re-drawing the things underneath it. This is the most energy- and CPU-efficient
way of drawing your cursor, and you can do it with
&lt;a href=&#34;https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_output.h#L179-L190&#34;&gt;&lt;code&gt;wlr_output_cursor_set_image&lt;/code&gt;&lt;/a&gt;, specifying which &lt;code&gt;wlr_output&lt;/code&gt;
you want it to appear on and at what coordinates. Not all configurations support
hardware cursors, but &lt;code&gt;wlr_output&lt;/code&gt; automatically falls back to software cursors
if need be.&lt;/p&gt;
&lt;p&gt;Now you have all of the pieces to show a cursor on screen that moves with the
mouse. You can store some X and Y coordinates somewhere, grab an image from an
Xcursor theme, and throw it at your &lt;code&gt;wlr_output&lt;/code&gt;, then process input events and
move it around. Then&amp;hellip; you need to consider multiple outputs. And you need to
make sure that it can&amp;rsquo;t be moved outside of an output. And you need to let the
user move it around with a drawing tablet or touch screen as well. And&amp;hellip; well,
it&amp;rsquo;s about to get complicated. That&amp;rsquo;s where our next tool comes in!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_cursor.h&#34;&gt;&lt;code&gt;wlr_cursor&lt;/code&gt;&lt;/a&gt; is how wlroots saves you from some of this work. It
can display a cursor image on-screen, tie it to multiple input devices,
constrain it to your outputs and move it across multiple displays. It can also
map input from certain devices to certain outputs or regions of the output
layout, change the geometry of inputs from a drawing tablet, and more.&lt;/p&gt;
&lt;p&gt;To use &lt;code&gt;wlr_cursor&lt;/code&gt;, you should create one (&lt;code&gt;wlr_cursor_create&lt;/code&gt;) and as the
backend emits &lt;code&gt;new_input&lt;/code&gt; events, bind them to the cursor with
&lt;code&gt;wlr_cursor_attach_input_device&lt;/code&gt;. &lt;code&gt;wlr_cursor&lt;/code&gt; then raises aggregated events
from all of its devices, which you can catch and handle accordingly - usually
calling a function like &lt;code&gt;wlr_cursor_move&lt;/code&gt; and propagating the event to Wayland
clients. You also need to attach a &lt;a href=&#34;https://github.com/swaywm/wlroots/blob/master/include/wlr/types/wlr_output_layout.h&#34;&gt;&lt;code&gt;wlr_output_layout&lt;/code&gt;&lt;/a&gt; to
the cursor, so it knows how to constrain the cursor movement and can handle
hardware cursors for you.&lt;/p&gt;
&lt;p&gt;Aside: the &lt;code&gt;wlr_output_layout&lt;/code&gt; module allows you to configure an arrangement of
&lt;code&gt;wlr_output&lt;/code&gt;s in physical space. Its function is fairly straightforward and
largely unrelated to our topic - I suggest reading through the header and asking
questions if you need help. Once you make one of these and hand it to a
&lt;code&gt;wlr_cursor&lt;/code&gt;, you have a cursor on-screen which moves around when you provide
input and correctly moves throughout a multi-display setup.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Okay, now that we have all of those pieces in place, we can finally start talking
about sending input events to Wayland clients! Before we get into how &lt;em&gt;wlroots&lt;/em&gt;
does it, let&amp;rsquo;s talk about how &lt;em&gt;Wayland&lt;/em&gt; does it in general.&lt;/p&gt;
&lt;p&gt;The top-level resource which manages input for a Wayland client is the
&lt;code&gt;wl_seat&lt;/code&gt;. One seat, in rough terms, maps to a single set of input devices used
by a user (a user who is presumably sitting at a seat in front of their
computer). A seat can have up to one keyboard, pointer, touch device, or drawing
tablet each. Each of these devices can then &lt;em&gt;enter&lt;/em&gt; or &lt;em&gt;leave&lt;/em&gt; any of the
client&amp;rsquo;s surfaces at the compositor&amp;rsquo;s orders.&lt;/p&gt;
&lt;p&gt;When you bind to a &lt;code&gt;wl_seat&lt;/code&gt;&amp;rsquo;s &lt;code&gt;wl_keyboard&lt;/code&gt; and &lt;code&gt;wl_keyboard.enter&lt;/code&gt; is raised
on a surface, it means your surface has keyboard focus. The compositor will
follow-up with (or will have already sent) a &lt;code&gt;wl_keyboard.keymap&lt;/code&gt; signal to let
you know the layout of this keyboard (e.g. &lt;code&gt;us-intl&lt;/code&gt;, &lt;code&gt;de&lt;/code&gt;, &lt;code&gt;ru&lt;/code&gt;, etc) in the
form of an xkbcommon keymap (the same format we were using with &lt;code&gt;wlr_keyboard&lt;/code&gt;
earlier - hint hint). Some number of &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;modifier&lt;/code&gt; events will likely
follow as the user taps away.&lt;/p&gt;
&lt;p&gt;When you bind to a &lt;code&gt;wl_seat&lt;/code&gt;&amp;rsquo;s &lt;code&gt;wl_pointer&lt;/code&gt; and &lt;code&gt;wl_pointer.enter&lt;/code&gt; is raised, it
means a pointer has moved over one of your surfaces. Note that this can be an
entirely separate occasion from receiving keyboard focus. The client is then
expected to provide a cursor image to display (at the moment, Wayland &lt;em&gt;requires&lt;/em&gt;
client side cursors. They have to do the whole Xcursor dance we did on the
wlroots side earlier, too. We have some plans to correct this&amp;hellip;). Some number
of &lt;code&gt;motion&lt;/code&gt; and &lt;code&gt;button&lt;/code&gt; events will likely follow as the user wiggles their
mouse and clicks your windows.&lt;/p&gt;
&lt;p&gt;So, how does a wlroots-based compositor facilitate these interactions? With
&lt;a href=&#34;https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_seat.h&#34;&gt;&lt;code&gt;wlr_seat&lt;/code&gt;&lt;/a&gt;, our abstraction on top of &lt;code&gt;wl_seat&lt;/code&gt;. This implements the
whole &lt;code&gt;wl_seat&lt;/code&gt; state machine, but again leaves it to you to tweak the knobs as
you wish. You need to decide how your compositor is going to deal with focus -
KDE, Sway, the Librem5 phone UI, an in-vehicle infotainment system; all of these
will have a different approach to focus.&lt;/p&gt;
&lt;p&gt;wlroots doesn&amp;rsquo;t render client surfaces for you, and doesn&amp;rsquo;t know where you put
them. Once you figure out where they go, you need to notice when the
&lt;code&gt;wlr_cursor&lt;/code&gt; is moved over it and call &lt;code&gt;wlr_seat_pointer_notify_enter&lt;/code&gt; with the
pointer&amp;rsquo;s coordinates relative to the surface it entered, along with any
appropriate &lt;code&gt;motion&lt;/code&gt; or &lt;code&gt;button&lt;/code&gt; events through the relevant &lt;code&gt;wlr_seat&lt;/code&gt;
functions. The client will also likely send you a cursor image to display - this
is done with the &lt;code&gt;wlr_seat.events.request_set_cursor&lt;/code&gt; event.&lt;/p&gt;
&lt;p&gt;When you decide that a surface should receive keyboard focus, call
&lt;code&gt;wlr_seat_keyboard_notify_enter&lt;/code&gt;. &lt;code&gt;wlr_seat&lt;/code&gt; will automatically handle removing
focus from whatever had it last, and will also grab the keymap and send it to
the client for you, assuming you configured it with &lt;code&gt;wlr_keyboard_set_keymap&lt;/code&gt;&amp;hellip;
you did, right? &lt;code&gt;wlr_seat&lt;/code&gt; also semi-transparently deals with grabs, the sort of
situation where a client wants to keep keyboard focus for longer than it
normally would, to deal with a context menu or something.&lt;/p&gt;
&lt;p&gt;Touch events are similar and should be self-explanatory when you read the
header. Drawing tablet events are a bit different - they&amp;rsquo;re not actually
specified by the core Wayland protocol. Instead, we rig these up with the
&lt;a href=&#34;https://cgit.freedesktop.org/wayland/wayland-protocols/tree/unstable/tablet/tablet-unstable-v2.xml&#34;&gt;tablet&lt;/a&gt; protocol extension and &lt;a href=&#34;https://github.com/swaywm/wlroots/blob/7f20ab644347b11fd8242beaf7a6fe42c910d014/include/wlr/types/wlr_tablet_v2.h&#34;&gt;wlr_tablet&lt;/a&gt;. It
works in much the same way, but you have to explicitly configure it for a
&lt;code&gt;wlr_seat&lt;/code&gt; by calling &lt;code&gt;wlr_tablet_create&lt;/code&gt; yourself.&lt;/p&gt;
&lt;p&gt;So, in short, if you wiggle your mouse, here&amp;rsquo;s what happens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Before you wiggled your mouse, the &lt;code&gt;libinput&lt;/code&gt; backend noticed it was plugged
in and raised a &lt;code&gt;new_input&lt;/code&gt; event.&lt;/li&gt;
&lt;li&gt;Your compositor attached the resulting &lt;code&gt;wlr_pointer&lt;/code&gt; to its &lt;code&gt;wlr_cursor&lt;/code&gt;,
which it had prepared earlier by looking up an appropriate cursor theme and
letting it know about the display layout.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;wlr_pointer&lt;/code&gt; bubbled up a &lt;code&gt;motion&lt;/code&gt; event, which was caught by
&lt;code&gt;wlr_cursor&lt;/code&gt; and bubbled up to your compositor.&lt;/li&gt;
&lt;li&gt;Your compositor called &lt;code&gt;wlr_cursor_move&lt;/code&gt; to apply the resulting motion,
constrained by the output layout, which in turn caused the cursor image on
your display to move.&lt;/li&gt;
&lt;li&gt;Your compositor then looked around to see if the pointer had moved over any
new surfaces. Since wlroots doesn&amp;rsquo;t handle rendering or know where anything
is displayed, this was a rather introspective question.&lt;/li&gt;
&lt;li&gt;You &lt;em&gt;did&lt;/em&gt; wiggle it over a new surface, so the compositor called
&lt;code&gt;wlr_seat_notify_pointer_enter&lt;/code&gt; after translating the pointer coordinates to
surface-local space. It sent a &lt;code&gt;wlr_seat_notify_pointer_motion&lt;/code&gt; for good
measure.&lt;/li&gt;
&lt;li&gt;The client noticed the pointer entered it and sent back a cursor image to
show. The compositor was informed of this via
&lt;code&gt;wlr_seat.events.request_set_cursor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The compositor handled the client&amp;rsquo;s cursor image to &lt;code&gt;wlr_cursor&lt;/code&gt;, throwing
away all of that hard work loading up a cursor theme just for a client-side
cursor to come in and ruin it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And there you have it, that&amp;rsquo;s how input works in wlroots. It&amp;rsquo;s really fucking
complicated, isn&amp;rsquo;t it? I think this article puts on display both the incredible
advantages and serious drawbacks of wlroots. Because you have to plug all of
these pieces together yourself, you are afforded an &lt;em&gt;enormous&lt;/em&gt; amount of
flexibility. However, you have to do a lot of work and understand a whole lot of
different pieces to get there. Libraries like
&lt;a href=&#34;https://github.com/Cloudef/wlc&#34;&gt;wlc&lt;/a&gt; are much easier to use in this respect,
but if you want to change even a small detail of this process with wlc you are
unable to.&lt;/p&gt;
&lt;p&gt;If you have any questions about this article, please reach out to the developers
hanging out in &lt;a href=&#34;http://webchat.freenode.net/?channels=sway-devel&amp;amp;uio=d4&#34;&gt;#sway-devel on irc.freenode.net&lt;/a&gt;. We know this is
confusing, and we&amp;rsquo;re happy to help.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;One more quick note: for multi-DPI setups, you need to provide the &lt;code&gt;wlr_cursor&lt;/code&gt; with different cursor images, one for each scale present on the output layout. We have another tool for sourcing Xcursor images at multiple scale factors, check out &lt;a href=&#34;https://github.com/swaywm/wlroots/blob/4984ea49eeaa292d66be9e535d93a4d8185f3e18/include/wlr/types/wlr_xcursor_manager.h&#34;&gt;&lt;code&gt;wlr_xcursor_manager&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Another thing &lt;code&gt;wlr_output_layout&lt;/code&gt; is useful for, if you were wondering, is figuring out where to render windows in a multi-output arrangement, where some windows might span multiple outputs. Read the header! &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Simple, correct, fast: in that order</title>
      <link>./2018/07/09/Simple-correct-fast.html</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/07/09/Simple-correct-fast.html</guid>
      <description>&lt;p&gt;The single most important quality in a piece of software is simplicity. It&amp;rsquo;s
more important than doing the task you set out to achieve. It&amp;rsquo;s more important
than performance. The reason is straightforward: if your solution is not simple,
it will not be correct or fast.&lt;/p&gt;
&lt;p&gt;Given enough time, you&amp;rsquo;ll find that all software which solves sufficiently
complex problems is going to (1) have bugs and (2) have performance problems.
Software with bugs is incorrect. Software with performance problems is not fast.
We will face this fact as surely as we will face death and taxes, and we should
prepare ourselves accordingly. Let&amp;rsquo;s consider correctness first.&lt;/p&gt;
&lt;p&gt;Complicated software breaks. Simple software is more easily understood and far
less prone to breaking: there are less moving pieces, less lines of code to keep
in your head, and fewer edge cases. Simple software is more easily tested as
well - after all, fewer code paths to run through. Sure, simple software &lt;em&gt;does&lt;/em&gt;
break, and when it does the cause and appropriate solution are often apparent.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s consider performance. You may have some suspicions about your
bottlenecks when you set out, and you should consider them in your approach.
However, when the performance bill comes due, you&amp;rsquo;re more likely to have
overlooked something than not. The only way to find out for sure what&amp;rsquo;s slow is
to measure. Which is easier to profile: a complicated program, or a simple one?
Anyone who&amp;rsquo;s looked at a big enough flame graph knows exactly what I&amp;rsquo;m talking
about.&lt;/p&gt;
&lt;p&gt;Perhaps complicated software once solved a problem. That software needs to be
maintained - what is performant and correct today will not be tomorrow. The
workload will increase, or the requirements will change. Software is a living
thing! When you&amp;rsquo;re stressed out at 2 AM on Tuesday morning because the server
shat itself because your 1,831st new customer pushed the billing system over the
edge, do you think you&amp;rsquo;re well equipped to find the problem in a complex piece
of code you last saw a year ago?&lt;/p&gt;
&lt;p&gt;When you are faced with these problems, you must seek out the simplest way they
can be solved. This may be difficult to do: perhaps the problem is too large, or
perhaps you were actually considering the solution before considering the
problem. Though difficult it may be, it is your most important job. You need to
take problems apart, identify smaller problems within them and ruthlessly remove
scope until you find the basic problem you can apply a basic solution to. The
complex problem comes later, and it&amp;rsquo;ll be better served by the composition of
simple solutions than with the application of a complex solution.&lt;/p&gt;
</description>
    </item><item>
      <title>The advantages of an email-driven git workflow</title>
      <link>./2018/07/02/Email-driven-git.html</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/07/02/Email-driven-git.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/Documentation/RelNotes/2.18.0.txt&#34;&gt;git 2.18.0&lt;/a&gt; has been released, and with it my first contribution to
git has shipped! My patch was for a git feature which remains disappointingly
obscure: &lt;a href=&#34;https://git-scm.com/docs/git-send-email&#34;&gt;git send-email&lt;/a&gt;. I want to
introduce my readers to this feature and speak to the benefits of using an
email-driven git workflow - the workflow git was originally designed for.&lt;/p&gt;
&lt;p&gt;Email isn&amp;rsquo;t as sexy as GitHub (and its imitators), but it has several
advantages over the latter. Email is standardized, federated, well-understood,
and venerable. A very large body of email-related software exists and is equally
reliable and well-understood. You can interact with email using only open source
software and customize your workflow at every level of the stack - filtering,
organizing, forwarding, replying, and so on; in any manner you choose.&lt;/p&gt;
&lt;p&gt;Git has several built-in tools for leveraging email. The first one of note is
&lt;a href=&#34;https://git-scm.com/docs/git-format-patch&#34;&gt;format-patch&lt;/a&gt;. This can take a git
commit (or series of commits) and format them as plaintext emails with embedded
diffs. Here&amp;rsquo;s a small example of its output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mail&#34; data-lang=&#34;mail&#34;&gt;From 8f5045c871c3060ff5f5f99ce1ada09f4b4cd105 Mon Sep 17 00:00:00 2001
From: Drew DeVault &amp;lt;sir@cmpwn.com&amp;gt;
Date: Wed, 2 May 2018 08:59:27 -0400
Subject: [PATCH] Silently ignore touch_{motion,up} for unknown ids

---
 types/wlr_seat.c | 2 --
 1 file changed, 2 deletions(-)

diff --git a/types/wlr_seat.c b/types/wlr_seat.c
index f77a492d..975746db 100644
--- a/types/wlr_seat.c
+++ b/types/wlr_seat.c
@@ -1113,7 +1113,6 @@ void wlr_seat_touch_notify_up(struct wlr_seat *seat, uint32_t time,
 	struct wlr_seat_touch_grab *grab = seat-&amp;gt;touch_state.grab;
 	struct wlr_touch_point *point = wlr_seat_touch_get_point(seat, touch_id);
 	if (!point) {
-		wlr_log(L_ERROR, &amp;quot;got touch up for unknown touch point&amp;quot;);
 		return;
 	}
 
@@ -1128,7 +1127,6 @@ void wlr_seat_touch_notify_motion(struct wlr_seat *seat, uint32_t time,
 	struct wlr_seat_touch_grab *grab = seat-&amp;gt;touch_state.grab;
 	struct wlr_touch_point *point = wlr_seat_touch_get_point(seat, touch_id);
 	if (!point) {
-		wlr_log(L_ERROR, &amp;quot;got touch motion for unknown touch point&amp;quot;);
 		return;
 	}
 
-- 
2.18.0

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;git format-patch is at the bottom of git&amp;rsquo;s stack of outgoing email features. You
can send the emails it generates manually, but usually you&amp;rsquo;ll use git send-email
instead. It logs into the SMTP server of your choice and sends the email for
you, after running git format-patch for you and giving you an opportunity to
make any edits you like. Given that most popular email clients these days are
awful and can&amp;rsquo;t handle basic tasks like &amp;ldquo;sending email&amp;rdquo; properly, I strongly
recommend this tool over attempting to send format-patch&amp;rsquo;s output yourself.&lt;/p&gt;
&lt;p&gt;&lt;img style=&#34;max-width: 75%&#34; src=&#34;https://sr.ht/wmKv.jpg&#34; /&gt;&lt;/p&gt;
&lt;p style=&#34;text-align: center; max-width: 80%; margin: 1rem auto&#34;&gt;
    &lt;em&gt;
        I put a notch in my keyboard for each person who ignores my advice,
        struggles through sending emails manually, and eventually comes around
        to letting git send-email do it for them.
    &lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;I recommend a few settings to apply to git send-email to make your workflow a
bit easier. One is &lt;code&gt;git config --global sendemail.verify off&lt;/code&gt;, which turns off
a sometimes-annoying and always-confusing validation step which checks for
features only supported by newer SMTP servers - newer, in this case, meaning
more recent than November of 1995. I started a thread on the git mailing list
this week to discuss changing this option to off by default.&lt;/p&gt;
&lt;p&gt;You can also set the default recipient for a given repository by using a local
git config: &lt;code&gt;git config sendemail.to admin@example.org&lt;/code&gt;. This lets you skip a
step if you send your patches to a consistent destination for that project, like
a mailing list. I also recommend &lt;code&gt;git config --global sendemail.annotate yes&lt;/code&gt;,
which will always open the emails in your editor to allow you to make changes
(you can get this with &lt;code&gt;--annotate&lt;/code&gt; if you don&amp;rsquo;t want it every time).&lt;/p&gt;
&lt;p&gt;The main edit you&amp;rsquo;ll want to make when annotating is to provide what some call
&amp;ldquo;timely commentary&amp;rdquo; on your patch. Immediately following the &lt;code&gt;---&lt;/code&gt; after your
commit message, you can add a summary of your changes which can be seen by the
recipient, but doesn&amp;rsquo;t appear in the final commit log. This is a useful place to
talk about anything useful regarding the testing, review, or integration of your
changes. You may also want to edit the &lt;code&gt;[PATCH]&lt;/code&gt; text in the subject line to
something like &lt;code&gt;[PATCH v2]&lt;/code&gt; - this can also be done with the &lt;code&gt;-v&lt;/code&gt; flag as well.
I also like to add additional To&amp;rsquo;s, Cc&amp;rsquo;s, etc at this time.&lt;/p&gt;
&lt;p&gt;Git also provides tools for the recipient of your messages. One such tool is
&lt;a href=&#34;https://git-scm.com/docs/git-am&#34;&gt;git am&lt;/a&gt;, which accepts an email prepared with
format-patch and integrates it into their repository. Several flags are provided
to assist with common integration activities, like signing off on the commit or
attempting a 3-way merge. The difficult part can be getting the email to git am
in the first place. If you simply use the GMail web UI, this can be difficult. I
use &lt;a href=&#34;http://www.mutt.org/&#34;&gt;mutt&lt;/a&gt;, a TUI email client, to manage incoming
patches. This is useful for being able to compose replies with vim rather than
fighting some other mail client to write emails the way I want, but more
importantly it has the &lt;code&gt;|&lt;/code&gt; key, which prompts you for a command to pipe the
email into. Other tools like &lt;a href=&#34;http://www.offlineimap.org/&#34;&gt;OfflineIMAP&lt;/a&gt; are also
useful here.&lt;/p&gt;
&lt;p&gt;On the subject of composing replies, reviewing patches is quite easy with the
email approach as well. Many bad, yet sadly popular email clients have
popularized the idea that the sender&amp;rsquo;s message is immutable, encouraging you to
&lt;a href=&#34;https://en.wikipedia.org/wiki/Posting_style#Top-posting&#34;&gt;top post&lt;/a&gt; and leave an endlessly growing chain of replies
underneath your message. A secret these email clients have kept from you is that
you are, in fact, permitted by the mail RFCs to edit the sender&amp;rsquo;s message as you
please when replying - a style called &lt;a href=&#34;https://en.wikipedia.org/wiki/Posting_style#Bottom-posting&#34;&gt;bottom posting&lt;/a&gt;. I
strongly encourage you to get comfortable doing this in general, but it&amp;rsquo;s
essential when reviewing patches received over email.&lt;/p&gt;
&lt;p&gt;In this manner, you can dissect the patch and respond to specific parts of it
requesting changes or clarifications. It&amp;rsquo;s just email - you can reply, forward
the message, Cc interested parties, start several chains of discussion, and so
on. I recently sent the following feedback on a patch I received:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mail&#34; data-lang=&#34;mail&#34;&gt;Date: Mon, 11 Jun 2018 14:19:22 -0400
From: Drew DeVault &amp;lt;sir@cmpwn.com&amp;gt;
To: Gregory Mullen &amp;lt;omitted&amp;gt;
Subject: Re: [PATCH 2/3 todo] Filter private events from events feed

On 2018-06-11  9:14 AM, Gregory Mullen wrote:
&amp;gt; diff --git a/todosrht/alembic/versions/cb9732f3364c_clear_defaults_from_tickets_to_support_.py b/todosrht/alembic/versions/cb9732f3364c_clear_defaults_from_tickets_to_support_.py
&amp;gt; -%&amp;lt;-
&amp;gt; +class FlagType(types.TypeDecorator):

I think you can safely import the srht FlagType here without implicating
the entire sr.ht database support code

&amp;gt; diff --git a/todosrht/blueprints/html.py b/todosrht/blueprints/html.py
&amp;gt; -%&amp;lt;-
&amp;gt; +def collect_events(target, count):
&amp;gt; +    events = []
&amp;gt; +    for e in EventNotification.query.filter(EventNotification.user_id == target.id).order_by(EventNotification.created.desc()):

80 cols

I suspect this &#39;collect_events&#39; function can be done entirely in SQL
without having to process permissions in Python and do several SQL
round-trips

&amp;gt;  @html.route(&amp;quot;/~&amp;lt;username&amp;gt;&amp;quot;)
&amp;gt;  def user_GET(username):
&amp;gt; -    print(username)

Whoops! Nice catch.

&amp;gt;      user = User.query.filter(User.username == username.lower()).first()
&amp;gt;      if not user:
&amp;gt;          abort(404)
&amp;gt;      trackers, _ = get_tracker(username, None)
&amp;gt;      # TODO: only show public events (or events the current user can see)

Can remove the comment
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Obviously this isn&amp;rsquo;t the whole patch we&amp;rsquo;re seeing - I&amp;rsquo;ve edited it down to just
the parts I want to talk about. I also chose to leave the file names in to aid
in navigating my feedback, with casual &lt;code&gt;-%&amp;lt;-&lt;/code&gt; symbols indicating where I had
trimmed out parts of the patch. This approach is common and effective.&lt;/p&gt;
&lt;p&gt;The main disadvantage of email driven development is that some people are more
comfortable working with email in clients which are not well-suited to this kind
of work. Popular email clients have caused terrible ideas like HTML email to
proliferate, not only enabling spam, privacy leaks, and security
vulnerabilities, but also making it more difficult for people to write emails
that can be understood by git or tolerated by advanced email users.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t think that the solution to these problems is to leave these powerful
tools hanging in the wind and move to less powerful models like GitHub&amp;rsquo;s pull
requests. This is why on my own platform, &lt;a href=&#34;https://sr.ht&#34;&gt;sr.ht&lt;/a&gt;, I chose to
embrace git&amp;rsquo;s email-driven approach, and extend it with new tools that make it
easier to participate without directly using email. For those like me, I still
want the email to be there so you can dig my heels in and do it old-school, but
I appreciate that it&amp;rsquo;s not for everyone.&lt;/p&gt;
&lt;p&gt;I started working on the sr.ht mailing list service a couple of weeks ago, which
is where these goals will be realized with new email-driven code review tools.
My friend &lt;a href=&#34;https://emersion.fr&#34;&gt;Simon&lt;/a&gt; has been helping out with a Python module
named &lt;a href=&#34;https://git.sr.ht/~emersion/python-emailthreads/&#34;&gt;emailthreads&lt;/a&gt; which can
be used to parse email discussions - with a surprising degree of accuracy,
considering the flexibility of email. Once I get these tools into a usable
state, we&amp;rsquo;ll likely see sr.ht registrations finally opened to the general public
(interested in trying it earlier? &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;Email me&lt;/a&gt;). Of course,
it&amp;rsquo;s all &lt;a href=&#34;https://git.sr.ht/~sircmpwn/?search=sr.ht&#34;&gt;open source&lt;/a&gt;, so you can
follow along and try it on your own infrastructure if you like.&lt;/p&gt;
&lt;p&gt;Using email for git scales extremely well. The canonical project, of course, is
the Linux kernel. A change is made to the Linux kernel an average of 7 times per
hour, constantly. It is maintained by dozens of veritable clans of software
engineers hacking on dozens of modules, and email allows these changes to
efficiently flow code throughout the system. Without email, Linux&amp;rsquo;s maintenance
model would be impossible. It&amp;rsquo;s worth noting that git was designed for
maintaining Linux, of course.&lt;/p&gt;
&lt;p&gt;With the right setup, it&amp;rsquo;s well suited to small projects as well. Sending a
patch along for review is a single git command. It lands directly in the
maintainer&amp;rsquo;s inbox and can be integrated with a handful of keystrokes. All of
this works without any centralization or proprietary software involved. We
should embrace this!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Related articles sent in by readers:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://begriffs.com/posts/2018-06-05-mailing-list-vs-github.html&#34;&gt;Mailing lists vs Github&lt;/a&gt;
by Joe Nelson&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20180522180815/https://dpc.pw/blog/2017/08/youre-using-git-wrong/&#34;&gt;You&amp;rsquo;re using git wrong&lt;/a&gt; by
Dawid Ciężarkiewicz&lt;/p&gt;
</description>
    </item><item>
      <title>A quick review of my Let&#39;s Encrypt setup</title>
      <link>./2018/06/27/My-lets-encrypt-setup.html</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/06/27/My-lets-encrypt-setup.html</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s Encrypt makes TLS much easier for pretty much everyone, but can still
be annoying to use. It took me a while to smooth over the cracks in my Let&amp;rsquo;s
Encrypt configuration across my (large) fleet of different TLS-enabled services.
I wanted to take a quick moment to share setup with you.&lt;/p&gt;
&lt;p&gt;2020-01-02 update: acme-client is unmaintained and caught the BSD disease
anyway. I use &lt;a href=&#34;https://github.com/ndilieto/uacme&#34;&gt;uacme&lt;/a&gt; and my current
procedure is documented on my &lt;a href=&#34;./new-server.html&#34;&gt;new server checklist&lt;/a&gt;. It might
not be exactly applicable to your circumstances, YMMV.&lt;/p&gt;
&lt;p&gt;The main components are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kristaps.bsd.lv/acme-client/&#34;&gt;acme-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;cron&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;nginx and cron need no introduction, but acme-client deserves a closer look. The
acme client blessed by Let&amp;rsquo;s Encrypt is &lt;a href=&#34;https://certbot.eff.org/&#34;&gt;certbot&lt;/a&gt;, but
BOY is it complicated. It&amp;rsquo;s a big ol&#39; pile of Python and I&amp;rsquo;ve found it fragile,
complicated, and annoying. The goal of maintaining your nginx and apache configs
for you is well intentioned but ultimately useless for advanced users. The
complexity of certbot is through the roof, and complicated software breaks.&lt;/p&gt;
&lt;p&gt;I bounced between alternatives for a while but when I found acme-client, it
totally clicked. This one is written in C with minimal dependencies (LibreSSL
and libcurl, no brainers IMO). I bring a statically linked acme-client binary
with me to new servers and setup time approaches zero as a result.&lt;/p&gt;
&lt;p&gt;I use nginx to answer challenges (and for some services, to use the final
certificates for HTTPS - did you know you can use Let&amp;rsquo;s Encrypt for more
protocols than just HTTPS?). I quickly &lt;code&gt;mkdir -p /var/www/acme/.well-known/acme-challenge&lt;/code&gt;, make sure nginx can read it, and add
the following rules to nginx to handle challenges:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;[::]:80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;server_name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;example.org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kn&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;^~&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/.well-known/acme-challenge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/var/www/acme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If I&amp;rsquo;m not using the certificates for HTTPS, this is all I need. But assuming I
have some kind of website going, the full configuration usually looks more like
this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;[::]:80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;server_name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;example.org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kn&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;302&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;https://&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$server_name$request_uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kn&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;^~&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/.well-known/acme-challenge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/var/www/acme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;443&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;ssl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;[::]:443&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;ssl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;server_name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;example.org&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kn&#34;&gt;ssl_certificate&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/etc/ssl/acme/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$server_name/fullchain.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;ssl_certificate_key&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/etc/ssl/acme/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$server_name/privkey.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kn&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;^~&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/.well-known/acme-challenge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/var/www/acme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# ...application specific rules...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This covers the nginx side of things. To actually do certificate negotiation, I
have a simple script I carry around:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &amp;gt;&amp;gt;/var/log/acme 2&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
date

acme&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;site&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;
    acme-client -vNn &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;        -c /etc/ssl/acme/&lt;span class=&#34;nv&#34;&gt;$site&lt;/span&gt;/ &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;        -k /etc/ssl/acme/&lt;span class=&#34;nv&#34;&gt;$site&lt;/span&gt;/privkey.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;$site&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$*&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

acme example.org subd1.example.org subd2.example.org

nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first two lines set up a log file in &lt;code&gt;/var/log/acme&lt;/code&gt; I can use to debug any
issues that arise. Then I have a little helper function that wires up
acme-client the way I like it, and I can call it for each domain I need certs
for on this server. The last line changes if I&amp;rsquo;m doing something other than
HTTPS with the certs (for example, &lt;code&gt;postfix reload&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;One gotcha is that acme-client will bail out if the directories don&amp;rsquo;t exist when
you run it, so a quick &lt;code&gt;mkdir -p /etc/ssl/acme/example.org&lt;/code&gt; when adding new
sites is necessary&lt;/p&gt;
&lt;p&gt;The final step is a simple cron entry that runs the script daily:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cron&#34; data-lang=&#34;cron&#34;&gt;0 0 * * * /usr/local/bin/acme-update-certs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&amp;rsquo;s that easy. It took me a while to get a Let&amp;rsquo;s Encrypt setup that was simple
and satisfactory, but I believe I&amp;rsquo;ve settled on this one. I hope you find it
useful!&lt;/p&gt;
</description>
    </item><item>
      <title>Should you move from GitHub to sr.ht</title>
      <link>./2018/06/05/Should-you-move-to-sr.ht.html</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/06/05/Should-you-move-to-sr.ht.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not terribly concerned about Microsoft&amp;rsquo;s acquisition of GitHub, but I
don&amp;rsquo;t fault those who are worried. I&amp;rsquo;ve been working on my alternative platform,
&lt;a href=&#34;https://sr.ht&#34;&gt;sr.ht&lt;/a&gt;, for quite a while. I&amp;rsquo;m not about to leave GitHub because
of Microsoft alone. I do have some political disagreements with GitHub and
Microsoft, but those are also not the main reason that I&amp;rsquo;m building sr.ht. I
simply think I can do it better. If my approach aligns with your needs, then
sr.ht may be the platform for you.&lt;/p&gt;
&lt;p&gt;There are several GitHub alternatives, but for the most part they&amp;rsquo;re basically
GitHub rip-offs. Unlike GitLab, Gogs/Gitea, BitBucket; I don&amp;rsquo;t see the GitHub UX
as the pinnacle of project hosting - there are many design choices (notably pull
requests) which I think have lots of room for improvement. sr.ht instead
embraces git more closely, for example building &lt;em&gt;on top&lt;/em&gt; of email rather than
&lt;em&gt;instead of&lt;/em&gt; email.&lt;/p&gt;
&lt;p&gt;GitHub optimizes for the end-user and the drive-by contributor. sr.ht optimizes
for the maintainers and core contributors instead. We have patch queues and
ticket queues which you can set up automated filters in or manually curate, and
are reusable for projects on external platforms. You have tools which allow
you to customize the views you see separately from the views visitors see, like
bugzilla-style custom ticket searches. Our CI service gives you KVM
virtualization and knobs you can tweak to run sophisticated automation for your
project. Finally, all of it is &lt;a href=&#34;https://git.sr.ht/~sircmpwn/?search=sr.ht&#34;&gt;open
source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The business model is also something I think I can do better. GitHub and GitLab
are both VC-funded and trapped into appeasing their shareholders (or now, in
GitHub&amp;rsquo;s case, the needs of Microsoft as a whole). I think this leads to
incentives which don&amp;rsquo;t align with the users, as it&amp;rsquo;s often more important to
support the bottom line than to build what the users want or need. Rather than
trying to raise as much money as possible, the sr.ht aims to be more a
grassroots platform. I&amp;rsquo;m still working on the money details, but each user will
be expected to pay a subscription fee and growth will be artificially slowed if
necessary to make sure the infrastructure can keep up. In my opinion, venture
capital does not lead to healthy businesses or a healthy economy on the whole,
and I think the users suffer for it. My approach is different.&lt;/p&gt;
&lt;p&gt;As for my own projects and the plan for moving them, I don&amp;rsquo;t intend to move
anything until it won&amp;rsquo;t be disruptive to the project. I&amp;rsquo;ve been collecting
feedback from co-maintainers and core contributors to each of the projects I
expect to move and using this feedback to drive sr.ht priorities. They will
eventually move, but only when it&amp;rsquo;s ready.&lt;/p&gt;
&lt;p&gt;I intend to open sr.ht to the public soon, once I have a billing system in place
and break ground on mailing lists (among some smaller improvements). If anyone
is interested in checking it out prior to the public release, shoot me an email
at &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;sir@cmpwn.com&lt;/a&gt;.&lt;/p&gt;
</description>
    </item><item>
      <title>How I maintain FOSS projects</title>
      <link>./2018/06/01/How-I-maintain-FOSS-projects.html</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/06/01/How-I-maintain-FOSS-projects.html</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s is another blog post which has been on my to-write list for a while. I
have hesitated a bit to write about this, because I&amp;rsquo;m certain that my approach
isn&amp;rsquo;t perfect. I think it&amp;rsquo;s pretty good, though, and people who work with me in
FOSS agreed after a quick survey. So! Let&amp;rsquo;s at least put it out there and
discuss it.&lt;/p&gt;
&lt;p&gt;There are a few central principles I use to guide my maintainership work:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Everyone is a volunteer and should be treated as such.&lt;/li&gt;
&lt;li&gt;One patch is worth a thousand bug reports.&lt;/li&gt;
&lt;li&gt;Empower people to do what they enjoy and are good at.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first point is very important. My open source projects are not the work of a
profitable organization which publishes open source software as a means of
giving back. Each of these projects is built and maintained entirely by
volunteers. Acknowledging this is important for keeping people interested in
working on the project - you can never expect someone to volunteer for work they
aren&amp;rsquo;t enjoying&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. I am always grateful for any level of involvement a person
wants to have in the project.&lt;/p&gt;
&lt;p&gt;Because everyone is a volunteer, I encourage people to work on their own
agendas, on their own schedule and at their own pace. None of our projects are
in a hurry, so if someone is starting to get burnt out, they should have no
reservations about taking a break for as long as they wish. I&amp;rsquo;d rather have
something done slowly, correctly, and by a contributor who is enjoying their
work than quickly and by a contributor who is burnt out and stressed. No one
should ever be stressed out because of their involvement in the project. Some of
it is unavoidable - especially where politics is involved - but I don&amp;rsquo;t hold
grudges against anyone who steps away and I try to shoulder the brunt of the
bullshit myself.&lt;/p&gt;
&lt;p&gt;The second principle is closely related to the first. If a bug does not affect
someone who works on the project and the problem doesn&amp;rsquo;t interest anyone who
works on the project, it&amp;rsquo;s probably not going to get fixed. I would much rather
help someone familiarize themselves with the codebase and tooling necessary for
them to solve their own problems and send a patch, even if it takes ten times
longer than fixing the bug myself. I have never found a user who, even if they
aren&amp;rsquo;t comfortable with programming or the specific technologies in use, has
been unable to solve a problem which they were willing to invest time into and
ask questions about.&lt;/p&gt;
&lt;p&gt;This principle often leads to conflict with users whose bugs don&amp;rsquo;t get fixed,
but I stick to it. I would rather lose every user who is unwilling to attempt a
patch than invest the resources of my contributors into work they&amp;rsquo;re
uninterested in. In the long term, the health of the project is far better if I
always have developers engaged in and enjoying their work on it than if I lose
users who are upset by my approach.&lt;/p&gt;
&lt;p&gt;These first two principles don&amp;rsquo;t affect my day-to-day open source work so much
as they set the tone for it. The third principle, however, constitutes most of
my job as a maintainer, and it&amp;rsquo;s with it that I add the most value. My main role
is to empower people who contribute to do work they enjoy, which benefits the
project, and which keeps them interested in coming back to do more.&lt;/p&gt;
&lt;p&gt;Finding things people enjoy working on is the main task in this role. Once
people have made a few contributions, I can get an idea of how they like to work
and what they&amp;rsquo;re good at, and help them find things to do which play to their
strengths. Supporting a contributors potential is important as well, and if
someone expresses interest in certain kinds of work or I think they show promise
in an area, it&amp;rsquo;s my responsibility to help them find work to nurture these
skills and connect them with good mentors to help.&lt;/p&gt;
&lt;p&gt;This starts to play in another major responsibility I have as a maintainer,
which is facilitating effective communication throughout the project. As people
grow in the project they generally become effective at managing communication
themselves, but new contributors appear all the time. A major responsibility as
a maintainer is connecting new contributors to domain experts in a problem, or
to users who can reproduce problems or are willing to test their patches.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also responsible for keeping up with each contributor&amp;rsquo;s growth in the
project. For those who are good at and enjoy having responsibility in the
project, I try to help them find it. As contributors gain a better understanding
of the code, they&amp;rsquo;re trusted to handle large features with less handholding and
perform more complex work&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. Often contributors are given opportunities to
become better code reviewers, and usually get merge rights once they&amp;rsquo;re good at
it. Things like commit access are a never a function of rank or status, but of
enabling people to do the things that they&amp;rsquo;re good at.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also useful to remember that your projects are not the only game in town. I
frequently encourage people who contribute to contribute to other projects as
well, and I personally try to find ways to contribute back to their own projects
(though not as much as I&amp;rsquo;d often like to). I offer support as a sysadmin to many
projects started by contributors to my projects and I send patches whenever I
can. This pays directly back to the project in the form of contributors with
deeper and more diverse experience. It&amp;rsquo;s also fun to take a break from working
on the same stuff all the time!&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also some work that someone&amp;rsquo;s just gotta do, and that someone is usually
me. I have to be a sysadmin for the websites, build infrastructure, and so on.
If there are finances, I have to manage them. I provide some kind of vision for
the project and decide what work is in scope. There&amp;rsquo;s also some boring stuff
like preparing changelogs and release notes and shipping new versions, or
liaising with distros on packages. I also end up being responsible for any
marketing.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Getting and supporting contributors is the single most important thing you can
do for your project as a maintainer. I often get asked how I&amp;rsquo;m as productive as
I seem to be. While I can&amp;rsquo;t deny that I can write a lot of code, it&amp;rsquo;s peanuts
compared to the impact made by other contributors. I get a lot of credit for
sway, but in reality I&amp;rsquo;ve only written 1-3 sway commits per week in the past few
months. For this reason, the best approach focuses on the contributors, to whom
I owe a great debt of gratitude.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m still learning, too! I speak to contributors about my approach from time to
time and ask for feedback, and I definitely make mistakes. I hope that I&amp;rsquo;ll
receive more feedback soon after some of them read this blog post, too. My
approach will continue to grow over time (hopefully for the better) and I hope
our work will enjoy success as a result.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Some people do work they don&amp;rsquo;t enjoy out of gratitude to the project, but this is not sustainable and I discourage it. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Though I always encourage people to work on the things they&amp;rsquo;re interested in, I sometimes have to &lt;em&gt;discourage&lt;/em&gt; people from biting off more than they can chew. Then I help them gradually ramp up their skills and trust among the team until they can take on those tasks. Usually this goes pretty quick, though, and a couple of bugs caused by inexperience is a small price to pay for the &lt;em&gt;gain&lt;/em&gt; in experience the contributor gets by taking on hard or important tasks. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Embedding files in C programs with koio</title>
      <link>./2018/05/29/Embedding-files-in-C.html</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/05/29/Embedding-files-in-C.html</guid>
      <description>&lt;p&gt;Quick blog post today to introduce a new tool I wrote:
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/koio&#34;&gt;koio&lt;/a&gt;. This is a small tool which takes a
list of files and embeds them in a C file. A library provides an fopen shim
which checks the list of embedded files before resorting to the real filesystem.&lt;/p&gt;
&lt;p&gt;I made this tool for &lt;a href=&#34;https://github.com/SirCmpwn/chopsui&#34;&gt;chopsui&lt;/a&gt;, where I
eventually want to be able to bundle up sui markup, stylesheets, images, and so
on in a statically linked chopsui program. Many projects have small tools which
serve a similar purpose, but it was simple enough and useful enough that I chose
to make something generic so it could be used on several projects.&lt;/p&gt;
&lt;p&gt;The usage is pretty simple. I can embed &lt;code&gt;ko_fopen.c&lt;/code&gt; in a C file with this
command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ koio -o bundle.c ko_fopen.c://ko_fopen.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I can compile and link with &lt;code&gt;bundle.c&lt;/code&gt; and do something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;koio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;koio_load_assets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;koio_unload_assets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;koio_load_assets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ko_fopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;//ko_fopen.c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fgetc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;putchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;koio_unload_assets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The generated &lt;code&gt;bundle.c&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;koio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;//ko_fopen.c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;408&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;#define _POSIX_C_SOURCE 200809L&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;#include &amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;#inc&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;lude &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;koio_private.h&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;\n\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;FILE *ko_fopen(const char *path&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;, const char *mode) {&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;struct file_entry *entry = hashtable_get(&amp;amp;koio_vfs, p&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;ath);&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;if (entry) {&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\t\t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;if (mode[0] != &amp;#39;r&amp;#39; || mode[1] != &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;0&amp;#39;) {&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\t\t\t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;er&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;rno = ENOTSUP;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\t\t\t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;return NULL;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\t\t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\t\t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;return fmemopen(entry-&amp;gt;data, en&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;try-&amp;gt;len, &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;return fopen(path, mode);&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;koio_load_assets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;ko_add_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;koio_unload_assets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;ko_del_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A very simple tool, but one that I hope people will find useful. It&amp;rsquo;s very
lightweight:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;312 lines of C&lt;/li&gt;
&lt;li&gt;/bin/koio is ~40 KiB statically linked to musl&lt;/li&gt;
&lt;li&gt;libkoio.a is ~18 KiB&lt;/li&gt;
&lt;li&gt;Only mandatory dependencies are POSIX 2008 and a C99 compiler&lt;/li&gt;
&lt;li&gt;Only optional dependency is &lt;a href=&#34;https://git.sr.ht/~sircmpwn/scdoc&#34;&gt;scdoc&lt;/a&gt; for the
manual, which is similarly lightweight&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item><item>
      <title>Why did we replace wlc?</title>
      <link>./2018/05/27/Why-rewrite-wlc.html</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/05/27/Why-rewrite-wlc.html</guid>
      <description>&lt;p&gt;For a little over a year, I&amp;rsquo;ve been working with a bunch of talented C
developers to build a replacement for the &lt;a href=&#34;https://github.com/Cloudef/wlc&#34;&gt;wlc&lt;/a&gt;
library. The result is &lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt;, and we&amp;rsquo;re
still working on completing it and updating our software to use it. The
&lt;a href=&#34;https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/&#34;&gt;conventional
wisdom&lt;/a&gt;
suggests that rewriting your code from scratch is almost never the right idea.
So why did we do it, and how is it working out? I have spoken a little about
this in the past, but we&amp;rsquo;ll answer this question in detail today.&lt;/p&gt;
&lt;p&gt;Sway will have been around for 3 years as of this August. When I started the
project, I wanted to skip some of the hard parts and get directly to
implementing i3 features. To this end, I was browsing around for libraries which
provided some of the low-level plumbing for me - stuff like DRM (Display
Resource Management) and KMS (Kernel Mode Setting), EGL and GLES wires, libinput
support, and so on. I was more interested in whatever tool could get me up to
speed and writing sway-specific code quickly. My options at this point came down
to wlc and &lt;a href=&#34;https://github.com/michaelforney/swc&#34;&gt;swc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;swc&amp;rsquo;s design is a little bit better in retrospect, but I ended up choosing wlc
for the simple reason that it had an X11 backend I could use for easier
debugging. If I had used swc, I would have been forced to work without a display
server and test everything under the DRM backend - which would have been pretty
annoying. So I chose wlc and go to work.&lt;/p&gt;
&lt;p&gt;Designwise, wlc is basically a Wayland compositor with a plugin API, except you
get to write &lt;code&gt;main&lt;/code&gt; yourself and the plugin API communicates entirely
in-process. wlc has its own renderer (which you cannot control) and its own
desktop with its own view abstraction (which you cannot control). You have some
events that it bubbles up for you and you can make some choices like where to
arrange windows.  However, if you just wire up some basics and run &lt;code&gt;wlc_init&lt;/code&gt;,
wlc will do all of the rest of the work and immediately start accepting clients,
rendering windows, and dispatching input.&lt;/p&gt;
&lt;p&gt;Over time we were able to make some small improvements to wlc, but sway 0.x
still works with these basic principles today. Though this worked well at first,
over time more and more of sway&amp;rsquo;s bugs and limitations were reflections of
problems with wlc. A lengthy discussion on IRC and &lt;a href=&#34;https://github.com/swaywm/sway/issues/1076&#34;&gt;on
GitHub&lt;/a&gt; ensued and we debated for
several weeks on how we should proceed. I was originally planning on building a
new compositor entirely in-house (similar to GNOME&amp;rsquo;s mutter and KDE&amp;rsquo;s kwin), and
I wanted to abstract the i3-specific functionality of sway into some kind of
plugin. Then, more &amp;ldquo;frontends&amp;rdquo; could be written on top of sway to add
functionality like AwesomeWM, bspwm, Xmonad, etc.&lt;/p&gt;
&lt;p&gt;After some discussion among the sway team and with other Wayland compositor
projects &lt;a href=&#34;https://github.com/way-cooler/way-cooler/issues/248&#34;&gt;facing similar
problems&lt;/a&gt; with wlc, I
decided that we would start developing a standalone library to replace wlc
instead, and with it allow a more diverse Wayland ecosystem to flourish.
Contrary to wlc&amp;rsquo;s design - a Wayland compositor with some knobs - wlroots is a
set of modular tools with which you build the Wayland compositor yourself. This
design allows it to be suited to a huge variety of projects, and as a result
it&amp;rsquo;s now being used for many different Wayland compositors, each with their own
needs and their own approach to leveraging wlroots.&lt;/p&gt;
&lt;p&gt;When we started working on this, I wasn&amp;rsquo;t sure if it was going to be successful.
Work began slowly and I knew we had a monumental task ahead of us. We spent a
lot of time and a few large refactorings getting a feel for how we wanted the
library to take shape. Different parts matured at different paces, sometimes
with changes in one area causing us to rethink design decisions that affected
the whole project. Eventually, we fell into our stride and found an approach
that we&amp;rsquo;re very happy with today.&lt;/p&gt;
&lt;p&gt;I think that the main difference with the approach that wlroots takes comes from
experience. Each of the people working on sway, wlc, way cooler, and so on were
writing Wayland compositors for the first time. I&amp;rsquo;d say the problems that arose
as a result can also be seen throughout other projects, including Weston, KWin,
and so on. The problem is that when we all set out, we didn&amp;rsquo;t fully understand
the opportunities afforded by Wayland&amp;rsquo;s design, nor did we see how best to
approach tying together the rather complicated Linux desktop stack into a
cohesive project.&lt;/p&gt;
&lt;p&gt;We could have continued to maintain wlc, fixed bugs, refactored parts of it, and
maybe eventually arrived at a place where sway more or less worked. But we&amp;rsquo;d
simply be carrying on the X11 tradition we&amp;rsquo;ve been trying to escape this whole
time. wlc was a kludge and replacing it was well worth the effort - it simply
could not have scaled to the places where wlroots is going. Today, wlroots is
the driving force behind 6 Wayland compositors and is targeting desktops,
tablets, and phones. Novel features never seen on any desktop - even beyond
Linux - are possible with this work. Now we can think about not only replacing
X11, but innovating in ways it never could have.&lt;/p&gt;
&lt;p&gt;Our new approach is the way that Wayland compositors should be made. wlroots is
the realization of Wayland&amp;rsquo;s potential. I am hopeful that our design decisions
will have a lasting positive impact on the Wayland ecosystem.&lt;/p&gt;
</description>
    </item><item>
      <title>Introducing scdoc, a man page generator</title>
      <link>./2018/05/13/scdoc.html</link>
      <pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/05/13/scdoc.html</guid>
      <description>&lt;p&gt;A man page generator is one of those tools that I&amp;rsquo;ve said I would write for a
long time, being displeased with most of the other options. For a while I used
asciidoc, but was never fond of it. There are a few things I want to see in a
man page generator:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A syntax which is easy to read and write&lt;/li&gt;
&lt;li&gt;Small and with minimal dependencies&lt;/li&gt;
&lt;li&gt;Designed with man pages as a first-class target&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of the existing tools failed some of these criteria.
&lt;a href=&#34;http://asciidoc.org/&#34;&gt;asciidoc&lt;/a&gt; hits #1, but fails #2 and #3 by being written
in XSLT+Python and targetting man pages as a second-class citizen.
&lt;a href=&#34;http://mandoc.bsd.lv/&#34;&gt;mdocml&lt;/a&gt; fails #1 (it&amp;rsquo;s not much better than writing raw
roff), and to a lesser extent also fails criteria #2&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Another option,
&lt;a href=&#34;https://github.com/rtomayko/ronn&#34;&gt;ronn&lt;/a&gt; meets criteria #1 and #3, but it&amp;rsquo;s
written in Ruby and fails #2. All of these are fine for the niches they fill,
but not what I&amp;rsquo;m looking for. And as for GNU info&amp;hellip; ugh.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xkcd.com/912/&#34;&gt;&lt;img src=&#34;https://sr.ht/nemf.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, after tolerating less-than-optimal tools for too long, I eventually wrote
the man page generator I&amp;rsquo;d been promising for years:
&lt;a href=&#34;https://git.sr.ht/~sircmpwn/scdoc&#34;&gt;scdoc&lt;/a&gt;. In a nutshell, scdoc is a man page
generator that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has an easy to read and write syntax. It&amp;rsquo;s inspired by Markdown, but
importantly it&amp;rsquo;s not &lt;em&gt;actually&lt;/em&gt; Markdown, because Markdown is designed for
HTML and not man pages.&lt;/li&gt;
&lt;li&gt;Is less than 1,000 lines of POSIX.1 C99 code with no dependencies and weighs
78 KiB statically linked against musl libc.&lt;/li&gt;
&lt;li&gt;Only supports generating man pages. You can post-process the roff output if
you want it converted to something else (e.g. html).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I recently migrated &lt;a href=&#34;https://github.com/swaywm/sway/pull/1958&#34;&gt;sway&amp;rsquo;s manual&lt;/a&gt; to
scdoc after adding support for generating tables to it (a feature from asciidoc
that the sway manual took advantage of). This change also removes a blocker to
localizing man pages - something that would have been needlessly difficult to do
with asciidoc. Of course, scdoc has full support for UTF-8.&lt;/p&gt;
&lt;p&gt;My goal was to make a man page generator that had no more dependencies than man
itself and would be a no-brainer for projects to use to make their manual more
maintainable. Please give it a try!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;mdocml is small and has minimal dependencies, but it has &lt;em&gt;runtime&lt;/em&gt; dependencies - you need it installed to read the man pages it generates. This is Bad. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Redirecting stderr of a running process</title>
      <link>./2018/05/04/Redirecitng-stderr-of-running-process.html</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/05/04/Redirecitng-stderr-of-running-process.html</guid>
      <description>&lt;p&gt;During the KDE sprint in Berlin, &lt;a href=&#34;http://www.subdiff.de/&#34;&gt;Roman Gilg&lt;/a&gt; leaned
over to me and asked if I knew how to redirect the stderr of an already-running
process to a file. I Googled it and found underwhelming answers using strace and
trying to decipher the output by reading the write syscalls. Instead, I thought
a gdb based approach would work better, and after putting the pieces together
Roman insisted I wrote a blog post on the topic.&lt;/p&gt;
&lt;p&gt;gdb, the GNU debugger, has two important features that make this possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attaching to running processes via &lt;code&gt;gdb -p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Executing arbitrary code in the target process space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this it&amp;rsquo;s actually quite straightforward. The process is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Attach gdb to the running process&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;compile code -- dup2(open(&amp;quot;/tmp/log&amp;quot;, 65), 2)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The magic 65 here is the value of &lt;code&gt;O_CREAT | O_WRONLY&lt;/code&gt; on Linux, which is easily
found with a little program like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;O_CREAT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;O_WRONLY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2 is always the file descriptor assigned to stderr. What happens here is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Via &lt;a href=&#34;https://linux.die.net/man/3/open&#34;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;, the file you want to redirect
to is created.&lt;/li&gt;
&lt;li&gt;Via &lt;a href=&#34;https://linux.die.net/man/3/dup2&#34;&gt;&lt;code&gt;dup2&lt;/code&gt;&lt;/a&gt;, stderr is overwritten with
this new file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;compile code&lt;/code&gt; gdb command will compile some arbitrary C code and run the
result in the target process, presumably by mapping some executable RAM and
loading it in, then jumping to the blob. Closing gdb (control+d) will continue
the process, and it should start writing out to the file you created.&lt;/p&gt;
&lt;p&gt;There are lots of other cool (and hacky) things you can do with gdb. I once
disconnected someone from an internet radio by attaching gdb to nginx and
closing their file descriptor, for example. Thanks to Roman for giving me the
chance to write an interesting blog post on the subject!&lt;/p&gt;
</description>
    </item><item>
      <title>Google embraces, extends, and extinguishes</title>
      <link>./2018/05/03/Google-embraces-extends-extinguishes.html</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/05/03/Google-embraces-extends-extinguishes.html</guid>
      <description>&lt;p&gt;Microsoft infamously coined the euphemism &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish&#34;&gt;embrace, extend,
extinguish&lt;/a&gt;&amp;rdquo; to
describe their strategy for disrupting markets dominated by open standards.
These days, Microsoft seems to have turned the other leaf, contributing to a
huge amount of open source and supporting open standards, and is becoming a good
citizen of the technology community. It&amp;rsquo;s time to turn our concerns to Google.&lt;/p&gt;
&lt;p&gt;Google famously &amp;ldquo;embraced&amp;rdquo; email on April Fool&amp;rsquo;s day, 2004, which is of course
based on an open standard and federates with the rest of the world. If you&amp;rsquo;ve
read the news lately, you might have seen that Google is shipping a big update
to GMail soon, which adds &amp;ldquo;self-destructing&amp;rdquo; emails that vanish from the
recipient&amp;rsquo;s inbox after a time. Leaving aside that this promise is impossible to
deliver, look at the implementation - Google emails a link to a webpage with the
actual email content, and does magic in their client to make it look seamless.
Thus, they &amp;ldquo;extend&amp;rdquo; email. The &amp;ldquo;extinguish&amp;rdquo; with GMail is also well underway -
it&amp;rsquo;s infamous for having an extremely strict spam filter for incoming emails
from people who run personal or niche mail servers.&lt;/p&gt;
&lt;p&gt;Then there&amp;rsquo;s AMP. It&amp;rsquo;s an understatement to say Google embraced the web - but
AMP is how they enter the &amp;ldquo;extend&amp;rdquo; phase. AMP is a &amp;ldquo;standard&amp;rdquo;, but they don&amp;rsquo;t
listen to any external feedback on it and it serves as a vehicle for keeping
users on their platform even when reading content from other websites. This is
thought to be the main intention of the service, as there are plenty of other
(and more effective) ways of rewarding lightweight pages in their search
results. The &amp;ldquo;extinguish&amp;rdquo; phase comes as sites that don&amp;rsquo;t play ball get pushed
out of Google search results and into obscurity. AMP is perhaps the most blatant
of Google&amp;rsquo;s strategies, serving only to further Google&amp;rsquo;s agenda at the expense
of everyone else.&lt;/p&gt;
&lt;p&gt;The list of grievances continues. Consider Google&amp;rsquo;s dizzying collection of chat
applications. In its initial form, gtalk supported XMPP, an open and federated
standard for chat applications. Google dropped support for XMPP in 2014 and
continued the development of their proprietary platform up thru today&amp;rsquo;s Hangouts
and Google Chat platforms - neither of which support any open standards. Slack
is also evidently taking cues from Google here, recently shutting down their own
IRC and XMPP bridges.&lt;/p&gt;
&lt;p&gt;Google Reader&amp;rsquo;s discontinuation fits too. RSS&amp;rsquo;s decline was evident before
Google axed it, but killing Reader dealt a huge blow to any of RSS&amp;rsquo;s remaining
momentum. Google said themselves they wanted to consolidate users onto the rest
of their services - none of which, I should add, support any open syndication
standards.&lt;/p&gt;
&lt;p&gt;What of Google&amp;rsquo;s role as a participant in open source? Sure, they make a lot of
software open source, but they don&amp;rsquo;t collaborate with anyone.  They forked from
WebKit to get Apple out of the picture, and contributing to Chromium as a
non-Googler is notoriously difficult. Android is the same story - open source in
principle, but non-Googler AOSP contributors bemoan their awful approach to
external patches. It took Google over a decade to start making headway on
upstreaming their Linux patches for Android, too. Google writes papers about AI,
presumably to incentivize their academics with recognition for their work. This
is great until you notice that the crucial piece, the trained models, is always
absent.&lt;/p&gt;
&lt;p&gt;For many people, the alluring convenience of Google&amp;rsquo;s services is overwhelming.
It&amp;rsquo;s hard to hear these things. But we must face facts: embrace, extend,
extinguish is a core part of Google&amp;rsquo;s playbook today. It&amp;rsquo;s important that we
work to diversify the internet and fight the monoculture they&amp;rsquo;re fostering.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;2018-05-04 18:12 UTC&lt;/strong&gt;: I retract my criticism of Google&amp;rsquo;s open source portfolio
as a whole, and acknowledge their positive impact on many projects. However, of
the projects explicitly mentioned I maintain that my criticism is valid.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2018-05-05 11:17 UTC&lt;/strong&gt;: Apparently the previous retraction caused some
confusion. I am &lt;em&gt;only&lt;/em&gt; retracting the insinuation that Google isn&amp;rsquo;t a good actor
in open source, namely the first sentence of paragraph 6. The rest of the
article has not been retracted.&lt;/p&gt;
</description>
    </item><item>
      <title>Sway reporting in from KDE&#39;s Berlin development sprint</title>
      <link>./2018/04/28/KDE-Sprint-retrospective.html</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/04/28/KDE-Sprint-retrospective.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;m writing to you from an airplane on my way back to Philadelphia, after
spending a week in Berlin working with the KDE team. It was great to meet those
folks and work with them for a while. It&amp;rsquo;ll take me some time to get the taste
of C++ out of my mouth, though! In all seriousness, it was a very productive
week and I feel like we have learned a lot about each other&amp;rsquo;s projects and have
a strengthened interest in collaborating more in the future.&lt;/p&gt;
&lt;p&gt;The main purpose of my trip was to find opportunities for
&lt;a href=&#34;http://swaywm.org&#34;&gt;sway&lt;/a&gt; and &lt;a href=&#34;http://kde.org&#34;&gt;KDE&lt;/a&gt; to work together on
improving the Linux desktop. Naturally, the main topic of discussion was
interopability of software written for each of our projects. I brought the
wlroots layer-shell protocol to the table seeking their feedback on it, as well
as reviewing how their desktop shell works today. From our discussions we found
a lot of common ground in our designs and needs, as well as room for improvement
in both of our approaches.&lt;/p&gt;
&lt;p&gt;The KDE approach to their desktop shell is similar to the original sway
approach. Today, their Plasma shell uses a number of proprietary protocols which
are hacks on top of the xdg-shell protocol (for those not in the know, the
xdg-shell protocol is used to render normal desktop windows and is not designed
for use with e.g. panels) that incorporate several of the concepts they were
comfortable using on X11 in an almost 1:1 fashion. Sway never had any X11
concepts to get comfortable with, but some may not know that sway&amp;rsquo;s panel,
wallpaper, and lock screen programs on the 0.x releases are also hacks on top of
xdg-shell that are not portable between compositors.&lt;/p&gt;
&lt;p&gt;In the wlroots project (which is overseen by sway), we&amp;rsquo;ve been developing a
new protocol designed for desktop shell components like these. In theory, it is
a more generally applicable approach to building desktop shells on Wayland than
the approach we were using before. I sat down with the KDE folks and went over
this protocol in great detail, and learned about how Plasma shell works today,
and we were happy to discover that the wlroots approach (with some minor tweaks)
should be excellently suited to Plasma shell. In addition to the layer-shell, we
reviewed several other protocols Plasma uses to build its desktop experience,
and identified more places where it makes sense for us to unify our approach.
Other subjects discussed included virtual desktops, external window management,
screen capture and pipewire, and more.&lt;/p&gt;
&lt;p&gt;The upshot of this is that we believe it&amp;rsquo;s possible to integrate the Plasma
shell with sway. Users of KDE on X11 were able to replace kwin with i3 and still
utilize the Plasma shell - a feature which was lost in the transition to
Wayland. As we continue to work together, this use-case may well be captured
again. Even KDE users who are uninterested in sway stand to benefit from this.
The hacks Plasma uses today are temporary and unmaintainable, and the
improvements to Plasma&amp;rsquo;s codebase will make it easier to work with. Should kwin
grow stable layer-shell support, clients designed for sway will work on KDE as
well. Replacing sway&amp;rsquo;s own similar hacks will have similar benefits for our
codebase and open the door to 3rd-party panels, lockscreens, rofi, etc.&lt;/p&gt;
&lt;p&gt;I spent my time in their care working on actual code to this end. I wrote up a
C++ library that extends Qt with layer-shell support called
&lt;a href=&#34;https://github.com/SirCmpwn/qtlayershell&#34;&gt;qtlayershell&lt;/a&gt;, and extended the
popular &lt;a href=&#34;#&#34;&gt;Latte Dock&lt;/a&gt; KDE extension to support it. Though this work is not
complete, it works - as I write this blog post, Latte is running on my sway
session! This is good progress, but I must return my focus to wlroots soon. If
you are interested in this work, please help me complete it!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./img/latte-dock.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;A big thanks goes to KDE for putting on this event and covering my travel costs
to attend. I hope they found it as productive as I did, and I&amp;rsquo;m very excited
about working more with them in the future. The future of Wayland is bright!&lt;/p&gt;
</description>
    </item><item>
      <title>Achtung! Decentralize, decentralize, decentralize!</title>
      <link>./2018/03/24/Decentralize-decentralize-decentralize.html</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/03/24/Decentralize-decentralize-decentralize.html</guid>
      <description>&lt;p&gt;I can hardly believe it, but the media is finally putting Facebook&amp;rsquo;s feet to the
fire! No longer is it just the weird paranoid kids shouting at everyone to stop
giving all of their information to these companies. We need to take this bull by
the horns and drive it in a productive direction, and for that reason, it&amp;rsquo;s time
to talk about decentralization, federation, and open source.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article has been &lt;a href=&#34;http://getcolorings.com/ru-decentralize&#34;&gt;translated into
Russian&lt;/a&gt; by &lt;a href=&#34;http://getcolorings.com&#34;&gt;Get
Colorings&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to remember that Facebook is not the only villain on this stage.
Did you know that Google keeps &lt;a href=&#34;https://www.google.com/maps/timeline?pb&#34;&gt;a map of everywhere you&amp;rsquo;ve
been&lt;/a&gt;? That Twitter is analyzing your
tweets just like Facebook does, and sells it to advertisers just like Facebook
does? Virtually all internet companies - Snapchat, Tinder, Uber &amp;amp; Lift, and
even more - are spying on you and selling it to advertisers. It&amp;rsquo;s so lucrative
and easy to do this that it&amp;rsquo;s become an &lt;em&gt;industry standard practice&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The solution to the Facebook problem is not jumping ship to another centralized
commercial platform. They will be exactly the same. The commercial model for
internet services is inherently flawed. Companies like Facebook, publicly
traded, have a legal obligation to maximize profits for their shareholders.
Private companies with investors are similarly obligated. Nowhere in the
equation does it say that they&amp;rsquo;re obligated to do &lt;em&gt;anything&lt;/em&gt; for you - the only
role you serve is to be a vehicle for exploitation.&lt;/p&gt;
&lt;p&gt;You need to find services whose incentives are aligned with yours. What asks do
you have from your social media platforms? It probably starts with basic things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I want to keep up with my family and friends&lt;/li&gt;
&lt;li&gt;I want my family and friends to be able to keep up with me&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But if you&amp;rsquo;re smart, you might have some deeper asks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I don&amp;rsquo;t want my personal information sold to others&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t want to be manipulated into spending my money&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We might even have some asks as a &lt;em&gt;society&lt;/em&gt;, too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We don&amp;rsquo;t want to be manipulated into hating our countrymen&lt;/li&gt;
&lt;li&gt;We don&amp;rsquo;t want to have our people&amp;rsquo;s opinions radicalized&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each company I&amp;rsquo;ve mentioned, and many more, may offer you some subset of these
promises. But &lt;em&gt;in every case&lt;/em&gt;, they will have conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;We&amp;rsquo;ll help you keep up with family and friends&lt;/strong&gt;, or at least the subset
of them that we think makes you more profitable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We&amp;rsquo;ll help your family and friends keep up with you&lt;/strong&gt;, so long as your posts
are engaging enough to keep them looking at our ads.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your personal information won&amp;rsquo;t be sold to others&lt;/strong&gt;, unless we can get away
with it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You won&amp;rsquo;t be manipulated into spending your money&lt;/strong&gt;, unless we can
manipulate you into spending it on us.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We won&amp;rsquo;t manipulate you into hating your countrymen&lt;/strong&gt;, unless it makes you
spend more time using our platform to express your hatred.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We won&amp;rsquo;t radicalize your opinions&lt;/strong&gt;, at least not the ones that don&amp;rsquo;t get
you angry enough to spend more time looking at our ads.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m not just being cynical here. There is no promise that a company can make to
its users that outweighs the &lt;a href=&#34;https://legal-dictionary.thefreedictionary.com/fiduciary+duty&#34;&gt;fiduciary
duty&lt;/a&gt; that
&lt;em&gt;obligates&lt;/em&gt; them to maximize profits by any means. The only defense of this is
legislation and consumer choice. We must pass laws that defend users and we must
choose not to engage with companies that behave like this.&lt;/p&gt;
&lt;p&gt;We must do both of these things, but for now I&amp;rsquo;m going to focus on the consumer
choice. We must throw our lot in with the alternative to these corporations -
decentralized, federated, open source platforms.&lt;/p&gt;
&lt;p&gt;What do each of these terms mean?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Decentralized&lt;/em&gt; means that the platform is, well, not &lt;em&gt;centralized&lt;/em&gt;. Rather
than the control being in the hands of one company (or a single interested
party, to generalize it a bit), control is in the hands of many independent
operators.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Federated&lt;/em&gt; refers to a means by which several service operators can
communicate with each other in standard ways. This approach prevents
platform lock-in. Email is a federated system - you can send an email from
your gmail account to your mother&amp;rsquo;s old AOL account. Contrast this to Facebook,
where you can&amp;rsquo;t follow your friend&amp;rsquo;s Twitter account.&lt;/p&gt;
&lt;p&gt;Finally, &lt;em&gt;open source&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is a term used by the technology community to refer
to the free distribution of the secret sauce that makes our services tick. The
technology engineering community collectively works on these projects and freely
shares this work with everyone else.&lt;/p&gt;
&lt;p&gt;The combination of all of these ideas in one piece of software is the golden
ticket to internet freedom. This is the approach to social networking taken most
famously by &lt;a href=&#34;http://joinmastodon.org/&#34;&gt;Mastodon&lt;/a&gt;. Mastodon is a decentralized,
federated, and open source platform. The computing infrastructure the platform
runs on is operated by thousands of independent volunteers (decentralized),
which all communicate with each other and other software using standard
protocols (federated), and the &lt;a href=&#34;https://github.com/tootsuite/mastodon&#34;&gt;source
code&lt;/a&gt; is freely available for anyone to
use and improve (open source)&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The incentives of the operators are aligned with the incentives of the users on
Mastodon. The operator of each instance is a human being who can be easily
reached to give feedback and thanks, rather than a billionaire egomaniac who buys
an entire neighborhood so no one can bother him. Because the costs of
maintaining this social network are distributed across thousands of operators,
each one has a very low cost of operation, which is usually easily covered by
donations from the users who they support. There are no investors to please.
Just the users.&lt;/p&gt;
&lt;p&gt;Mastodon fills a Twitter-like niche. There are other platforms attempting to
fill other niches - &lt;a href=&#34;https://diasporafoundation.org/&#34;&gt;diaspora*&lt;/a&gt; is easily
compared to Facebook, for example.
&lt;a href=&#34;https://github.com/Chocobozzz/PeerTube&#34;&gt;PeerTube&lt;/a&gt; is under development to
fulfill a YouTube-like niche, too. These platforms need our support.&lt;/p&gt;
&lt;p&gt;Commercial platforms don&amp;rsquo;t respect you. You may have grown used to skimming over
ads and content you don&amp;rsquo;t want to see on Facebook and other platforms. It&amp;rsquo;s an
annoyance that you&amp;rsquo;ve internalized because, well, what else can you do? There
are no ads on Mastodon. It doesn&amp;rsquo;t need them, and you deserve better than them.&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt;---&lt;/p&gt;
&lt;p&gt;Remember, Facebook is not the only evil. It&amp;rsquo;s time to discard proprietary
platforms like the manipulative trash they are.  Take the anger you&amp;rsquo;ve felt at
Facebook these past couple of weeks and use it to embrace decentralization,
federation, and open source.&lt;/p&gt;
&lt;p&gt;I know it seems a monumental task to untangle your life from these companies,
but you don&amp;rsquo;t have to do it all at once. If this article moved you, make a todo
list right now. List each way in which you&amp;rsquo;re tied to some platform - you use
Facebook to talk to your friends, or use gmail for your email address, your
contacts are stored on Google, you use Facebook&amp;rsquo;s calendar for social events,
you have a Twitter account you haven&amp;rsquo;t moved&amp;hellip; then take on each task one at a
time. Take as much time as you need. As you research these options, if you find
the open options lacking, let the people involved know what your needs are. If
there&amp;rsquo;s no open option at all, please &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;email me&lt;/a&gt; about it.&lt;/p&gt;
&lt;p&gt;We can do this. We can be free.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;There is some debate about the use of the term &amp;ldquo;open source&amp;rdquo; as opposed to another term, &amp;ldquo;free software&amp;rdquo;. There is a time and a place for this discussion, but it&amp;rsquo;s not here, and our message weakens if we expose the general public to our bickering. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;There are actually several competing and compatible softwares that federate with the same social network Mastodon uses. This is very similar to how several different email providers are compatible with each other and compete to innovate together. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Hack everything without fear</title>
      <link>./2018/03/17/Hack-everything-without-fear.html</link>
      <pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/03/17/Hack-everything-without-fear.html</guid>
      <description>&lt;p&gt;We live in a golden age of open source, and it can sometimes be easy to forget
the privileges that this affords us. I&amp;rsquo;m writing this article with vim, in a
terminal emulator called urxvt, listening to music with mpv, in a Sway desktop
session, on the Linux kernel. Supporting this are libraries like glibc or musl,
harfbuzz, and mesa. I also have the support of the AMDGPU video driver, libinput
and udev, alsa and pulseaudio.&lt;/p&gt;
&lt;p&gt;All of this is open source. I can be reading the code for any of these tools
within 30 seconds, and for many of these tools I already have their code checked
out somewhere on my filesystem. It gets even better, though: these projects
don&amp;rsquo;t just make their code available - they accept patches, too! Why wouldn&amp;rsquo;t we
take advantage of this tremendous opportunity?&lt;/p&gt;
&lt;p&gt;I often meet people who are willing to contribute to one project, but not
another. Some people will shut down when they&amp;rsquo;re faced with a problem that
requires them to dig into territory that they&amp;rsquo;re unfamiliar with. In Sway, for
example, it&amp;rsquo;s often places like libinput or mesa. These tools might seem foreign
and scary - but to these people, at some point, so did Sway. In reality these
codebases are quite accessible.&lt;/p&gt;
&lt;p&gt;Getting around in an unfamiliar repository can be a little intimidating, but do
it enough times and it&amp;rsquo;ll become second nature. The same tools like gdb work
just as well on them. If you have a stacktrace for a segfault originating in
libinput, compile libinput with symbols and gdb will show you the file name and
line number of the problem. Go there and read the code! Learn how to use tools
like &lt;code&gt;git grep&lt;/code&gt; to find stuff. Run &lt;code&gt;git blame&lt;/code&gt; to see who wrote a confusing line
of code, and send them an email! When you find the problem, don&amp;rsquo;t be afraid to
send a patch over instead of working around it in your own code. This is
something every programmer should be comfortable doing often.&lt;/p&gt;
&lt;p&gt;Even when the leads you&amp;rsquo;re chasing down are written in unfamiliar programming
languages or utilize even more unfamiliar libraries, don&amp;rsquo;t despair. All
programming languages have a lot in common and huge numbers of resources are
available online. Learning just enough to understand (and fix!) a particular
problem is very possible, and something I find myself doing it all the time. You
don&amp;rsquo;t have to be an expert in a particular programming language to invoke trial
&amp;amp; error.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re similarly worried about the time investment, don&amp;rsquo;t be. You already set
aside time to work your problem, and this is just part of that process. Yes,
you&amp;rsquo;ll probably be spending your time differently from your expectations - more
reading code than writing code.  But how is that any less productive? The
biggest time sink in this process is all the time you spend worrying about how
much time it&amp;rsquo;s going to take, or telling me in IRC you can&amp;rsquo;t solve your problem
because you&amp;rsquo;re not good enough to understand mesa or the kernel or whatever.&lt;/p&gt;
&lt;p&gt;An important pastime of the effective programmer is reading and understanding
the tools you use. You should at least have a basic idea of how everything on
your system works, and in the places your knowledge is lacking you should make
it your business to study up. The more you do this, the less scary foreign code
will become, and the more productive you will be. No longer will you be stuck in
your tracks because your problem leads you away from the beaten path!&lt;/p&gt;
</description>
    </item><item>
      <title>How to write an IRC bot</title>
      <link>./2018/03/10/How-to-write-an-IRC-bot.html</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/03/10/How-to-write-an-IRC-bot.html</guid>
      <description>&lt;p&gt;My disdain for Slack and many other Silicon Valley chat clients is &lt;a href=&#34;./2015/11/01/Please-stop-using-slack.html&#34;&gt;well
known&lt;/a&gt;, as is my undying love for IRC.
With Slack making the news lately after their recent decision to disable the IRC
and XMPP gateways in a classic &lt;a href=&#34;https://en.wikipedia.org/wiki/Embrace%2C_extend%2C_and_extinguish&#34;&gt;Embrace Extend
Extinguish&lt;/a&gt;
move, they&amp;rsquo;ve been on my mind and I feel like writing about them more. Let&amp;rsquo;s
compare writing a bot for Slack with writing an IRC bot.&lt;/p&gt;
&lt;p&gt;First of all, let&amp;rsquo;s summarize the process for making a Slack bot. Full details
are available in &lt;a href=&#34;https://api.slack.com/slack-apps&#34;&gt;their documentation&lt;/a&gt;. The
basic steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a Slack account and &amp;ldquo;workspace&amp;rdquo; to host the bot (you may have already
done this step). On the free plan you can have up to 10 &amp;ldquo;integrations&amp;rdquo; (aka
bots). This includes all of the plug-n-play bots Slack can set up for you, so
make sure you factor that into your count. Otherwise you&amp;rsquo;ll be heading to the
pricing page and making a case to whoever runs your budget.&lt;/li&gt;
&lt;li&gt;Create a &amp;ldquo;Slack app&amp;rdquo; through their web portal. The app will be tied to the
company you work with now, and if you get fired you will lose the app. Make
sure you make a separate organization if this is a concern!&lt;/li&gt;
&lt;li&gt;The recommended approach from here is to set up subscriptions to the &amp;ldquo;Event
API&amp;rdquo;, which involves standing up a web server (with working SSL) on a
consistent IP address (and don&amp;rsquo;t forget to open up the firewall) to receive
incoming notifications from Slack. You&amp;rsquo;ll need to handle a proprietary
challenge to verify your messages via some HTTP requests coming from Slack
which gives you info to put into HTTP headers of your outgoing requests. The
Slack docs refer to this completion of this process as &amp;ldquo;triumphant success&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Receive some JSON in a proprietary format via your HTTP server and use some
more proprietary HTTP APIs to respond to it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively, instead of steps 3 and 4 you can use the &amp;ldquo;Real Time Messaging&amp;rdquo;
API, which is a websocket-based protocol that starts with an HTTP request to
Slack&amp;rsquo;s authentication endpoint, then a follow-up HTTP request to open the
WebSocket connection. Then you set up events in a similar fashion. Refer to the
complicated table in the documentation breaking down which events work through
which API.&lt;/p&gt;
&lt;p&gt;Alright, so that&amp;rsquo;s the Slack way. How does the IRC way compare? IRC is an open
standard, so to learn about it I can just read RFC 1459, which on my system is
conveniently waiting to be read at &lt;code&gt;/usr/share/doc/rfc/txt/rfc1459.txt&lt;/code&gt;. This
means I can just read it locally, offline, in the text editor of my choice,
rather than on some annoying website that calls authentication a &amp;ldquo;triumphant
success&amp;rdquo; and complains about JavaScript being disabled.&lt;/p&gt;
&lt;p&gt;You don&amp;rsquo;t have to read it right now, though. I can give you a summary here, like
I gave for Slack. Let&amp;rsquo;s start by not writing a bot at all - let&amp;rsquo;s just manually
throw some bits in the general direction of Freenode. Install netcat and run
&lt;code&gt;nc irc.freenode.net 6667&lt;/code&gt;, then type this into your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NICK joebloe
USER joebloe 0.0.0.0 joe :Joe Bloe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hey, presto, you&amp;rsquo;re connected to IRC! Type this in to join a channel:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JOIN #cmpwn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then type this to say hello:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PRIVMSG #cmpwn :Hi SirCmpwn, I&#39;m here from your blog!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;IRC is one of the simplest protocols out there, and it&amp;rsquo;s dead easy to write a
bot for it. If your programming language can open a TCP socket (it can), then
you can use it to write an IRC bot in 2 minutes, flat. That&amp;rsquo;s not even to
mention that there are IRC client libraries available for every programming
language on every platform ever - I even &lt;a href=&#34;https://github.com/SirCmpwn/ChatSharp&#34;&gt;wrote one
myself!&lt;/a&gt; In fact, that guy is probably
the fifth or sixth IRC library I&amp;rsquo;ve written. They&amp;rsquo;re so easy to write that I&amp;rsquo;ve
lost count.&lt;/p&gt;
&lt;p&gt;Slack is a walled garden. Their proprietary API is defined by them and only
implemented by them. They can and will shut off parts you depend on (like the
IRC+XMPP gateways that were just shut down). IRC is over 20 years old and
software written for it then still works now. It&amp;rsquo;s implemented by hundreds of
clients, servers, and bots. Your CI supports it and GitHub can send commit
notifications to it. It&amp;rsquo;s ubiquitous and free. Use it!&lt;/p&gt;
</description>
    </item><item>
      <title>Writing a Wayland Compositor, Part 3: Rendering a window</title>
      <link>./2018/02/28/Writing-a-wayland-compositor-part-3.html</link>
      <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/02/28/Writing-a-wayland-compositor-part-3.html</guid>
      <description>&lt;p&gt;This is the third in a series of articles on the subject of writing a Wayland
compositor from scratch using &lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt;.
Check out &lt;a href=&#34;./2018/02/17/Writing-a-Wayland-compositor-1.html&#34;&gt;the first article&lt;/a&gt;
if you haven&amp;rsquo;t already. We left off with a Wayland server which accepts client
connections and exposes a handful of globals, but does not do anything
particularly interesting yet. Our goal today is to do something interesting -
render a window!&lt;/p&gt;
&lt;p&gt;The commit that this article dissects is
&lt;a href=&#34;https://github.com/SirCmpwn/mcwayland/commit/342b7b6&#34;&gt;342b7b6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first thing we have to do in order to render windows is establish the
&lt;strong&gt;compositor&lt;/strong&gt;. The wl_compositor global is used by clients to allocate
&lt;code&gt;wl_surface&lt;/code&gt;s, to which they attach &lt;code&gt;wl_buffer&lt;/code&gt;s. These surfaces are just a
generic mechanism for sharing buffers of pixels with compositors, and don&amp;rsquo;t
carry an implicit &lt;strong&gt;role&lt;/strong&gt;, such as &amp;ldquo;application window&amp;rdquo; or &amp;ldquo;panel&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;wlroots provides an implementation of &lt;code&gt;wl_compositor&lt;/code&gt;. Let&amp;rsquo;s set aside a
reference for it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;struct mcw_server {
        struct wl_display *wl_display;
        struct wl_event_loop *wl_event_loop;
 
        struct wlr_backend *backend;
&lt;span class=&#34;gi&#34;&gt;+       struct wlr_compositor *compositor;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; 
        struct wl_listener new_output;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then rig it up:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        wlr_primary_selection_device_manager_create(server.wl_display);
        wlr_idle_create(server.wl_display);
 
&lt;span class=&#34;gi&#34;&gt;+       server.compositor = wlr_compositor_create(server.wl_display,
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+                       wlr_backend_get_renderer(server.backend));
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;        wl_display_run(server.wl_display);
        wl_display_destroy(server.wl_display);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run mcwayface now and check out the globals with &lt;code&gt;weston-info&lt;/code&gt;, we&amp;rsquo;ll see
a wl_compositor and wl_subcompositor have appeared:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interface: &#39;wl_compositor&#39;, version: 4, name: 8
interface: &#39;wl_subcompositor&#39;, version: 1, name: 9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You get a wl_subcompositor for free with the wlroots wl_compositor
implementation. We&amp;rsquo;ll discuss subcompositors in a later article. Speaking of
things we&amp;rsquo;ll discuss in another article, add this too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        wlr_primary_selection_device_manager_create(server.wl_display);
        wlr_idle_create(server.wl_display);
 
        server.compositor = wlr_compositor_create(server.wl_display,
                        wlr_backend_get_renderer(server.backend));
 
&lt;span class=&#34;gi&#34;&gt;+       wlr_xdg_shell_v6_create(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;        wl_display_run(server.wl_display);
        wl_display_destroy(server.wl_display);
        return 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember that I said earlier that surfaces are just globs of pixels with no
role? xdg_shell is something that can give surfaces a role. We&amp;rsquo;ll talk about it
more in the next article. After adding this, many clients will be able to
connect to your compositor and spawn a window. However, without adding anything
else, these windows will never be shown on-screen. You have to render them!&lt;/p&gt;
&lt;p&gt;Something that distinguishes wlroots from libraries like wlc and libweston is
that wlroots does not do any rendering for you. This gives you a lot of
flexibility to render surfaces any way you like. The clients just gave you a
pile of pixels, what you do with them is up to you - maybe you&amp;rsquo;re making a
desktop compositor, or maybe you want to draw them on an Android-style app
switcher, or perhaps your compositor arranges windows in VR - all of this is
possible with wlroots.&lt;/p&gt;
&lt;p&gt;Things are about to get complicated, so let&amp;rsquo;s start with the easy part: in
the output_frame handler, we have to get a reference to every wlr_surface we
want to render. So let&amp;rsquo;s iterate over every surface our &lt;code&gt;wlr_compositor&lt;/code&gt; is
keeping track of:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        wlr_renderer_begin(renderer, wlr_output);

&lt;span class=&#34;gi&#34;&gt;+       struct wl_resource *_surface;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wl_resource_for_each(_surface, &amp;amp;server-&amp;gt;compositor-&amp;gt;surfaces) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               struct wlr_surface *surface = wlr_surface_from_resource(_surface);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               if (!wlr_surface_has_buffer(surface)) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+                       continue;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               }
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               // TODO: Render this surface
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       }
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;
        wlr_output_swap_buffers(wlr_output, NULL, NULL);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;wlr_compositor&lt;/code&gt; struct has a member named &lt;code&gt;surfaces&lt;/code&gt;, which is a list of
&lt;code&gt;wl_resource&lt;/code&gt;s. A helper method is provided to produce a &lt;code&gt;wlr_surface&lt;/code&gt; from its
corresponding &lt;code&gt;wl_resource&lt;/code&gt;. The &lt;code&gt;wlr_surface_has_buffer&lt;/code&gt; call is just to make
sure that the client has actually given us pixels to display on this surface.&lt;/p&gt;
&lt;p&gt;wlroots might make you do the rendering yourself, but some tools &lt;em&gt;are&lt;/em&gt; provided
to help you write compositors with simple rendering requirements:
&lt;strong&gt;wlr_renderer&lt;/strong&gt;. We&amp;rsquo;ve already touched on this a little bit, but now we&amp;rsquo;re
going to use it for real. A little bit of OpenGL knowledge is required here. If
you&amp;rsquo;re a complete novice with OpenGL&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, I can recommend &lt;a href=&#34;https://learnopengl.com/&#34;&gt;this
tutorial&lt;/a&gt; to help you out. Since you&amp;rsquo;re in a hurry,
we&amp;rsquo;ll do a quick crash course on the concepts necessary to utilize wlr_renderer.
If you get lost, just skip to the next diff and treat it as magic incantations
that make your windows appear.&lt;/p&gt;
&lt;p&gt;We have a pile of pixels, and we want to put it on the screen. We can do this
with a &lt;strong&gt;shader&lt;/strong&gt;. If you&amp;rsquo;re using wlr_renderer (and mcwayface will be), shaders
are provided for you. To use our shaders, we feed them a &lt;strong&gt;texture&lt;/strong&gt; (the pile
of pixels) and a &lt;strong&gt;matrix&lt;/strong&gt;. If we treat every pixel coordinate on our surface
as a vector from (0, 0); top left, to (1, 1); bottom right, our goal is to
produce a matrix that we can multiply a vector by to find the final coordinates
on-screen for the pixel to be drawn to. We must project pixel coordinates from
this 0-1 system to the coordinates of our desired rectangle on screen.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s gotcha here, however: the coordinates on-screen &lt;em&gt;also&lt;/em&gt; go from 0 to 1,
instead of, for example, 0-1920 and 0-1080. To project coordinates like
&amp;ldquo;put my 640x480 window at coordinates 100,100&amp;rdquo; to screen coordinates, we use an
&lt;strong&gt;orthographic projection matrix&lt;/strong&gt;. I know that sounds scary, but don&amp;rsquo;t worry -
wlroots does all of the work for you. Your &lt;code&gt;wlr_output&lt;/code&gt; already has a suitable
matrix called &lt;code&gt;transform_matrix&lt;/code&gt;, which incorporates into it the current
resolution, scale factor, and rotation of your screen.&lt;/p&gt;
&lt;p&gt;Okay, hopefully you&amp;rsquo;re still with me. This sounds a bit complicated, but the
manifestation of all of this nonsense is fairly straightforward. wlroots
provides some tools to make it easy for you. First, we have to prepare a
&lt;code&gt;wlr_box&lt;/code&gt; that represents (in output coordinates) where we want the surface to
show up.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        struct wl_resource *_surface;
        wl_resource_for_each(_surface, &amp;amp;server-&amp;gt;compositor-&amp;gt;surfaces) {
                struct wlr_surface *surface = wlr_surface_from_resource(_surface);
                if (!wlr_surface_has_buffer(surface)) {
                        continue;
                }
&lt;span class=&#34;gd&#34;&gt;-               // TODO: Render this surface
&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               struct wlr_box render_box = {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+                       .x = 20, .y = 20,
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+                       .width = surface-&amp;gt;current-&amp;gt;width,
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+                       .height = surface-&amp;gt;current-&amp;gt;height
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               };
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, here&amp;rsquo;s the great part: all of that fancy math I was just talking about can
be done with a single helper function provided by wlroots: &lt;code&gt;wlr_matrix_project_box&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        struct wl_resource *_surface;
        wl_resource_for_each(_surface, &amp;amp;server-&amp;gt;compositor-&amp;gt;surfaces) {
                struct wlr_surface *surface = wlr_surface_from_resource(_surface);
                if (!wlr_surface_has_buffer(surface)) {
                        continue;
                }
                struct wlr_box render_box = {
                        .x = 20, .y = 20,
                        .width = surface-&amp;gt;current-&amp;gt;width,
                        .height = surface-&amp;gt;current-&amp;gt;height
                };
&lt;span class=&#34;gi&#34;&gt;+               float matrix[16];
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               wlr_matrix_project_box(&amp;amp;matrix, &amp;amp;render_box,
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+                               surface-&amp;gt;current-&amp;gt;transform,
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+                               0, &amp;amp;wlr_output-&amp;gt;transform_matrix);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This takes a reference to a &lt;code&gt;float[16]&lt;/code&gt; to store the output matrix in, a box you
want to project, some other stuff that isn&amp;rsquo;t important right now, and the
projection you want to use - in this case, we just use the one provided by
&lt;code&gt;wlr_output&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reason we make you understand and perform these steps is because it&amp;rsquo;s
entirely possible that you&amp;rsquo;ll want to do them differently in the future. This
is only the simplest case, but remember that wlroots is designed for &lt;em&gt;every&lt;/em&gt;
case. Now that we&amp;rsquo;ve obtained this matrix, we can finally render the surface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        struct wl_resource *_surface;
        wl_resource_for_each(_surface, &amp;amp;server-&amp;gt;compositor-&amp;gt;surfaces) {
                struct wlr_surface *surface = wlr_surface_from_resource(_surface);
                if (!wlr_surface_has_buffer(surface)) {
                        continue;
                }
                struct wlr_box render_box = {
                        .x = 20, .y = 20,
                        .width = surface-&amp;gt;current-&amp;gt;width,
                        .height = surface-&amp;gt;current-&amp;gt;height
                };
                float matrix[16];
                wlr_matrix_project_box(&amp;amp;matrix, &amp;amp;render_box,
                                surface-&amp;gt;current-&amp;gt;transform,
                                0, &amp;amp;wlr_output-&amp;gt;transform_matrix);
&lt;span class=&#34;gi&#34;&gt;+               wlr_render_with_matrix(renderer, surface-&amp;gt;texture, &amp;amp;matrix, 1.0f);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               wlr_surface_send_frame_done(surface, &amp;amp;now);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also throw in a &lt;code&gt;wlr_surface_send_frame_done&lt;/code&gt; for good measure, which lets
the client know that we&amp;rsquo;re done with it so they can send another frame. We&amp;rsquo;re
done! Run mcwayface now, then the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ WAYLAND_DISPLAY=wayland-1 weston-simple-shm &amp;amp;
$ WAYLAND_DISPLAY=wayland-1 gnome-terminal -- htop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To see the following beautiful image:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/y_qN.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Run any other clients you like - many of them will work!&lt;/p&gt;
&lt;p&gt;We used a bit of a hack today by simply rendering all of the surfaces the
&lt;code&gt;wl_compositor&lt;/code&gt; knew of. In practice, we&amp;rsquo;re going to need to extend our
xdg_shell support (and add some other shells, too) to do this properly. We&amp;rsquo;ll
cover this in the next article.&lt;/p&gt;
&lt;p&gt;Before you go, a quick note: after this commit, I reorganized things a bit -
we&amp;rsquo;re going to outgrow this single-file approach pretty quickly soon. Check out
That commit &lt;a href=&#34;https://github.com/SirCmpwn/mcwayface/commit/e800facb371c42d844b858af5ced456ffd6e9d08&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you next time!&lt;/p&gt;
&lt;p&gt;
    Previous &amp;mdash;
    &lt;a href=&#34;./2018/02/22/Writing-a-wayland-compositor-part-2.html&#34;&gt;
        Part 2: Rigging up the server
    &lt;/a&gt;
&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;If you&amp;rsquo;re not a novice, we&amp;rsquo;ll cover more complex rendering scenarios in the future. But the short of it is that you can implement your own &lt;code&gt;wlr_renderer&lt;/code&gt; that wlr_compositor can use to bind textures to the GPU and then you can do whatever you want. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>The path to sustainably working on FOSS full-time</title>
      <link>./2018/02/24/The-road-to-sustainable-FOSS.html</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/02/24/The-road-to-sustainable-FOSS.html</guid>
      <description>&lt;p&gt;This is an article I didn&amp;rsquo;t think I&amp;rsquo;d be writing any time soon. I&amp;rsquo;ve aspired to
work full-time on my free and open source software projects for a long time now,
but I have never expected that it could work. However, as of this week, I
finally have enough recurring donation revenue to break even on FOSS, and I&amp;rsquo;ve
started to put the extra cash away. I needed to set the next donation goal and
ran the numbers to figure out what it takes to work on FOSS full-time.&lt;/p&gt;
&lt;p&gt;Let me start with some context. I like to say &amp;ldquo;one-time donations buy pizza,
but recurring donations buy sustainable FOSS development&amp;rdquo;. One-time donations
provide no financial security, so to date, (almost) all of my FOSS work has been
done in my spare time, and I&amp;rsquo;ve had to spend most of my time working on
proprietary software to make a living. This is the case for many other free
software advocates as well. Short of large grants on the scale of several
tens of thousands of dollars, if you want to get your rent paid and put food on
the table you need to be able to rely on something consistent.&lt;/p&gt;
&lt;p&gt;Some projects (e.g. Docker, Gitlab) have a compelling product in the market and
can build a company around their open source product. Some projects fulfill a
tangible need for some other business (such as writing software they depend on),
and for these projects large corporate sponsorships are often possible. However,
other kinds of projects (including most of my own) often have to rely on their
users for donations, and this has traditionally been a pretty dubious prospect.
In August of 2017, I was making $0 per month in recurring donations to
&lt;a href=&#34;https://drewdevault.com/donate&#34;&gt;fosspay&lt;/a&gt;, down from an all-time peak of $20 per
month. When I was researching the possibility of starting a Patreon campaign,
the norm was less than $50/month even for the most successful open source
campaigns. As you can imagine, I was somewhat pessimistic.&lt;/p&gt;
&lt;p&gt;To my happy surprise, recurring donations to open source projects have taken
off, both for me and many others. It&amp;rsquo;s amazing. After years of failing to earn a
substantial income from open source, as of today I&amp;rsquo;m receiving $547.74 per month
from three donation platforms (&lt;a href=&#34;https://drewdevault.com/donate&#34;&gt;fosspay&lt;/a&gt;,
&lt;a href=&#34;https://liberapay.com/SirCmpwn&#34;&gt;LiberaPay&lt;/a&gt;, and
&lt;a href=&#34;https://patreon.com/SirCmpwn&#34;&gt;Patreon&lt;/a&gt;). What&amp;rsquo;s amazing is that because the
income comes from from several platforms and is distributed across over 80
donators, I can feel confident in the security of this model. There are no
whales whose donations I have to live in fear of losing. There is no single
platform that I have to worry about going under or dramatically &lt;a href=&#34;https://blog.patreon.com/not-rolling-out-fees-change/&#34;&gt;changing their
fee structure&lt;/a&gt;. This is
unprecedented - we&amp;rsquo;re truly seeing the age of user-supported FOSS begin.&lt;/p&gt;
&lt;p&gt;I want to provide some transparency on how I set my goals and where the money
goes. You might be surprised to have heard me say that I&amp;rsquo;m only &amp;ldquo;breaking even&amp;rdquo;
on open source at $500/month! Many projects can run on a leaner budget, but
because I maintain so many different projects, I have different infrastructure
requirements. This mainly includes domains and servers for CI, project hosting,
releases, etc. At my scale, it&amp;rsquo;s most cost-effective for me to self-host my own
dedicated servers in a local datacenter here in Philadelphia. This costs me
$380/month at the moment for 5U including power and network. I&amp;rsquo;m not done moving
my legacy infrastructure into the new datacenter, though, so I&amp;rsquo;m still paying
for some virtual private servers. As I migrate these, I will be reinvesting the
money saved into upgrading the new infrastructure.&lt;/p&gt;
&lt;p&gt;The next question is where to go from here. I have set my full-time goal at
$6,000 per month, which works out to $72,000 per year pre-tax,
pre-infrastructure expenses. This number is a lofty goal, and one that I expect
won&amp;rsquo;t be met for a long time, if at all. This number is based on several
factors: cost of living, financial security, and taxes. The number is a
significant decrease from what I earn today, but it is enough to meet each of
these criteria. Let&amp;rsquo;s break it down.&lt;/p&gt;
&lt;p&gt;Right now, I live in a pretty nice apartment in center city Philadelphia, which
costs me about $1700 per month. There are cheaper areas, but I make a
comfortable salary at my current job, which allows me to buy a nicer place. If
working on FOSS full-time appears viable, I will move to a cheaper location when
my lease is up and adjust the goal accordingly (I will probably move to a
cheaper location when my lease is up regardless, actually). Because I&amp;rsquo;m locked
into my lease (among other reasons), I did not factor major lifestyle changes
like moving to a cheaper location into the goal. Other costs of living, such as
food and necessities, work out to about $1000 per month.&lt;/p&gt;
&lt;p&gt;The other concern is financial security. I am lucky to live a comfortable life
today, but that is a result of hard lessons learned and has not always been the
case. I cannot focus on FOSS if I&amp;rsquo;m only earning just enough to cover my
expenses. Any major change in my life circumstances, such as a medical
emergency, natural disaster, or even something as benign as my computer breaking
down, would be a serious problem. Therefore, for me to consider working
full-time on anything, the earnings have to allow me to save money. To this end,
my earnings floor is at least 1.5x my expenditures. Some people think a more
liberal ratio is fine, but I&amp;rsquo;m a bit more conservative - I used to really
struggle to make ends meet. This raises the total to around $4000 per month.&lt;/p&gt;
&lt;p&gt;Add to this infrastructure costs we already talked about, and the total becomes
$4500 per month. Now we have to consider tax. If we look up the current &lt;a href=&#34;https://en.wikipedia.org/wiki/Tax_bracket#2018_tax_brackets_under_current_law&#34;&gt;tax
brackets in the United
States&lt;/a&gt;
and do some guesswork, we can estimate that I&amp;rsquo;ll land in the 22% bracket under
this model. If I need my take-home to be $4500, we can divide that by 78% and
arrive at the total: $5769 per month&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Round it up to $6000 and this is our
goal.&lt;/p&gt;
&lt;p&gt;These numbers are pretty high. I understand many people, including some of those
who donate to me, are much less fortunate than I. My lifestyle is a reflection
of my assumption that the open source donation model does not provide a
sustainable source of income. Based on this, I&amp;rsquo;ve focused my career on paid
proprietary software development, which pays very competitively in the United
States. The privileges afforded by this have shaped my costs of living. Rather
than make up a number smaller than my actual expenditures, I prefer to be honest
with you about this.&lt;/p&gt;
&lt;p&gt;This doesn&amp;rsquo;t necessarily have to remain the case forever. As my income from
donations increase, utilizing them as a primary source of income becomes more
feasible, and I am prepared to reorient my life with this in mind. You can
expect my donation goal to &lt;em&gt;decrease&lt;/em&gt; as the number of donations &lt;em&gt;increases&lt;/em&gt;.
This will probably take a long time, on the scale of years. My housing situation
and costs of living in Philadelphia will change during this time - I might not
stay in Philadelphia, I might have to change jobs, etc. It&amp;rsquo;s difficult to set
a more optimistic goal today that will prove correct when its met. For that
reason, my goal is adjusted with respect to my current conditions, not the
ideal.&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s how it shakes out! I&amp;rsquo;m glad we can finally have this conversation, and
I&amp;rsquo;m incredibly thankful for your support. Thank you for everything, and I&amp;rsquo;m
looking forward to making even more cool stuff for you in the future.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Correction: that&amp;rsquo;s not how taxes work, but the simplified version gives us a more conservative number - which is a good thing when your livelihood is at stake. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Writing a Wayland Compositor, Part 2: Rigging up the server</title>
      <link>./2018/02/22/Writing-a-wayland-compositor-part-2.html</link>
      <pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/02/22/Writing-a-wayland-compositor-part-2.html</guid>
      <description>&lt;p&gt;This is the second in a series of articles on the subject of writing a Wayland
compositor from scratch using &lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt;.
Check out &lt;a href=&#34;./2018/02/17/Writing-a-Wayland-compositor-1.html&#34;&gt;the first article&lt;/a&gt;
if you haven&amp;rsquo;t already. Last time, we ended up with an application which fired
up a wlroots backend, enumerated output devices, and drew some pretty colors on
the screen. Today, we&amp;rsquo;re going to start accepting Wayland client connections,
though we aren&amp;rsquo;t going to be doing much with them yet.&lt;/p&gt;
&lt;p&gt;The commit that this article dissects is
&lt;a href=&#34;https://github.com/SirCmpwn/mcwayland/commit/b45c651&#34;&gt;b45c651&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A quick aside on the nature of these blog posts: it&amp;rsquo;s going to take &lt;em&gt;a lot&lt;/em&gt; of
these articles to flesh out our compositor. I&amp;rsquo;m going to be publishing these
more frequently than usual, probably 1-2 per week, and continue posting my usual
articles at the typical rate. Okay? Cool.&lt;/p&gt;
&lt;p&gt;So we&amp;rsquo;ve started up the backend and we&amp;rsquo;re rendering something interesting, but
we still aren&amp;rsquo;t running a Wayland server &amp;ndash; Wayland clients aren&amp;rsquo;t connecting to
our application. Adding this is actually quite easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gu&#34;&gt;@@ -113,12 +113,18 @@ int main(int argc, char **argv) {
&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;        server.new_output.notify = new_output_notify;
        wl_signal_add(&amp;amp;server.backend-&amp;gt;events.new_output, &amp;amp;server.new_output);
 
&lt;span class=&#34;gi&#34;&gt;+       const char *socket = wl_display_add_socket_auto(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       assert(socket);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;        if (!wlr_backend_start(server.backend)) {
                fprintf(stderr, &amp;#34;Failed to start backend\n&amp;#34;);
                wl_display_destroy(server.wl_display);
                return 1;
        }
 
&lt;span class=&#34;gi&#34;&gt;+       printf(&amp;#34;Running compositor on wayland display &amp;#39;%s&amp;#39;\n&amp;#34;, socket);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       setenv(&amp;#34;WAYLAND_DISPLAY&amp;#34;, socket, true);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;        wl_display_run(server.wl_display);
        wl_display_destroy(server.wl_display);
        return 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it! If you run McWayface again, it&amp;rsquo;ll print something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Running compositor on wayland display &#39;wayland-1&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://cgit.freedesktop.org/wayland/weston/&#34;&gt;Weston&lt;/a&gt;, the Wayland reference
compositor, includes a number of simple reference clients. We can use
&lt;code&gt;weston-info&lt;/code&gt; to connect to our server and list the &lt;strong&gt;globals&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ WAYLAND_DISPLAY=wayland-1 weston-info
interface: &#39;wl_drm&#39;, version: 2, name: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you recall from my &lt;a href=&#34;./2017/06/10/Introduction-to-Wayland.html&#34;&gt;Introduction to
Wayland&lt;/a&gt;, the Wayland server exports a
list of &lt;strong&gt;globals&lt;/strong&gt; to clients via the Wayland registry. These globals provide
interfaces the client can utilize to interact with the server. We get &lt;code&gt;wl_drm&lt;/code&gt;
for free with wlroots, but we have not actually wired up anything useful yet.
Wlroots provides many &amp;ldquo;types&amp;rdquo;, of which the majority are implementations of
Wayland global interfaces like this.&lt;/p&gt;
&lt;p&gt;Some of the wlroots implementations require some rigging from you, but several
of them just take care of themselves. Rigging these up is easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        printf(&amp;#34;Running compositor on wayland display &amp;#39;%s&amp;#39;\n&amp;#34;, socket);
        setenv(&amp;#34;WAYLAND_DISPLAY&amp;#34;, socket, true);
&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wl_display_init_shm(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wlr_gamma_control_manager_create(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wlr_screenshooter_create(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wlr_primary_selection_device_manager_create(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wlr_idle_create(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; 
        wl_display_run(server.wl_display);
        wl_display_destroy(server.wl_display);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that some of these interfaces are not necessarily ones that you typically
would want to expose to all Wayland clients - screenshooter, for example, is
something that should be secured. We&amp;rsquo;ll get to security in a later article. For
now, if we run &lt;code&gt;weston-info&lt;/code&gt; again, we&amp;rsquo;ll see a few more globals have appeared:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ WAYLAND_DISPLAY=wayland-1 weston-info
interface: &#39;wl_shm&#39;, version: 1, name: 3
	formats: XRGB8888 ARGB8888
interface: &#39;wl_drm&#39;, version: 2, name: 1
interface: &#39;gamma_control_manager&#39;, version: 1, name: 2
interface: &#39;orbital_screenshooter&#39;, version: 1, name: 3
interface: &#39;gtk_primary_selection_device_manager&#39;, version: 1, name: 4
interface: &#39;org_kde_kwin_idle&#39;, version: 1, name: 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You&amp;rsquo;ll find that wlroots implements a variety of protocols from a variety of
sources - here we see protocols from Orbital, GTK, and KDE represented. Wlroots
includes an example client for the orbital screenshooter - we can use it now to
take a screenshot of our compositor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ WAYLAND_DISPLAY=wayland-1 ./examples/screenshot
cannot set buffer size
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ah, this is a problem - you may have noticed that we don&amp;rsquo;t have any wl_output
globals, which the screenshooter client relies on to figure out the resolution
of the screenshot buffer. We can add these, too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gu&#34;&gt;@@ -95,6 +99,8 @@ static void new_output_notify(struct wl_listener *listener, void *data) {
&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;        wl_signal_add(&amp;amp;wlr_output-&amp;gt;events.destroy, &amp;amp;output-&amp;gt;destroy);
        output-&amp;gt;frame.notify = output_frame_notify;
        wl_signal_add(&amp;amp;wlr_output-&amp;gt;events.frame, &amp;amp;output-&amp;gt;frame);
&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wlr_output_create_global(wlr_output);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running &lt;code&gt;weston-info&lt;/code&gt; again will give us some info about our outputs now:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ WAYLAND_DISPLAY=wayland-1 weston-info
interface: &#39;wl_drm&#39;, version: 2, name: 1
interface: &#39;wl_output&#39;, version: 3, name: 2
	x: 0, y: 0, scale: 1,
	physical_width: 0 mm, physical_height: 0 mm,
	make: &#39;wayland&#39;, model: &#39;wayland&#39;,
	subpixel_orientation: unknown, output_transform: normal,
	mode:
		width: 952 px, height: 521 px, refresh: 0.000 Hz,
		flags: current
interface: &#39;wl_shm&#39;, version: 1, name: 3
	formats: XRGB8888 ARGB8888
interface: &#39;gamma_control_manager&#39;, version: 1, name: 4
interface: &#39;orbital_screenshooter&#39;, version: 1, name: 5
interface: &#39;gtk_primary_selection_device_manager&#39;, version: 1, name: 6
interface: &#39;org_kde_kwin_idle&#39;, version: 1, name: 7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can take that screenshot! Give it a shot (heh)!&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re getting close to the good stuff now. The next article is going to
introduce the concept of &lt;strong&gt;surfaces&lt;/strong&gt;, and we will use them to render our first
window. If you had any trouble with this article, please reach out to me at
&lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;sir@cmpwn.com&lt;/a&gt; or to the wlroots team at
&lt;a href=&#34;http://webchat.freenode.net/?channels=sway-devel&amp;amp;uio=d4&#34;&gt;#sway-devel&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&#34;float: right&#34;&gt;
    Next &amp;mdash;
    &lt;a href=&#34;./2018/02/28/Writing-a-wayland-compositor-part-3.html&#34;&gt;
        Part 3: Rendering a window
    &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
    Previous &amp;mdash;
    &lt;a href=&#34;./2018/02/17/Writing-a-Wayland-compositor-1.html&#34;&gt;
        Part 1: Hello wlroots
    &lt;/a&gt;
&lt;/p&gt;
</description>
    </item><item>
      <title>Writing a Wayland Compositor, Part 1: Hello wlroots</title>
      <link>./2018/02/17/Writing-a-Wayland-compositor-1.html</link>
      <pubDate>Sat, 17 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/02/17/Writing-a-Wayland-compositor-1.html</guid>
      <description>&lt;p&gt;This is the first in a series of &lt;em&gt;many&lt;/em&gt; articles I&amp;rsquo;m writing on the subject of
building a functional Wayland compositor from scratch. As you may know, I am the
lead maintainer of &lt;a href=&#34;https://github.com/swaywm/sway&#34;&gt;sway&lt;/a&gt;, a reasonably popular
Wayland compositor. Along with many other talented developers, we&amp;rsquo;ve been
working on &lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt; over the past few
months. This is a powerful tool for creating new Wayland compositors, but it is
very dense and difficult to understand. Do not despair! The intention of these
articles is to make you understand and feel comfortable using it.&lt;/p&gt;
&lt;p&gt;Before we dive in, a quick note: the wlroots team is starting a crowdfunding
campaign today to fund travel for each of our core contributors to meet in
person and work for two weeks on a hackathon. Please consider contributing to
&lt;a href=&#34;https://www.indiegogo.com/projects/sway-hackathon-software/x/1059863&#34;&gt;the campaign&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;You &lt;strong&gt;must&lt;/strong&gt; read and comprehend my earlier article, &lt;a href=&#34;./2017/06/10/Introduction-to-Wayland.html&#34;&gt;An introduction to
Wayland&lt;/a&gt;, before attempting to
understand this series of blog posts, as I will be relying on concepts and
terminology introduced there to speed things up. Some background in OpenGL is
helpful, but not required. A good understanding of C is mandatory. If you have
any questions about any of the articles in this series, please reach out to me
directly via &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;sir@cmpwn.com&lt;/a&gt; or to the wlroots team at
&lt;a href=&#34;http://webchat.freenode.net/?channels=sway-devel&amp;amp;uio=d4&#34;&gt;#sway-devel on irc.freenode.net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During this series of articles, the compositor we&amp;rsquo;re building will live on
GitHub: &lt;a href=&#34;https://github.com/SirCmpwn/mcwayface&#34;&gt;Wayland McWayface&lt;/a&gt;. Each article
in this series will be presented as a breakdown of a single commit between zero
and a fully functional Wayland compositor. The commit for this article is
&lt;a href=&#34;https://github.com/SirCmpwn/mcwayland/commit/f89092e&#34;&gt;f89092e&lt;/a&gt;.
I&amp;rsquo;m only going to explain the important parts - I suggest you review
the entire commit separately.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get started. First, I&amp;rsquo;m going to define a struct for holding our
compositor&amp;rsquo;s state:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+struct mcw_server {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct wl_display *wl_display;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct wl_event_loop *wl_event_loop;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: mcw is short for McWayface. We&amp;rsquo;ll be using this acronym throughout the
article series. We&amp;rsquo;ll set one of these aside and initialize the Wayland display
for it&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt; int main(int argc, char **argv) {
&lt;span class=&#34;gi&#34;&gt;+       struct mcw_server server;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       server.wl_display = wl_display_create();
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       assert(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       server.wl_event_loop = wl_display_get_event_loop(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       assert(server.wl_event_loop);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;        return 0;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Wayland display gives us a number of things, but for now all we care about
is the event loop. This event loop is deeply integrated into wlroots, and is
used for things like dispatching signals across the application, being notified
when data is available on various file descriptors, and so on.&lt;/p&gt;
&lt;p&gt;Next, we need to create the backend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt; struct mcw_server {
        struct wl_display *wl_display;
        struct wl_event_loop *wl_event_loop;
 
&lt;span class=&#34;gi&#34;&gt;+       struct wlr_backend *backend;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;strong&gt;backend&lt;/strong&gt; is our first wlroots concept. The backend is responsible for
abstracting the low level &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; implementations from you. Each
backend can generate zero or more input devices (such as mice, keyboards, etc)
and zero or more output devices (such as monitors on your desk). Backends have
nothing to do with Wayland - their purpose is to help you with the &lt;em&gt;other&lt;/em&gt; APIs
you need to use as a Wayland compositor. There are various backends with various
purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;drm&lt;/strong&gt; backend utilizes the Linux DRM subsystem to render directly to
your physical displays.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;libinput&lt;/strong&gt; backend utilizes libinput to enumerate and control physical
input devices.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;wayland&lt;/strong&gt; backend creates &amp;ldquo;outputs&amp;rdquo; as windows on another running
Wayland compositors, allowing you to nest compositors. Useful for debugging.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;x11&lt;/strong&gt; backend is similar to the Wayland backend, but opens an x11 window
on an x11 server rather than a Wayland window on a Wayland server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another important backend is the &lt;strong&gt;multi&lt;/strong&gt; backend, which allows you to
initialize several backends at once and aggregate their input and output
devices. This is necessary, for example, to utilize both drm and libinput
simultaneously.&lt;/p&gt;
&lt;p&gt;wlroots provides a helper function for automatically choosing the most
appropriate backend based on the user&amp;rsquo;s environment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        server.wl_event_loop = wl_display_get_event_loop(server.wl_display);
        assert(server.wl_event_loop);
 
&lt;span class=&#34;gi&#34;&gt;+       server.backend = wlr_backend_autocreate(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       assert(server.backend);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;        return 0;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I would generally suggest using either the Wayland or X11 backends during
development, especially before we have a way of exiting the compositor. If you
call &lt;code&gt;wlr_backend_autocreate&lt;/code&gt; from a running Wayland or X11 session, the
respective backends will be automatically chosen.&lt;/p&gt;
&lt;p&gt;We can now start the backend and enter the Wayland event loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+       if (!wlr_backend_start(server.backend)) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               fprintf(stderr, &amp;#34;Failed to start backend\n&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               wl_display_destroy(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               return 1;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       }
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wl_display_run(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wl_display_destroy(server.wl_display);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;        return 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run your compositor at this point, you should see the backend start up
and&amp;hellip; do nothing. It&amp;rsquo;ll open a window if you run from a running Wayland or X11
server. If you run it on DRM, it&amp;rsquo;ll probably do very little and you won&amp;rsquo;t even
be able to switch to another TTY to kill it.&lt;/p&gt;
&lt;p&gt;In order to render something, we need to know about the outputs we can render
on. The backend provides a &lt;strong&gt;wl_signal&lt;/strong&gt; that notifies us when it gets a new
output. This will happen on startup and as any outputs are hotplugged at
runtime.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s add this to our server struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt; struct mcw_server {
        struct wl_display *wl_display;
        struct wl_event_loop *wl_event_loop;
 
        struct wlr_backend *backend;
&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct wl_listener new_output;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct wl_list outputs; // mcw_output::link
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This adds a &lt;code&gt;wl_listeners&lt;/code&gt; which is signalled when new outputs are added. We
also add a &lt;code&gt;wl_list&lt;/code&gt; (which is just a linked list provided by libwayland-server)
which we&amp;rsquo;ll later store some state in. To be notified, we must use
&lt;code&gt;wl_signal_add&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        assert(server.backend);
 
&lt;span class=&#34;gi&#34;&gt;+       wl_list_init(&amp;amp;server.outputs);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       server.new_output.notify = new_output_notify;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wl_signal_add(&amp;amp;server.backend-&amp;gt;events.new_output, &amp;amp;server.new_output);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; 
        if (!wlr_backend_start(server.backend)) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We specify here the function to be notified, &lt;code&gt;new_output_notify&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+static void new_output_notify(struct wl_listener *listener, void *data) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct mcw_server *server = wl_container_of(
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+                       listener, server, new_output);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct wlr_output *wlr_output = data;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       if (!wl_list_empty(&amp;amp;wlr_output-&amp;gt;modes)) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               struct wlr_output_mode *mode =
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+                       wl_container_of(wlr_output-&amp;gt;modes.prev, mode, link);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               wlr_output_set_mode(wlr_output, mode);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       }
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct mcw_output *output = calloc(1, sizeof(struct mcw_output));
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       clock_gettime(CLOCK_MONOTONIC, &amp;amp;output-&amp;gt;last_frame);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       output-&amp;gt;server = server;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       output-&amp;gt;wlr_output = wlr_output;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wl_list_insert(&amp;amp;server-&amp;gt;outputs, &amp;amp;output-&amp;gt;link);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a little bit complicated! This function has several roles when dealing
with the incoming &lt;code&gt;wlr_output&lt;/code&gt;. When the signal is raised, a pointer to the
listener that was signaled is passed in, as well as the &lt;code&gt;wlr_output&lt;/code&gt; which was
created. &lt;code&gt;wl_container_of&lt;/code&gt; uses some &lt;code&gt;offsetof&lt;/code&gt;-based magic to get the
&lt;code&gt;mcw_server&lt;/code&gt; reference from the listener pointer, and we cast &lt;code&gt;data&lt;/code&gt; to the
actual type, &lt;code&gt;wlr_output&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The next thing we have to do is set the &lt;strong&gt;output mode&lt;/strong&gt;. Some backends (notably
x11 and Wayland) do not support modes, but they are necessary for DRM. Output
modes specify a size and refresh rate supported by the output, such as
&lt;code&gt;1920x1080@60Hz&lt;/code&gt;. The body of this if statement just chooses the last one (which
is usually the highest resolution and refresh rate) and applies it to the output
with &lt;code&gt;wlr_output_set_mode&lt;/code&gt;. We &lt;em&gt;must&lt;/em&gt; set the output mode in order to render to
it.&lt;/p&gt;
&lt;p&gt;Then, we set up some state for us to keep track of this output with in our
compositor. I added this struct definition at the top of the file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+struct mcw_output {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct wlr_output *wlr_output;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct mcw_server *server;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct timespec last_frame;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct wl_list link;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will be the structure we use to store any state we have for this output
that is specific to our compositor&amp;rsquo;s needs. We include a reference to the
&lt;code&gt;wlr_output&lt;/code&gt;, a reference to the &lt;code&gt;mcw_server&lt;/code&gt; that owns this output, and the
time of the last frame, which will be useful later. We also set aside a
&lt;code&gt;wl_list&lt;/code&gt;, which is used by libwayland for linked lists.&lt;/p&gt;
&lt;p&gt;Finally, we add this output to the server&amp;rsquo;s list of outputs.&lt;/p&gt;
&lt;p&gt;We could use this now, but it would leak memory. We also need to handle output
&lt;em&gt;removal&lt;/em&gt;, with a signal provided by wlr_output. We add the listener to the
mcw_output struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt; struct mcw_output {
        struct wlr_output *wlr_output;
        struct mcw_server *server;
        struct timespec last_frame;
&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct wl_listener destroy;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; 
        struct wl_list link;
 };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we hook it up when the output is added:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;         wl_list_insert(&amp;amp;server-&amp;gt;outputs, &amp;amp;output-&amp;gt;link);

&lt;span class=&#34;gi&#34;&gt;+        output-&amp;gt;destroy.notify = output_destroy_notify;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+        wl_signal_add(&amp;amp;wlr_output-&amp;gt;events.destroy, &amp;amp;output-&amp;gt;destroy);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will call our output_destroy_notify function to handle cleanup when the
output is unplugged or otherwise removed from wlroots. Our handler looks like
this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+static void output_destroy_notify(struct wl_listener *listener, void *data) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+        struct mcw_output *output = wl_container_of(listener, output, destroy);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+        wl_list_remove(&amp;amp;output-&amp;gt;link);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+        wl_list_remove(&amp;amp;output-&amp;gt;destroy.link);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+        wl_list_remove(&amp;amp;output-&amp;gt;frame.link);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+        free(output);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This one should be pretty self-explanatory.&lt;/p&gt;
&lt;p&gt;So, we now have a reference to the output. However, we are still not rendering
anything - if you run the compositor again you&amp;rsquo;ll notice the same behavior. In
order to render things, we have to listen for the &lt;strong&gt;frame signal&lt;/strong&gt;. Depending on
the selected mode, the output can only receive new frames at a certain rate. We
keep track of this for you in wlroots, and emit the frame signal when it&amp;rsquo;s time
to draw a new frame.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s add a listener to the &lt;code&gt;mcw_output&lt;/code&gt; struct for this purpose:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt; struct mcw_output {
        struct wlr_output *wlr_output;
        struct mcw_server *server;
 
        struct wl_listener destroy;
&lt;span class=&#34;gi&#34;&gt;+       struct wl_listener frame;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; 
        struct wl_list link;
 };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can then extend &lt;code&gt;new_output_notify&lt;/code&gt; to register the listener to the frame
signal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;        output-&amp;gt;destroy.notify = output_destroy_notify;
        wl_signal_add(&amp;amp;wlr_output-&amp;gt;events.destroy, &amp;amp;output-&amp;gt;destroy);
&lt;span class=&#34;gi&#34;&gt;+       output-&amp;gt;frame.notify = output_frame_notify;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wl_signal_add(&amp;amp;wlr_output-&amp;gt;events.frame, &amp;amp;output-&amp;gt;frame);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, whenever an output is ready for a new frame, &lt;code&gt;output_frame_notify&lt;/code&gt; will be
called. We still need to write this function, though. Let&amp;rsquo;s start with the
basics:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+static void output_frame_notify(struct wl_listener *listener, void *data) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct mcw_output *output = wl_container_of(listener, output, frame);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       struct wlr_output *wlr_output = data;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to render anything here, we need to first obtain a wlr_renderer&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.
We can obtain one from the backend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt; static void output_frame_notify(struct wl_listener *listener, void *data) {
        struct mcw_output *output = wl_container_of(listener, output, frame);
        struct wlr_output *wlr_output = data;
&lt;span class=&#34;gi&#34;&gt;+       struct wlr_renderer *renderer = wlr_backend_get_renderer(
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+                       wlr_output-&amp;gt;backend);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now take advantage of this renderer to draw something on the output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt; static void output_frame_notify(struct wl_listener *listener, void *data) {
        struct mcw_output *output = wl_container_of(listener, output, frame);
        struct wlr_output *wlr_output = data;
        struct wlr_renderer *renderer = wlr_backend_get_renderer(
                        wlr_output-&amp;gt;backend);
&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wlr_output_make_current(wlr_output, NULL);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wlr_renderer_begin(renderer, wlr_output);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       float color[4] = {1.0, 0, 0, 1.0};
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wlr_renderer_clear(renderer, color);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wlr_output_swap_buffers(wlr_output, NULL, NULL);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       wlr_renderer_end(renderer);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Calling &lt;code&gt;wlr_output_make_current&lt;/code&gt; makes the output&amp;rsquo;s OpenGL context &amp;ldquo;current&amp;rdquo;,
and from here you can use OpenGL calls to render to the output&amp;rsquo;s buffer. We call
&lt;code&gt;wlr_renderer_begin&lt;/code&gt; to configure some sane OpenGL defaults for us&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;At this point we can start rendering. We&amp;rsquo;ll expand more on what you can
do with &lt;code&gt;wlr_renderer&lt;/code&gt; later, but for now we&amp;rsquo;ll be satisified with clearing the
output to a solid red color.&lt;/p&gt;
&lt;p&gt;When we&amp;rsquo;re done rendering, we call &lt;code&gt;wlr_output_swap_buffers&lt;/code&gt; to swap the
output&amp;rsquo;s front and back buffers, committing what we&amp;rsquo;ve rendered to the actual
screen. We call &lt;code&gt;wlr_renderer_end&lt;/code&gt; to clean up the OpenGL context and we&amp;rsquo;re
done. Running our compositor now should show you a solid red screen!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This concludes today&amp;rsquo;s article. If you take a look at &lt;a href=&#34;https://github.com/SirCmpwn/mcwayland/commit/f89092e&#34;&gt;the
commit&lt;/a&gt; that this article
describes, you&amp;rsquo;ll see that I took it a little further with some code that clears
the display to a different color every frame. Feel free to experiment with
similar changes!&lt;/p&gt;
&lt;p&gt;Over the next two articles, we&amp;rsquo;ll finish wiring up the Wayland server and render
a Wayland client on screen. Please look forward to it!&lt;/p&gt;
&lt;p style=&#34;text-align: right&#34;&gt;
    Next &amp;mdash;
    &lt;a href=&#34;./2018/02/22/Writing-a-wayland-compositor-part-2.html&#34;&gt;
        Part 2: Rigging up the server
    &lt;/a&gt;
&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;It&amp;rsquo;s entirely possible to utilize a wlroots backend to make applications which are not Wayland compositors. However, we require a wayland display anyway because the event loop is necessary for a lot of wlroots internals. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;wlr_renderer is optional. When you call wlr_output_make_current, the OpenGL context is made current and from here you can use any approach you prefer. wlr_renderer is provided to help compositors with simple rendering requirements. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Namely: the viewport and blend mode. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>The last years</title>
      <link>./2018/02/13/The-last-years.html</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/02/13/The-last-years.html</guid>
      <description>&lt;p&gt;&lt;strong&gt;August 14th, 2019&lt;/strong&gt; PYONGYANG IN CHAOS AS PANDEMIC DECIMATES LEADERSHIP.
Sources within the country have reported that a fast-acting and deadly
infectious disease has suddenly infected the population of Pyongyang, the
capital city of North Korea, where most of the country&amp;rsquo;s political elite live.
Unconfirmed reports suggest that a significant fraction of the leadership has
been affected.&lt;/p&gt;
&lt;p&gt;The reclusive country has appealed for immediate aid from the international
community and it is reported that a group of medical experts from Seoul have
been permitted to enter via the Joint Security Area. Representatives from the
United States Center for Disease Control and the Chinese Center for Disease
Control and Prevention have also agreed to send representatives into the country
to help control the outbreak.&lt;/p&gt;
&lt;p&gt;North Korea is known for it&amp;rsquo;s unwillingness to cooperate with the international
community, particularly with respect to&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;October 7th, 2019&lt;/strong&gt; NEW APPROACH SHOWS PROMISING RESULTS FOR CYSTIC FIBROSIS.
Researchers announced yesterday that they were able to design a disease which
corrects the genome of patients suffering from the early stages of cystic
fibrosis. The study was shown to stop the progression of the genetic disease in
all subjects, and several subjects even showed signs of reversal. The FDA has
begun the process of evaluating the treatment for the general public.&lt;/p&gt;
&lt;p&gt;Scientists involved explained the process involved using a modified version of
the common cold. They were able to reduce the negative effects of the virus, and
utilized it as a means of delivering a CRISPR-based payload that directly edited
the genome of members of the study. Scientists on the study suggest that in the
future, a similarly benign virus could be introduced to the general public to
eliminate the disease across the entire human population.&lt;/p&gt;
&lt;p&gt;Some scientists are skeptical of the risks of this approach, but others spoke
favorably&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;September 30th, 2019&lt;/strong&gt; UNITED STATES CLAIMS RESPONSIBILITY FOR PYONGYANG
EPIDEMIC. In response to increasing alarm in the international community
regarding the origins of the artificial virus that took the life of Kim Jong-un
in August, the United States government has stepped forward to claim
responsibility. President Trump justified the move in a public statement,
claiming that the development of North Korean nuclear weapons capable of
striking American targets required such a response, and points to the ongoing
reunification efforts as evidence of a job well done.&lt;/p&gt;
&lt;p&gt;Many leaders of the international community have issued statements condemning
the United State&amp;rsquo;s attack, though some leaders have expressed relief that the
speculation regarding a rogue group of biologists was dispelled. Korean
officials have also issued statements condemning the attack, noting that several
presumably innocent family members of Pyongyang officials were killed, but
reaffirmed their commitment to supporting the population of the North and
continuing to peacefully unify the peninsula.&lt;/p&gt;
&lt;p&gt;The relative ease of the reunification effort, long thought to be impossible, is
the result of the incredibly swift and precise nature of the American attack&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;November 18th, 2020&lt;/strong&gt; BRITAIN TARGET OF BIOLOGICAL ATTACK? Members of the
British public have come down with a highly contagious but largely benign form
of the measles, igniting panic among the population. The royal family and
members of the parliament have been quarantined and the country&amp;rsquo;s biologists are
examining specimens of the disease for signs of human tampering. This is the
next in a series of scares, following the flu outbreak in Mexico this June.&lt;/p&gt;
&lt;p&gt;We spoke with an expert in the field (who wished to remain anonymous) to
understand exactly how biologically engineered diseases are possible. Our expert
pointed to recent advances in genetic engineering, particularly CRISPR, which
have allowed research in this field to advance at an unprecedented pace for a
fraction of the costs previously associated with such research. For a layman&amp;rsquo;s
explanation of what CRISPR is and how it works, see page 3.&lt;/p&gt;
&lt;p&gt;Officials in Britain have issued a statement encouraging the public not to
worry, and stated that they had no reason to believe&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;February 2nd, 2021&lt;/strong&gt; LARGE GENETIC DATABASE LEAKED IN HACK. Personal genomics
company 23andMe released a statement today admitting that their database of
personal genetic records was leaked in a hack in May of last year. The company,
founded in 2006, collects genetic records from customers curious in their
ancestry and sends them a report of interesting information. The database is
said to contain names, email addresses, and samples of each customer&amp;rsquo;s genome
dating back to the company&amp;rsquo;s inception.&lt;/p&gt;
&lt;p&gt;Estimates show that up to 3 million customers are affected, mostly from the
United States. The company has not revealed how much of each customer&amp;rsquo;s genome
was disclosed, but experts agree that it would not have been practical for the
company to have stored their customer&amp;rsquo;s full genomes, and caution affected
customers against panic. At this time, the identity of the hacker is unknown.&lt;/p&gt;
&lt;p&gt;The company&amp;rsquo;s president attributes the security breach to their reduced ability
to maintain a secure database due to their falling profits in recent years as
the general public grows more concious of&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;June 28th, 2021&lt;/strong&gt; OUTBREAK OF DEATHS AMONG &amp;ldquo;JOHN ROBERTS&amp;rdquo;. The United States
supreme court chief justice John Roberts was found dead in his home this
morning, the seventh &amp;ldquo;John Roberts&amp;rdquo; to die within the past 3 days. He was found
to have the disease which scientists have described as &amp;ldquo;a new level of
sophistication&amp;rdquo; in biological engineering. A substantial fraction of the entire
population is expected to have contracted this disease, but do not show any
symptoms. It was specifically designed to target a number of individuals named
John Roberts, and all other infected persons were unaffected.&lt;/p&gt;
&lt;p&gt;It is believed that the genetic information used in this attack was sourced from
the recent leaks of genetic databases from major genetic testing companies, the
largest of which were the 23andMe and Ancestry.com leaks in February and April
respectively. Experts suggest that the data in the leak was not enough to
conclusively identify the justice, and the attackers simply targeted all genomes
matching that name.&lt;/p&gt;
&lt;p&gt;The senate is expected to vote nearly unanimously on legislation this week which
outlaws the collection of genetic information by private companies, a move
largely considered&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;August 28th, 2022&lt;/strong&gt; STUDY SHOWS IMPOTENCE GROWING AT ALARMING RATE. A study
conducted by a Japanese team shows the birth rate around the world is decreasing
at a dramatically increased pace. According to the study, 42 of the 60 countries
included in the study showed a decrease in new pregnancies of 30% or more
compared to a similar time frame in 2012. They said the trend is expected to
continue, and possibly accelerate.&lt;/p&gt;
&lt;p&gt;Japan is known for its research into fertility, as it has shown a steep decline
in births over the past&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;October 1st, 2022&lt;/strong&gt; HUMAN BIRTHS EXPECTED TO CEASE WITHIN ONE YEAR. We are sad
to report that biologists have confirmed claims issued last week by a radical
environmentalist group: a highly contagious disease engineered to bring about
impotence has infected most of the Earth&amp;rsquo;s population. The group is a member of
the so-called &amp;ldquo;Voluntary Extinction&amp;rdquo; movement, which aims to drive the human
race extinct by ceasing human reproduction. Scientists suggest that this move is
highly unlikely to completely drive humanity extinct, but confirm that it&amp;rsquo;s
likely that massive population losses are in our future.&lt;/p&gt;
&lt;p&gt;Work is underway to determine which members of the population have escaped
exposure, and plan for the continuity of the species. Members of isolated
communities are asked to avoid contact with the outside world, and governments
are cracking down on travel to and from the more remote regions of their
countries. The CDC has reported no estimate on when a vaccine will be available
for the disease, but has confirmed that one must be developed before contact
with these communities is advisable.&lt;/p&gt;
&lt;p&gt;The government of New Zealand announced this morning their intention to send
sterilized supply shipments to research teams in Antarctica, and Canada
announced that all travel&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Inspired by this excellent (and scary) talk at DEFCON 25:
&lt;a href=&#34;https://www.youtube.com/watch?v=HKQDSgBHPfY&#34;&gt;John Sotos - Genetic Diseases to Guide Digital Hacks of the Human Genome&lt;/a&gt;&lt;/p&gt;
</description>
    </item><item>
      <title>Introduction to POSIX shell</title>
      <link>./2018/02/05/Introduction-to-POSIX-shell.html</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/02/05/Introduction-to-POSIX-shell.html</guid>
      <description>&lt;p&gt;What the heck is the POSIX shell anyway? Well, the POSIX (the Portable Operating
System Interface) shell is the standard Unix shell - standard meaning it was
formally defined and shipped in a published standard. This makes shell scripts
written for it portable, something no other shell can lay claim to. The POSIX
shell is basically a formalized version of the venerable Bourne shell, and on
your system it lives at &lt;code&gt;/bin/sh&lt;/code&gt;, unless you&amp;rsquo;re one of the unlucky masses for
whom this is a symlink to bash.&lt;/p&gt;
&lt;h2 id=&#34;why-use-posix-shell&#34;&gt;Why use POSIX shell?&lt;/h2&gt;
&lt;p&gt;The &amp;ldquo;Bourne Again shell&amp;rdquo;, aka bash, is not standardized. Its grammar,
features, and behavior aren&amp;rsquo;t formally written up anywhere, and only one
implementation of bash exists. Without a standard, bash is defined &lt;em&gt;by&lt;/em&gt; its
implementation. POSIX shell, on the other hand, has many competing
implementations on many different operating systems - all of which are
compatible with each other because they conform to the standard.&lt;/p&gt;
&lt;p&gt;Any shell that utilizes features specific to Bash are not portable, which means
you cannot take them with you to any other system. Many Linux-based systems do
not use Bash or GNU coreutils. Outside of Linux, pretty much everyone but Hurd
does &lt;em&gt;not&lt;/em&gt; ship GNU tools, including bash&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. On any of these systems, scripts
using &amp;ldquo;bashisms&amp;rdquo; will not work.&lt;/p&gt;
&lt;p&gt;This is bad if your users wish to utilize your software anywhere other than
GNU/Linux. If your build tooling utilizes bashisms, your software will not build
on anything but GNU/Linux. If you ship runtime scripts that use bashisms, your
software will not &lt;em&gt;run&lt;/em&gt; on anything but GNU/Linux. The case for sticking to
POSIX shell in shipping software is compelling, but I argue that you should
stick to POSIX shell for your personal scripts, too. You might not care now, but
when you feel like flirting with other Unicies you&amp;rsquo;ll thank me when all of your
scripts work.&lt;/p&gt;
&lt;p&gt;One place where POSIX shell does &lt;em&gt;not&lt;/em&gt; shine is for interactive use - a place
where I think bash sucks, too. Any shell you want to use for your day-to-day
command line work is okay in my book. I use fish. Use whatever you like
interactively, but stick to POSIX sh for your scripts.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-use-posix-shell&#34;&gt;How do I use POSIX shell?&lt;/h2&gt;
&lt;p&gt;At the top of your scripts, put &lt;code&gt;#!/bin/sh&lt;/code&gt;. You don&amp;rsquo;t have to worry about using
&lt;code&gt;env&lt;/code&gt; here like you might have been trained to do with bash: &lt;code&gt;/bin/sh&lt;/code&gt; is the
standardized location for the POSIX shell, and any standards-conforming system
will either put it there or make your script work anyway.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The next step is to avoid bashisms. There are many, but here are a few that
might trip you up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[[ condition ]]&lt;/code&gt; does not work; use &lt;code&gt;[ condition ]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Arrays do not work; &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05&#34;&gt;use IFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Local variables do not work; use a subshell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The easiest way to learn about POSIX shell is to &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html&#34;&gt;read the
standard&lt;/a&gt; -
it&amp;rsquo;s not too dry and shorter than you think.&lt;/p&gt;
&lt;h2 id=&#34;using-standard-coreutils&#34;&gt;Using standard coreutils&lt;/h2&gt;
&lt;p&gt;The last step to writing portable scripts is to use portable tools. Your system
may have GNU coreutils installed, which provides tools like &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;cut&lt;/code&gt;.
Unfortunately, GNU has extended these tools with its own non-portable flags and
tools. It&amp;rsquo;s important that you avoid these.&lt;/p&gt;
&lt;p&gt;One dead giveaway of a non-portable flag is long flags, e.g. &lt;code&gt;grep --file=FILE&lt;/code&gt;
as opposed to &lt;code&gt;grep -f&lt;/code&gt;. The POSIX standard only defines the &lt;code&gt;getopt&lt;/code&gt; function -
not the proprietary GNU &lt;code&gt;getopt_long&lt;/code&gt; function that&amp;rsquo;s used to interpret long
options. As a result, no long flags are standardized. You might worry that this
will make your scripts difficult to understand, but I think that on the whole it
will not. Shell scripts are already pretty alien and require some knowledge to
understand. Is knowledge of what the magic word &lt;code&gt;grep&lt;/code&gt; means much different
from knowledge of what &lt;code&gt;grep -E&lt;/code&gt; means?&lt;/p&gt;
&lt;p&gt;I also like that short flags allow you to make more concise command lines. Which
is better: &lt;code&gt;ps --all --format=user --without-tty&lt;/code&gt;, or &lt;code&gt;ps -aux&lt;/code&gt;? If you are
inclined to think the former, do you also prefer &lt;code&gt;function(a, b, c) { return a + b + c; }&lt;/code&gt; over &lt;code&gt;(a, b, c) =&amp;gt; a + b + c&lt;/code&gt;?  Conciseness matters, and POSIX shell
supports comments if necessary!&lt;/p&gt;
&lt;p&gt;Some tips for using short flags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They can be collapsed: &lt;code&gt;cmd -a -b -c&lt;/code&gt; is equivalent to &lt;code&gt;cmd -abc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If they take additional arguments, either a space or no separation is
acceptable: &lt;code&gt;cmd -f&amp;quot;hello world&amp;quot;&lt;/code&gt; or &lt;code&gt;cmd -f &amp;quot;hello world&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good reference for learning about standardized commands is, once again, &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/9699919799/&#34;&gt;the
standard&lt;/a&gt;. From this page,
search for the command you want, or navigate through &amp;ldquo;Shell &amp;amp; Utilities&amp;rdquo; -&amp;gt;
&amp;ldquo;Utilities&amp;rdquo; for a list. If you have &lt;code&gt;man-pages&lt;/code&gt; installed, you will also find
POSIX man pages installed on your system with the &lt;code&gt;p&lt;/code&gt; postfix, such as &lt;code&gt;man 1p grep&lt;/code&gt;. Note: at the time of writing, the POSIX man pages do not use dashes if
your locale is UTF-8, which makes searching for flags with &lt;code&gt;/&lt;/code&gt; difficult. Use
&lt;code&gt;env LC_ALL=POSIX man 1p grep&lt;/code&gt; if you need to search for flags, and I&amp;rsquo;ll speak
to the maintainer of man-pages about this.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A reader points out that macOS ships an ancient version of bash. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;em&gt;2018-05-15 correction&lt;/em&gt;: &lt;code&gt;#!/bin/sh&lt;/code&gt; is unfortunately not standardized by POSIX. However, I still recommend its use, as most operating systems will place it there. The portable way to invoke shell scripts is &lt;code&gt;sh path/to/script&lt;/code&gt;. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Sway and client side decorations</title>
      <link>./2018/01/27/Sway-and-client-side-decorations.html</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/01/27/Sway-and-client-side-decorations.html</guid>
      <description>&lt;p&gt;You may have recently seen an article from GNOME on the subject of client side
decorations (CSD) titled &lt;a href=&#34;https://blogs.gnome.org/tbernard/2018/01/26/csd-initiative/&#34;&gt;Introducing the CSD
Initiative&lt;/a&gt;. It
states some invalid assumptions which I want to clarify, and I want to tell you
&lt;a href=&#34;https://github.com/swaywm/sway&#34;&gt;Sway&lt;/a&gt;&amp;rsquo;s
stance on the subject. I also speak for the rest of the projects involved in
&lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt; on this matter, including &lt;a href=&#34;https://github.com/way-cooler/way-cooler&#34;&gt;Way
Cooler&lt;/a&gt;,
&lt;a href=&#34;https://github.com/Ongy/waymonad&#34;&gt;waymonad&lt;/a&gt;, and
&lt;a href=&#34;https://github.com/Bl4ckb0ne/bspwc&#34;&gt;bspwc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The subject of which party is responsible for window decorations on Wayland (the
client or the server) has been a subject of much debate. I want to clarify that
though GNOME may imply that a consensus has been reached, this is not the case.
CSD have real problems that have long been waved away by its supporters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No consistent look and feel between clients and GUI toolkits&lt;/li&gt;
&lt;li&gt;Misbehaving clients cannot be moved, closed, minimized, etc&lt;/li&gt;
&lt;li&gt;No opportunity for compositors to customize behavior (e.g. tabbed windows on
Sway)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are willing to cooperate on a compromise, but GNOME does not want to
entertain the discussion and would rather push disingenuous propaganda for their
cause. The topic of the #wayland channel on Freenode includes the statement
&amp;ldquo;Please do not argue about server-side vs. client-side decorations. It&amp;rsquo;s settled
and won&amp;rsquo;t change.&amp;rdquo; I have been banned from this channel for over a year because
I persistently called for compromise.&lt;/p&gt;
&lt;p&gt;GNOME&amp;rsquo;s statement that &amp;ldquo;[server-side decorations] do not (and will never) work
on Wayland&amp;rdquo; is false. KDE and Sway have long agreed on the importance of these
problems and have worked together on a solution. We have developed and
implemented a Wayland protocol extension which allows the compositor and client
to negotiate what kind of decorations each wishes to use. KDE, Sway, Way Cooler,
waymonad, and bspwc are all committed to supporting server-side decorations on
our compositors.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;See also: &lt;a href=&#34;https://blog.martin-graesslin.com/blog/2018/01/server-side-decorations-and-wayland/&#34;&gt;Martin Flöser of KDE responds to GNOME&amp;rsquo;s
article&lt;/a&gt;&lt;/p&gt;
</description>
    </item><item>
      <title>Fee breakdown for various donation platforms</title>
      <link>./2018/01/16/Fees-on-donation-platforms.html</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/01/16/Fees-on-donation-platforms.html</guid>
      <description>&lt;p&gt;Understanding fees are a really confusing part of supporting creators of things
you like. I provide a few ways for people to support my work, and my supporters
can struggle to understand the differences between them. It comes down to fees,
of which there are several kinds (note: I just made these terms up):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Transaction fees&lt;/strong&gt; are charged by the payment processor (the company that
takes down your card number and runs the transaction with your bank). These
are typically in the form of a percentage of the transaction plus a few cents.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Platform fees&lt;/strong&gt; are charged by the platform (e.g. Patreon) to run their
operation, typically in the form of a fixed percentage of the transaction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Withdrawal fees&lt;/strong&gt; are charged to move money from the platform to the
creator&amp;rsquo;s bank account. These vary depending on the withdrawal processor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Taxes&lt;/strong&gt; are also implicated, depending on how much the creator makes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of this adds up to a very confusing picture. I&amp;rsquo;ve made a calculator to help
you sort it out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For an up-to-date calculation of Patreon&amp;rsquo;s fees, see &lt;a href=&#34;https://drewdevault.com/2019/05/06/Calculate-your-doation-fees-for-Patreon.html&#34;&gt;the follow-up
post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt;Sorry, the calculator requires JavaScript.&lt;/noscript&gt;&lt;/p&gt;
&lt;div id=&#34;react-root&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;./js/donation-calc-v1.js&#34;&gt;&lt;/script&gt;
&lt;h3 id=&#34;sources&#34;&gt;Sources&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;fosspay&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Only the typical &lt;a href=&#34;https://stripe.com/us/pricing&#34;&gt;Stripe fee&lt;/a&gt; is applied.&lt;/p&gt;
&lt;p&gt;Note: I am the author of fosspay, if you didn&amp;rsquo;t already know.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Patreon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://patreon.zendesk.com/hc/en-us/articles/204606125-How-do-you-calculate-fees-&#34;&gt;How do you calculate fees?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://patreon.zendesk.com/hc/en-us/articles/203913489-What-are-my-options-to-receive-payout-&#34;&gt;What are my options to receive payout?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Liberapay&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://liberapay.com/about/faq&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt;
</description>
    </item><item>
      <title>Learn about your package manager</title>
      <link>./2018/01/10/Learn-your-package-manager.html</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/01/10/Learn-your-package-manager.html</guid>
      <description>&lt;p&gt;Tools like virtualenv, rbenv, and to a lesser extent npm and pip, are
occasionally useful in development but encourage bad practices in production.
Many people forget that their distro already has a package manager! And there&amp;rsquo;s
more&amp;ndash; you, the user, can write packages for it!&lt;/p&gt;
&lt;p&gt;Your distro&amp;rsquo;s package repositories probably already have a lot of your
dependencies, and can conveniently update your software alongside the rest of
your system. On the whole you can expect your distro packages to be much better
citizens on your system than a language-specific package manager will be.
Additionally, pretty much all distros provide a means for you to host your own
package repositories, from which you can install and update any packages you
choose to make.&lt;/p&gt;
&lt;p&gt;If you find some packages to be outdated, find out who the package maintainer is
and shoot them an email. Or better yet - find out how the package is built and
send them a patch instead. Linux distributions are run by volunteers, and it&amp;rsquo;s
easy to volunteer yourself! Even if you find &lt;em&gt;missing&lt;/em&gt; packages, it&amp;rsquo;s a simple
matter to whip up a package yourself and submit it for inclusion in your
distro&amp;rsquo;s package repository, installing it from your private repo in the
meanwhile.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;But what if dependencies update and break my stuff?&amp;rdquo;, you ask. First of all,
why aren&amp;rsquo;t you keeping your dependencies up-to-date? That aside, some distros,
like Alpine, let you pin packages to a specific version. Also, using the
distro&amp;rsquo;s package manager doesn&amp;rsquo;t necessarily mean you have to use the distro&amp;rsquo;s
package repositories - you can stand up your own repos and prioritize it over
the distro repos, then release on any schedule you want.&lt;/p&gt;
&lt;p&gt;In my opinion, the perfect deployment strategy for some software is pushing a
new package to your package repository, then SSHing into your fleet and running
system updates (probably automatically). This is how I manage deployments for
most of my software. As a bonus, these packages offer a good place to configure
things that your language&amp;rsquo;s package manager may be ill suited to, such as
service files or setting up new users/groups on the system. Consider it!&lt;/p&gt;
</description>
    </item><item>
      <title>fork is not my favorite syscall</title>
      <link>./2018/01/02/The-case-against-fork.html</link>
      <pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>./2018/01/02/The-case-against-fork.html</guid>
      <description>&lt;p&gt;This article has been on my to-write list for a while now. In my opinion, fork
is one of the most questionable design choices of Unix. I don&amp;rsquo;t understand the
circumstances that led to its creation, and I grieve over the legacy rationale
that keeps it alive to this day.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s set the scene. It&amp;rsquo;s 1971 and you&amp;rsquo;re a fly on the wall in Bell Labs,
watching the first edition of Unix being designed for the PDP-11/20. This
machine has a 16-bit address space with no more than 248 kilobytes of memory.
They&amp;rsquo;re discussing how they&amp;rsquo;re going to support programs that spawn new
programs, and someone has a brilliant idea. &amp;ldquo;What if we copied the entire
address space of the program into a new process running from the same spot, then
let them overwrite themselves with the new program?&amp;rdquo; This got a rousing laugh
out of everyone present, then they moved on to a better design which would
become immortalized in the most popular and influential operating system of all
time.&lt;/p&gt;
&lt;p&gt;At least, that&amp;rsquo;s the story I&amp;rsquo;d like to have been told. In actual fact, the
laughter becomes consensus. There&amp;rsquo;s an obvious problem with this approach: every
time you want to execute a new program, the entire process space is copied and
promptly discarded when the new program begins.  Usually when I complain about
fork, this the point when its supporters play the virtual memory card, pointing
out that modern operating systems don&amp;rsquo;t actually have to copy the whole address
space. We&amp;rsquo;ll get to that, but first — First Edition Unix &lt;em&gt;does&lt;/em&gt; copy the
whole process space, so this excuse wouldn&amp;rsquo;t have held up at the time. By Fourth
Edition Unix (the next one for which kernel sources survived), they had wisened
up a bit, and started only copying segments when they faulted.&lt;/p&gt;
&lt;p&gt;This model leads to a number of problems. One is that the new process inherits
&lt;em&gt;all&lt;/em&gt; of the parent&amp;rsquo;s process descriptors, so you have to close them all before
you exec another process. However, unless you&amp;rsquo;re manually keeping tabs on your
open file descriptors, there is no way to know what file handles you must close!
The hack that solves this is &lt;code&gt;CLOEXEC&lt;/code&gt;, the first of many hacks that deal with
fork&amp;rsquo;s poor design choices. This file descriptors problem balloons a bit -
consider for example if you want to set up a pipe. You have to establish a piped
pair of file descriptors in the parent, then close every fd &lt;em&gt;but&lt;/em&gt; the pipe in
the child, then &lt;code&gt;dup2&lt;/code&gt; the pipe file descriptor over the (now recently closed)
file descriptor 1. By this point you&amp;rsquo;ve probably had to do several non-trivial
operations and utilize a handful of variables from the parent process space,
which &lt;em&gt;hopefully&lt;/em&gt; were on the stack so that we don&amp;rsquo;t end up copying segments
into the new process space anyway.&lt;/p&gt;
&lt;p&gt;These problems, however, pale in comparison to my number one complaint with the
fork model. Fork is the direct cause of the &lt;em&gt;stupidest&lt;/em&gt; component I&amp;rsquo;ve &lt;em&gt;ever&lt;/em&gt;
heard of in an operating system: the out-of-memory (aka OOM) killer. Say you
have a process which is using half of the physical memory on your system, and
wants to spawn a tiny program. Since fork &amp;ldquo;copies&amp;rdquo; the entire process, you might
be inclined to think that this would make fork fail. But, on Linux and many
other operating systems since, it does not fail! They agree that it&amp;rsquo;s stupid to
copy the entire process just to exec something else, but because fork is
Important for Backwards Compatibility, they just fake it and reuse the same
memory map (except read-only), then trap the faults and actually copy later.
The hope is that the child will get on with it and exec before this happens.&lt;/p&gt;
&lt;p&gt;However, nothing prevents the child from doing something other than exec -
it&amp;rsquo;s free to use the memory space however it desires! This approach now leads to
&lt;em&gt;memory overcommittment&lt;/em&gt; - Linux has promised memory it does not have. As a
result, when it really does run out of physical memory, Linux will just kill off
processes until it has some memory back. Linux makes an awfully big fuss about
&amp;ldquo;never breaking userspace&amp;rdquo; for a kernel that will lie about memory it doesn&amp;rsquo;t
have, then kill programs that try to use the back-alley memory they were given.
That this nearly 50 year old crappy design choice has come to this astonishes
me.&lt;/p&gt;
&lt;p&gt;Alas, I cannot rant forever without discussing the alternatives. There &lt;strong&gt;are&lt;/strong&gt;
better process models that have been developed since Unix!&lt;/p&gt;
&lt;p&gt;The first attempt I know of is BSD&amp;rsquo;s &lt;code&gt;vfork&lt;/code&gt; syscall, which is, in a nutshell,
the same as fork but with severe limitations on what you do in the child process
(i.e. nothing other than calling exec straight away). There are &lt;em&gt;loads&lt;/em&gt; of
problems with &lt;code&gt;vfork&lt;/code&gt;. It only handles the most basic of use cases: you cannot
set up a pipe, cannot set up a pty, and can&amp;rsquo;t even close open file descriptors
you inherited from the parent. Also, you couldn&amp;rsquo;t really be sure of what
variables you were and weren&amp;rsquo;t editing or allowed to edit, considering the
limitations of the C specification. Overall this syscall ended up being pretty
useless.&lt;/p&gt;
&lt;p&gt;Another model is &lt;code&gt;posix_spawn&lt;/code&gt;, which is a hell of an interface. It&amp;rsquo;s far too
complicated for me to detail here, and in my opinion far too complicated to ever
consider using in practice. Even if it could be understood by mortals, it&amp;rsquo;s a
really bad implementation of the spawn paradigm — it basically operates
like fork backwards, and inherits many of the same flaws. You still have to deal
with children inheriting your file descriptors, for example, only now you do it
in the parent process. It&amp;rsquo;s also straight-up impossible to make a genuine pipe
with &lt;code&gt;posix_spawn&lt;/code&gt;. (&lt;em&gt;Note: a reader corrected me - this is indeed possible via
posix_spawn_file_actions_adddup2&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s talk about the good models - &lt;code&gt;rfork&lt;/code&gt; and spawn (at least, if spawn is done
right). &lt;code&gt;rfork&lt;/code&gt; originated from plan9 and is a beautiful little coconut of a
syscall, much like the rest of plan9. They also implement fork, but it&amp;rsquo;s a
special case of &lt;code&gt;rfork&lt;/code&gt;. plan9 does not distinguish between processes and
threads - all threads are processes and vice versa. However, new processes in
plan9 are not the everything-must-go fuckfest of your typical fork call.
Instead, you specify exactly what the child should get from you. You can choose
to include (or not include) your memory space, file descriptors, environment, or
a number of other things specific to plan9. There&amp;rsquo;s a cool flag that makes it so
you don&amp;rsquo;t have to reap the process, too, which is nice because reaping children
is another really stupid idea. It still has some problems, mainly around
creating pipes without tremendous file descriptor fuckery, but it&amp;rsquo;s basically as
good as the fork model gets. Note: Linux offers this via the &lt;code&gt;clone&lt;/code&gt; syscall
now, but everyone just fork+execs anyway.&lt;/p&gt;
&lt;p&gt;The other model is the spawn model, which I prefer. This is the approach I took
in my own kernel for KnightOS, and I think it&amp;rsquo;s also used in NT (Microsoft&amp;rsquo;s
kernel). I don&amp;rsquo;t really know much about NT, but I can tell you how it works in
KnightOS. Basically, when you create a new process, it is kept in limbo until
the parent consents to begin. You are given a handle with which you can
configure the process - you can change its environment, load it up with file
descriptors to your liking, and so on. When you&amp;rsquo;re ready for it to begin, you
give the go-ahead and it&amp;rsquo;s off to the races. The spawn model has none of the
flaws of fork.&lt;/p&gt;
&lt;p&gt;Both fork and exec can be useful at times, but spawning is much better for 90%
of their use-cases. If I were to write a new kernel today, I&amp;rsquo;d probably take a
leaf from plan9&amp;rsquo;s book and find a happy medium between &lt;code&gt;rfork&lt;/code&gt; and spawn, so you
could use spawn to start new threads in your process space as well. To the
brave OS designers of the future, ready to shrug off the weight of legacy:
please reconsider fork.&lt;/p&gt;
</description>
    </item><item>
      <title>wlroots whitepaper available</title>
      <link>./2017/12/28/wlroots-whitepaper-available.html</link>
      <pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/12/28/wlroots-whitepaper-available.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sr.ht/jAFC.pdf&#34;&gt;View PDF&lt;/a&gt;&lt;/p&gt;
</description>
    </item><item>
      <title>Firefox is on a slippery slope</title>
      <link>./2017/12/16/Firefox-is-on-a-slippery-slope.html</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/12/16/Firefox-is-on-a-slippery-slope.html</guid>
      <description>&lt;p&gt;For a long time, it was just setting the default search provider to Google in
exchange for a beefy stipend. Later, paid links in your new tab page were added.
Then, a proprietary service, Pocket, was bundled into the browser - not as an
addon, but a hardcoded feature. In the past few days, we&amp;rsquo;ve discovered an
advertisement in the form of browser extension was sideloaded into user
browsers. Whoever is leading these decisions at Mozilla needs to be stopped.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a breakdown of what happened a few days ago. Mozilla and NBC
Universal did a &amp;ldquo;collaboration&amp;rdquo; (read: promotion) for the TV show Mr. Robot.
It involved sideloading a sketchy browser extension which will &lt;strong
style=&#34;display: inline-block; transform: scaleY(-1)&#34;&gt;invert&lt;/strong&gt; text that
matches a list of Mr. Robot-related keywords like &amp;ldquo;fsociety&amp;rdquo;, &amp;ldquo;robot&amp;rdquo;, &amp;ldquo;undo&amp;rdquo;,
and &amp;ldquo;fuck&amp;rdquo;, and does a number of other things like adding an HTTP header to
certain sites you visit.&lt;/p&gt;
&lt;p&gt;This extension was sideloaded into browsers via the &amp;ldquo;experiments&amp;rdquo; feature.
Not only are these experiments enabled by default, but updates &lt;a href=&#34;https://redd.it/7i4puf&#34;&gt;have been
known&lt;/a&gt; to re-enable it if you turn it off. The
advertisement addon shows up &lt;a href=&#34;http://www.bolcer.org/looking-glass2.png&#34;&gt;like
this&lt;/a&gt; on your addon page, and was
added to Firefox stable. If I saw this before I knew what was going on, I would
think my browser was compromised!  Apparently it was a mistake that this showed
up on the addon page, though - it was supposed to be &lt;em&gt;silently&lt;/em&gt; sideloaded into
your browser!&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=1423003&#34;&gt;a ticket&lt;/a&gt; on
Bugzilla (Firefox&amp;rsquo;s bug tracker) for discussing this experiment, but it&amp;rsquo;s locked
down and no one outside of Mozilla can see it. There&amp;rsquo;s &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=1424977&#34;&gt;another
ticket&lt;/a&gt;, filed by
concerned users, which has since been disabled and had many comments removed,
particularly the angry (but respectful) ones.&lt;/p&gt;
&lt;p&gt;Mozilla, this is &lt;strong&gt;not okay&lt;/strong&gt;. This is wrong on so many levels. Frankly, whoever
was in charge should be fired over this - which is not something I call for
lightly.&lt;/p&gt;
&lt;p&gt;First of all, web browsers are a &lt;em&gt;tool&lt;/em&gt;. I don&amp;rsquo;t want my browser to fool around,
I just want it to display websites faithfully. This is the prime directive of
web browsers, and you broke that. When I compile vim with gcc, I don&amp;rsquo;t want
gcc to make vim sporadically add &amp;ldquo;fsociety&amp;rdquo; into every document I write. I want
it to compile vim and go away.&lt;/p&gt;
&lt;p&gt;More importantly, these advertising anti-features gravely - perhaps terminally -
violate user trust. This event tells us that &amp;ldquo;Firefox studies&amp;rdquo; into a backdoor
for advertisements, and I will &lt;em&gt;never&lt;/em&gt; trust it again. But it doesn&amp;rsquo;t matter -
you&amp;rsquo;re going to re-enable it on the next update. You know what that means? I
will never trust &lt;em&gt;Firefox&lt;/em&gt; again. I switched to
&lt;a href=&#34;http://qutebrowser.org/&#34;&gt;qutebrowser&lt;/a&gt; as my daily driver because this crap was
starting to add up, but I still used Firefox from time to time and never
resigned from it entirely or stopped recommending it to friends. Well, whatever
goodwill was left is gone now, and I will only recommend other browsers
henceforth.&lt;/p&gt;
&lt;p&gt;Mozilla, you fucked up &lt;em&gt;bad&lt;/em&gt;, and you still haven&amp;rsquo;t apologised. The study is
still active and ongoing. There is no amount of money that you should have
accepted for this. This is the last straw - and I took a lot of straws from you.
Goodbye forever, Mozilla.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2017-12-16 @ 22:33&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It has been clarified that an about:config flag must be set for this addon&amp;rsquo;s
behavior to be visible. This improves the situation considerably, but I do not
think it exenorates Mozilla and I stand firm behind most of my points. The study
has also been rolled back by Mozilla, and Mozilla has issued
&lt;a href=&#34;https://gizmodo.com/mozilla-slipped-a-mr-robot-promo-plugin-into-firefox-1821332254&#34;&gt;statements&lt;/a&gt;
to the
&lt;a href=&#34;https://gizmodo.com/after-blowback-firefox-will-move-mr-robot-extension-t-1821354314&#34;&gt;media&lt;/a&gt;
justifying the study (no apology has been issued).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2017-12-18&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mozilla has issued an apology:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.mozilla.org/firefox/update-looking-glass-add/&#34;&gt;https://blog.mozilla.org/firefox/update-looking-glass-add/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Responses&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.jeaye.com/2017/12/16/firefox/&#34;&gt;Mozilla, Firefox, Looking Glass, and you&lt;/a&gt;
via jeaye.com&lt;/p&gt;
</description>
    </item><item>
      <title>A history of emergent intelligence</title>
      <link>./2017/12/02/History-of-intelligent-observation.html</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/12/02/History-of-intelligent-observation.html</guid>
      <description>&lt;p&gt;As you all know, the simulation of universe 2813/9301 is now coming to a close.
This simulation is notable for being the first simulated universe suitable for
hosting intelligent life, but yesterday the simulation reached a state where we
believe no additional intelligences will emerge. It seems the final state of
this set of physical laws is a dark and empty universe of slowly evaporating
black holes. Though, given the historical significance of this simulation, it&amp;rsquo;s
unlikely we we&amp;rsquo;ll be turning it off any time soon!&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
&lt;strong&gt;Note&lt;/strong&gt;: This document was translated to a language and format
suitable for human understanding. Locations within your observable universe are
referred to by your name for them, times are given in terms of your planetary
orbital period and relative to your reference frame, and terminology is
translated when your vocabulary is sufficient.
&lt;/div&gt;
&lt;p&gt;The remaining simulation that constitutes the vast majority of computer time
allocated to this project, though it will no doubt be very boring. Given that
the fun is behind us, over in the archives we&amp;rsquo;ve been putting together something
special to celebrate the work so far.&lt;/p&gt;
&lt;p&gt;Watching these intelligent civilizations struggle to understand our simulation
from the inside out is a hoot when you and I can just read the manual! For them,
however, it must have been much more difficult. A history of this observation by
emergent intelligence from within our simulation from within follows. Without
further ado, let&amp;rsquo;s revisit the most notable intelligences we discovered.&lt;/p&gt;
&lt;h3&gt;9.93&amp;times;10&lt;sup&gt;8&lt;/sup&gt; years: 36-29-93-55-55&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Note: 36-29-93-55-55 is an approximation of our identifier for arbitrary
locations within the simulation. It does not correspond to a location in your
observable universe. Years are given from the epoch in terms of your planet&amp;rsquo;s
present orbital period.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Though it did not develop self-awareness, the first observation of life - the
precursor to most forms of the simulation&amp;rsquo;s emergent intelligence - was found at
this location. It was initially discarded as a relatively uninteresting anomaly
during our surveys, but was later revisited as we began to understand the
mechanics of intelligence within the simulation.&lt;/p&gt;
&lt;h3&gt;1.28&amp;times;10&lt;sup&gt;9&lt;/sup&gt; years: 39-10-53-10-84&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;Significant anomaly detected at 39-10-53-10-84. Apparent emergent intelligence
detected in active simulation. All personnel must return to the lab
immediately.&amp;rdquo; Where were you when you read the memo? The intelligent creatures
we discovered had developed over a million years before we found them in our
surveys.&lt;/p&gt;
&lt;p&gt;These where the first to enjoy a privilege few civilizations could lay claim
to: witnessing the galactic age of the simulation. They also were uniquely able
to see our simulation when it was small enough to observe a substantial portion
of it. Their investigations were unfortunately among the more primitive that
we&amp;rsquo;ve observed - notably they never discovered general relativity. It was
shortly after their discovery of electromagnetism that they were destroyed by
their aging star&amp;rsquo;s expansion. That was a difficult meeting for everyone when the
project leadership chose not to intervene.&lt;/p&gt;
&lt;h3&gt;1.33&amp;times;10&lt;sup&gt;9&lt;/sup&gt; years: Messier 81&lt;/h3&gt;
&lt;p&gt;The intelligences that developed here are notable for being the second group we
observed, though later surveys discovered additional earlier civilizations. They
also included one civilization which became the first to leave the planet on
which it developed - unfortunately never leaving their star, which ultimately
caused their demise. It&amp;rsquo;s from them we also devised some of the most effective
means of automatic detection of intelligence, which led to the retroactive
discovery of many more intelligences.&lt;/p&gt;
&lt;h3&gt;4.54&amp;times;10&lt;sup&gt;9&lt;/sup&gt; years: Humans&lt;/h3&gt;
&lt;style&gt;
.redacted {
    background: #333;
    color: #333;
}
&lt;/style&gt;
&lt;p&gt;Humanity is remarkable for being the first emergent intelligence to create &lt;em&gt;new&lt;/em&gt;
intelligence within the simulation. All subsequent appearances of such
intelligences are referred to with the name humans gave to their creation:
artificial intelligence. Subsequently, humans also became the first to
&lt;span class=&#34;redacted&#34;&gt;look at you, you figured out how to read the redacted
text. I bet you feel real clever now.&lt;/span&gt; &lt;em&gt;Note: you&amp;rsquo;ll find out soon
enough.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;8.39&amp;times;10&lt;sup&gt;9&lt;/sup&gt; years: 59-54-77-33-19&lt;/h3&gt;
&lt;p&gt;These guys were notable for being the longest-lived intelligent life. They were
located near a binary system with a star and a black hole. Remarkably, this
system was not unstable, unlike most civilizations near a black hole. Instead,
the relativistic effects of the black hole permitted them to observe a great
deal of the universe&amp;rsquo;s history.&lt;/p&gt;
&lt;p&gt;This also distinguishes them from the majority of other long-lived intelligent
civilizations, most of which were galactic civilizations. -19, along with a
handful of other long-lived black hole civilizations, they were among the only
civilizations to exist across long periods of the simulation without leaving
their host stars. They were unable to escape before the black hole began to feed
on the star, destroying the civilization at 4.56×10&lt;sup&gt;12&lt;/sup&gt; years.
During this period, intelligence emerged 6 discrete times on their planet.&lt;/p&gt;
&lt;h3&gt;8.43&amp;times;10&lt;sup&gt;9&lt;/sup&gt; years: UDF 423&lt;/h3&gt;
&lt;p&gt;Interestingly, the record for the shortest lived intelligent civilization was
set only a short time after the longest lived one. Based on our criteria for
intelligence, this civilization only lasted 200 years before being destroyed by
the supernova of their host star.&lt;/p&gt;
&lt;h3&gt;1.92&amp;times;10&lt;sup&gt;10&lt;/sup&gt; years: 60-17-07-08-49 &amp;amp; 79-88-02-97-94&lt;/h3&gt;
&lt;p&gt;These two civilizations share a solemn distinction: -49 was the last to observe
a galaxy outside of their local group, and -94 were the first to never observe
one (though early non-intelligent life at -94 might have seen if they had the
appropriate equipment). The light-speed software can be cruel at times. However,
-94 was still able to see the cosmic microwave background radiation, and from
this deduced that additional unseen galaxies might exist.&lt;/p&gt;
&lt;h3&gt;&lt;span class=&#34;redacted&#34;&gt;x.xx&amp;times;10&lt;sup&gt;xx&lt;/sup&gt; xxxxx: xx-xx-xx-xx-xx&lt;/span&gt;&lt;/h3&gt;
&lt;span class=&#34;redacted&#34;&gt;
There&#39;s nothing interesting to see here, either. Stop looking. Lorem ipsum dolor
sit amet, consectetur adipiscing elit. Curabitur porta libero ut lectus finibus
lobortis. Cras dignissim dignissim ornare. Sed lobortis nulla vel mauris
lobortis, vel pretium tortor efficitur. Aenean sit amet nibh eros. That&#39;s your
reward for looking. You got to read lorem ipsum.
&lt;/span&gt;
&lt;h3&gt;4.14&amp;times;10&lt;sup&gt;10&lt;/sup&gt; years: NGC 5055&lt;/h3&gt;
&lt;p&gt;NGC 5055 was the first of only 32,083 intelligences to discover the simulated
nature of their universe after their discovery of &lt;span class=&#34;redacted&#34;&gt;you
really are terribly clever, aren&amp;rsquo;t you&lt;/span&gt;. They do not,
however, hold the distinction of being the first of the 489 intelligences that
made intentional contact with the proctors - that honor goes to 39-47-28-23-99,
as I&amp;rsquo;m sure you&amp;rsquo;re well aware.&lt;/p&gt;
&lt;h3&gt;7.03&amp;times;10&lt;sup&gt;11&lt;/sup&gt; years: Peak intelligence&lt;/h3&gt;
&lt;p&gt;This was the year that the largest number of discrete intelligent civilizations
existed in the simulation: 6,368,787,234,012. This period began with the birth
of 64-83-61-51-57 and ended with the death of 82-60-95-64-31 approximately 86
seconds later.&lt;/p&gt;
&lt;h3&gt;1.70&amp;times;10&lt;sup&gt;13&lt;/sup&gt; years: Star formation stops&lt;/h3&gt;
&lt;p&gt;The variety in emergent intelligence demonstrated in our simulation is
astonishing, but there&amp;rsquo;s one thing every one of them has in common - a need for
energy. This energy has been provided in all but a few notable cases (see
publication 102.32 for a summary) by a star. At the conclusion of star
formation in our simulation, the rate at which emergent intelligent
civilizations were produced dramatically dropped. This also marked the beginning
of the decline of the 231 galactic civilizations that existed at the time, which
were unable to grow further without new stars being formed.&lt;/p&gt;
&lt;h3&gt;9.85&amp;times;10&lt;sup&gt;15&lt;/sup&gt; years: 72-68-37-80-61&lt;/h3&gt;
&lt;p&gt;The last intelligence to emerge was 72-68-37-80-61. They were not, however, the
last ones in the simulation. They were also among the emergent intelligences
that discovered the nature of the simulation, and the last that the proctors
elected to respond to attempted contact with.&lt;/p&gt;
&lt;h3&gt;9.85&amp;times;10&lt;sup&gt;15&lt;/sup&gt; years: 76-54-95-81-66&lt;/h3&gt;
&lt;p&gt;66 is notable for hosting the last intelligence to leave its host star when a
close encounter with the remnants of 76-54-95-81-18 collided with their galaxy.
Like 84% of the civilizations to undergo this ordeal in this time period, they
were prepared for it and were able to survive another 2,000 years after the
event (this post-stellar lifespan was slightly above average).&lt;/p&gt;
&lt;h3&gt;4.65&amp;times;10&lt;sup&gt;33&lt;/sup&gt; years: 37-19-87-04-98&lt;/h3&gt;
&lt;p&gt;The last emergent intelligence in the simulation. These were the last of the
group of 13 intelligent civilizations that devised a means for coping with the
energy-starved universe at this stage of the simulation. At the time of their
quiet death, they had utilized 77% of the remaining resources that could be
found outside of black holes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;It&amp;rsquo;s been an exciting time for our laboratory. Everyone has done great work on
this simulation. Though 2813/9301&amp;rsquo;s incredible simulation is coming to an end,
we still have more work to do. We are proud to announce that in addition to
simulation 2813/9302 starting soon, we have elected to run simulation 2813/9301
once again. We have decided to nurture the emergent intelligences as if they
were our brothers, and communicate more openly with them. We have established a
new team to learn about each intelligence and make first contact with them using
means familiar to them, like maybe publishing our research documents as &amp;ldquo;blog
posts&amp;rdquo; within the simulation.&lt;/p&gt;
&lt;p&gt;Great work, everyone. Here&amp;rsquo;s to the next step.&lt;/p&gt;
</description>
    </item><item>
      <title>On taking good care of your phone</title>
      <link>./2017/11/24/Phone-maintenance.html</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/11/24/Phone-maintenance.html</guid>
      <description>&lt;p&gt;I just finished &lt;a href=&#34;https://www.ifixit.com/Guide/s5/27077&#34;&gt;replacing the micro-USB
daughterboard&lt;/a&gt; on my Samsung Galaxy S5,
which involved taking the phone most of the way apart, doing the replacement,
and putting it back together. This inspired me to write about my approach to
maintaining my cell phone. I&amp;rsquo;ve had this phone for a while and I have no plans
to upgrade - I backed the upcoming Purism phone, but I expect to spend
months/years on the software before I&amp;rsquo;ll be using that as my daily driver.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t want to be buying a new phone every year. That&amp;rsquo;s a lot of money! Though
the technophile in me finds the latest and greatest technology appealing, the
thought of doing my own repairs and upkeep on a battle-tested phone is equally
interesting. Here are the four things I&amp;rsquo;ve found most important in phone upkeep.&lt;/p&gt;
&lt;h3 id=&#34;install-lineageos-or-replicant&#34;&gt;Install LineageOS or Replicant&lt;/h3&gt;
&lt;p&gt;Before I installed CyanogenMod when I bought this phone, I did some prying into
the stock ROM to see just how bad it was. It was even worse than I expected!
There were literally hundreds of apps and services with scary permissions
running in the background that could not be removed. These spy on you, wear down
your battery, and slow down your phone over time - another form of planned
obsolescence.&lt;/p&gt;
&lt;p&gt;My phone is still as fast as the day I got it. It does a great job with
everything I ask it to do. The first thing you should do with every new phone is
install a third-party ROM - ideally, without Google apps. Stock ROMs suck, get
rid of it.&lt;/p&gt;
&lt;h3 id=&#34;insist-on-a-user-replacable-battery&#34;&gt;Insist on a user-replacable battery&lt;/h3&gt;
&lt;p&gt;Non-user-replacable batteries are an obvious form of planned obsolescence.
Batteries don&amp;rsquo;t last forever and you should &lt;em&gt;never&lt;/em&gt; buy a phone that you
cannot replace the battery of. A new battery for my S5 costs 10 bucks. 4 years
in, I&amp;rsquo;ve replaced mine once and I can hold a charge fine for a couple of days.&lt;/p&gt;
&lt;h3 id=&#34;get-a-case&#34;&gt;Get a case&lt;/h3&gt;
&lt;p&gt;This one is pretty obvious, but I didn&amp;rsquo;t follow this advice at first. I&amp;rsquo;ve never
broken a screen, so I didn&amp;rsquo;t bother with a case. When I decided I was going to
keep this phone for a long time, I went ahead and bought one. It doubles the
thickness of my phone but at least I can be sure I&amp;rsquo;m not going to bust it up
when I drop it. It still fits in my pocket comfortably so it&amp;rsquo;s no big deal.&lt;/p&gt;
&lt;h3 id=&#34;attempt-repairs-before-you-buy-a-new-phone&#34;&gt;Attempt repairs before you buy a new phone&lt;/h3&gt;
&lt;p&gt;The past couple of months, my phone&amp;rsquo;s micro-USB3 port started to act up a bit. I
would have to wiggle the cable a bit to get it to take, and it could stop
charging if I rustled my desk the wrong way. I got a replacement USB
daughterboard on Amazon for 6 bucks. Replacing it took an hour, but when
removing the screen I broke the connection between my home button and my
motherboard - which was only 10 bucks for the replacement, including same day
shipping. The whole process was a lot easier than I thought it would be.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Be a smart consumer when you&amp;rsquo;re buying a phone. Insist on the replacable battery
and maybe read the iFixit teardown. Take good care of it and it&amp;rsquo;ll last a long
time. Don&amp;rsquo;t let consumerism get the better of you!&lt;/p&gt;
</description>
    </item><item>
      <title>Portability matters</title>
      <link>./2017/11/13/Portability-matters.html</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/11/13/Portability-matters.html</guid>
      <description>&lt;p&gt;There are many kinds of &amp;ldquo;portability&amp;rdquo; in software. Portability refers to the
relative ease of &amp;ldquo;porting&amp;rdquo; a piece of software to another system. That
platform might be another operating system, another CPU architecture, another
web browser, another filesystem&amp;hellip; and so on. More portable software uses the
limited subset of interfaces that are common between systems, and less portable
software leverages interfaces specific to a particular system.&lt;/p&gt;
&lt;p&gt;Some people think that portability isn&amp;rsquo;t very important, or don&amp;rsquo;t understand the
degree to which it&amp;rsquo;s important. Some people might call their software portable
if it works on Windows and macOS - they&amp;rsquo;re wrong. They might call their software
portable if it works on Windows, macOS, and Linux - but they&amp;rsquo;re wrong, too.
Supporting multiple systems does not necessarily make your software portable.
What makes your software portable is &lt;em&gt;standards&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The most important standard for software portability is POSIX, or the &lt;strong&gt;Portable
Operating System Interface&lt;/strong&gt;. Significant subsets of this standard are supported
by many, many operating systems, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;*BSD&lt;/li&gt;
&lt;li&gt;macOS&lt;/li&gt;
&lt;li&gt;Minix&lt;/li&gt;
&lt;li&gt;Solaris&lt;/li&gt;
&lt;li&gt;BeOS&lt;/li&gt;
&lt;li&gt;Haiku&lt;/li&gt;
&lt;li&gt;AIX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I &lt;a href=&#34;https://en.wikipedia.org/wiki/POSIX#POSIX-oriented_operating_systems&#34;&gt;could go
on&lt;/a&gt;.
Through these operating systems, you&amp;rsquo;re able to run POSIX compatible code on a
large number of CPU architectures as well, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i386&lt;/li&gt;
&lt;li&gt;amd64&lt;/li&gt;
&lt;li&gt;ARM&lt;/li&gt;
&lt;li&gt;MIPS&lt;/li&gt;
&lt;li&gt;PowerPC&lt;/li&gt;
&lt;li&gt;sparc&lt;/li&gt;
&lt;li&gt;ia64&lt;/li&gt;
&lt;li&gt;VAX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, I could go on. Here&amp;rsquo;s the point: by supporting POSIX, your software runs
on basically every system. &lt;em&gt;That&amp;rsquo;s&lt;/em&gt; what it means to be portable - standards.
So why is it important to support POSIX?&lt;/p&gt;
&lt;p&gt;First of all, if you use POSIX then your software runs on just about anything,
so lots of users will be available to you and it will work in a variety of
situations. You get lots of platforms for free (or at least cheap). But more
importantly, &lt;em&gt;new platforms&lt;/em&gt; get your software for free, too.&lt;/p&gt;
&lt;p&gt;The current market leaders are not the end-all-be-all of operating system
design - far from it. What they have in their advantage is working well enough
and being incubent. Windows, Linux, and macOS are still popular for the same
reason that legislator you don&amp;rsquo;t like keeps getting elected! However, new
operating systems have a fighting chance thanks to POSIX. All you have to do to
make your OS viable is implement POSIX and you will immediately open up
hundreds, if not thousands, of potential applications. Portability is important
for innovation.&lt;/p&gt;
&lt;p&gt;The same applies to other kinds of portability. Limiting yourself to standard
browser features gives new browsers a chance. Implementing standard networking
protocols allows you to interop with other platforms. I&amp;rsquo;d argue that failing to
do this is &lt;em&gt;unethical&lt;/em&gt; - it&amp;rsquo;s just another form of vendor lock-in. This is why
Windows does not support POSIX.&lt;/p&gt;
&lt;p&gt;This is also why I question niche programming languages like Rust when they
claim to be suited to systems programming or even kernel development. That&amp;rsquo;s
simply not true when they only run on a small handful of operating systems and
CPU architectures. C runs on &lt;em&gt;literally&lt;/em&gt; everything.&lt;/p&gt;
&lt;p&gt;In conclusion: use standard interfaces for your software. That guy who wants to
bring new life to that old VAX will thank you. The authors of
&lt;a href=&#34;https://servo.org/&#34;&gt;servo&lt;/a&gt; thank you. &lt;em&gt;You&lt;/em&gt; will thank you when your
circumstances change in 5 years.&lt;/p&gt;
</description>
    </item><item>
      <title>Nvidia sucks and I&#39;m sick of it</title>
      <link>./2017/10/26/Fuck-you-nvidia.html</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/10/26/Fuck-you-nvidia.html</guid>
      <description>&lt;p&gt;There&amp;rsquo;s something I need to make clear about Nvidia. Sway 1.0, which is the
release after next, is &lt;em&gt;not&lt;/em&gt; going to support the Nvidia proprietary driver,
EGLStreams, or any other proprietary graphics APIs. The only supported driver
for Nvidia cards will be the open source nouveau driver. I will explain why.&lt;/p&gt;
&lt;p&gt;Today, Sway is able to run on the Nvidia proprietary driver. This is not and has
never been an officially supported feature - we&amp;rsquo;ve added a few things to try and
make it easier but my stance has &lt;em&gt;always&lt;/em&gt; been that Nvidia users are on their
own for support. In fact, Nvidia support was added to Sway without my approval.
It comes from a library we depend on called wlc - had I&amp;rsquo;d made the decision on
whether or not to support EGLStreams in wlc, I would have said no.&lt;/p&gt;
&lt;p&gt;Right now, we&amp;rsquo;re working very hard on replacing wlc, for reasons unrelated to
Nvidia. Our new library, wlroots, is better in every conceivable way for Sway&amp;rsquo;s
needs. The Nvidia proprietary driver support is not coming along for the ride,
and here&amp;rsquo;s why.&lt;/p&gt;
&lt;p&gt;So far, I&amp;rsquo;ve been speaking in terms of &lt;em&gt;Sway&lt;/em&gt; supporting Nvidia, but this is
an ass-backwards way of thinking. &lt;em&gt;Nvidia&lt;/em&gt; needs to support Sway. There are
Linux kernel APIs that we (and other Wayland compositors) use to get the job
done. Among these are KMS, DRM, and GBM - respectively Kernel Mode Setting,
Direct Rendering Manager, and Generic Buffer Management. Every GPU vendor
but Nvidia supports these APIs. Intel and AMD support them with mainlined&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;,
open source drivers. For AMD this was notably done by replacing their
proprietary driver with a new, open source one, which has been developed in
cooperation with the Linux community. As for Intel, they&amp;rsquo;ve always been friendly
to Linux.&lt;/p&gt;
&lt;p&gt;Nvidia, on the other hand, have been fucking assholes and have treated Linux
like utter shit for our entire relationship. About a year ago they announced
&amp;ldquo;Wayland support&amp;rdquo; for their proprietary driver. This included KMS and DRM
support (years late, I might add), but &lt;em&gt;not&lt;/em&gt; GBM support. They shipped something
called EGLStreams instead, a concept that had been discussed and shot down by
the Linux graphics development community before. They did this because it makes
it easier for them to keep their driver proprietary without having work with
Linux developers on it. Without GBM, Nvidia &lt;em&gt;does not&lt;/em&gt; support Wayland, and they
were real pricks for making some announcement like they actually did.&lt;/p&gt;
&lt;p&gt;When people complain to me about the lack of Nvidia support in Sway, I get
really pissed off. It is &lt;em&gt;not my fucking problem&lt;/em&gt; to support Nvidia, it&amp;rsquo;s
Nvidia&amp;rsquo;s fucking problem to support me. Even Broadcom, &lt;em&gt;fucking Broadcom&lt;/em&gt;,
supports the appropriate kernel APIs. And proprietary driver users have the gall
to &lt;em&gt;reward&lt;/em&gt; Nvidia for their behavior by giving them &lt;em&gt;hundreds of dollars&lt;/em&gt; for
their GPUs, then come to &lt;em&gt;me&lt;/em&gt; and ask me to deal with their bullshit &lt;em&gt;for free&lt;/em&gt;.
Well, fuck you, too. Nvidia users are shitty consumers and I don&amp;rsquo;t even want
them in my userbase. Choose hardware that supports your software, not the other
way around.&lt;/p&gt;
&lt;p&gt;Buy AMD. Nvidia&amp;ndash; fuck you!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: It&amp;rsquo;s worth noting that Nvidia is evidently attempting to find a better
path with &lt;a href=&#34;https://github.com/cubanismo/allocator&#34;&gt;this new GitHub project&lt;/a&gt;. I
hope it works out, but they aren&amp;rsquo;t really cooperating much with anyone to build
it - particularly nouveau. It&amp;rsquo;s more throwing code/blobs over the wall and
expecting everyone to change for them.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Mainlined means that they are included in the upstream Linux kernel source code. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>The future of Wayland, and sway&#39;s role in it</title>
      <link>./2017/10/09/Future-of-sway.html</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/10/09/Future-of-sway.html</guid>
      <description>&lt;p&gt;Today I&amp;rsquo;ve released sway
&lt;a href=&#34;https://github.com/swaywm/sway/releases/tag/0.15-rc1&#34;&gt;0.15-rc1&lt;/a&gt;, the first
release candidate for the final 0.x release of sway. That&amp;rsquo;s right - after sway
0.15 will be sway 1.0. After today, no new features are being added to sway
until we complete the migration to our new plumbing library,
&lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt;. This has been a long time
coming, and I would love to introduce you to wlroots and tell you what to expect
from sway 1.0.&lt;/p&gt;
&lt;p&gt;&lt;small class=&#34;text-muted&#34;&gt;&lt;a href=&#34;https://github.com/swaywm/sway&#34;&gt;Sway&lt;/a&gt; is
a tiling Wayland compositor, if you didn&amp;rsquo;t know.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Before you can understand what wlroots is, you have to understand its
predecessor: &lt;a href=&#34;https://github.com/Cloudef/wlc&#34;&gt;wlc&lt;/a&gt;. The role of wlc is to manage
a number of low-level plumbing components of a Wayland compositor. It
essentially abstracts most of the hard work of Wayland compositing away from the
compositor itself. It manages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The EGL (OpenGL) context&lt;/li&gt;
&lt;li&gt;DRM (display) resources&lt;/li&gt;
&lt;li&gt;libinput resources&lt;/li&gt;
&lt;li&gt;Rendering windows to the display&lt;/li&gt;
&lt;li&gt;Communicating with Wayland clients&lt;/li&gt;
&lt;li&gt;Xwayland (X11) support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It does a few other things, but these are the most important. When sway wants to
render a window, it will be told about its existence through a hook from wlc.
We&amp;rsquo;ll tell wlc where to put it and it will be rendered there. Most of the heavy
lifting has been handled by wlc, and this has allowed us to develop sway into a
powerful Wayland compositor very quickly.&lt;/p&gt;
&lt;p&gt;However, wlc has some limitations, ones that sway has been hitting more and more
often in the past several months. To address these limitations, we&amp;rsquo;ve been
working very hard on a replacement for wlc called wlroots. The relationship
between wlc and wlroots is similar to the relationship between Pango and
Harfbuzz - wlroots is much more powerful, but at the cost of putting a lot more
work on the shoulders of sway. By replacing wlc, we can customize the behavior
of the low level components of our system.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m happy to announce that development on wlroots has been spectacular. Like
libweston has Weston itself, wlroots has a reference compositor called Rootston -
a simple floating compositor that lets us test and demonstrate the features of
wlroots. It is from this compositor that I write this blog post today. The most
difficult of our goals are behind us with wlroots, and we&amp;rsquo;re now beginning to
plan the integration of wlroots and sway.&lt;/p&gt;
&lt;p&gt;All of this work has been possible thanks to a contingent of highly motivated
contributors who have done huge amounts of work for wlroots, writing and
maintaining entire subsystems far faster than I could have done it alone. I
really cannot overstate the importance of these contributors. Thanks to their
contributions, most of my work is in organizing development and merging pull
requests. From the bottom of my heart, &lt;a href=&#34;https://github.com/swaywm/wlroots/graphs/contributors&#34;&gt;thank
you&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And for all of this hard work, what are we going to get? Well, for some time
now, there have been many features requests in sway that we could not address,
and many long-standing bugs we could not fix. Thanks to wlroots, we can see many
of these addressed within the next few months. Here are some of the things you
can expect from the union of wlroots and sway:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rotated displays&lt;/li&gt;
&lt;li&gt;Touchscreen bindings&lt;/li&gt;
&lt;li&gt;Drawing tablet support&lt;/li&gt;
&lt;li&gt;Mouse capture for games&lt;/li&gt;
&lt;li&gt;Fractional display scaling&lt;/li&gt;
&lt;li&gt;Display port daisy chaining&lt;/li&gt;
&lt;li&gt;Multi-GPU support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these features are unique to sway even among Wayland &lt;em&gt;and&lt;/em&gt; Xorg
desktops combined! Others, like output rotation, have been requested by our
users for a long time. I&amp;rsquo;m looking forward to the several dozen long-open GitHub
issues that will be closed in the next couple of months. This is just the
beginning, too - wlroots is such a radical change that I can&amp;rsquo;t even begin to
imagine all of the features we&amp;rsquo;re going to be able to build.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re sharing these improvements with the greater Wayland community, too.
wlroots is a platform upon which we intend to develop and promote open standards
that will unify the extensibility of all Wayland desktops. We&amp;rsquo;ve also been
working with other Wayland compositors, notably
&lt;a href=&#34;https://github.com/way-cooler/way-cooler&#34;&gt;way-cooler&lt;/a&gt;, which are preparing to
move their own codebases to a wlroots-based solution.&lt;/p&gt;
&lt;p&gt;My goal is to ship sway 1.0 before the end of the year. These are exciting times
for Wayland, and I hope you&amp;rsquo;re looking forward to it.&lt;/p&gt;
</description>
    </item><item>
      <title>Analyzing HN moderation &amp; censorship</title>
      <link>./2017/09/13/Analyzing-HN.html</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/09/13/Analyzing-HN.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt; is a popular
&amp;ldquo;&lt;a href=&#34;http://www.catb.org/jargon/html/H/hacker.html&#34;&gt;hacker&lt;/a&gt;&amp;rdquo; news board. One thing
I love about HN is that the moderation generally does an excellent job. The site
is free of spam and the conversations are usually respectful and meaningful (if
pessimistic at times). However, there is always room for improvement, and
moderation on Hacker News is no exception.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;: on 2017-10-19 this article was updated to incorporate feedback the
Hacker News moderators sent to me to clarify some of the points herein. You may
view a diff of these changes
&lt;a href=&#34;https://github.com/SirCmpwn/sircmpwn.github.io/commit/553d051c84a4631c3bd3264a437dfbc6c9807d13&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For some time now, I&amp;rsquo;ve been scraping the HN API and website to learn how the
moderators work, and to gather some interesting statistics about posts there
in general. Every 5 minutes, I take a sample of the front page, and every 30
minutes, I sample the top 500 posts (note that HN may return fewer than this
number). During each sample, I record the ID, author, title, URL, status
(dead/flagged/dupe/alive), score, number of comments, rank, and compute the rank
based on &lt;a href=&#34;https://news.ycombinator.com/item?id=231209&#34;&gt;HN&amp;rsquo;s published algorithm&lt;/a&gt;.
A note is made when the title, URL, or status changes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.0x2237.club/post/15217697&#34;&gt;&lt;img src=&#34;https://sr.ht/IFCA.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The information gathered is publicly available at
&lt;a href=&#34;https://hn.0x2237.club&#34;&gt;hn.0x2237.club&lt;/a&gt; (sorry about the stupid domain, I just
picked one at random). You can search for most posts here going back to
2017-04-14, as well as view recent
&lt;a href=&#34;https://hn.0x2237.club/title-changes&#34;&gt;title&lt;/a&gt; and
&lt;a href=&#34;https://hn.0x2237.club/url-changes&#34;&gt;url&lt;/a&gt; changes or &lt;a href=&#34;https://hn.0x2237.club/deleted&#34;&gt;deleted
posts&lt;/a&gt;
(&lt;a href=&#34;https://hn.0x2237.club/deleted-10&#34;&gt;score&amp;gt;10&lt;/a&gt;). Raw data is available as JSON
for any post at &lt;code&gt;https://hn.0x2237.club/post/:id/json&lt;/code&gt;. Feel free to explore the
site later, or &lt;a href=&#34;https://git.sr.ht/~sircmpwn/hnstats&#34;&gt;its shitty code&lt;/a&gt;. For now,
let&amp;rsquo;s dive into what I&amp;rsquo;ve learned from this data.&lt;/p&gt;
&lt;h3 id=&#34;tools-hn-mods-use&#34;&gt;Tools HN mods use&lt;/h3&gt;
&lt;p&gt;The main tools I&amp;rsquo;m aware of that HN moderators can use to perform their duties
are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Editing link titles or URLs&lt;/li&gt;
&lt;li&gt;Influencing story rank via &amp;ldquo;downweighting&amp;rdquo; or &amp;ldquo;burying&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Deleting or &amp;ldquo;killing&amp;rdquo; posts&lt;/li&gt;
&lt;li&gt;Detaching off-topic or rulebreaking comment threads from their parents&lt;/li&gt;
&lt;li&gt;&lt;abbr title=&#34;Banning them without making it known to them&#34;&gt;Shadowbanning&lt;/abbr&gt;
misbehaving users&lt;/li&gt;
&lt;li&gt;Banning misbehaving users (and telling them)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The moderators emphasize a difference between deleting a post and killing a
post. The former, deleting a post, will remove it from all public view like it
had never existed, and is a tool used infrequently. Killing a post will mark it
as [dead] so it doesn&amp;rsquo;t show up on the post listing.&lt;/p&gt;
&lt;p&gt;Influencing a post&amp;rsquo;s rank can also be done through several means of varying
severity. &amp;ldquo;Burying&amp;rdquo; a post will leave a post alive, but plunge it in rank.
&amp;ldquo;Downweighting&amp;rdquo; is similar, but does not push its rank as far.&lt;/p&gt;
&lt;p&gt;There are also automated tools for detecting spam and &lt;abbr title=&#34;Posts
influenced by a group of early voters hoping to get it on the front page&#34;&gt;voting
rings&lt;/abbr&gt;, as well as automated de-emphasizing of posts based on certain
&lt;abbr title=&#34;&#39;Bitcoin&#39; was known to at some point be one of these&#34;&gt;secret
keywords&lt;/abbr&gt; and controls to prevent flamewars. Automated tools on Hacker
News are used to downweight or kill posts, but never to bury or delete them.
Dan spoke about these tools and their usage for me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Of these four interventions (deleting, killing, burying, and downweighting),
the only one that moderators do frequently is downweighting. We downweight
posts in response to things that go against the site guidelines, such as when a
submission is unsubstantive, baity or sensational. Typically such posts remain
on the front page, just at a lower rank. We bury posts when they&amp;rsquo;re dupes,
but rarely otherwise. We kill posts when they&amp;rsquo;re spam, but rarely
otherwise. [&amp;hellip;] We never delete a post unless the author asks us to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dan also further clarified the difference between dead and deleted for me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The distinction between &amp;lsquo;dead&amp;rsquo; and &amp;lsquo;deleted&amp;rsquo; is important. Dead posts
are different from deleted ones in that people can still see them if
they set &amp;lsquo;showdead&amp;rsquo; to &amp;lsquo;yes&amp;rsquo; in their profile. That way, users who
want a less moderated view can still see everything that has been
killed by moderators or software or user flags. Deleted posts, on the
other hand, are erased from the record and never seen again. On HN,
authors can delete their own posts for a couple hours (unless they are
comments that have replies). After that, if they want a post deleted
they can ask us and we usually are happy to oblige.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moderators can also artificially influence rank upwards - one way is by inviting
the user to re-submit a post that they want to give another shot at the front
page. This gives the post a healthy upvote to begin with and prevents it from
being flagged. The moderators invited me to re-submit this very article using
this mechanism on 2017-10-19.&lt;/p&gt;
&lt;p&gt;Banning users is another mechanism that they can use. There are two ways bans
are typically applied around the net - telling users they&amp;rsquo;ve been banned, and
keeping it quiet. The latter - shadowbanning - is a useful tool against spammers
and serial ban evaders who might otherwise try to circumvent their ban. However,
it&amp;rsquo;s important that this does &lt;em&gt;not&lt;/em&gt; become the first line of defense against
rulebreaking users, who should instead be informed of the reason for their ban
so they have a chance to reform and appeal it. Here&amp;rsquo;s what Dan has to say about
it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shadowbanning has proven to still be useful for spammers and trolls
(i.e. when a new account shows up and is clearly breaking the site
guidelines off the bat). Most such abuse is by a relatively small
number of users who create accounts over and over again to do the same
things. When there&amp;rsquo;s evidence that we&amp;rsquo;ve repeatedly banned someone
before, I don&amp;rsquo;t feel obliged to tell them we&amp;rsquo;re banning them again.
[&amp;hellip;] When we&amp;rsquo;re banning an established account, though, we post a comment
saying so, and nearly always only after warning that user beforehand. Many such
users had no idea they were breaking the site guidelines and are
quite happy to improve their posts, which is a win for everyone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dan also shared a link to search for comments where moderators have explained
to users why they&amp;rsquo;ve been banned. Of course, this doesn&amp;rsquo;t include users who were
banned without explanation, or that use slightly different language:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.algolia.com/?query=by:dang%20we%20banned&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=comment&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&#34;&gt;dang&amp;rsquo;s bans&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.algolia.com/?query=by:sctb%20we%20banned&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=comment&amp;amp;storyText=false&amp;amp;prefix=false&amp;amp;page=0&#34;&gt;sctb&amp;rsquo;s bans&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;data-based-insights&#34;&gt;Data-based insights&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s an example of a fairly common moderator action:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/PhJM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.0x2237.club/post/15217697&#34;&gt;This post&lt;/a&gt; had its title changed at
around 09-11-17 12:10 UTC, and had the rank artificially adjusted to push it
further down the front page. We can tell that the drop was artificial just by
correlating it with the known moderator action, but we can also compare it
against the computed base rank:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/IJQI.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note however that the base rank is often wildly different from the rank observed
in practice; the factors that go into adjusting it are rather complex. We can
also see that despite the action, the post&amp;rsquo;s score continued to increase, even
at an accelerated pace:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/FmNU.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This &amp;ldquo;title change and derank&amp;rdquo; is a fairly common action - here are some more
examples from the past few days:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.0x2237.club/post/15219154&#34;&gt;Betting on the Web - Why I Build PWAs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.0x2237.club/post/15210767&#34;&gt;Silicon Valley is erasing individuality&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.0x2237.club/post/15208565&#34;&gt;Chinese government is working on a timetable to end sales of fossil-fuel cars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Users can change their own post titles, which I&amp;rsquo;m unable to distinguish from
moderator changes. However, correlating them with a strange change in rank is
generally a good bet. Submitters also generally will edit their titles earlier
rather than later, so a later change may indicate that it was seen by a
moderator after it rose some distance up the page.&lt;/p&gt;
&lt;p&gt;I also occasionally find what seems to be the opposite - artificially bumping a
post further up the page. Here&amp;rsquo;s two examples:
&lt;a href=&#34;https://hn.0x2237.club/post/15213371&#34;&gt;15213371&lt;/a&gt; and
&lt;a href=&#34;https://hn.0x2237.club/post/15209377&#34;&gt;15209377&lt;/a&gt;. Rank influencing in either
direction also happens without an associated title or URL change, but
automatically pinning such events down is a bit more subtle than my tools can
currently handle.&lt;/p&gt;
&lt;p&gt;Moderators can also delete a post or indicate it as a dupe. The latter can be
(and is) detected by my tools, but the former is indistinguishable from the user
opting to delete posts themselves. In theory, posts that are deleted &lt;em&gt;after&lt;/em&gt; the
author is no longer allowed to could be detected, but this happens rarely and my
tools don&amp;rsquo;t track posts once they get old enough.&lt;/p&gt;
&lt;h3 id=&#34;flagging&#34;&gt;Flagging&lt;/h3&gt;
&lt;p&gt;The users have some moderation tools at their disposal, too - downvotes,
flagging, and vouching. When a comment is downvoted, it is moved towards the
bottom of the thread and is gradually colored grayer to become less visible, and
can be reversed with upvotes. When a comment gets enough flags, it is removed
entirely unless you have showdead enabled in your profile. Flagged posts are
downweighted or killed when enough flags accumulate. These posts are moved to
the bottom of the ranked posts even if you have showdead enabled, and can also
be seen in /new. Flagging can be reversed with the vouch feature, but flagged
stories are almost never vouched back into existence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: detection of post flagged status is very buggy with my tools. The API
exposes a boolean for dead posts, so I have to fall back on scraping to
distinguish between different kinds of dead-ness. But this is pretty buggy, so I
encourage you to examine the post yourself when browsing my site if in doubt.&lt;/p&gt;
&lt;h3 id=&#34;are-these-tools-abused-for-censorship&#34;&gt;Are these tools abused for censorship?&lt;/h3&gt;
&lt;p&gt;Well, with all of this data, was I able to find evidence of censorship? There
are two answers: yes and maybe. The &amp;ldquo;yes&amp;rdquo; is because users are &lt;em&gt;definitely&lt;/em&gt;
abusing the flagging feature. The &amp;ldquo;maybe&amp;rdquo; is because moderator action leaves
room for interpretation. I&amp;rsquo;ll get to that later, but let&amp;rsquo;s start with flagging
abuse.&lt;/p&gt;
&lt;h4 id=&#34;censorship-by-users&#34;&gt;Censorship by users&lt;/h4&gt;
&lt;p&gt;The threshold for removing a story due to flags is rather low, though I don&amp;rsquo;t
know the exact number. Here are some posts whose flags I consider questionable:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.0x2237.club/post/15129859&#34;&gt;Harvey, the Storm That Humans Helped Cause&lt;/a&gt; (23 points)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.0x2237.club/post/15116132&#34;&gt;ES6 imports syntax considered harmful&lt;/a&gt; (12 points)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.0x2237.club/post/14415411&#34;&gt;White-Owned Restaurants Shamed for Serving Ethnic Food&lt;/a&gt; (33 points)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.0x2237.club/post/14152602&#34;&gt;The evidence is piling up – Silicon Valley is being destroyed&lt;/a&gt; (27 points)&lt;/p&gt;
&lt;p&gt;A good place to discover these sorts of events is to browse hnstats for posts
deleted with a score &lt;a href=&#34;https://hn.0x2237.club/deleted-10&#34;&gt;&amp;gt;10 points&lt;/a&gt;. There are
also occasions where the flags seem to be due to a poor title, which is a
fixable problem for which flagging is a harsh solution:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.0x2237.club/post/14679207&#34;&gt;Poettering downvoted 5 (at time of this writing) times&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hn.0x2237.club/post/14676296&#34;&gt;Germany passes law restricting free speech on the internet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main issue with flags is that they&amp;rsquo;re often used as an alternative to the
HN&amp;rsquo;s (by design) lack of a downvoting feature. HN also gives users no guidelines
on &lt;em&gt;why&lt;/em&gt; they should flag posts, which mixes poorly with automated removal of a
post given enough flags.&lt;/p&gt;
&lt;h4 id=&#34;censorship-by-moderators&#34;&gt;Censorship by moderators&lt;/h4&gt;
&lt;p&gt;Moderator actions are a bit more difficult to judge. Moderation on HN is a black
box - most of the time, moderators don&amp;rsquo;t make the reasoning behind their actions
clear. Many of their actions (such as rank influence) are also subtle and easy
to miss. Thankfully they are often receptive to being asked why some moderation
occurred, but only as often as not.&lt;/p&gt;
&lt;p&gt;Anecdotally, I also find that moderators occasionally moderate selectively, and
keep quiet in the face of users asking them why. Notably this is a problem for
&lt;abbr title=&#34;links for which you have to pay money to read the
content&#34;&gt;paywalled&lt;/abbr&gt; articles, which are &lt;a href=&#34;https://news.ycombinator.com/newsfaq.html&#34;&gt;against the
rules&lt;/a&gt; but are often allowed to
remain.&lt;/p&gt;
&lt;p&gt;Dan sent me a response to this section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[It&amp;rsquo;s true that we don&amp;rsquo;t explain our actions], but mostly because it would be
hopeless to try. We could do that all day and still not make everything clear,
because the quantity is overwhelming and the cost of a high-quality explanation
is steep. Moreover the experiment would be impossible to run because one
would die of boredom long before reaching 100%. Our solution to this
conundrum is not to try to explain everything but to answer specific
questions as best we can. We don&amp;rsquo;t answer every question, but that&amp;rsquo;s
mostly because we don&amp;rsquo;t see every question. If people ask us things on
HN itself, odds are we won&amp;rsquo;t see it (also, the site guidelines ask
users not to do this, per (&lt;a href=&#34;https://news.ycombinator.com/newsguidelines.html&#34;&gt;our
guidelines&lt;/a&gt;). If they
&lt;a href=&#34;mailto:hn@ycombinator.com&#34;&gt;email us&lt;/a&gt;, the probability of a
response approaches 1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can attest personally to success reaching out to &lt;a href=&#34;mailto:hn@ycombinator.com&#34;&gt;hn@ycombinator.com&lt;/a&gt; for
clarification and even reversal of some moderator decisions, though at a
response ratio further from 1 than this implies. That being said, I don&amp;rsquo;t think
that private discourse between the submitter and the moderators is the only
solution. Other people may be invested in the topic, too - users who upvoted the
story might not notice its disappearance, but would like more attention drawn to
the topic and enjoy more discussion. Commenters are even more invested in the
posts. The submitter is not the only one whoses interests are at stake. This is
even more of a problem for posts which are moderated via user flags - the HN
mods are pretty discretionate but users are much less so.&lt;/p&gt;
&lt;p&gt;Explaining every action is not necessary - I don&amp;rsquo;t think anyone needs you to
explain why someone was banned when they were submitting links to earn money at
home in your spare time. However, I think a public audit log of moderator
actions would go a long way, and could be done by software - avoiding the need
to explain everything. I envision a change to your UI for banning users or
moderating posts with that adds a dropdown of common reasons and a textbox for
further elaboration when appropriate - then makes this information appear on
/moderation.&lt;/p&gt;
&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;I should again emphasize that most moderator actions are benign and agreeable.
They do a great job on the whole, but striving to do even better would be
admirable. I suggest a few changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a public audit log of moderation activity, or at least reach out to me to
see what small changes could be done to help improve my statistics gathering.&lt;/li&gt;
&lt;li&gt;Minimize use of more subtle actions like rank influence, and when used,&lt;/li&gt;
&lt;li&gt;More frequently leave comments on posts where moderation has occurred
explaining the rationale and opening an avenue for public discussion and/or
appeal.&lt;/li&gt;
&lt;li&gt;Put flagged posts into a queue for moderator review and don&amp;rsquo;t remove posts
simply because they&amp;rsquo;re flagged.&lt;/li&gt;
&lt;li&gt;Consider appointing one or two moderators from the community, ideally people
with less bias towards SV or startup culture.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hacker News is a great place for just that - hacker news. It has been for a long
time and I hope it continues to be. Let&amp;rsquo;s work together on running it
transparently to the benefit of all.&lt;/p&gt;
</description>
    </item><item>
      <title>Killing ants with nuclear weapons</title>
      <link>./2017/09/08/Complicated.html</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/09/08/Complicated.html</guid>
      <description>&lt;p&gt;Complexity is quickly becoming an epidemic. In this developer&amp;rsquo;s opinion,
complexity is the ultimate enemy - the final boss - of good software design.
Complicated software generally has complicated bugs. Simple software generally
has simple bugs. It&amp;rsquo;s as easy as that.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s for this reason that I strongly dislike many of the tools and architectures
that have been proliferating over the past few years, particularly in web
development. When I look at a tool like Gulp, I wonder if its success is largely
attributable to people not bothering to learn how Makefiles work. Tools like
Docker make me wonder if they&amp;rsquo;re an excuse to avoid learning how to do ops or
how to use your distribution&amp;rsquo;s package manager. Chef makes me wonder if its
users forgot that shell scripts can use SSH, too.&lt;/p&gt;
&lt;p&gt;These tools offer a value add. But how does it compare to the cost of the
additional complexity? In my opinion, in &lt;em&gt;every case&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; the value add is far
outweighed by the massive complexity cost. This complexity cost shows itself
when the system breaks (and it will - all systems break) and you have to dive
into these overengineered tools. Don&amp;rsquo;t forget that dependencies are fallible,
and never add a dependency you wouldn&amp;rsquo;t feel comfortable debugging. The time
spent learning these complicated systems to fix the inevitable bugs is surely
much less than the time spent learning the venerable tools that fill the same
niche (or, in many cases, accepting that you don&amp;rsquo;t even need this particular
shiny thing).&lt;/p&gt;
&lt;p&gt;Reinventing the wheel is a favorite pastime of mine. There are many such wheels
that I have reinvented or am currently reinventing. The problem isn&amp;rsquo;t in
reinventing the wheel - it&amp;rsquo;s in doing so before you actually understand the
wheel&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. I wonder if many of these complicated tools are written by people who
set out before they fully understood what they were replacing, and I&amp;rsquo;m &lt;em&gt;certain&lt;/em&gt;
that they&amp;rsquo;re mostly used by such people. I understand it may seem intimidating
to learn venerable tools like make(1) or chroot(1), but they&amp;rsquo;re just a short man
page away&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not just tools, though. I couldn&amp;rsquo;t explain the features of C++ in fewer than
several thousand words (same goes for Rust). GNU continues to add proprietary
extensions and unnecessary features to everything they work on. Every update
shipped to your phone is making it slower to ensure you&amp;rsquo;ll buy the new one.
Desktop applications are shipping entire web browsers into your disk and your
RAM; server applications ship entire operating systems in glorified chroots; and
hundreds of megabytes of JavaScript, ads, and spyware are shoved down the pipe
on every web page you visit.&lt;/p&gt;
&lt;p&gt;This is an epidemic. It&amp;rsquo;s time we cut this shit out. Please, design your systems
with simplicity in mind. Moore&amp;rsquo;s law is running out&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;, the free lunch is
coming to an end. We have heaps and heaps of complicated, fragile abstractions
to dismantle.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;That I&amp;rsquo;ve seen (or heard of) &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;Those who don&amp;rsquo;t understand UNIX are doomed to reinvent it, poorly.&amp;rdquo; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Of course, &lt;a href=&#34;https://xkcd.com/912/&#34;&gt;&lt;em&gt;&amp;quot;&amp;hellip;full documentation for make is maintained as a GNU info page&amp;hellip;&amp;quot;&lt;/em&gt;&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Transistors are approaching a scale where quantum problems come into play, and we are limited by the speed of light without getting any smaller. The RAM bottleneck is another serious issue, for which innovation has been stagnant for some time now. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>When not to use a regex</title>
      <link>./2017/08/13/When-not-to-use-a-regex.html</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/08/13/When-not-to-use-a-regex.html</guid>
      <description>&lt;p&gt;The other day, I saw &lt;a href=&#34;https://github.com/zeeshanu/learn-regex&#34;&gt;Learn regex the easy
way&lt;/a&gt;. This is a great resource, but I
felt the need to pen a post explaining that regexes are usually not the right
approach.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do a little exercise. I googled &amp;ldquo;URL regex&amp;rdquo; and here&amp;rsquo;s the first Stack
Overflow result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&amp;amp;//=]*)
&lt;/code&gt;&lt;/pre&gt;&lt;p style=&#34;text-align: right&#34;&gt;
&lt;small&gt;&lt;a href=&#34;https://stackoverflow.com/a/3809435/1191610&#34;&gt;source&lt;/a&gt;&lt;/small&gt;
&lt;/p&gt;
&lt;p&gt;This is a bad regex. Here are some valid URLs that this regex fails to match:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://x.org&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nic.science&#34;&gt;http://nic.science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;http://名がドメイン.com (warning: this is a parked domain)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://example.org/url,with,commas&#34;&gt;http://example.org/url,with,commas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Harry_Potter_(film_series)&#34;&gt;https://en.wikipedia.org/wiki/Harry_Potter_(film_series)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;http://127.0.0.1&lt;/li&gt;
&lt;li&gt;http://[::1] (ipv6 loopback)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some invalid URLs the regex is fine with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://exam..ple.org&#34;&gt;http://exam..ple.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://--example.org&#34;&gt;http://--example.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This answer has been revised 9 times on Stack Overflow, and this is the best
they could come up with. Go back and read the regex. Can you tell where each of
these bugs are? How long did it take you? If you received a bug report in your
application because one of these URLs was handled incorrectly, do you understand
this regex well enough to fix it? If your application has a URL regex, go find
it and see how it fares with these tests.&lt;/p&gt;
&lt;p&gt;Complicated regexes are opaque, unmaintainable, and often wrong. The correct
approach to validating a URL is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;urllib.parse&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urlparse&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_url_valid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;urlparse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A regex is useful for validating &lt;em&gt;simple&lt;/em&gt; patterns and for &lt;em&gt;finding&lt;/em&gt; patterns in
text. For anything beyond that it&amp;rsquo;s almost certainly a terrible choice. Say you
want to&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;validate an email address&lt;/strong&gt;: try to send an email to it!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;validate password strength requirements&lt;/strong&gt;: estimate the complexity with
&lt;a href=&#34;https://github.com/dropbox/zxcvbn&#34;&gt;zxcvbn&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;validate a date&lt;/strong&gt;: use your standard library!
&lt;a href=&#34;https://docs.python.org/3.6/library/datetime.html#datetime.datetime.strptime&#34;&gt;datetime.datetime.strptime&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;validate a credit card number&lt;/strong&gt;: run the &lt;a href=&#34;https://en.wikipedia.org/wiki/Luhn_algorithm&#34;&gt;Luhn
algorithm&lt;/a&gt; on it!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;validate a social security number&lt;/strong&gt;: alright, use a regex. But don&amp;rsquo;t expect
the number to be assigned to someone until you ask the Social Security
Administration about it!&lt;/p&gt;
&lt;p&gt;Get the picture?&lt;/p&gt;
</description>
    </item><item>
      <title>State of Sway August 2017</title>
      <link>./2017/08/09/State-of-Sway-August-2017.html</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/08/09/State-of-Sway-August-2017.html</guid>
      <description>&lt;p&gt;Is it already time to write another one of these? Phew, time flies. Sway marches
ever forward. Sway 0.14.0 was recently released, adding much asked-after support
for tray icons and fixing some long-standing bugs. As usual, we already have
some exciting features slated for 0.15.0 as well, notably some cool improvements
to clipboard support. Look forward to it!&lt;/p&gt;
&lt;p&gt;Today Sway has 24,123 lines of C (and 4,489 lines of header files) written by 94
authors across 2,345 commits. These were written through 689 pull requests and
624 issues. Sway packages are available today in the repos of almost every Linux
distribution.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/ICd5.png&#34;&gt;&lt;img src=&#34;https://sr.ht/ICd5.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those who are new to the project, &lt;a href=&#34;http://swaywm.org&#34;&gt;Sway&lt;/a&gt; is an
i3-compatible Wayland compositor. That is, your existing &lt;a href=&#34;http://i3wm.org/&#34;&gt;i3&lt;/a&gt;
configuration file will work as-is on Sway, and your keybindings and colors and
fonts and for_window rules and so on will all be the same. It&amp;rsquo;s i3, but for
Wayland, plus it&amp;rsquo;s got some bonus features. Here&amp;rsquo;s a quick rundown of what&amp;rsquo;s
new since the &lt;a href=&#34;./2017/04/29/State-of-sway-April-2017.html&#34;&gt;previous state of Sway&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initial support for tray icons&lt;/li&gt;
&lt;li&gt;X11/Wayland clipboard synchronization&lt;/li&gt;
&lt;li&gt;nvidia proprietary driver support*&lt;/li&gt;
&lt;li&gt;i3&amp;rsquo;s marks&lt;/li&gt;
&lt;li&gt;i3&amp;rsquo;s mouse button bindings&lt;/li&gt;
&lt;li&gt;Lots of i3 compatibility improvements&lt;/li&gt;
&lt;li&gt;Lots of documentation improvements&lt;/li&gt;
&lt;li&gt;Lots of bugfixes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If this seems like a shorter list than usual, it&amp;rsquo;s because we&amp;rsquo;ve also been
making great progress on wlroots too - no doubt thanks to the help of the many
contributors doing amazing work in there. For those unaware, wlroots is our
project to replace wlc with a new set of libraries for Wayland compositor
underpinnings (it fills a similar niche as libweston). We now have a working DRM
backend (including output rotation and hardware cursors) and libinput backend
(including touchscreen and drawing tablet support), and we&amp;rsquo;re making headway now
on drawing Wayland clients on screen.  I&amp;rsquo;m very excited about our pace and
direction - keep an eye on it
&lt;a href=&#34;https://github.com/SirCmpwn/wlroots/issues/9&#34;&gt;here&lt;/a&gt;. I have also taken over for
Cloudef as the maintainer of &lt;a href=&#34;https://github.com/Cloudef/wlc&#34;&gt;wlc&lt;/a&gt; during the
transition.&lt;/p&gt;
&lt;p&gt;In other news, our bounty program continues to go strong. Our &lt;a href=&#34;https://github.com/SirCmpwn/sway/issues/986&#34;&gt;current
pot&lt;/a&gt; is $1200 and we&amp;rsquo;ve paid out
$80 so far (and a $280 payout is on the horizon for tray icons). I&amp;rsquo;ve also
started a &lt;a href=&#34;https://www.patreon.com/sircmpwn&#34;&gt;Patreon page&lt;/a&gt;, where 26 patrons are
generously supporting my work as maintainer of Sway and other projects. Many
thanks to everyone who has contributed financially to Sway&amp;rsquo;s success!&lt;/p&gt;
&lt;p&gt;That wraps up today&amp;rsquo;s post. Thanks for using Sway!&lt;/p&gt;
&lt;p&gt;&lt;small class=&#34;text-muted&#34;&gt;* I hate this crappy driver. It works, but don&amp;rsquo;t
expect to receive much support for it. &lt;a
href=&#34;https://www.youtube.com/watch?v=iYWzMvlj2RQ&#34;&gt;Linus said it
best&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
</description>
    </item><item>
      <title>Archive it or you will miss it</title>
      <link>./2017/06/19/Archive-it-or-miss-it.html</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/06/19/Archive-it-or-miss-it.html</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s open with some quotes from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Link_rot&#34;&gt;Wikipedia article on link
rot&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In 2014, bookmarking site Pinboard&amp;rsquo;s owner Maciej Cegłowski reported a “pretty
steady rate” of 5% link rot per year&amp;hellip; approximately 50% of the URLs in
U.S. Supreme Court opinions no longer link to the original information&amp;hellip;
(analysis of) more than 180,000 links from references in&amp;hellip; three major open
access publishers&amp;hellip; found that overall 24.5% of links cited were no longer
available.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hate link rot. It&amp;rsquo;s been common when servers disappeared or domains expired,
in the past and still today. Today, link rot is on the rise under the influence
of more sinister factors. Abuse of DMCA. Region locking. Paywalls.  Maybe it
just no longer serves the interests of a walled garden to host the content.
Maybe the walled garden went out of business. Users rely on platforms to host
content and links rot by the millions when the platforms die. Movies disappear
from Netflix.  Music vanishes from Spotify. Accounts are banned from SoundCloud.
YouTube channels are banned over false DMCA requests issued by robots.&lt;/p&gt;
&lt;p&gt;At this point, link rot is an axiom of the internet. In the face of this, I
store a personal offline archive of &lt;em&gt;anything&lt;/em&gt; I want to see twice. When I see a
cool YouTube video I like, I archive the entire channel right away. Rather than
subscribe to it, I update my archive on a cronjob. I scrape content out of RSS
feeds and into offline storage and I have dozens of websites archived with wget.
I mirror most git repositories I&amp;rsquo;m interested in. I have DRM free offline copies
of all of my music, TV shows, and movies, ill-begotten or not.&lt;/p&gt;
&lt;p&gt;I suggest you do the same. It&amp;rsquo;s sad that it&amp;rsquo;s come to this. Let&amp;rsquo;s all do
ourselves a favor. Don&amp;rsquo;t build unsustainable platforms and ask users to trust
you with their data. Pay for your domain. Give people DRM free downloads. Don&amp;rsquo;t
cripple your software when it can&amp;rsquo;t call home. If you run a website, let
archive.org scrape it.&lt;/p&gt;
&lt;p&gt;And archive anything you want to see again.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 0 * * 0 cd ~/archives &amp;amp;&amp;amp; wget -m https://drewdevault.com
&lt;/code&gt;&lt;/pre&gt;</description>
    </item><item>
      <title>An introduction to Wayland</title>
      <link>./2017/06/10/Introduction-to-Wayland.html</link>
      <pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/06/10/Introduction-to-Wayland.html</guid>
      <description>&lt;p&gt;Wayland is the new hotness on the Linux graphics stack. There are plenty of
introductions to Wayland that give you the high level details on how the stack
is laid out how applications talk directly to the kernel with EGL and so on, but
that doesn&amp;rsquo;t give you much practical knowledge. I&amp;rsquo;d like to instead share with
you details about how the protocol actually works and how you can use it.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s set aside the idea that Wayland has anything to do with graphics. Instead
we&amp;rsquo;ll treat it like a generic protocol for two parties to share and talk about
resources. These resources are at the heart of the Wayland protocol - resources
like a keyboard or a surface to draw on. Each of these resources exposes an API
for engaging with it, including functions you can call and &lt;em&gt;events&lt;/em&gt; you can
listen to.&lt;/p&gt;
&lt;p&gt;Some of these resources are &lt;em&gt;globals&lt;/em&gt;, which are exactly what they sound like.
These resources include things like &lt;strong&gt;wl_outputs&lt;/strong&gt;, which are the displays
connected to your graphics card. Other resources, like &lt;strong&gt;wl_surface&lt;/strong&gt;, require
the client to ask the server to allocate new resources when needed. Negotiating
for new resources is generally possible through the API of some global resource.&lt;/p&gt;
&lt;p&gt;Your Wayland client gets started by obtaining a reference to the &lt;strong&gt;wl_display&lt;/strong&gt;
like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_display_connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This establishes a connection to the Wayland server. The most important role of
the display, from the client perspective, is to provide the &lt;strong&gt;wl_registry&lt;/strong&gt;.
The registry enumerates the globals available on the server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_registry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;registry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_display_get_registry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The registry emits an &lt;em&gt;event&lt;/em&gt; every time the server adds or removes a global.
&lt;em&gt;Listening&lt;/em&gt; to these events is done by providing an implementation of a
&lt;strong&gt;wl_registry_listener&lt;/strong&gt;, like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;global_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;our_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_registry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;registry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// TODO
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;global_remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;our_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_registry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;registry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// TODO
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_registry_listener&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;registry_listener&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;global_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;global_remove&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;global_remove&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Interfaces like this are used to listen to events from all kinds of resources.
Attaching the listener to the registry is done like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;our_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* arbitrary state you want to keep around */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;wl_registry_add_listener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;registry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;registry_listener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;our_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;wl_display_dispatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;During the &lt;code&gt;wl_display_dispatch&lt;/code&gt;, the &lt;code&gt;global_add&lt;/code&gt; function is called for each
global on the server. Subsequent calls to &lt;code&gt;wl_display_dispatch&lt;/code&gt; may call
&lt;code&gt;global_remove&lt;/code&gt; when the server destroys globals. The &lt;code&gt;name&lt;/code&gt; passed into
&lt;code&gt;global_add&lt;/code&gt; is more like an ID, and identifies this resource. The &lt;code&gt;interface&lt;/code&gt;
tells you what API the resource implements, and distinguishes things like a
&lt;strong&gt;wl_output&lt;/strong&gt; from a &lt;strong&gt;wl_seat&lt;/strong&gt;. The API these resources implement are
described with XML files like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- For copyright information, see https://git.io/vHyIB --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;protocol&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gamma_control&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;interface&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gamma_control_manager&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;version=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;request&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;destroy&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;destructor&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&#34;nt&#34;&gt;&amp;lt;request&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;get_gamma_control&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;new_id&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;interface=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gamma_control&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;interface=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wl_output&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/request&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;nt&#34;&gt;&amp;lt;interface&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gamma_control&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;version=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;enum&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;invalid_gamma&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/enum&amp;gt;&lt;/span&gt;

        &lt;span class=&#34;nt&#34;&gt;&amp;lt;request&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;destroy&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;destructor&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&#34;nt&#34;&gt;&amp;lt;request&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;set_gamma&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/request&amp;gt;&lt;/span&gt;

        &lt;span class=&#34;nt&#34;&gt;&amp;lt;request&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;reset_gamma&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&#34;nt&#34;&gt;&amp;lt;event&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gamma_size&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;uint&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/event&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/protocol&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A typical Wayland server implementing this protocol would create a
&lt;code&gt;gamma_control_manager&lt;/code&gt; global and add it to the registry. The client then binds
to this interface in our &lt;code&gt;global_add&lt;/code&gt; function like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;wayland-gamma-control-client-protocol.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gamma_control_manager.name is a constant: &amp;#34;gamma_control_manager&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strcmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gamma_control_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gamma_control_manager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mgr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;wl_registry_bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;registry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gamma_control_manager_interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gamma_control&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;control&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;gamma_control_manager_get_gamma_control&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mgr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;gamma_control_set_gamma&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;control&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These functions are generated by running the XML file through &lt;code&gt;wayland-scanner&lt;/code&gt;,
which outputs a header and C glue code. These XML files are called &amp;ldquo;protocol
extensions&amp;rdquo; and let you add arbitrary extensions to the protocol. The core
Wayland protocols themselves are described with similar XML files.&lt;/p&gt;
&lt;p&gt;Using the Wayland protocol to create a surface to display pixels with consists
of these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Obtain a &lt;strong&gt;wl_display&lt;/strong&gt; and use it to obtain a &lt;strong&gt;wl_registry&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Scan the registry for globals and grab a &lt;strong&gt;wl_compositor&lt;/strong&gt; and
a &lt;strong&gt;wl_shm_pool&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Use the &lt;strong&gt;wl_compositor&lt;/strong&gt; interface to create a &lt;strong&gt;wl_surface&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Use the &lt;strong&gt;wl_shell&lt;/strong&gt; interface to describe your surface&amp;rsquo;s role.&lt;/li&gt;
&lt;li&gt;Use the &lt;strong&gt;wl_shm&lt;/strong&gt; interface to allocate shared memory to store pixels in.&lt;/li&gt;
&lt;li&gt;Draw something into your shared memory buffers.&lt;/li&gt;
&lt;li&gt;Attach your shared memory buffers to the &lt;strong&gt;wl_surface&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s break this down.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;wl_compositor&lt;/strong&gt; provides an interface for interacting with the
&lt;em&gt;compositor&lt;/em&gt;, that is the part of the Wayland server that &lt;em&gt;composites&lt;/em&gt; surfaces
onto the screen. It&amp;rsquo;s responsible for creating surface resources for clients to
use via &lt;code&gt;wl_compositor_create_surface&lt;/code&gt;. This creates a &lt;strong&gt;wl_surface&lt;/strong&gt; resource,
which you can attach pixels to for the compositor to render.&lt;/p&gt;
&lt;p&gt;The role of a surface is undefined by default - it&amp;rsquo;s just a place to put pixels.
In order to get the compositor to do anything with them, you must give the
surface a &lt;em&gt;role&lt;/em&gt;. Roles could be anything - desktop background, system tray, etc -
but the most common role is a &lt;em&gt;shell surface&lt;/em&gt;. To create these, you take your
wl_surface and hand it to the &lt;strong&gt;wl_shell&lt;/strong&gt; interface. You&amp;rsquo;ll get back a
&lt;strong&gt;wl_shell_surface&lt;/strong&gt; resource, which defines your surface&amp;rsquo;s purpose and gives
you an interface to do things like set the window title.&lt;/p&gt;
&lt;p&gt;Attaching pixel buffers to a wl_surface is pretty straightforward. There are two
primary ways of creating a buffer that both you and the compositor can use: EGL
and shared memory. EGL lets you use an OpenGL context that renders directly on
the GPU with minimal compositor involvement (fast) and shared memory (via
&lt;strong&gt;wl_shm&lt;/strong&gt;) allows you to simply dump pixels in memory and hand them to the
compositor (flexible). There are many other Wayland interfaces I haven&amp;rsquo;t
covered, giving you everything from input devices (via &lt;strong&gt;wl_seat&lt;/strong&gt;) to clipboard
access (via &lt;strong&gt;wl_data_source&lt;/strong&gt;), plus many protocol extensions. Learning more
about these is an exercise left to the reader.&lt;/p&gt;
&lt;p&gt;Before we wrap this article up, let&amp;rsquo;s take a brief moment to discuss the server.
Most of the concepts here are already familiar to you by now. The Wayland server
also utilizes a &lt;strong&gt;wl_display&lt;/strong&gt;, but differently from the client. The display on
the server has ownership over the &lt;em&gt;event loop&lt;/em&gt;, via &lt;strong&gt;wl_event_loop&lt;/strong&gt;. The event
loop of a Wayland server might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_display_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_event_loop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event_loop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_display_get_event_loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wl_event_loop_dispatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event_loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The event loop has a lot of helpful utilities for the Wayland server to take
advantage of, including internal event sources, timers, and file descriptor
monitoring. Before starting the event loop the server is going to start
obtaining its own resources and creating Wayland globals for them with
&lt;code&gt;wl_global_create&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_global&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_global_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wl_output_interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* version */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;our_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wl_output_bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;wl_output_bind&lt;/code&gt; function here is going to be called when a client attempts
to bind to this resource via &lt;code&gt;wl_registry_bind&lt;/code&gt;, and will look something like
this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wl_output_bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;our_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;their_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wl_resource&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;wl_resource_create_checked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;wl_output_interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;their_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;our_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ...send output modes or whatever else you need to do
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some of the resources a server is going to be managing might include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DRM state for direct access to outputs&lt;/li&gt;
&lt;li&gt;GLES context (or another GL implementation) for rendering&lt;/li&gt;
&lt;li&gt;libinput for input devices&lt;/li&gt;
&lt;li&gt;udev for hotplugging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Through the Wayland protocol, the server provides an abstraction on top of these
resources and offers them to clients. Some servers go further, with novel ways
of compositing clients or handling input. Some provide additional interactivity,
such as desktop shells that are actually running in the compositor rather than
external clients. Other servers are designed for mobile use and provide a user
experience that more closely matches the mobile experience than the traditional
desktop experience. Wayland is designed to be flexible!&lt;/p&gt;
</description>
    </item><item>
      <title>Limited &#34;generics&#34; in C without macros or UB</title>
      <link>./2017/06/05/Limited-generics-in-C.html</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/06/05/Limited-generics-in-C.html</guid>
      <description>&lt;p&gt;I should start this post off by clarifying that what I have to show you today is
not, in fact, generics. However, it&amp;rsquo;s useful in some situations to solve the
same problems that generics might. This is a pattern I&amp;rsquo;ve started using to
reduce the number of &lt;code&gt;void*&lt;/code&gt; pointers floating around in my code: multiple
definitions of a struct.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Errata&lt;/strong&gt;: we rolled this approach back in wlroots because it causes problems
with LTO. I no longer recommend it.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at a specific example. In
&lt;a href=&#34;https://github.com/SirCmpwn/wlroots&#34;&gt;wlroots&lt;/a&gt;, &lt;code&gt;wlr_output&lt;/code&gt; is a generic type
that can be implemented by any number of backends, like DRM (direct rendering
manager), wayland windows, X11 windows, RDP outputs, etc. The &lt;code&gt;wlr/types.h&lt;/code&gt;
header includes this structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_impl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_impl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;impl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// [...]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wlr_output_enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wlr_output_set_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wlr_output_destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;wlr_output_impl&lt;/code&gt; is defined elsewhere:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_impl&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;wlr_output_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_impl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;impl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wlr_output_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nowhere, however, is &lt;code&gt;wlr_output_state&lt;/code&gt; defined. It&amp;rsquo;s left an incomplete type
throughout all of the common &lt;code&gt;wlr_output&lt;/code&gt; code. The &amp;ldquo;generic&amp;rdquo; part is that each
output implementation, in its own private headers, defines the
&lt;code&gt;wlr_output_state&lt;/code&gt; struct for itself, like the DRM backend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_state&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;crtc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;drmModeCrtc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old_crtc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_drm_renderer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;renderer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gbm_surface&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gbm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;EGLSurface&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;egl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pageflip_pending&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_drm_output_state&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// [...]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This allows implementations of the &lt;code&gt;enable&lt;/code&gt;, &lt;code&gt;set_mode&lt;/code&gt;, and &lt;code&gt;destroy&lt;/code&gt; functions
to avoid casting a &lt;code&gt;void*&lt;/code&gt; to the appropriate type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_impl&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output_impl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_drm_output_enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// [...]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wlr_drm_output_enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_backend_state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;wl_container_of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;renderer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;renderer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DRM_OUTPUT_CONNECTED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;drmModeConnectorSetProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dpms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;DRM_MODE_DPMS_ON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// [...]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;drmModeConnectorSetProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dpms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;DRM_MODE_DPMS_STANDBY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// [...]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wlr_output_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_impl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The limitations of this approach are apparent: you cannot work with multiple
definitions of &lt;code&gt;wlr_output_state&lt;/code&gt; in the same file. However, you get improved
type safety, have to write less code, and improve readability.&lt;/p&gt;
</description>
    </item><item>
      <title>Rotating passwords in bulk in the wake of security events</title>
      <link>./2017/05/11/Rotating-passwords.html</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/05/11/Rotating-passwords.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been putting this post off for a while. Do you remember the &lt;a href=&#34;https://blog.cloudflare.com/incident-report-on-memory-leak-caused-by-cloudflare-parser-bug/&#34;&gt;CloudFlare
security
problem&lt;/a&gt;
that happened a few months ago? This is the one that disclosed huge amounts of
sensitive information for huge numbers websites. When this happened, your
accounts on &lt;a href=&#34;https://github.com/pirate/sites-using-cloudflare&#34;&gt;thousands of
websites&lt;/a&gt; were potentially
compromised.&lt;/p&gt;
&lt;p&gt;Updating passwords for all of these services at once was a major source of
frustration for users. Updating a single password can take 5 minutes, and
changing dozens of them might take hours. I decided that I wanted to make this
process easier.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./pass-rotate github.com linode.com news.ycombinator.com twitter.com
Rotating github.com... 
  Enter your two factor (TOTP) code:
OK
Rotating linode.com... 
  Enter your two-factor (TOTP) code:
OK
Rotating news.ycombinator.com... OK
Rotating twitter.com... 
  Enter your SMS authorization code:
OK                                                                       
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I just changed 4 passwords in about 20 seconds. This is
&lt;a href=&#34;https://github.com/SirCmpwn/pass-rotate&#34;&gt;pass-rotate&lt;/a&gt;, which is basically
youtube-dl for rotating passwords. It integrates with your password manager to
make it easy to change your password. pass-rotate is also provided in the form
of a library that password managers can directly integrate with to provide
first-class support for password rotation with a shared implementation of
various websites. Not only can it help you rotate passwords after security
events, but it can be used for periodic password rotation to keep your accounts
safer in general.&lt;/p&gt;
&lt;p&gt;How this was basically done is by reverse engineering the password change flow of
each of the websites it supports. Each provider&amp;rsquo;s backend submits HTTP requests
that simulates logging into the website and interacting with the password reset
form. This is often quite simple, like
&lt;a href=&#34;https://github.com/SirCmpwn/pass-rotate/blob/master/passrotate/providers/github.py&#34;&gt;github.py&lt;/a&gt;,
but can sometimes be quite complex, like
&lt;a href=&#34;https://github.com/SirCmpwn/pass-rotate/blob/master/passrotate/providers/namecheap.py&#34;&gt;namecheap.py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The current list of supported services is available
&lt;a href=&#34;https://github.com/SirCmpwn/pass-rotate/wiki/Currently-supported-services&#34;&gt;here&lt;/a&gt;.
There&amp;rsquo;s also an issue to discuss making a standardized mechanism for automated
password rotation &lt;a href=&#34;https://github.com/SirCmpwn/pass-rotate/issues/1&#34;&gt;here&lt;/a&gt;. At
the time of writing, the list of supported services is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloudflare &lt;sub&gt;✗ TOTP&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Digital Ocean &lt;sub&gt;✗ TOTP&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Discord &lt;sub&gt;✓ TOTP&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;GitHub &lt;sub&gt;✓ TOTP ✗ U2F&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Linode &lt;sub&gt;✓ TOTP&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;NameCheap &lt;sub&gt;✓ SMS&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Pixiv&lt;/li&gt;
&lt;li&gt;Twitter &lt;sub&gt;✓ SMS ✓ TOTP&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;YCombinator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding new services is easy - check out &lt;a href=&#34;https://github.com/SirCmpwn/pass-rotate/blob/master/CONTRIBUTING.md&#34;&gt;the
guide&lt;/a&gt;. I
would be happy to merge your pull requests. Please add websites you use and
websites you maintain!&lt;/p&gt;
&lt;p&gt;I also set up a Patreon campaign today. If you&amp;rsquo;d like to contribute to my work,
please visit &lt;a href=&#34;https://patreon.com/sircmpwn&#34;&gt;the Patreon page&lt;/a&gt;. This supports all
of my open source projects, but if you want to support pass-rotate in
particular feel free to let me know when you make your contribution. This kind
of project needs long term maintenance to support countless providers and
keep up with changes to them. Feel free to let me know what service providers
you want me to add support for when you make your pledge!&lt;/p&gt;
</description>
    </item><item>
      <title>Building a &#34;real&#34; Linux distro</title>
      <link>./2017/05/05/Building-a-real-Linux-distro.html</link>
      <pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/05/05/Building-a-real-Linux-distro.html</guid>
      <description>&lt;p&gt;I recently saw a post on Hacker News: &amp;ldquo;&lt;a href=&#34;https://github.com/MichielDerhaeg/build-linux&#34;&gt;Build yourself a
Linux&lt;/a&gt;&amp;rdquo;, a cool project
that guides you through building a simple Linux system. It&amp;rsquo;s similar to Linux
from Scratch in that it helps you build a simple Linux system for personal use.
I&amp;rsquo;d like to supplement this with some insight into my experience with a more
difficult task: building a full blown Linux distribution. The result is
&lt;a href=&#34;http://agunix.org&#34;&gt;agunix&lt;/a&gt;, the &amp;ldquo;silver unix&amp;rdquo; system.&lt;/p&gt;
&lt;p&gt;For many years I&amp;rsquo;ve been frustrated with every distribution I&amp;rsquo;ve tried. Many of
them have compelling features and design, but there&amp;rsquo;s always a catch. The
popular distros are stable and portable, but cons include bloat, frequent use of
GNU, systemd, and often apt. Some more niche distros generally have good points
but often have some combination of GNU, an init system I don&amp;rsquo;t like, poor docs,
dynamic linking, or an overall amateurish or incomplete design. Many of them are
tolerable, but none have completely aligned with my desires.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also looked at not-Linux - I have plenty of beefs with the Linux kernel. I
like the BSD kernels, but I dislike the userspaces (though NetBSD is pretty good)
I like the microkernel design of Minix, but it&amp;rsquo;s too unstable and has shit
hardware support. plan9/9front has the most elegant kernel and userspace design
ever made, but it&amp;rsquo;s not POSIX and has shit hardware support. Though none of
these userspaces are for me, I intend to attempt a port of the agunix userspace
to all of their kernels at some point (a KFreeBSD port is underway).&lt;/p&gt;
&lt;p&gt;After trying a great number of distros and coming away with a kind of
dissatisfaction unique to each one, I resolved to make a distro that embodied my
own principles about userspace design. It turns out this is a ton of work -
here&amp;rsquo;s how it&amp;rsquo;s done.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s distinguish a Linux &amp;ldquo;system&amp;rdquo; from a Linux &amp;ldquo;distribution&amp;rdquo;. A Linux system
is anything that boots up from the Linux kernel. A Linux &lt;em&gt;distribution&lt;/em&gt;, on the
other hand, is a Linux system that can be &lt;em&gt;distributed&lt;/em&gt; to end users.  It&amp;rsquo;s this
sort of system that I wanted to build. In my opinion, there are two core
requirements for a Linux system to become a Linux distribution:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It has a package manager (or some other way of staying up to date)&lt;/li&gt;
&lt;li&gt;It is self-hosting (it can compile itself and all of the infrastructure runs
on it)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first order of business in creating a Linux distro is to fulfill these two
requirements. Getting to this stage is called &lt;em&gt;bootstrapping&lt;/em&gt; your distribution -
everything else can come later. To do this, you&amp;rsquo;ll need to port your package
manager to your current system, and start building the base packages with it.
If your new distro doesn&amp;rsquo;t use the same architecture or libc as your current
system, you also need to build a cross compiler and use it for building your
new packages.&lt;/p&gt;
&lt;p&gt;My initial approach was different - I used my cross compiler to fill up a chroot
with software without using my package manager, hoping to later bootstrap from
it. I used this approach on my first 3 attempts before deciding to make
base packages on the host system instead. With this approach, I started by
building packages that weren&amp;rsquo;t necessarily self hosting - they used the
host-specific cross compiler builds and such - but produced working packages for
the new environment. I built packages for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;my package manager&lt;/li&gt;
&lt;li&gt;musl libc&lt;/li&gt;
&lt;li&gt;bash&lt;/li&gt;
&lt;li&gt;busybox&lt;/li&gt;
&lt;li&gt;autotools&lt;/li&gt;
&lt;li&gt;make&lt;/li&gt;
&lt;li&gt;gcc (clang can&amp;rsquo;t compile the Linux kernel)&lt;/li&gt;
&lt;li&gt;vim&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also had to package all of the dependencies for these. Once I had a system
that was reasonably capable of compiling arbitrary software, I transferred my
PKGBUILDs (scripts used to build packages) to my chroot and started tweaking
them to re-build packages from the new distro itself. This process took months to
get completely right - there are &lt;em&gt;tons&lt;/em&gt; of edge cases and corner cases. Simply
getting this software to run in a new Linux system is only moderately difficult -
getting a system that can build itself is &lt;em&gt;much harder&lt;/em&gt;. I was successful on
my 4th attempt, but threw it out and redid it to get a cleaner distribution with
the benefit of hindsight. This became agunix.&lt;/p&gt;
&lt;p&gt;Once you reach this stage you can go ham on making packages for your system. The
next step for me was graduating from a chroot to dedicated hardware. I built out
an init system with runit and &lt;a href=&#34;http://git.agunix.org/init/&#34;&gt;agunix-init&lt;/a&gt; and
various other packages that are useful on a proper install. I also compiled a
kernel without support for loadable modules (on par with the static linking theme
of agunix). If you make your own Linux distribution you will probably have to
figure out modules yourself, likely implicating something like eudev.
Eventually, I was able to get agunix &lt;a href=&#34;https://sr.ht/OzCq.jpg&#34;&gt;running on my
laptop&lt;/a&gt;, which has now become my primary agunix dev
machine (often via SSH from my dev desktop).&lt;/p&gt;
&lt;p&gt;The next stage for me was getting agunix.org up and running on agunix. I
deliberately chose not to have a website until it could be hosted on agunix
itself. I deployed agunix to a VPS, then ported nginx and put the website up.
The rest of the infrastructure was a bit more difficult: cgit took me about 10
packages of work, and bugzilla was about 100 packages of work. Haven&amp;rsquo;t started
working on mailman yet.&lt;/p&gt;
&lt;p&gt;Then begins the eternal packaging phase. At this point you&amp;rsquo;ve successfully made
a Linux distribution, and now you just need to fill it with packages. This takes
&lt;em&gt;forever&lt;/em&gt;. I have made 407 packages to date and I still don&amp;rsquo;t have a desktop to
show for it (I&amp;rsquo;m &lt;em&gt;almost&lt;/em&gt; there, just have to make a few dozen more packages
before &lt;a href=&#34;https://github.com/SirCmpwn/sway&#34;&gt;sway&lt;/a&gt; will run). At this point to have
success you need others to buy into your ideas and start contributing - it&amp;rsquo;s
impossible to package everything yourself. Speaking of which, check out
&lt;a href=&#34;http://agunix.org&#34;&gt;agunix.org&lt;/a&gt; and see if you like it! I haven&amp;rsquo;t been doing
much marketing for this distro yet, but I do have a little bit of help. If
you&amp;rsquo;re interested in contributing in a new distro, we have lots of work for you
to do!&lt;/p&gt;
</description>
    </item><item>
      <title>State of Sway April 2017</title>
      <link>./2017/04/29/State-of-sway-April-2017.html</link>
      <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/04/29/State-of-sway-April-2017.html</guid>
      <description>&lt;p&gt;Development on Sway continues. I thought we would have slowed down a lot more by
now, but every release still comes with new features - Sway 0.12 added
redshift support and binary space partitioning layouts. Sway 0.13.0 is
coming soon and includes, among other things, nvidia proprietary driver support.
We already have some interesting features slated for Sway 0.14.0, too!&lt;/p&gt;
&lt;p&gt;Today Sway has 21,446 lines of C (and 4,261 lines of header files) written by 81
authors across 2,263 commits. These were written through 653 pull requests and
529 issues. Sway packages are available today in the official repos of pretty
much every distribution except for Debian derivatives, and a PPA is available
for those guys.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/ICd5.png&#34;&gt;&lt;img src=&#34;https://sr.ht/ICd5.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those who are new to the project, &lt;a href=&#34;http://swaywm.org&#34;&gt;Sway&lt;/a&gt; is an
i3-compatible Wayland compositor. That is, your existing &lt;a href=&#34;http://i3wm.org/&#34;&gt;i3&lt;/a&gt;
configuration file will work as-is on Sway, and your keybindings and colors and
fonts and for_window rules and so on will all be the same. It&amp;rsquo;s i3, but for
Wayland, plus it&amp;rsquo;s got some bonus features. Here&amp;rsquo;s a quick rundown of what&amp;rsquo;s
new since the &lt;a href=&#34;./2016/12/27/State-of-sway.html&#34;&gt;previous state of Sway&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redshift support&lt;/li&gt;
&lt;li&gt;Improved security configuration&lt;/li&gt;
&lt;li&gt;Automatic binary space partitioning layouts ala AwesomeWM&lt;/li&gt;
&lt;li&gt;Support for more i3 window criterion&lt;/li&gt;
&lt;li&gt;Support for i3 marks&lt;/li&gt;
&lt;li&gt;xdg_shell v6 support (Wayland thing, makes more native Wayland programs work)&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ve switched from X.Y to X.Y.Z releases, Z releases shipping bugfixes while
the next Y release is under development&lt;/li&gt;
&lt;li&gt;Lots of i3 compatibility improvements&lt;/li&gt;
&lt;li&gt;Lots of documentation improvements&lt;/li&gt;
&lt;li&gt;Lots of bugfixes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new &lt;a href=&#34;https://github.com/SirCmpwn/sway/issues/986&#34;&gt;bounty program&lt;/a&gt; has also
raised $1,200 to support Sway development! Several bounties have been awarded,
including redshift support and i3 marks, but every awardee chose to redonate
their reward to the bounty pool. Thanks to everyone who&amp;rsquo;s donated and everyone
who&amp;rsquo;s worked on new features! Bounties have also been awarded for features in
the Wayland ecosystem beyond Sway - a fact I&amp;rsquo;m especially proud of. If you want
a piece of that $1,200 pot, &lt;a href=&#34;http://webchat.freenode.net/?channels=sway&amp;amp;uio=d4&#34;&gt;join us on
IRC&lt;/a&gt; and we&amp;rsquo;ll help you get started.&lt;/p&gt;
&lt;p&gt;Many new developments are in the pipeline for you. 0.13.0 is expected to
ship within the next few weeks - &lt;a href=&#34;https://github.com/SirCmpwn/sway/issues/1162#issuecomment-295012255&#34;&gt;here&amp;rsquo;s a sneak peek at the
changelog&lt;/a&gt;.
In the future releases, development is ongoing for tray icons (encouraged by the
sweet $270 bounty sitting on that feature), and several other features for
0.14.0 have been completed. We&amp;rsquo;ve also started work on a long term project to
replace our compositor plumbling library, wlc, with a new one:
&lt;a href=&#34;https://github.com/SirCmpwn/wlroots&#34;&gt;wlroots&lt;/a&gt;. This should allow us to fix many
of the more difficult bugs in Sway, and opens the doors for &lt;em&gt;many&lt;/em&gt; features that
weren&amp;rsquo;t previously possible. It should also give us a platform on which we can
build standard protocols that other compositors can implement, unifying the
Wayland platform a bit more.&lt;/p&gt;
&lt;p&gt;Many thanks to &lt;a href=&#34;https://github.com/SirCmpwn/sway/graphs/contributors&#34;&gt;everyone that&amp;rsquo;s contributed to
sway&lt;/a&gt;! There&amp;rsquo;s no way Sway
would have enjoyed its success without your help. That wraps things up for
today, thanks for using Sway and look forward to Sway 1.0!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Note: future posts like this will omit some of the stats that were included in
the previous posts. You can use the following commands to find them for
yourself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Lines of code per author:&lt;/span&gt;
git ls-tree -r -z --name-only HEAD -- */*.c &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs -0 -n1 git blame --line-porcelain HEAD &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep  &lt;span class=&#34;s2&#34;&gt;&amp;#34;^author &amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; uniq -c &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort -nr
&lt;span class=&#34;c1&#34;&gt;# Commits per author:&lt;/span&gt;
git shortlog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item><item>
      <title>MSG_PEEK is pretty common, CVE-2016-10229 is worse than you think</title>
      <link>./2017/04/13/MSG_PEEK-is-more-common-than-you-think-CVE-2016-10229.html</link>
      <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/04/13/MSG_PEEK-is-more-common-than-you-think-CVE-2016-10229.html</guid>
      <description>&lt;p&gt;I heard about &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2016-10229&#34;&gt;CVE-2016-10229&lt;/a&gt;
earlier today. In a nutshell, it allows for arbitrary code execution via UDP
traffic if userspace programs are using &lt;code&gt;MSG_PEEK&lt;/code&gt; in their &lt;code&gt;recv&lt;/code&gt; calls. I
quickly updated my kernels and rebooted any boxes where necessary, but when I
read the discussions on this matter I saw people downplaying this issue by
claiming &lt;code&gt;MSG_PEEK&lt;/code&gt; is an obscure feature.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t want to be a fear monger and I&amp;rsquo;m by no means a security expert but I
suspect that this is a deeply incorrect conclusion. If I understand this
vulnerability right you need to drop everything and update any servers running
a kernel &amp;lt;4.5 &lt;em&gt;immediately&lt;/em&gt;. &lt;code&gt;MSG_PEEK&lt;/code&gt; allows a programmer using UDP to
read from the kernel&amp;rsquo;s UDP buffer without consuming the data (so subsequent
reads will continue to read the same data). This immediately sounds to me like
a pretty useful feature that a lot of software might use, not an obscure one.&lt;/p&gt;
&lt;p&gt;I did quick search for software where &lt;code&gt;MSG_PEEK&lt;/code&gt; appears in the source code
somewhere. This does not necessarily mean that it&amp;rsquo;s exploitable, but should
certainly raise red flags. Here&amp;rsquo;s a list of some notable software I found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;haproxy&lt;/li&gt;
&lt;li&gt;curl&lt;/li&gt;
&lt;li&gt;gnutls&lt;/li&gt;
&lt;li&gt;jack2&lt;/li&gt;
&lt;li&gt;lynx&lt;/li&gt;
&lt;li&gt;plex (and kodi/xbmc)&lt;/li&gt;
&lt;li&gt;busybox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also found a few things like programming languages and networking libraries
that you might expect to have MSG_PEEK if only to provide that functionality to
programmers leveraging them. I didn&amp;rsquo;t investigate too deeply into whether or not
that was the case or if this software is using the feature in a less apparent
way, but in this category I found Python, Ruby, Node.js, smalltalk, octave,
libnl, and socat. I used searchcode.com to find these - &lt;a href=&#34;https://searchcode.com/?q=MSG_PEEK&#34;&gt;here&amp;rsquo;s the full search
results&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Again, I&amp;rsquo;m not a security expert, but I&amp;rsquo;m &lt;em&gt;definitely&lt;/em&gt; spooked enough to update
my shit and I suggest you do so as well. Red Hat, Debian, and Ubuntu are all
unaffected because of the kernel they ship. Note, however, that many cloud
providers do not let you choose your own kernel. This could mean that you are
affected even if you&amp;rsquo;re running a distribution like Debian. Double check it -
use &lt;code&gt;uname -r&lt;/code&gt; and update+reboot if necessary.&lt;/p&gt;
</description>
    </item><item>
      <title>Principles for C programming</title>
      <link>./2017/03/15/How-I-learned-to-stop-worrying-and-love-C.html</link>
      <pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/03/15/How-I-learned-to-stop-worrying-and-love-C.html</guid>
      <description>&lt;p&gt;In the words of Doug Gwyn, &amp;ldquo;Unix was not designed to stop you from doing stupid
things, because that would also stop you from doing clever things&amp;rdquo;. C is a very
powerful tool, but it is to be used with care and discipline. Learning this
discipline is well worth the effort, because C is one of the best programming
languages ever made. A disciplined C programmer will&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prefer maintainability&lt;/strong&gt;. Do not be clever where cleverness is not required.
Instead, seek out the simplest and most understandable solution that meets the
requirements. Most concerns, including performance, are secondary to
maintainability. You should have a performance budget for your code, and you
should be comfortable spending it.&lt;/p&gt;
&lt;p&gt;As you become more proficient with the language and learn about more features
you can take advantage of, you should also be learning when not to use them.
It&amp;rsquo;s more important that a novice could understand your code than it is to use
some interesting way of solving the problem. Ideally, a novice will understand
your code &lt;em&gt;and&lt;/em&gt; learn something from it. Write code as if the person maintaining
it was you, circa last year.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Avoid magic&lt;/strong&gt;. Do not use macros&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Do not use a typedef to hide a pointer or
avoid writing &amp;ldquo;struct&amp;rdquo;. Avoid writing complex abstractions. Keep your build
system simple and transparent. Don&amp;rsquo;t use stupid hacky crap just because it&amp;rsquo;s a
cool way of solving the problem. The underlying behavior of your code should be
apparent even without context.&lt;/p&gt;
&lt;p&gt;One of C&amp;rsquo;s greatest advantages is its transparency and simplicity. This should
be embraced, not subverted. But in the fine C tradition of giving yourself
enough rope to hang yourself with, you can use it for magical purposes. You
must not do this. Be a muggle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recognize and avoid dangerous patterns&lt;/strong&gt;. Do not use fixed size buffers with
variable sized data - always calculate how much space you&amp;rsquo;ll need and allocate
it. Read the man pages for functions you use and handle their failure modes.
Immediately convert unsafe user input into sanitized C structures. If you later
have to present this data to the user, keep it in C structures until the last
possible moment. Learn of and use extra care around sensitive functions like
strcat.&lt;/p&gt;
&lt;p&gt;Writing C is sometimes like handling a gun. Guns are important tools, but
accidents with them can be very bad. You treat guns with care: you don&amp;rsquo;t point
them at anything you love, you exercise good trigger discipline, and you treat
it like it&amp;rsquo;s always loaded. And like guns are useful for making holes in things,
C is useful for writing kernels with.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Take care organizing the code&lt;/strong&gt;. Never put code into a header. Never use the
&lt;code&gt;inline&lt;/code&gt; keyword. Put separate concerns in separate files. Use static functions
liberally to organize your logic. Use a coding style that gives everything
enough breathing room to be easy on the eyes. Use single letter variable names
when their purpose is self-evident and descriptive names when it&amp;rsquo;s not, and
avoid neither.&lt;/p&gt;
&lt;p&gt;I like to organize my code into directories that implement some group of
functions, and give each function its own file. This file will often contain
lots of static functions, but they all serve to organize the behavior this file
is responsible for implementing. Write up a header to give others access to
this module. And use the Linux kernel coding style, god dammit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use only standard features&lt;/strong&gt;. Do not assume the platform is Linux. Do not
assume the compiler is gcc. Do not assume the libc is glibc. Do not assume the
architecture is x86. Do not assume the coreutils are GNU. Do not define
_GNU_SOURCE.&lt;/p&gt;
&lt;p&gt;If you must use platform-specific features, describe an interface for it,
then write platform-specific support code separately. Under no circumstances
should you ever use gcc extensions or glibc extensions. GNU is a blight on this
Earth, do not let it infect your code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use a disciplined workflow&lt;/strong&gt;. Have a disciplined approach to version control,
too. Write thoughtful commit messages - briefly explain the change in the first
line, and add justification for it in the extended commit message. Work in
feature branches with clearly defined goals, and do not include changes that
don&amp;rsquo;t serve that goal. Do not be afraid to rebase and edit your branch&amp;rsquo;s history
so that it presents your changes clearly.&lt;/p&gt;
&lt;p&gt;When you have to return to your code later, you will be thankful for the
detailed commit message you wrote. Others who interact with your code will be
thankful for this as well. When you see some stupid code, it&amp;rsquo;s nice to know what
the bastard was thinking at the time, especially when the bastard in question
was you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do strict testing and reviews&lt;/strong&gt;. Identify the different possible code paths
that your changes may take. Test each of them for the correct behavior. Give it
incorrect input. Give it inputs that could &amp;ldquo;never happen&amp;rdquo;. Pay special attention
to error-prone patterns. Look for places to simplify the code and make the
processes clearer.&lt;/p&gt;
&lt;p&gt;Next, give your changes to another human to review. This human should apply the
same process and sign off on your changes. Review with discipline as well,
taking all of the same steps. Review like it&amp;rsquo;ll be your ass on the line if
there&amp;rsquo;s a problem with this code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learn from mistakes&lt;/strong&gt;. First, fix the bug. Then, fix the real bug: your
process allowed this mistake to happen. Bring your code reviewer into the
discussion - this is their fault, too. Critically examine the process of
writing, reviewing, and deploying this code, and seek out the root cause.&lt;/p&gt;
&lt;p&gt;The solution might be simple, like adding strcat to the list of functions that
should trigger your &amp;ldquo;review this code carefully&amp;rdquo; reflex. It might be employing
static analysis so a computer can detect this problem for you. Perhaps the code
needs to be refactored so it&amp;rsquo;s simpler and easier to spot errors in. Failing to
reflect on how to avoid future fuck-ups would be the real fuck-up here.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;It&amp;rsquo;s important to remember that rules are made to be broken. There may be cases
where things that are discouraged should be used, and things that are encouraged
disregarded. You should strive to make such cases the exception, not the norm,
and carefully justify them when they happen.&lt;/p&gt;
&lt;p&gt;C is the shit. I love it, and I hope more people can learn to see it the way I
do. Good luck!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Defining constants with them is fine, though &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Compiler devnotes: Machine specs</title>
      <link>./2017/02/22/cozy-devnotes-machine-specs.html</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/02/22/cozy-devnotes-machine-specs.html</guid>
      <description>&lt;p&gt;I have a number of long-term projects that I plan for on long timelines, on the
order of decades or more. One of these projects is cozy, a C toolchain. I
haven&amp;rsquo;t talked about this project in public before, so I&amp;rsquo;ll start by introducing
you to the project. The main C toolchains in the &amp;ldquo;actually usable&amp;rdquo; category are
GNU and LLVM, but I&amp;rsquo;m satisfied with neither and I want to build my own
toolchain. I see no reason why compilers should be deep magic. Here are my goals
for cozy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Self hosting and written in C&lt;/li&gt;
&lt;li&gt;An easy to grok codebase and internal design&lt;/li&gt;
&lt;li&gt;Focused on C. No built-in support for other languages&lt;/li&gt;
&lt;li&gt;Adding new targets architectures and ports should be straightforward&lt;/li&gt;
&lt;li&gt;Modular build pipeline with lots of opportunities for external integrations&lt;/li&gt;
&lt;li&gt;Trivially cross-compiles without building another version of the toolchain&lt;/li&gt;
&lt;li&gt;Includes a decent optimizer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some other plans include opinionated warnings about code and minimal support for
language extensions. Ambitious goals, right? That&amp;rsquo;s why this project is on my
long-term schedule. I&amp;rsquo;ve found that large projects are entirely feasible, so
long as you (1) start them and (2) keep working on them for a long time. I don&amp;rsquo;t
need to rush this - gcc and clang may not be ideal, but they work today. In
support of these goals, I&amp;rsquo;ll be writing these dev notes to explain my design
choices and gather feedback — please &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;email me&lt;/a&gt; if
you have some!&lt;/p&gt;
&lt;p&gt;Since I want to place an emphasis on portability and retargetability, I&amp;rsquo;m
starting by designing the machine spec and its support code, which is used to
add support for new architectures. I don&amp;rsquo;t like gcc&amp;rsquo;s lisp specs, and I &lt;em&gt;really&lt;/em&gt;
don&amp;rsquo;t like LLVM&amp;rsquo;s &amp;ldquo;huge pile of C++&amp;rdquo; approach. I think a really good machine
spec meets these goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy to write and human friendly&lt;/li&gt;
&lt;li&gt;More about data than code, but&lt;/li&gt;
&lt;li&gt;Easily extended with C to support architecture-specific nuances&lt;/li&gt;
&lt;li&gt;Provides loads of useful metadata about the target architecture&lt;/li&gt;
&lt;li&gt;Exposes information about the speed and side-effects of each instruction&lt;/li&gt;
&lt;li&gt;Can also be used to generate an assembler and disassembler&lt;/li&gt;
&lt;li&gt;Easily reused to create derivative architectures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding a new architecture should be a weekend project, and when you&amp;rsquo;re done the
entire toolchain should both support and run on your new architecture. I set out
to come up with a new syntax that could potentially meet these goals. I started
with the Z80 architecture in mind because it&amp;rsquo;s simple, I&amp;rsquo;m intimately familiar
with it, and I want cozy to be able to target 8-bit machines just as easily as
32 or 64 bit.&lt;/p&gt;
&lt;p&gt;For reference, here are the gcc and LLVM guides on adding new targets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gccint/Back-End.html&#34;&gt;gcc - Anatomy of a Target Back End&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/WritingAnLLVMBackend.html&#34;&gt;Writing an LLVM Backend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The cozy machine spec is a cross between ini files, yaml, and a custom syntax.
The format is somewhat complex, but once understood is intuitive and flexible.
At the top level, it looks like an ini file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;metadata]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;registers]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;macros]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;instructions]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;metadata&#34;&gt;Metadata&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;metadata&lt;/strong&gt; section contains some high-level information about the
architecture design, and is the simplest section to understand. It currently
looks like this for z80:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;metadata]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;z80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endianness&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;little&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;signedness&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;twos-complement&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pipeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This isn&amp;rsquo;t comprehensive, and I&amp;rsquo;ll be adding more metadata as it becomes
necessary. On LLVM, this sort of information is encoded into a string that looks
something like this: &lt;code&gt;&amp;quot;e-p:16:8:8-i8:8:8-i16:8:8-n8:16&amp;quot;&lt;/code&gt;. This string is passed
into the &lt;code&gt;LLVMTargetMachine&lt;/code&gt; base constructor in C++. I think we can do a hell
of a lot better than that!&lt;/p&gt;
&lt;h3 id=&#34;registers&#34;&gt;Registers&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;registers&lt;/strong&gt; section describes the registers on this architecture.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;registers]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;BC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; offset=8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;DE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; offset=8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;HL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; offset=8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; stack&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; program&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we can start to see some interesting syntax and get an idea of the design
of cozy machine specs. The contents of each section are keys, which have values,
attributes, and children. The format looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value; attributes, ...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;children...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, we&amp;rsquo;ve defined the BC, DE, HL, SP, and PC registers. HL, DE, and
BC are general purpose 16-bit registers, and each can also be used as two
separate 8-bit registers. The attributes for these sub-registers indicates their
offsets in the parent register. We also define the stack and program registers,
SP and PC, which use the stack and program attributes to indicate their special
purposes.&lt;/p&gt;
&lt;p&gt;We can also describe CPU flags in this section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;registers]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;AF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; special&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; accumulator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; flags, offset 8;; flag&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;_C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;_N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; offset 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;_PV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; offset 2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;_3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; offset 3, undocumented&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;_H&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; offset 4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;_5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; offset 5, undocumented&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;_Z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; offset 6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;_S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; offset 7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we introduce another feature of cozy specs with &lt;code&gt;F: 8; flags, offset 8;; flag&lt;/code&gt;. Using &lt;code&gt;;;&lt;/code&gt; adds those attributes to all children of this key, so each of
_C, _N, etc have the &lt;code&gt;flag&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;Take note of the &amp;ldquo;undocumented&amp;rdquo; attribute here. Some of the metadata included
in a spec can be applied to cozy tools. Some of it, however, is there for other
tools to utilize. We have a good opportunity to make a machine-readable
description of the architecture, so I&amp;rsquo;ve opted to include a lot of extra details
in machine specs that third parties could utilize (though there might be a
-fno-undocumented compiler flag some day, I guess).&lt;/p&gt;
&lt;h3 id=&#34;macros&#34;&gt;Macros&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;macros&lt;/strong&gt; section is heavily tied to the instructions section. Most instruction
sets are quite large, and I don&amp;rsquo;t want to burden spec authors with writing out
the entire thing. We can speed up their work by providing macros.&lt;/p&gt;
&lt;p&gt;z80 instructions have a few sets of common patterns in their encodings. Register
groups are often represented by the same set of bits, and we can make our
instruction set specification more concise by taking advantage of this. For
example, here&amp;rsquo;s a macro that we can use for instructions that can use either the
BC, DE, HL, or SP registers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;macros]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;reg_BCDEHLSP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;BC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;DE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;HL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have the name of the macro as the top-level key, in this case &lt;code&gt;reg_BCDEHLSP&lt;/code&gt;.
We can later refer to this macro with &lt;code&gt;@reg_BCDEHLSP&lt;/code&gt;. Then, we have each of the
cases it can match on, and the binary values these correspond to when encoded in
an instruction.&lt;/p&gt;
&lt;h3 id=&#34;instructions&#34;&gt;Instructions&lt;/h3&gt;
&lt;p&gt;The instructions section brings everything together and defines the actual
instructions available on this architecture. Instructions can be organized into
groups at the spec author&amp;rsquo;s pleasure, which can be referenced by derivative
architectures. Here we can take a look at the &amp;ldquo;load&amp;rdquo; group:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;instructions]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;.load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;@reg_BCDEHLSP, @imm[16]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;$1 0001 $2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On z80, the &lt;code&gt;ld&lt;/code&gt; instruction is similar to the &lt;code&gt;mov&lt;/code&gt; instruction on Intel
architectures. It assigns the second argument to the first. This could be used
to assign registers to each other (e.g. &lt;code&gt;ld a, b&lt;/code&gt; to set A = B), to set
registers to constants, and so on. Our example here uses our macro from earlier
to match instructions like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ld hl, 0x1234
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The value for this key may reference the arguments with variables. $1 here
equals &lt;code&gt;10&lt;/code&gt;, from the macro. The &lt;code&gt;imm&lt;/code&gt; built-in is implemented in C to match
constants and provides $2. An assembler could use this information to assemble
our example instruction into this machine code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;00100001 00110100 00010010
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will load HL with the value 0x1234 when executed.&lt;/p&gt;
&lt;h3 id=&#34;lots-more-metadata&#34;&gt;Lots more metadata&lt;/h3&gt;
&lt;p&gt;Now that we have the basics down, let&amp;rsquo;s dive into some deeper details. Cozy
specs are designed to provide most of the information the &lt;em&gt;entire toolchain&lt;/em&gt;
needs to support an architecture. The information we have so far could be used
to generate assemblers and disassemblers, but I want this file to be able to
generate things like optimizers as well. You can add the necessary metadata to
each instruction by utilizing attributes.&lt;/p&gt;
&lt;p&gt;Consider the z80 instruction LDIR, which stands for
&amp;ldquo;load/decrement/increment/repeat&amp;rdquo;. This instruction is used for memcpy
operations. To use it, you set the HL register to a source address, the DE
register to a destination address, and BC to a length. This instruction looks
like this in the spec:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;ldir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11101101&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10110000&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;; uses[HL, DE, BC], \&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;affects[HL[+BC], DE[+BC], BC[0]], \&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;flags[_H:0,_N:0,_PV:0], cycles[16 + BC * 5]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s a lot of attributes! The purpose of these attributes are to give the
toolchain insights into the registers this instruction uses, its side effects,
and how fast it is. These attributes can help us compare the efficiency of
different approaches and understand the how the state of registers evolves
during a function, which leads to all sorts of useful optimizations.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;affects&lt;/code&gt; attribute, for example, tells us how each register is affected by
this instruction. We can see that after this instruction, HL and DE will have
had BC added to them, and BC will have been set to 0. We can make all sorts of
optimizations based on this knowledge. Here are some examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The compiler can assign &lt;code&gt;src&lt;/code&gt; to HL, &lt;code&gt;dest&lt;/code&gt; to DE, and &lt;code&gt;len&lt;/code&gt; to BC. We can then
optimize out the final statement entirely because we know that the LDIR
instruction will have already added BC to HL for us.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foobar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, the register allocator can just assign BC to &lt;code&gt;foobar&lt;/code&gt; and avoid
initializing it because we know it&amp;rsquo;s already going to be zero. Many other
optimizations are made possible when we are keeping track of the side effects of
each instruction.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve iterated over this spec design for a while now, and I&amp;rsquo;m pretty happy with
it. I would love to hear your feedback. Assuming that this looks good, my next
step is writing more specs, and a tool that parses and compiles them to C. These
C files are going to be linked into &lt;code&gt;libcozyspec&lt;/code&gt;, which will provide an API to
access all of this metadata from C. It will also include an instruction matcher,
which will be utilized by the next step - writing the assembler.&lt;/p&gt;
&lt;p&gt;The assembler is going to take a while, because I don&amp;rsquo;t want to go the gas route
of making a half-baked assembler that&amp;rsquo;s more useful for compiling the C
compiler&amp;rsquo;s output than for anything else. I want to make an assembler that
assembly programmers would &lt;em&gt;want&lt;/em&gt; to use.&lt;/p&gt;
&lt;p&gt;I have not yet designed an intermediate bytecode for the compiler to use, but
one will have to be made. The machine spec will likely change somewhat to
accommodate this. Some of the conversion from internal bytecode to target
assembly can likely be inferred from metadata, but some will have to be done
manually for each architecture.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/7_Pe.txt&#34;&gt;Here&amp;rsquo;s the entire z80 spec&lt;/a&gt; I&amp;rsquo;ve been working on, for
your reading pleasure.&lt;/p&gt;
</description>
    </item><item>
      <title>Lessons to learn from C</title>
      <link>./2017/01/30/Lessons-to-learn-from-C.html</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/01/30/Lessons-to-learn-from-C.html</guid>
      <description>&lt;p&gt;C is my favorite language, though I acknowledge that it has its warts. I&amp;rsquo;ve
tried looking at languages people hope will replace C (Rust, Go, etc), and
though they&amp;rsquo;ve improved on some things they won&amp;rsquo;t be supplanting C in my life
any time soon. I&amp;rsquo;ll share with you what makes C a great language to me. Take
some of these things as inspiration for the next C replacement you write.&lt;/p&gt;
&lt;p&gt;First of all, it&amp;rsquo;s important to note that I&amp;rsquo;m talking about the language, not
its standard library. The C standard library isn&amp;rsquo;t &lt;em&gt;awful&lt;/em&gt;, but it certainly
leaves a lot to be desired. I also want to place a few limitations on the kind
of C we&amp;rsquo;re talking about - you can write bad code in any language, and C is no
different. For the purpose of argument, let&amp;rsquo;s assume the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C99 minimum&lt;/li&gt;
&lt;li&gt;Absolutely no code in headers - just type definitions and function prototypes&lt;/li&gt;
&lt;li&gt;Minimal use of typedefs&lt;/li&gt;
&lt;li&gt;No macros&lt;/li&gt;
&lt;li&gt;No compiler extensions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hold myself to these guidelines when writing C, and it is from this basis that
I compare other languages with C. It&amp;rsquo;s not useful to compare bad C to another
language, because I wouldn&amp;rsquo;t want to write bad C either.&lt;/p&gt;
&lt;p&gt;Much of what I like about C boils down to this: &lt;strong&gt;C is simple&lt;/strong&gt;. The ultimate
goal of any system should be to attain the simplest solution for the problems it
faces. C prefers to be conservative with new features. The lifetime of a feature
in Rust, for example, from proposal to shipping is generally 0 to 6 months. The
same process in C can take up to 10 years. C is a venerable language, and has
already long since finished adding core features. It is stable, simple, and
reliable.&lt;/p&gt;
&lt;p&gt;To this end, language features map closely to behaviors common to most CPUs. C
strikes a nearly perfect balance of usability versus simplicity, which
results in a small set of features that are easy to reason about. A C expert
could roughly predict the assembly code produced by their compiler (assuming
&lt;code&gt;-O0&lt;/code&gt;) for any given C function. It follows that C compilers are easy to write
and reason about.&lt;/p&gt;
&lt;p&gt;The same person would also be able to give you a rough idea of the
performance characteristics of that function, pointing out things like cache
misses and memory accesses that are draining on speed, or giving you a precise
understanding of how the function handles memory. If I look at a function in
other languages, it&amp;rsquo;s much more difficult to discern these things with any
degree of precision without actually compiling the code and looking at the
output.&lt;/p&gt;
&lt;p&gt;The compiler also integrates very comfortably with the other tools near it, like
the assembler and linker. Symbols in C map 1:1 to symbols in the object files,
which means linking objects together is simple and easily reasoned about. It
also makes interop with other languages and tools straightforward - there&amp;rsquo;s a
reason every language has a means of writing C bindings, but not generally C++
bindings. The use of headers to declare external symbols and types is also nicer
than some would have you believe, since it gives you an opportunity to organize
and document your API.&lt;/p&gt;
&lt;p&gt;C is also the most portable programming language in the world. Every operating
system on every architecture has a C compiler, and they weren&amp;rsquo;t really
considered a viable platform until it did. Once you have a C compiler you
generally have everything else, because everything else was either written in C
or was written in a language that was implemented in C. I can write C programs
on/for Linux, Windows, BSD, Minix, plan9, and a dozen other niche operating
systems, or even no operating system, on pretty much any CPU architecture I
want. No other language supports nearly as many platforms as C does.&lt;/p&gt;
&lt;p&gt;With these benefits acknowledged, there are some things C could do better. The
standard library is one of them, but we can talk about that some other time.
Another is generics; using void* all the time isn&amp;rsquo;t good. Some features from
other languages would be nice - I would take something similar to Rust&amp;rsquo;s match
keyword. Of course, the fragility of memory management in C is a concern that
other languages are wise to address. Undefined behavior is awful.&lt;/p&gt;
&lt;p&gt;Even for all of these warts, however, the basic simplicity and elegance of C
keeps me there. I would love to see a language that fixes these problems without
trying to be the kitchen sink, too.&lt;/p&gt;
&lt;p&gt;In short, I like C because &lt;strong&gt;C is simple&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item><item>
      <title>The only problem with Python 3&#39;s str is that you don&#39;t grok it</title>
      <link>./2017/01/13/The-problem-with-Python-3.html</link>
      <pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/01/13/The-problem-with-Python-3.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve found myself explaining Python 3&amp;rsquo;s str to people online more and more often
lately. There&amp;rsquo;s this ridiculous claim about that Python 3&amp;rsquo;s string handling is
broken or somehow worse than Python 2, and today I intend to put that myth to
rest.  Python 2 strings are broken, and Python 3 strings are sane. The only
problem is that you don&amp;rsquo;t grok strings.&lt;/p&gt;
&lt;p&gt;The basic problem many people seem to have with Python 3&amp;rsquo;s strings arises when
they write code that treats bytes like a string, because that&amp;rsquo;s how it was in
Python 2. Let me make this as clear as possible:&lt;/p&gt;
&lt;div class=&#34;loud&#34;&gt;a bytes is not a string&lt;/div&gt;
&lt;style&gt;
.loud {
    font-size: 14pt;
    font-weight: bold;
    text-align: center;
    margin-bottom: 1rem;
}
&lt;/style&gt;
&lt;p&gt;I want you to read that, over and over again, until it sinks in. A string is
basically an array of characters (characters being Unicode codepoints), whereas
bytes is an array of bytes, aka octets, aka unsigned 8 bit integers. That&amp;rsquo;s
right - bytes is an array of unsigned 8 bit integers, or as the name would
imply, bytes.  If you &lt;em&gt;ever&lt;/em&gt; do string operations against bytes, you are Doing
It Wrong because bytes are not strings.&lt;/p&gt;
&lt;div class=&#34;loud&#34;&gt;a bytes is not a string&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s entirely possible that your bytes contains an &lt;em&gt;encoded representation&lt;/em&gt; of a
string. That encoding could be ASCII, UTF-8, UTF-32, etc. These encodings are
means of representing strings as bytes, aka unsigned 8 bit integers. In order to
treat it like a string, you first must &lt;em&gt;decode&lt;/em&gt; it. Luckily Python 3 makes this
painless: &lt;code&gt;bytes.decode()&lt;/code&gt;. This defaults to UTF-8, but you can specify any
encoding you want: &lt;code&gt;bytes.decode(&#39;latin-1&#39;)&lt;/code&gt;. If you want bytes again, use
&lt;code&gt;str.encode()&lt;/code&gt;, which again defaults to UTF-8 but accepts any encoding. If you
have a bytes that contains an encoded string, your first order of business is
decoding it.&lt;/p&gt;
&lt;div class=&#34;loud&#34;&gt;a bytes is not a string&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s look at some examples of why this matters in practice:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Dec&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2016&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GCC&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20160830&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;linux&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;more&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;おはようございます&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;おはようございます&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;おはようございます&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[::&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;すまいざごうよはお&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;おはようございます&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;お&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;おはようございます&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;は&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or in Python 2:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Python&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Dec&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2016&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GCC&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20160830&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;linux2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;more&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;おはようございます&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xe3\x81\x8a\xe3\x81\xaf\xe3\x82\x88\xe3\x81\x86\xe3\x81\x94\xe3\x81\x96\xe3\x81\x84\xe3\x81\xbe\xe3\x81\x99&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;おはようございます&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[::&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x99\x81\xe3\xbe\x81\xe3\x84\x81\xe3\x96\x81\xe3\x94\x81\xe3\x86\x81\xe3\x88\x82\xe3\xaf\x81\xe3\x8a\x81\xe3&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;おはようございます&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[::&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;㾁㄁㖁㔁ㆁ㈂㯁㊁ã&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;おはようございます&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xe3&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;おはようございます&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x81&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For anything other than ASCII, Python 2 &amp;ldquo;strings&amp;rdquo; are broken. Python 3&amp;rsquo;s string
handling is superb. The problem with it has only ever been that you don&amp;rsquo;t
actually know how strings work. Instead of starting ignorant flamewars about it,
learn how it works.&lt;/p&gt;
&lt;h2 id=&#34;actual-examples-people-have-given-me&#34;&gt;Actual examples people have given me&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Python 3 can&amp;rsquo;t handle bytes as file names&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yes it can. Just stop treating them like strings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test-&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xd8\x01&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the use of bytes as the file name, not str. \xd8\x01 is unrepresentable as
UTF-8.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the use of bytes as the path to os.listdir (the documentation says that if
you want bytes back as file names, pass bytes as the path. The docs are helpful
like that). Also note the lack of crashes or broken behavior.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Python 3&amp;rsquo;s csv module writes b&amp;rsquo;Hello&#39;,b&amp;rsquo;World&#39; into CSV files&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSV files are &amp;ldquo;comma seperated values&amp;rdquo;. Is each value an array of unsigned 8 bit
integers? No, of course not. They&amp;rsquo;re strings. So why would you pass an array of
unsigned 8 bit integers to it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Python 3 doesn&amp;rsquo;t support writing files as latin-1&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sure it does.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;some latin-1 file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;latin-1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;some utf8 file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;loud&#34;&gt;a bytes is not a string&lt;/div&gt;
&lt;div class=&#34;loud&#34;&gt;a bytes is not a string&lt;/div&gt;
&lt;div class=&#34;loud&#34;&gt;a bytes is not a string&lt;/div&gt;
&lt;p&gt;Python 2&amp;rsquo;s shitty design has broken your mindset. Unlearn it.&lt;/p&gt;
&lt;h2 id=&#34;python-2-is-dead-long-live-python-3&#34;&gt;Python 2 is dead, long live Python 3&lt;/h2&gt;
&lt;p&gt;Listen. It&amp;rsquo;s time you moved to Python 3. You&amp;rsquo;re missing out on a lot of really
great improvements to the language and are stuck with a lot of problems. Python
2 is really being EoL&amp;rsquo;d, and closing your eyes and covering your ears singing
&amp;ldquo;la la la&amp;rdquo; doesn&amp;rsquo;t change that. The transition is really not that difficult or
time consuming, and well worth it. Some people say only new projects should be
written in Python 3. I say that&amp;rsquo;s bollocks - all projects should be written in
Python 3 and you need to migrate, &lt;em&gt;now&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Python 3 is better. Much, much better. For every legitimate criticism of Python
3 I&amp;rsquo;ve seen, I&amp;rsquo;ve seen 10 that are bullshit. Come join us in the wonderful world
of sane string handling, type decorations, async/await, and more awesome
features. Every library supports it now. Let go of your biases and evaluate the
language honestly.&lt;/p&gt;
</description>
    </item><item>
      <title>Actually, you CAN do it</title>
      <link>./2017/01/06/Actually-you-CAN-do-it.html</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>./2017/01/06/Actually-you-CAN-do-it.html</guid>
      <description>&lt;p&gt;I maintain a &lt;em&gt;lot&lt;/em&gt; of open source projects. In order to do so, I have to
effectively manage my time. Most of my projects follow this philosophy: if you
want something changed, send a patch. If you are running into an annoying bug,
fix it and send a patch. If you want a new feature, implement it and send a
patch. It&amp;rsquo;s definitely a good idea to talk about it beforehand on the issue
tracker or IRC, but don&amp;rsquo;t make the mistake of thinking this processes ends with
someone else doing it for you.&lt;/p&gt;
&lt;p&gt;Every developer who contributes to a project I maintain is self-directed. They
work on what they&amp;rsquo;d like. They scratch their own itches. Sometimes what they&amp;rsquo;d
like to work on is non-specific, and in that case I&amp;rsquo;ll help them find something
to do based on what users are asking for lately or based on my own goals for the
project. I often maintain a list of &amp;ldquo;low hanging fruit&amp;rdquo; issues on Github, and
I am generally willing to offer some suggestions if someone asks for such a
task. However, for more complex, non-&amp;ldquo;low hanging fruit&amp;rdquo; tasks, they generally
only get worked on when someone with the know-how wants it done and does it.&lt;/p&gt;
&lt;p&gt;So what does this mean for you, user whose problem no developer is interested
in? Well, it&amp;rsquo;s time for you to step up and work on it yourself. I don&amp;rsquo;t really
care if your problem is &amp;ldquo;a showstopper&amp;rdquo; or &amp;ldquo;the only thing preventing you from
switching to my software&amp;rdquo;, or any of a number of other excuses you may have
lined up for getting someone else to do it for you. None of the other regular
contributors really care about your interpretation of what their priorities
should be, either. We aren&amp;rsquo;t a business. We aren&amp;rsquo;t making a sale. We&amp;rsquo;re just
making cool software that works for us and publishing it in the hopes that
you&amp;rsquo;ll find it useful, too.&lt;/p&gt;
&lt;p&gt;Generally by this point in the conversation with Joe User, they tell me they
&lt;em&gt;can&amp;rsquo;t&lt;/em&gt; do it. Well, Joe User, I beg to differ. It doesn&amp;rsquo;t matter that you don&amp;rsquo;t
know &lt;em&gt;[insert programming language]&lt;/em&gt;, or haven&amp;rsquo;t used &lt;em&gt;[insert relevant
library]&lt;/em&gt; before. You don&amp;rsquo;t learn new things by hanging out in your comfort
zone. Many of the regulars you&amp;rsquo;re bugging to do your work for you were once in
your shoes.&lt;/p&gt;
&lt;p&gt;Everything is setting you up for success. You literally have hundreds of
resources at your disposal. The internet is was made by developers, you know,
and we built tons of resources to support ourselves with it. You have
documentation, Q&amp;amp;A sites, chat rooms, and more waiting to help you when you get
stuck. We&amp;rsquo;re here to answer your questions with the codebase, too. I pride
myself on making the code accessible and easy to get into, and I&amp;rsquo;ll help you
learn to do the same when you integrate your with our project.&lt;/p&gt;
&lt;p&gt;We would much rather give you advice on how to fix the problem yourself than to
fix the problem for you. Even if it takes more of our attention to do so, we get
the added benefit of a new person who is qualified to help out the next guy. A
person who is now fixing their own bugs and improving the software for everyone.
That&amp;rsquo;s a much better outcome than having to waste our own time on a task we
aren&amp;rsquo;t interested in.&lt;/p&gt;
&lt;p&gt;It might be hard, but hey, it&amp;rsquo;d be hard for us too. You&amp;rsquo;ll learn and be better
for it. Wouldn&amp;rsquo;t it be nice to add &lt;em&gt;[language you don&amp;rsquo;t know]&lt;/em&gt; or &lt;em&gt;[library you
don&amp;rsquo;t know]&lt;/em&gt; to your resume, anyway? If you&amp;rsquo;re concerned about the scope of your
problem, how about asking about the low hanging fruit so you have easier tasks
to learn with?&lt;/p&gt;
&lt;p&gt;The cards are stacked in your favor. The only problem is your defeatist
attitude. Just do it!&lt;/p&gt;
</description>
    </item><item>
      <title>State of Sway December 2016 - secure your Wayland desktop, get paid to work on Sway</title>
      <link>./2016/12/27/State-of-sway.html</link>
      <pubDate>Tue, 27 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/12/27/State-of-sway.html</guid>
      <description>&lt;p&gt;Earlier today I released &lt;a href=&#34;https://github.com/SirCmpwn/sway/releases/tag/0.11&#34;&gt;sway
0.11&lt;/a&gt;, which (along with
lots of the usual new features and bug fixes) introduces support for security
policies that can help realize the promise of a secure Wayland desktop. We also
just started a bounty program that lets you sponsor the things you want done and
rewards contributors for working on them.&lt;/p&gt;
&lt;p&gt;Today sway has 19,371 lines of C (and 3,761 lines of header files) written by 70
authors across 2,067 commits. These were written through 589 pull requests and
425 issues. Sway packages are available today in the official repos of Arch,
Gentoo, Fedora, NixOS, openSUSE, Void Linux, and more. Sway looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/ICd5.png&#34;&gt;&lt;img src=&#34;https://sr.ht/ICd5.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Side note: please add pretty screenshots of sway to &lt;a href=&#34;https://github.com/SirCmpwn/sway/wiki/Screenshots-of-Sway&#34;&gt;this wiki
page&lt;/a&gt;. Thanks!&lt;/p&gt;
&lt;p&gt;For those who are new to the project, &lt;a href=&#34;http://swaywm.org&#34;&gt;Sway&lt;/a&gt; is an
i3-compatible Wayland compositor. That is, your existing &lt;a href=&#34;http://i3wm.org/&#34;&gt;i3&lt;/a&gt;
configuration file will work as-is on Sway, and your keybindings and colors and
fonts and for_window rules and so on will all be the same. It&amp;rsquo;s i3, but for
Wayland, plus it&amp;rsquo;s got some bonus features. Here&amp;rsquo;s a quick rundown of what&amp;rsquo;s
new since the &lt;a href=&#34;./2016/08/02/Sway-0.9-in-retro.html&#34;&gt;previous state of Sway&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security policy configuration (man sway-security)&lt;/li&gt;
&lt;li&gt;FreeBSD support&lt;/li&gt;
&lt;li&gt;Initial support for HiDPI among sway clients (swaybar et al)&lt;/li&gt;
&lt;li&gt;Support for new i3 features&lt;/li&gt;
&lt;li&gt;Clicky title bars&lt;/li&gt;
&lt;li&gt;Lots of i3 compatability improvements&lt;/li&gt;
&lt;li&gt;Lots of documentation improvements&lt;/li&gt;
&lt;li&gt;Lots of bugfixes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Today it seems that most of the features sway needs are implemented. Work hasn&amp;rsquo;t
slowed down - there&amp;rsquo;s been lots of work fixing small bugs, improving
documentation, fixing subtle incompatabilities with i3, and so on. However, to
encourage the development of new features, I&amp;rsquo;ve officially put into action the
new bounty program today. Here&amp;rsquo;s how it works - you can donate to the features
you want to see, and you can claim the donations by implementing the features
and sending a pull request. To date I&amp;rsquo;ve received about $200 in donations
towards sway, and I&amp;rsquo;ve matched that with a donation of my own to bring it up to
$400. I&amp;rsquo;ve distributed these donations into various buckets of features. Not
every feature is for sway - anything that improves the sway experience is
eligible for a bounty, and in fact over half of the initial bounties are for
features in other parts of the ecosystem. For details on the program, check out
&lt;a href=&#34;https://github.com/SirCmpwn/sway/issues/986&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the updated stats. First, &lt;strong&gt;lines of code per author&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;3799 (+775)&lt;/td&gt;&lt;td&gt;Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;3489 (-1170)&lt;/td&gt;&lt;td&gt;Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;1705 (-527)&lt;/td&gt;&lt;td&gt;taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;1236 (-550)&lt;/td&gt;&lt;td&gt;S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;1160 (+70)&lt;/td&gt;&lt;td&gt;Zandr Martin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;449 (-12)&lt;/td&gt;&lt;td&gt;minus&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;311 (-54)&lt;/td&gt;&lt;td&gt;Christoph Gysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;285 (+285)&lt;/td&gt;&lt;td&gt;D.B&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;247 (-87)&lt;/td&gt;&lt;td&gt;Kevin Hamacher&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;227 (-298)&lt;/td&gt;&lt;td&gt;Cole Mickens&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;219 (+219)&lt;/td&gt;&lt;td&gt;David Eklov&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Finally, I&amp;rsquo;m the top contributor! I haven&amp;rsquo;t been on top for over a year. Lots of
the top contributors are slowly having their lines of code reduced as lots of
new contributors are coming in and displacing them with refactorings and bug
fixes.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the total &lt;strong&gt;number of commits per author&lt;/strong&gt; for each of the top ten
committers:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;1009&lt;/td&gt;&lt;td&gt; Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;245&lt;/td&gt;&lt;td&gt; Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;153&lt;/td&gt;&lt;td&gt; taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;97&lt;/td&gt;&lt;td&gt; Luminarys&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;91&lt;/td&gt;&lt;td&gt; S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;68&lt;/td&gt;&lt;td&gt; Zandr Martin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt; Christoph Gysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;45&lt;/td&gt;&lt;td&gt; D.B&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;33&lt;/td&gt;&lt;td&gt; Taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt; minus&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Most of what I do for Sway personally is reviewing and merging pull requests.
Here&amp;rsquo;s the same figures using &lt;strong&gt;number of commits per author, excluding merge
commits&lt;/strong&gt;, which changes my stats considerably:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;479&lt;/td&gt;&lt;td&gt; Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;229&lt;/td&gt;&lt;td&gt; Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;138&lt;/td&gt;&lt;td&gt; taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;96&lt;/td&gt;&lt;td&gt; Luminarys&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;91&lt;/td&gt;&lt;td&gt; S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt; Christoph Gysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;56&lt;/td&gt;&lt;td&gt; Zandr Martin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;45&lt;/td&gt;&lt;td&gt; D.B&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt; Taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt; minus&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These stats only cover the top ten in each, but there are more - check out the
&lt;a href=&#34;https://github.com/SirCmpwn/sway/graphs/contributors&#34;&gt;full list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s looking forward to sway 1.0 in 2017!&lt;/p&gt;
</description>
    </item><item>
      <title>A broad intro to networking</title>
      <link>./2016/12/06/A-broad-intro-to-networking.html</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/12/06/A-broad-intro-to-networking.html</guid>
      <description>&lt;p&gt;Disclaimer: I am not a network engineer. That&amp;rsquo;s the point of this blog post,
though - I want to share with non-networking people enough information about
networking to get by. Hopefully by the end of this post you&amp;rsquo;ll know enough about
networking to keep up with a conversation on networking, or know what to search
for when something breaks, or know what tech to research more in-depth when you
are putting together something new.&lt;/p&gt;
&lt;h2 id=&#34;layers&#34;&gt;Layers&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;OSI model&lt;/strong&gt; is the standard model we describe networks with. There are 7
&lt;strong&gt;layers&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Layer 1, the physical layer, is the electrical engineering stuff.&lt;/p&gt;
&lt;p&gt;Layer 2, the link layer, is how devices talk to each other.&lt;/p&gt;
&lt;p&gt;Layer 3, the network layer, is what they talk about.&lt;/p&gt;
&lt;p&gt;Layer 4, the transport layer, is where things like TCP and UDP live.&lt;/p&gt;
&lt;p&gt;Layers 5 and 6 aren&amp;rsquo;t very important.&lt;/p&gt;
&lt;p&gt;Layer 7, the application layer, is where Minecraft lives.&lt;/p&gt;
&lt;p&gt;When you hear some security guy talking about a &amp;ldquo;layer 7 attack&amp;rdquo;, he&amp;rsquo;s
talking about a attack that focuses on flaws in the application layer. In
practice that means i.e. flooding the server with HTTP requests.&lt;/p&gt;
&lt;h2 id=&#34;1-physical-layer&#34;&gt;1: Physical Layer&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Generally implemented by matter&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Layer 1 is the hardware of a network. Commonly you&amp;rsquo;ll find things here like your
computer&amp;rsquo;s &lt;strong&gt;NIC&lt;/strong&gt; (network interface controller), aka the network interface or
just the interface, which is the bit of silicon in your PC that you plug network
cables or WiFi signals into.&lt;/p&gt;
&lt;p&gt;On Linux, network interfaces are assigned names like &lt;em&gt;eth0&lt;/em&gt; or &lt;em&gt;eno1&lt;/em&gt;. eth0 is
the traditional name for the 0th wired network interface. eno1 is the newer
&amp;ldquo;consistent network device naming&amp;rdquo; format popularized by tools like udev (which
manages hardware on many Linux systems) - this is a deterministic name based on
your network hardware, and won&amp;rsquo;t change if you add more interfaces. You can
manage your interfaces with the &lt;em&gt;ip&lt;/em&gt; command (&lt;code&gt;man 8 ip&lt;/code&gt;), or the now-deprecated
&lt;em&gt;ifconfig&lt;/em&gt; command. Some non-Linux Unix systems have not deprecated ifconfig.&lt;/p&gt;
&lt;p&gt;This layer also has ownership over &lt;strong&gt;MAC addresses&lt;/strong&gt;, in theory. A MAC address
is an allegedly unique identifier for a network device. In practice, software
at higher layers can use whatever MAC address they want. You can change your MAC
address with the ip command, which is often useful for dealing with annoying
public WiFi resource limits or for frustrating someone else on the network.&lt;/p&gt;
&lt;p&gt;Other things you find at layer 1 include &lt;strong&gt;switches&lt;/strong&gt;, which do network
multiplexing (they generally can be thought of as networking&amp;rsquo;s version of a
power strip - they turn one Ethernet port into many). Also common are
&lt;strong&gt;routers&lt;/strong&gt;, whose behaviors are better explained in other layers. You also have
hardware like &lt;strong&gt;firewalls&lt;/strong&gt;, which filter network traffic, and &lt;strong&gt;load
balancers&lt;/strong&gt;, which distribute a load among several nodes. Both firewalls and
load balancers can be done in software, depending on your needs.&lt;/p&gt;
&lt;h2 id=&#34;2-data-link-layer&#34;&gt;2: Data link layer&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Generally implemented by network hardware&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At this layer you have protocols that cover how nodes talk to one another. Here
the &lt;strong&gt;ethernet&lt;/strong&gt; protocol is almost certainly the most common - the protocol
that goes over your network cables. Said network cables are probably &lt;strong&gt;Cat 5&lt;/strong&gt;
cables, or &amp;ldquo;category 5&amp;rdquo; cables.&lt;/p&gt;
&lt;p&gt;Other protocols here include tunnels, which allow you to indirectly access a
network. A common example is a &lt;strong&gt;VPN&lt;/strong&gt;, or virtual private network, which allows
you to participate in another network remotely. Tunnels can also be useful for
getting around firewalls, or for setting up a secure means to access resources
on another network.&lt;/p&gt;
&lt;h2 id=&#34;3-network-layer&#34;&gt;3: Network layer&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Generally implemented by the kernel&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As a software guy, this is where the fun really starts. The other layers are how
computers talk to each other - this layer is what they talk about. Computers are
often connected via a &lt;strong&gt;LAN&lt;/strong&gt;, or local area network - a &lt;em&gt;local&lt;/em&gt; network of
computers. Computers are also often connected to a &lt;strong&gt;WAN&lt;/strong&gt;, or wide area
network - the internet is one such network.&lt;/p&gt;
&lt;p&gt;The most common protocol at this layer is IP, or Internet Protocol. There are
two versions that matter: IPv4, and IPv6. Both of them use &lt;strong&gt;IP addresses&lt;/strong&gt; to
identify nodes on their networks, and they carry &lt;strong&gt;packets&lt;/strong&gt; between them. The
major difference between IPv4 and IPv6 is the size of their respective &lt;strong&gt;address
spaces&lt;/strong&gt;. IPv4 uses 32 bit addresses, supporting a total of 4.3 billion possible
addresses, which on the public internet are quickly becoming a sparse resource.
IPv6 uses 128-bit addresses, which allows for a zillion unique addresses.&lt;/p&gt;
&lt;p&gt;Ranges of IP addresses can be described with a &lt;strong&gt;subnet mask&lt;/strong&gt;. Such a range of
IP addresses constitutes a &lt;strong&gt;subnetwork&lt;/strong&gt;, or subnet. Though you&amp;rsquo;re probably
used to seeing an IPv4 address encoded like &lt;code&gt;10.20.30.40&lt;/code&gt;, remember that it can
also just be represented as one 32-bit number - in this case 169090600, or
0xA141E28, and you can do bitwise math against these numbers. You generally
represent a subnet with CIDR notation, such as &lt;code&gt;192.168.1.0/24&lt;/code&gt;. In this case, the
first 24 bits are meaningful, and all possible values for the remaining 8 bits
constitute the range of addresses represented by this mask.&lt;/p&gt;
&lt;p&gt;IPv4 has several subnets reserved for this and that. Some important ones are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0.0.0.0/8&lt;/code&gt; - current network. On many systems, you can treat &lt;code&gt;0.0.0.0&lt;/code&gt; as all
IP addresses assigned to your device&lt;/li&gt;
&lt;li&gt;&lt;code&gt;127.0.0.0/8&lt;/code&gt; - loopback network. These addresses refer to yourself.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10.0.0.0/8&lt;/code&gt;, &lt;code&gt;172.16.0.0/12&lt;/code&gt;, and &lt;code&gt;192.168.0.0/16&lt;/code&gt; are reserved for private
networks - you can allocate these addresses on a LAN.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An IPv4 packet includes, among other things: a &lt;strong&gt;time to live&lt;/strong&gt;, or TTL, which
limits how long the packet can live for; the &lt;strong&gt;protocol&lt;/strong&gt;, such as TCP; the
&lt;strong&gt;source&lt;/strong&gt; and &lt;strong&gt;destination&lt;/strong&gt; addresses; a header checksum; and the
&lt;strong&gt;payload&lt;/strong&gt;, which is specific to the higher level protocol in use.&lt;/p&gt;
&lt;p&gt;Given the limited size of the IPv4 space, most networks are designed with an
isolated LAN that uses &lt;strong&gt;NAT&lt;/strong&gt;, or network address translation, to translate IP
addresses from the WAN. Basically, a router or similar component will translate
internal IP addresses (allocated from the private subnets) to its own external
IP address, and vice versa, when passing communications along to the WAN. With
IPv6 there are so many IP addresses that you don&amp;rsquo;t need to use NAT. If you&amp;rsquo;re
wondering whether or not we&amp;rsquo;ll ever run out of IPv6 addresses - leave that to
someone else to solve tens of millions of years from now.&lt;/p&gt;
&lt;p&gt;IPv6 addresses are 128-bits long and are described with strings like
&lt;code&gt;2001:0db8:0000:0000:0000:ff00:0042:8329&lt;/code&gt;. Luckily the people who designed it
were kind enough to realize people don&amp;rsquo;t want to write that, so it can be
shortened to &lt;code&gt;2001:db8::ff00:42:8329&lt;/code&gt; by removing leading zeros and removing
sections entirely composed of zeros. Where colons are reserved for another
purpose, you&amp;rsquo;ll typically add brackets around the IPv6 address, such as
&lt;code&gt;http://[2607:f8b0:400d:c03::64]&lt;/code&gt;. The IPv6 loopback address (localhost) is
&lt;code&gt;::1&lt;/code&gt;, and IPv6 subnets are written the same way as in IPv4. Given how many
IPv6 addresses there are, it&amp;rsquo;s common to be allocated lots of them in cases when
you might have expected to only receive one IPv4 address. Typically these blocks
will be anywhere from /48 to /56 - which contains more addresses than the entire
IPv4 space.&lt;/p&gt;
&lt;p&gt;IP addresses are often &lt;strong&gt;static&lt;/strong&gt;, which means the node connecting to the
network already knows its IP address and starts using it right away. They may
also be &lt;strong&gt;dynamic&lt;/strong&gt;, and are allocated by some computer on the network with the
&lt;strong&gt;DHCP&lt;/strong&gt; protocol.&lt;/p&gt;
&lt;p&gt;IPsec also lives in layer 3.&lt;/p&gt;
&lt;h2 id=&#34;4-transport-layer&#34;&gt;4: Transport Layer&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Generally implemented by the kernel&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The transport layer is where you have higher level protocols, through which much
of the work gets done. Protocols here include TCP, UDP, ICMP (used for ping),
and others. These protocols are used to power application-layer protocols.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP&lt;/strong&gt;, or the transmission control protocol, is probably the most popular
transport layer protocol out there. It turns the unreliable internet protocol
into a reliable byte stream. TCP (tries to) make four major guarantees: data
will arrive, will arrive exactly once, will arrive in the correct order, and
will be the correct data.&lt;/p&gt;
&lt;p&gt;TCP takes a stream of bytes and breaks it up into &lt;strong&gt;segments&lt;/strong&gt;. Each segment is
then stuck into an IP packet and sent on its way. A TCP segment includes the
source and destination &lt;strong&gt;ports&lt;/strong&gt;, which are used to distinguish between
different application-layer protocols in use and to distinguish between
different applications using the protocol on the same host; a &lt;strong&gt;sequence
number&lt;/strong&gt;, which is used to order the packet; an &lt;strong&gt;ACK number&lt;/strong&gt;, which is used to
inform the other end that it has received some packet and it can stop retrying;
a checksum; and the data itself. The protocol also includes a handshake process
and other housekeeping processes that the application needn&amp;rsquo;t be aware of.
Generally speaking, the overhead of TCP is significant for real-time
applications.&lt;/p&gt;
&lt;p&gt;Most TCP servers will &lt;strong&gt;bind&lt;/strong&gt; to a certain port to &lt;strong&gt;listen&lt;/strong&gt; for incoming
connections, via the operating system&amp;rsquo;s &lt;strong&gt;socket&lt;/strong&gt; implementation. Many TCP
&lt;strong&gt;clients&lt;/strong&gt; can connect to one server.&lt;/p&gt;
&lt;p&gt;Ports are a 16 bit unsigned integer. Most applications have a default port
they&amp;rsquo;re known to use, such as 80 for HTTP. Originally these numbers were
allocated by the internet police, but this has fallen out of practice. On most
systems, ports less than 1024 require elevated permissions to listen to.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UDP&lt;/strong&gt;, or the user datagram protocol, is the second most popular transport
layer protocol, and is the lighter of the two. UDP is a paper thin layer on top
of IP. A UDP packet contains a source port, destination port, checksum, and a
payload. This protocol is fast and lightweight, but makes none of the promises
TCP makes - UDP &amp;ldquo;&lt;strong&gt;datagrams&lt;/strong&gt;&amp;rdquo; may arrive multiple or zero times, in a
different order than they were sent, and possibly with data errors. Many people
who use UDP will implement these guarantees themselves in a some lighter-weight
fashion than TCP. Importantly, UDP source IPs can be spoofed and the destination
has no means of knowing where it really came from - TCP avoids this by doing a
handshake before exchanging any data.&lt;/p&gt;
&lt;p&gt;UDP can also issue broadcasts, which are datagrams that are sent to every node
on the network. Such datagrams should be addressed to &lt;code&gt;255.255.255.255&lt;/code&gt;. There&amp;rsquo;s
also multicast, which specifies a subset of all nodes to send the datagram to.
Note that both of these have limited support in real-world networks.&lt;/p&gt;
&lt;h2 id=&#34;5--6-session-and-presentation&#34;&gt;5 &amp;amp; 6: Session and presentation&lt;/h2&gt;
&lt;p&gt;Think of these as extensions of layer 7, the application layer. Technically
things like SSL, compression, etc are done here, but in practice it doesn&amp;rsquo;t
have any important technical implications.&lt;/p&gt;
&lt;h2 id=&#34;7-application-layer&#34;&gt;7: Application layer&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Generally implemented by end-user software&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The application layer is the uppermost layer of the network and it&amp;rsquo;s what all
the other layers are there for. At this layer you have all of the hundreds of
thousands of application-specific protocols out there.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNS&lt;/strong&gt;, or the domain name system, is a protocol for mapping domain names (i.e.
google.com) to IP addresses (i.e. 209.85.201.100), among other features. DNS
servers keep track of DNS records, which associate names with records of various
types. Common records include A, which maps a name to an IPv4 address, AAAA for
IPv6, CNAME for aliases, and MX for email records. The most popular DNS server
is bind, which you can run on your own network to operate a private name system.&lt;/p&gt;
&lt;p&gt;Some other UDP protocols: NTP, the network time protocol; DHCP, which assigns
dynamic IP addresses on networks; and nearly all real-time video and audio
streaming protocols (like VoIP). Many video games also use UDP for their
multiplayer networking.&lt;/p&gt;
&lt;p&gt;TCP is more popular than UDP and powers many, many, many applications, due
largely to the fact that it simplifies the complex intricacies of networking.
You&amp;rsquo;re probably familiar with HTTP, which is used by web browsers use to fetch
resources. Email applications often communicate over TCP with IMAP to retrieve
the contents of your inbox, and SMTP to send emails to other servers. SSH (the
secure shell), FTP (file transfer protocol), IRC (internet relay chat), and
countless other protocols also use TCP.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hopefully this article helps you gain a general understanding of how computers
talk to each other. In my own experience, I&amp;rsquo;ve used a broad understanding of the
entire stack and a deep understanding of levels 3 and up. I expect most
programmers today need a broad understanding of the entire stack and a deep
understanding of level 7, and I hope that most programmers would seek a deep
understanding of level 4 as well.&lt;/p&gt;
&lt;p&gt;Please leave some feedback if you appreciated this article - I may do more
similar articles in the future, giving a broad introduction to other topics. The
next topics I have in mind are security and encryption (as separate posts).&lt;/p&gt;
</description>
    </item><item>
      <title>Electron considered harmful</title>
      <link>./2016/11/24/Electron-considered-harmful.html</link>
      <pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/11/24/Electron-considered-harmful.html</guid>
      <description>&lt;p&gt;Yeah, I know that &amp;ldquo;considered harmful&amp;rdquo; essays are allegedly &lt;a href=&#34;http://meyerweb.com/eric/comment/chech.html&#34;&gt;considered
harmful&lt;/a&gt;. If it surprises you that
I&amp;rsquo;m writing one, though, you must be a new reader. Welcome! Let&amp;rsquo;s get started.
If you&amp;rsquo;re unfamiliar with Electron, it&amp;rsquo;s some hot new tech that lets you make
desktop applications with HTML+CSS+JavaScript. It&amp;rsquo;s basically a chromeless web
browser with a Node.js backend and a Chromium-based frontend. What follows is
the rant of a pissed off Unix hacker, you&amp;rsquo;ve been warned.&lt;/p&gt;
&lt;p&gt;As software engineers we have a responsibility to pick the &lt;em&gt;right&lt;/em&gt; tools for the
job. In fact, that&amp;rsquo;s the &lt;em&gt;most important&lt;/em&gt; choice we have to make when we start a
project. When you choose Electron you get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An entire copy of Chromium you&amp;rsquo;ll be shipping with your app&lt;/li&gt;
&lt;li&gt;An interface that looks and feels nothing like the rest of the user&amp;rsquo;s OS&lt;/li&gt;
&lt;li&gt;One of the slowest, least memory efficient, and most inelegant GUI application
platforms out there (remember, we &lt;em&gt;tolerate&lt;/em&gt; frontend web development because
we have no choice, not because it is by any means &lt;em&gt;good&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s go over some case studies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/mifi/lossless-cut&#34;&gt;lossless-cut&lt;/a&gt;&lt;/strong&gt; is an Electron app that
gives you a graphical UI for &lt;em&gt;two ffmpeg flags&lt;/em&gt;. Seriously, the flags in
question are -ss and -t. No really, that&amp;rsquo;s &lt;em&gt;&lt;a href=&#34;https://github.com/mifi/lossless-cut/blob/master/src/ffmpeg.js#L46&#34;&gt;literally all it
does&lt;/a&gt;&lt;/em&gt;. It
doesn&amp;rsquo;t even use ffmpeg to decode the video preview in the app, it&amp;rsquo;s limited to
the codecs chromium supports. It also ships its own ffmpeg, so it has the
industry standard video decoding tool &lt;em&gt;right there&lt;/em&gt; and doesn&amp;rsquo;t use it to render
video. For the price of 200 extra MiB of disk space and an entire Chromium process
in RAM and on your CPU, you get a less capable GUI that saves you from having to
type the -ss and -t flags yourself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://1clipboard.io/&#34;&gt;1Clipboard&lt;/a&gt;&lt;/strong&gt; is a clipboard manager. In Electron. A
&lt;em&gt;clipboard manager&lt;/em&gt;. In order to show you &lt;em&gt;a list of things you&amp;rsquo;ve copied&lt;/em&gt;, it
uses &lt;em&gt;an entire bundled copy of Chromium&lt;/em&gt;. Also note that despite the promises
of Electron making cross platform development easy, it doesn&amp;rsquo;t support Linux.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://getcollectie.com/&#34;&gt;Collectie&lt;/a&gt;&lt;/strong&gt; is a&amp;hellip; fancy bookmark manager, I
guess? Another one that fails to get the cross platform value add from Electron,
this only supports OS X (or is it macOS). For only $10 bucks you get to organize
your shit into folders. Or you could just open the Finder for free and get a
native UX to boot.&lt;/p&gt;
&lt;p&gt;This is a &lt;a href=&#34;https://hyper.is/&#34;&gt;terminal&lt;/a&gt; written with Electron. On the landing
page they say &amp;ldquo;# A terminal emulator 100% based on JavaScript, HTML, and CSS&amp;rdquo;
like they&amp;rsquo;re proud of it. They&amp;rsquo;ve taken one of the most lightweight and
essential tools on your computer and bloated it by orders of magnitude. Why the
fuck would you want to render Google in your god damn terminal emulator? Bonus:
also not cross platform.&lt;/p&gt;
&lt;p&gt;This is not to mention the dozens of companies that have taken their websites
and crammed them into a shitty electron app and called it their desktop app.
Come on guys!&lt;/p&gt;
&lt;p&gt;By the way, if you&amp;rsquo;re the guy who&amp;rsquo;s going to leave a comment about how this blog
post introduced you to a bunch of interesting apps you&amp;rsquo;re going to install now,
I hate you.&lt;/p&gt;
&lt;h2 id=&#34;electron-enables-lazy-developers-to-write-garbage&#34;&gt;Electron enables lazy developers to write garbage&lt;/h2&gt;
&lt;p&gt;Let me be clear about this: JavaScript sucks. It&amp;rsquo;s not the worst, but it&amp;rsquo;s also
not by any means good. ES6 is a really great step forward and I&amp;rsquo;m thrilled about
how much easier it&amp;rsquo;s going to be to write JavaScript, but it&amp;rsquo;s still JavaScript
underneath the syntactic sugar. We use it because we have no choice (people who
know more than just JavaScript know this). The object model is whack and the
loose typing is whack and the DOM is super whack.&lt;/p&gt;
&lt;p&gt;When Node.js happened, a bunch of developers who never bothered to learn more
than JavaScript for their frontend work suddenly could write their crappy code
on the backend, too. Now this is happening to desktop applications. The reason
people choose Electron is because they are &lt;em&gt;too lazy&lt;/em&gt; to learn the right tools
for the job. This is the &lt;em&gt;worst&lt;/em&gt; quality a developer can have. You&amp;rsquo;re an
engineer, for the love of God! Fucking act like one! Do they build square
airplanes so they don&amp;rsquo;t have to learn about aerodynamics, then just throw on an
extra ten engines to make up for it? NO!&lt;/p&gt;
&lt;p&gt;For the love of God, learn something else. Learn how to use GTK or Qt. Maybe Xwt
is more up your alley. How about GNOME&amp;rsquo;s Vala thing? &lt;em&gt;Learn another programming
language&lt;/em&gt;. Learn Python or C/C++ or C#. Fun fact: it&amp;rsquo;ll make your JavaScript
better, and once you have it in your toolbox you can make more educated
decisions on the appropriate tool to use when you face your next problem. Hint:
it&amp;rsquo;s not Electron.&lt;/p&gt;
&lt;h2 id=&#34;some-electron-apps-dont-suck&#34;&gt;Some Electron apps don&amp;rsquo;t suck&lt;/h2&gt;
&lt;p&gt;For some use-cases Electron is a reasonable choice.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;, because it&amp;rsquo;s a full
blown IDE with a debugger and plugins and more. It&amp;rsquo;s already gonna be
bloated.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.soundnodeapp.com/&#34;&gt;Soundnode&lt;/a&gt;, because it&amp;rsquo;s not like any other
music service&amp;rsquo;s app obeys your OS&amp;rsquo;s UI conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Uh, that&amp;rsquo;s it. That&amp;rsquo;s the entire list.&lt;/p&gt;
</description>
    </item><item>
      <title>Getting on without Google</title>
      <link>./2016/11/16/Getting-on-without-Google.html</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/11/16/Getting-on-without-Google.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://sr.ht/d718.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I used Google for a long time, but have waned myself off of it over the past
few years, and I finally deleted my account a little over a month ago. I feel so
much better about my privacy now that I&amp;rsquo;ve removed Google from the equation, and
self hosting my things affords me a lot of flexibility and useful customizations.&lt;/p&gt;
&lt;h2 id=&#34;mailcmpwncom&#34;&gt;mail.cmpwn.com&lt;/h2&gt;
&lt;p&gt;This one was the most difficult and time consuming to set up, but it was &lt;em&gt;very&lt;/em&gt;
worth it. I&amp;rsquo;ve intended for a while to make a new mail server software suite
that&amp;rsquo;s less terrible to set up, so hopefully that situation will improve in the
future. I want to flesh out &lt;a href=&#34;https://github.com/SirCmpwn/aerc&#34;&gt;aerc&lt;/a&gt; some more
first. A personal mail server was one of the earliest things I set up in my
post-Google life - I&amp;rsquo;ve operated it for about two years now.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Postfix to handle incoming and outgoing mail&lt;/li&gt;
&lt;li&gt;Dovecot to handle mail delivery, filtering, and IMAP&lt;/li&gt;
&lt;li&gt;Postfixadmin to provide a nice interface for managing accounts&lt;/li&gt;
&lt;li&gt;mutt to read and compose my emails on the desktop&lt;/li&gt;
&lt;li&gt;K9 to read and compose my emails on Android&lt;/li&gt;
&lt;li&gt;Roundcube for when it&amp;rsquo;s occasionally necessary to read an HTML email&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With my mail server provides a lot of side benefits, too. For one, all of my
email-sending software now uses it. Once Mandrill went kaput, it was easy to
switch everything over to it. I can be sending and receiving email from a new
domain in less than 5 minutes now. Using sieve scripts for filtering emails is
also a lot more flexible than what Google offered - I now have filtering set up
to organize several mailing lists, alerts and notifications sent by my software
and servers, RSS feeds, and more.&lt;/p&gt;
&lt;p&gt;My strategy for defeating spam is to use a combination of the spamhaus
blocklist, greylisting, and blacklisting with sieve. I see about 3-5 spam emails
per week on average with this setup. To ensure my own emails get delivered, I&amp;rsquo;ve
set up SPF and DKIM, reverse DNS, and appealed to have my IP address removed
from blocklists. A great tool in figuring all this out has been
&lt;a href=&#34;http://mail-tester.com&#34;&gt;mail-tester.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;youtube&#34;&gt;YouTube&lt;/h2&gt;
&lt;p&gt;For YouTube, I &amp;ldquo;subscribe&amp;rdquo; to channels by adding their RSS feeds to
&lt;a href=&#34;http://www.allthingsrss.com/rss2email/&#34;&gt;rss2email&lt;/a&gt;, combined with sieve scripts
that filter them into a specific folder. I then have a keybinding in mutt that,
when pressed, pulls the YouTube URL out of an email and feeds it to mpv, a
desktop video player. It&amp;rsquo;s so much easier to access YouTube this way than
through the web browser - no ads, familiar keybindings, remote control support,
and a no-nonsense feed of your videos.&lt;/p&gt;
&lt;h2 id=&#34;music&#34;&gt;Music&lt;/h2&gt;
&lt;p&gt;Instead of Google Music, Spotify, or anything else, I run an internet radio
with my friends. We all keep our music collections (mostly lossless) on NFS
servers, and we mounted these servers on a streaming server that shuffles the
entire thing and keeps a searchable database of music. We have an API that I
pull from to integrate desktop keybindings and a status line on my taskbar, and
an IRC bot for searching the database and requesting songs. I can also stream to
my phone with VLC, as well as use scripts to maintain an offline archive of my
favorite songs. This setup is &lt;em&gt;way&lt;/em&gt; nicer than any commercial service I&amp;rsquo;ve used
in the past. We&amp;rsquo;ll be open sourcing version 2 to provide a turnkey solution for
this type of self-hosted music service.&lt;/p&gt;
&lt;h2 id=&#34;web-search&#34;&gt;Web search&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt;. Even if you think the search results
aren&amp;rsquo;t up to snuff (you get used to just being a bit more specific anyway), the
bangs feature is absolutely indispensable. I recently patched Chromium for
Android to support DuckDuckGo as a search engine as well:
&lt;a href=&#34;https://sr.ht/h4bZ.patch&#34;&gt;here&amp;rsquo;s the patch&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;file-hosting&#34;&gt;File hosting&lt;/h2&gt;
&lt;p&gt;Instead of using Google Drive, I&amp;rsquo;m using a number of different solutions
depending on what&amp;rsquo;s most convenient at the time. I operate
&lt;a href=&#34;https://sr.ht&#34;&gt;sr.ht&lt;/a&gt; for me and my friends, which allows me to just have a
place to drop a file and get a link to share. I have scripts and keybindings set
up to make uploading files here second nature, as well as an Android app someone
wrote. I also keep a 128G flash drive on my keychain now that comes in handy all
the time, and a big-ass file server on OVH that I keep mounted with NFS or sshfs
depending on the scenario, and sometimes I just stash files on a random server
with rsync. sr.ht is &lt;a href=&#34;https://gogs.sr.ht/SirCmpwn/sr.ht&#34;&gt;open source&lt;/a&gt;, by the
way.&lt;/p&gt;
&lt;h2 id=&#34;cyanogenmod&#34;&gt;CyanogenMod&lt;/h2&gt;
&lt;p&gt;On Android, I use CyanogenMod without Google Play Services, and I use F-Droid to
get apps. When I used Google Now, I found that I most often just asked it for
reminders, which I now do via an open source app called Notable Plus. I also
have open source apps for reading HN, downloading torrents, blocking ads,
connecting to IRC, two factor authentication, YouTube, password management,
Twitter, and more.&lt;/p&gt;
&lt;h2 id=&#34;notably-missing-docs&#34;&gt;Notably missing: Docs&lt;/h2&gt;
&lt;p&gt;Hopefully the new LibreOffice thing will do the trick once it&amp;rsquo;s ready. I&amp;rsquo;m
looking forward to that.&lt;/p&gt;
&lt;h2 id=&#34;things-i-self-host-that-google-doesnt-offer&#34;&gt;Things I self host that Google doesn&amp;rsquo;t offer&lt;/h2&gt;
&lt;p&gt;I use ZNC to operate an IRC bouncer, which is great because I use IRC &lt;em&gt;a lot&lt;/em&gt;.
It keeps logs for me, keeps me always connected, and gives me a number of nice
features to work with. I also host a number of simple websites related to IRC to
do things like channel stats and rules.&lt;/p&gt;
&lt;p&gt;To all sr.ht users I offer access to &lt;a href=&#34;https://gogs.sr.ht&#34;&gt;gogs.sr.ht&lt;/a&gt;, which I
personally use to host many private repositories as well as a number of small
projects, and as a kind of staging area for repositories that aren&amp;rsquo;t quite ready
for GitHub yet.&lt;/p&gt;
&lt;p&gt;For passwords, I use a tool called &lt;a href=&#34;https://www.passwordstore.org/&#34;&gt;pass&lt;/a&gt;, which
encrypts passwords with my PGP key and stores them in a git repository I keep on
gogs.sr.ht, with desktop keybindings to make grabbing them convenient.&lt;/p&gt;
&lt;h2 id=&#34;help-me-do-this&#34;&gt;Help me do this!&lt;/h2&gt;
&lt;p&gt;Well, that covers most of my major self hosted services. If you&amp;rsquo;re interested in
more detail about how any of this works so you might set something up yourself,
feel free to reach out to me by &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;email&lt;/a&gt;,
&lt;a href=&#34;https://cmpwn.com/@sir&#34;&gt;Mastodon&lt;/a&gt;, or IRC (SirCmpwn on any network). I&amp;rsquo;d
be happy to help!&lt;/p&gt;
</description>
    </item><item>
      <title>I&#39;m losing faith in America</title>
      <link>./2016/11/05/Losing-faith-in-America.html</link>
      <pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/11/05/Losing-faith-in-America.html</guid>
      <description>&lt;p&gt;I recently quit my job at Linode and started looking for something else to do.
For the first time in my career, I&amp;rsquo;m seriously considering opportunities abroad.
Sorry for the politically charged post - I promise to get back to tech stuff
right away.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/canada.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;On November 8th, I&amp;rsquo;m going to step into the voting booth and will be presented
with the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A criminal who cheated her way into a spot on the ballot&lt;/li&gt;
&lt;li&gt;An egotistical racist maniac&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next president of the United States will probably be Hillary Clinton. I&amp;rsquo;m
sure I don&amp;rsquo;t have to tell you how ridiculous this is. This is a person who has
pulled all of the stops to get her name on the ballot, including &lt;em&gt;voter fraud&lt;/em&gt;
and disturbing amounts of corruption within the Democratic party.  Not to
mention that she&amp;rsquo;s probably going to start a war with Syria, mess with the
already fragile geopolitical relationship we have with Russia, and likely
deserves to be incarcerated for mishandling classified information. Say what you
will about the Republican party - at least Trump won his nomination fair and
square. Bonus: not voting for Hillary is sexist.&lt;/p&gt;
&lt;p&gt;Not that I&amp;rsquo;d prefer it if Trump wins. I have a free sandwich waiting for me at
the deli nearby if he doesn&amp;rsquo;t win. He got his nomination fairly, but that
doesn&amp;rsquo;t mean he deserves it. This is a guy with little political clout who is
incapable of handling international relations or commanding our military. He
staunchly advocates committing war crimes to deal with ISIS. He makes racist,
sweeping generalizations about anyone different from him. He&amp;rsquo;s a misogynist.
Even worse, he&amp;rsquo;s all of these things and seems to actually represent a fair
portion of his supporters.&lt;/p&gt;
&lt;p&gt;Neither of the independents are serious contenders, so I won&amp;rsquo;t bother with why I
don&amp;rsquo;t like them. They haven&amp;rsquo;t earned my vote, either.&lt;/p&gt;
&lt;p&gt;Congress is composed of many of the same sort of people. Corrupt politicians who
answer to the checkbooks of lobbyists who work against the interests of the
American people for the sake of their own. We&amp;rsquo;re facing climate change and our
politicians are taking money from rich fossil fuel lobbyists and damning our
species to extinction. The wealth gap between the rich and the poor grows deeper
and deeper as absurdly rich people get absurdly richer at the expense of the
poor and middle class - through the support of the politicians whose pockets
they&amp;rsquo;ve greased. Their excess wealth could pay for programs to improve our
failing infrastructure and provide hundreds of thousands of jobs in doing so. We
could provide free healthcare for all Americans too, if it wasn&amp;rsquo;t for the
ongoing debate about whether or not being alive and healthy is a fundamental
human right - many thanks to the pharmaceutical interests for shaping this
debate to maximize their profits. It&amp;rsquo;d be less of a problem if many companies
weren&amp;rsquo;t getting rich off of the ever widening waistlines of Americans, too.&lt;/p&gt;
&lt;p&gt;Mass surveillance remains in full effect even years after Snowden&amp;rsquo;s revelations.
The ridiculous war on drugs keeps putting people behind bars for lifetimes for
victimless crimes to support the financial needs of private prisons and local
police departments, who themselves are now better armed than most militaries,
based on drug policies that have no basis in reality. 97% of trails end in plea
bargains instead of justice, and minimum sentences ensure these people spend
ridiculous amounts of time in prisons that punish them rather than rehabilitate
them into productive citizens. A judge will hold a defendant indefinitely in
prison without a conviction for refusing to disclose their disk encryption
password in accordance with their 5th amendment rights - though if many
political players had their way, encryption would be illegal anyway.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a word for what America is: &lt;strong&gt;corrupt&lt;/strong&gt;. What the fuck is going on in
this country? We aren&amp;rsquo;t a representative democracy by any stretch of the
imagination. We have become an oligarchy. We are ruled by money.&lt;/p&gt;
&lt;p&gt;I love America, honestly. My whole family is here and I connect most with the
American people. We have an incredibly rich land and great cities full of great
innovators and interesting people. I hate that it&amp;rsquo;s become what it is today. I
don&amp;rsquo;t expect anywhere else to be perfect, but we should be ashamed of how we
look next to some other countries out there.&lt;/p&gt;
</description>
    </item><item>
      <title>Using the right tool for the job</title>
      <link>./2016/09/17/Use-the-right-tool.html</link>
      <pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/09/17/Use-the-right-tool.html</guid>
      <description>&lt;p&gt;One of the most important choices you&amp;rsquo;ll make for the software you write is what
you write it in, what frameworks you use, the design methodologies to subscribe
to, and so on. This choice doesn&amp;rsquo;t seem to get the respect it&amp;rsquo;s due. These are
some of the only choices you&amp;rsquo;ll make that &lt;em&gt;you cannot change&lt;/em&gt;. Or, at least,
these choices are among the most difficult ones to change.&lt;/p&gt;
&lt;p&gt;People often question why TrueCraft is written in C# next to projects like Sway
in C, alongside KnightOS in Assembly or sr.ht in Python. It would certainly be
easier from the outset if I made every project in a language I&amp;rsquo;m comfortable
with, using tools and libraries I&amp;rsquo;m comfortable with, and there&amp;rsquo;s certainly
something to be had for that. That&amp;rsquo;s far from being the only concern, though.&lt;/p&gt;
&lt;p&gt;A new project is a &lt;em&gt;great&lt;/em&gt; means of learning a new language or framework - the
only effective means, in fact. However, the inspiration and drive for new
projects doesn&amp;rsquo;t come often. I think that the opportunity for learning is more
important than the short term results of producing working code more quickly.
Making a choice that&amp;rsquo;s more well suited to the problem at the expense of comfort
will also help your codebase in the long run. Why squander the opportunity to
choose something unfamiliar when you have the rare opportunity to start working
on a new project?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not advocating for you to use something new for every project, though. I&amp;rsquo;m
suggesting that you detatch your familiarity with your tools from the
decision-making process. I often reach for old tools when starting a new
project, but I have learned enough about new tools that I can judge what
projects are a good use-case for them. Sometimes this doesn&amp;rsquo;t work out, too - I
just threw away and rewrote a prototype in C after deciding that it wasn&amp;rsquo;t a
good candidate for Rust.&lt;/p&gt;
&lt;p&gt;Often it does work out, though. I&amp;rsquo;m glad I chose to learn Python for MediaCrush
despite having no experience with it (thanks again for the help with that,
Jose!). Today I still know it was the correct choice and knowing it has hugely
expanded my programming skills, and without that choice there probably wouldn&amp;rsquo;t
have been a Kerbal Stuff or a sr.ht or likely even the new API we&amp;rsquo;re working on
at Linode. I&amp;rsquo;m glad I chose to learn C for z80e, though I had previously written
emulators in C#. Without it there wouldn&amp;rsquo;t be many other great tools in the
KnightOS ecosystem written in C, and there wouldn&amp;rsquo;t be a Sway or an aerc. I&amp;rsquo;m
glad I learned ES6 and React instead of falling back on the familiar Knockout.js
when building prototypes for the new Linode manager as well.&lt;/p&gt;
&lt;p&gt;Today, I have a mental model of the benefits and drawbacks of a lot of
languages, frameworks, libraries, and platforms I don&amp;rsquo;t know how to use. I&amp;rsquo;m
sort of waiting for projects that would be well suited to things like Rust or
Django or Lisp or even Plan 9. Remember, the skills you already know make for a
great hammer, but you shouldn&amp;rsquo;t nail screws to the wall.&lt;/p&gt;
</description>
    </item><item>
      <title>What motivates the authors of the software you use?</title>
      <link>./2016/09/09/What-motivates-the-authors-of-the-software-you-use.html</link>
      <pubDate>Fri, 09 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/09/09/What-motivates-the-authors-of-the-software-you-use.html</guid>
      <description>&lt;p&gt;We face an important choice in our lives as technophiles, hackers, geeks: the
choice between proprietary software and free/open source software. What
platforms we choose to use are important. We have a choice between Windows, OS
X, and Linux (not to mention the several less popular choices). We choose
between Android or iOS. We choose hardware that requires nonfree drivers or ones
that don&amp;rsquo;t. We choose to store our data in someone else&amp;rsquo;s cloud or in our own.
How do we make the right choice?&lt;/p&gt;
&lt;p&gt;I think it&amp;rsquo;s important to consider the basic motivations behind the software you
choose to use. Why did the author write it? What are their goals? How might that
influence the future (or present) direction of this software?&lt;/p&gt;
&lt;p&gt;In the case of most proprietary software, the motivations are to make money.
They make decisions that benefit the company rather than the user. If you&amp;rsquo;re
paying for the software, they might use vendor lock-in strategies to prevent you
from having ownership of your data. If you don&amp;rsquo;t pay for the software, they
might place ads on it, sell your personal information, etc. When Cloud Storage
Incorporated is sold to Somewhat Less Trustworthy Business, who&amp;rsquo;s to say that
your data is in good hands?&lt;/p&gt;
&lt;p&gt;In the case of most open source&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; software, however, things are different.
The decisions the developers make are generally working in the interests of the
user. In open source, people work as people, not as companies. You can find the
name and email address of the person who wrote a particular feature and send
them bugs and questions.&lt;/p&gt;
&lt;p&gt;An open source Facebook wouldn&amp;rsquo;t be rearranging and filtering your timeline to
best suit their advertisers interests. An open source iCloud would include
import and export tools so you can take your data elsewhere if you so choose. An
open source phone wouldn&amp;rsquo;t be loaded with unremovable crapware, and even if it
was, you could patch it.&lt;/p&gt;
&lt;p&gt;When you install software on Linux, you get cryptographically verified packages
from individuals you can trust. You can look up who packaged your software and
get to know them personally, or even help them out! You can download the files
necessary to build the package from scratch and do so, adding any tweaks and
customizations as you wish. You don&amp;rsquo;t have a human point of contact for Facebook
or GMail.&lt;/p&gt;
&lt;p&gt;Yes, there is a usability tradeoff. It is often more difficult to use open
source software. However, it&amp;rsquo;s also often more powerful, tweakable, flexible,
and hackable.&lt;/p&gt;
&lt;p&gt;Next time you decide what software &lt;em&gt;you&lt;/em&gt; should use, ask yourself: does this
software serve my interests or someone else&amp;rsquo;s?&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I&amp;rsquo;m certain some readers will take offense at my language choice in this article with respect to free/libre/open source software - I chose my words intentionally. I&amp;rsquo;ll talk more about my opinions on the free software movement in a later post. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>[VIDEO] Arch Linux with full disk encryption in (about) 15 minutes</title>
      <link>./2016/08/18/Arch-Linux-with-full-disk-encryption-in-15-minutes.html</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/08/18/Arch-Linux-with-full-disk-encryption-in-15-minutes.html</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;./css/video-js.css&#34;&gt;
&lt;script&gt;
window.HELP_IMPROVE_VIDEOJS = false;
&lt;/script&gt;
&lt;script src=&#34;./js/video.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;After my &lt;a href=&#34;./2016/06/29/Privacy-as-a-hobby.html&#34;&gt;blog post&lt;/a&gt; emphasizing the
importance of taking control of your privacy, I&amp;rsquo;ve decided to make a few more
posts going over detailed instructions on how to actually do so. Today we have a
video that goes over the process of installing Arch Linux with full disk
encryption.&lt;/p&gt;
&lt;p&gt;This is my first go at publishing videos on my blog, so please provide some
feedback in the comments of this article. I&amp;rsquo;d prefer to use my blog instead of
YouTube for publishing technical videos, since it&amp;rsquo;s all open source, ad-free,
and DRM-free. Let me know if you&amp;rsquo;d like to see more content like this on my
blog and which topics you&amp;rsquo;d like covered - I intend to at least release another
video going over this process for Ubuntu as well.&lt;/p&gt;
&lt;video class=&#34;video-js vjs-16-9&#34; data-setup=&#34;{}&#34; controls&gt;
  &lt;source src=&#34;https://sr.ht/archlinux.webm&#34; type=&#34;video/webm&#34;&gt;
  &lt;p&gt;Your browser does not support HTML5 video.&lt;/p&gt;
&lt;/video&gt;
&lt;p&gt;&lt;a class=&#34;pull-right&#34; href=&#34;https://sr.ht/archlinux.webm&#34;&gt;Download video (WEBM)&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;clearfix&#34;&gt;&lt;/div&gt;
&lt;p&gt;The video goes into detail on each of these steps, but here&amp;rsquo;s the high level
overview of how to do this. Always check the latest version of the &lt;a href=&#34;https://wiki.archlinux.org/index.php/Installation_guide&#34;&gt;Install
Guide&lt;/a&gt; and the
&lt;a href=&#34;https://wiki.archlinux.org/index.php/Dm-crypt&#34;&gt;dm-crypt&lt;/a&gt; page on the Arch Wiki
for the latest procedure.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Partition your disks with gdisk and be sure to set aside a partition for
/boot&lt;/li&gt;
&lt;li&gt;Create a filesystem on /boot&lt;/li&gt;
&lt;li&gt;(optional) Securely erase all of the existing data on your disks with &lt;code&gt;dd if=/dev/zero of=/dev/sdXY bs=4096&lt;/code&gt; - &lt;em&gt;note: this is a correction from the
command mentioned in the video&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Set up encryption for your encrypted partitions with &lt;code&gt;cryptsetup luksFormat /dev/sdXX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open the encrypted volumes with &lt;code&gt;cryptsetup open /dev/sdXX [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create filesystems on /dev/mapper/[names]&lt;/li&gt;
&lt;li&gt;Mount all of the filesystems on /mnt&lt;/li&gt;
&lt;li&gt;Perform the base install with &lt;code&gt;pacstrap /mnt base [extra packages...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;genfstab -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arch-chroot /mnt /usr/bin/bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ln -s /usr/share/zoneinfo/[region]/[zone] /etc/localtime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hwclock --systohc --utc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit /etc/locale.gen to your liking and run &lt;code&gt;locale-gen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locale &amp;gt; /etc/locale.conf&lt;/code&gt; - note this only works for en_US users, adjust if
necessary&lt;/li&gt;
&lt;li&gt;Edit /etc/hostname to your liking&lt;/li&gt;
&lt;li&gt;Reconfigure the network&lt;/li&gt;
&lt;li&gt;Edit /etc/mkinitcpio.conf and ensure that the &lt;code&gt;keyboard&lt;/code&gt; and &lt;code&gt;encrypt&lt;/code&gt; hooks
run before the &lt;code&gt;filesystems&lt;/code&gt; hook&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkinitcpio -p linux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the root password with &lt;code&gt;passwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Configure /etc/crypttab with any non-root encrypted disks you need. You can
get partition UUIDs with &lt;code&gt;ls -l /dev/disk/by-partuuid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Configure your kernel command line to include
&lt;code&gt;cryptdevice=PARTUUID=[...]:[name] root=/dev/mapper/[name] rw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install your bootloader and reboot!&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item><item>
      <title>Sway 0.9 &amp; One year of Sway</title>
      <link>./2016/08/02/Sway-0.9-in-retro.html</link>
      <pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/08/02/Sway-0.9-in-retro.html</guid>
      <description>&lt;p&gt;Today marks one year since the &lt;a href=&#34;https://github.com/SirCmpwn/sway/commit/6a33e1e3cddac31b762e4376e29c03ccf8f92107&#34;&gt;initial
commit&lt;/a&gt;
of Sway. Over the year since, we&amp;rsquo;ve written 1,823 commits by 54 authors,
totalling 16,601 lines of C (and 1,866 lines of header files). This was written
over the course of 515 pull requests and 300 issues. Today, most i3 features are
supported. In fact, as of last week, all of the features from the i3
configuration I used before I started working on Sway are now supported by Sway.
Today, Sway looks like this (click to expand):&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/ICd5.png&#34;&gt;&lt;img src=&#34;https://sr.ht/ICd5.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those who are new to the project, &lt;a href=&#34;http://swaywm.org&#34;&gt;Sway&lt;/a&gt; is an
i3-compatible Wayland compositor. That is, your existing &lt;a href=&#34;http://i3wm.org/&#34;&gt;i3&lt;/a&gt;
configuration file will work as-is on Sway, and your keybindings and colors and
fonts and for_window rules and so on will all be the same. It&amp;rsquo;s i3, but for
Wayland, plus it&amp;rsquo;s got some bonus features. Here&amp;rsquo;s a quick rundown of what&amp;rsquo;s
happened since the &lt;a href=&#34;./2016/04/20/State-of-sway.html&#34;&gt;previous state of Sway&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stacked &amp;amp; tabbed layouts&lt;/li&gt;
&lt;li&gt;Customizable input acceleration&lt;/li&gt;
&lt;li&gt;Mouse support for swaybar&lt;/li&gt;
&lt;li&gt;Experimental HiDPI support&lt;/li&gt;
&lt;li&gt;New features for swaylock and swaybg&lt;/li&gt;
&lt;li&gt;Support for more i3 IPC features&lt;/li&gt;
&lt;li&gt;Tracking of the workspace new windows should arrive on&lt;/li&gt;
&lt;li&gt;Improved compatibility with i3&lt;/li&gt;
&lt;li&gt;Many improvements to the documentation&lt;/li&gt;
&lt;li&gt;Hundreds of bug fixes and small improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the last State of Sway, we&amp;rsquo;ve also seen packages land in the official
repositories of Gentoo, OpenSUSE Tumbleweed, and NixOS (though the last group
warn me that it&amp;rsquo;s experimental). And now for some updated stats. Here&amp;rsquo;s the
breakdown of &lt;strong&gt;lines of code per author&lt;/strong&gt; for the top ten authors (with the
change from the previous state of Sway in parens):&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;4659 (+352)&lt;/td&gt;&lt;td&gt;Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;3024 (-35)&lt;/td&gt;&lt;td&gt;Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;2232 (+53)&lt;/td&gt;&lt;td&gt;taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;1786 (-40)&lt;/td&gt;&lt;td&gt;S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;1090 (+1090)&lt;/td&gt;&lt;td&gt;Zandr Martin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;619 (-63)&lt;/td&gt;&lt;td&gt;Luminarys&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;525 (-19)&lt;/td&gt;&lt;td&gt;Cole Mickens&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;461 (-54)&lt;/td&gt;&lt;td&gt;minus&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;365 (-20)&lt;/td&gt;&lt;td&gt;Christoph Gysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;334 (-11)&lt;/td&gt;&lt;td&gt;Kevin Hamacher&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Notably, Zandr Martin has started regular contributions to Sway and brought
himself right up to 5th place in a short time, and while he&amp;rsquo;s still learning C to
boot. Not included here are his recent forays into contributing to our
dependencies as well. Thanks man! This time around, I also lost a much more
respectable line count - only 35 compared to 457 from the last update.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the total &lt;strong&gt;number of commits per author&lt;/strong&gt; for each of the top ten
committers:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;842&lt;/td&gt;&lt;td&gt; Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;239&lt;/td&gt;&lt;td&gt; Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;186&lt;/td&gt;&lt;td&gt; taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;97&lt;/td&gt;&lt;td&gt; Luminarys&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;91&lt;/td&gt;&lt;td&gt; S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt; Christoph Gysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;48&lt;/td&gt;&lt;td&gt; Zandr Martin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;30&lt;/td&gt;&lt;td&gt; minus&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt; David Eklov&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt; Mykyta Holubakha&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Most of what I do for Sway personally is reviewing and merging pull requests.
Here&amp;rsquo;s the same figures using &lt;strong&gt;number of commits per author, excluding merge
commits&lt;/strong&gt;, which changes my stats considerably:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;383&lt;/td&gt;&lt;td&gt; Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;224&lt;/td&gt;&lt;td&gt; Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;170&lt;/td&gt;&lt;td&gt; taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;96&lt;/td&gt;&lt;td&gt; Luminarys&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;91&lt;/td&gt;&lt;td&gt; S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt; Christoph Cysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;38&lt;/td&gt;&lt;td&gt; Zandr Martin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;30&lt;/td&gt;&lt;td&gt; minus&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt; David Eklov&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt; Mykyta Holubakha&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These stats only cover the top ten in each, but there are more - check out the
&lt;a href=&#34;https://github.com/SirCmpwn/sway/graphs/contributors&#34;&gt;full list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sway is still going very strong, and continues developing at a fast pace. I&amp;rsquo;ve
updated &lt;a href=&#34;http://swaywm.org/roadmap&#34;&gt;the roadmap&lt;/a&gt; with our plans for Sway 1.0.
You might notice a few features have been reprioritized here, which increases
the scope of Sway 1.0. It&amp;rsquo;ll be worth it, though, to make sure we have a solid
1.0 release. Hopefully we&amp;rsquo;ll see that and more within the year ahead!&lt;/p&gt;
</description>
    </item><item>
      <title>Using -Wl,--wrap for mocking in C</title>
      <link>./2016/07/19/Using-Wl-wrap-for-mocking-in-C.html</link>
      <pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/07/19/Using-Wl-wrap-for-mocking-in-C.html</guid>
      <description>&lt;p&gt;One of the comforts I&amp;rsquo;ve grown used to in higher level languages when testing
my code is mocking. The idea is that in order to test some code in isolation,
you should &amp;ldquo;mock&amp;rdquo; the behavior of things it depends on. Let&amp;rsquo;s see a (contrived)
example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read_to_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we want to test this function without mocking, we would need to actually open
a specially crafted file and provide a &lt;code&gt;FILE*&lt;/code&gt; to the function. However, with
the linker &lt;code&gt;--wrap&lt;/code&gt; flag, we can define a wrapper function. Using &lt;code&gt;-Wl,[flag]&lt;/code&gt;
in your C compiler command line will pass &lt;code&gt;[flag]&lt;/code&gt; to the linker. Gold (GNU) and
lld (LLVM) both support the wrap flag, which specifies a function to be
&amp;ldquo;wrapped&amp;rdquo;. If I use &lt;code&gt;-Wl,--wrap=fread&lt;/code&gt;, then the code above will be compiled
like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read_to_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__wrap_fread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And if I add &lt;code&gt;-Wl,--wrap=feof&lt;/code&gt; we&amp;rsquo;ll get this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read_to_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__wrap_feof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__wrap_fread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we can define some functions that do the behavior we need to test instead
of invoking fread directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;feof_return_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__wrap_feof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1234&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;feof_return_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_read_to_end_eof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;feof_return_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;read_to_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1234&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using &lt;code&gt;--wrap&lt;/code&gt; also conveniently defines &lt;code&gt;__real_feof&lt;/code&gt; and &lt;code&gt;__real_fread&lt;/code&gt; if we
need them.&lt;/p&gt;
&lt;p&gt;Unfortunately, you can&amp;rsquo;t have two different wrappers for the same function in
an executable. This could lead to having to write several executables for each,
or making your wrapper function smart enough to have several configurable
outcomes.&lt;/p&gt;
&lt;p&gt;Eventually I intend to write my own test framework for C, which will use
wrappers to support mocking. I want wrappers to be done automatically and have
it behave something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fake_fread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nmemb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_read_to_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1234&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;mock_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock_feof&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;configure_mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;mock_feof&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;returns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;mock_feof&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;returns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// pzzp is pointer, size_t, size_t, pointer
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Tells us what the fread arguments look like
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;mock_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock_fread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;configure_mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;pzzp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;mock_fread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fake_fread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;read_to_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock_feof&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock_feof&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock_fread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock_fread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock_fread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strcmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item><item>
      <title>Life, liberty, and the pursuit of privacy</title>
      <link>./2016/06/29/Privacy-as-a-hobby.html</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/06/29/Privacy-as-a-hobby.html</guid>
      <description>&lt;p&gt;Privacy is my hobby, and should be a hobby of every technically competent
American. Within the eyes of the law I have a right to secure the privacy of my
information. At least that&amp;rsquo;s the current law - many officials are &lt;a href=&#34;http://www.apple.com/customer-letter/&#34;&gt;trying to
subvert that right&lt;/a&gt;. I figure that we&amp;rsquo;d
better exercise that right while we have it, so that we know how to keep
exercising it once it&amp;rsquo;s illegal and all the information about it dries up.&lt;/p&gt;
&lt;p&gt;One particularly annoying coworker often brings up, &amp;ldquo;what do you have to hide?&amp;rdquo;
Though it would defeat the purpose to explain what I&amp;rsquo;m hiding, let&amp;rsquo;s assume that
what I&amp;rsquo;m hiding is benign, at least legally speaking. I&amp;rsquo;m sure you can
understand why I don&amp;rsquo;t want &lt;code&gt;~/Porn&lt;/code&gt; to be public information should my
equipment be seized after I publish this blog post and an incompetent (or angry)
investigator leaks it. Building secure facilities for housing secrets is fun!
That&amp;rsquo;s true even if there aren&amp;rsquo;t a lot of interesting secrets to hide there.&lt;/p&gt;
&lt;p&gt;But the porn folder brings up an interesting point. I&amp;rsquo;m not ashamed to admit I
have one, but I would be uncomfortable with everyone being able to see it. Or
maybe I&amp;rsquo;m having an affair (a scandalous proposition for a single guy, I know)
and there are relevant texts are on my cell phone. Perhaps I suck at managing my
finances and the spreadsheets in my documents would tell you so. Maybe I have
embarrassing home videos of bedroom activities on my hard drive&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Maybe
there&amp;rsquo;s evidence that I&amp;rsquo;m a recovering alcoholic in my files. Maybe I&amp;rsquo;m a
closeted homosexual and my files prove it, and 10 years from now the homophobes
win and suddenly the country is more hostile to that. Maybe all of this is true
at once!&lt;/p&gt;
&lt;p&gt;Keeping these things secret is an important right, and one I intend to exercise.
I don&amp;rsquo;t want to be accused of some crime and have my equipment seized and then
mishandled by incompetent officials and made public. I don&amp;rsquo;t want a jury chosen
to decide if I really stole that pack of gum when I was 8 and then have
unfavorable secrets leaked. Human nature might lead them to look on my case
unfavorably if they found out about all the tentacle porn or erotic Harry
Potter fanfics I&amp;rsquo;ve been secretly writing. Maybe an investigator finds something
they don&amp;rsquo;t understand, like a private key, and it ends up being exposed through
the proceedings. Maybe this private key proves that I&amp;rsquo;m Satoshi Nakamoto&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and
my life is threatened when the case is closed because of it.&lt;/p&gt;
&lt;p&gt;To the government: &lt;strong&gt;stay the fuck out of my right to encrypt&lt;/strong&gt;, or, as I
like to think of it, my right to use math. They will try, again and again, to
take it from us. They must never win.&lt;/p&gt;
&lt;p&gt;The second act of this blog post is advice on how to go about securing your
privacy. The crucial bit of advice is that you must strive to understand the
systems you use for privacy and security. Look for their weak spots and be aware
of them. Don&amp;rsquo;t deceive yourself about how secure your systems are.&lt;/p&gt;
&lt;p&gt;I try to identify pain points in my security model. Some of them will be hard
to swallow. The first one was Facebook - delete your account&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. I did
this years ago. The second one was harder still - Google. I use an Android
phone running CyanogenMod without Google Play Services. I also don&amp;rsquo;t use GMail
or any Google services (I search with DuckDuckGo and add !sp to use StartPage if
necessary). Another one was not using Windows or OS X. This is easy for me but a
lot of people will bitch and moan about it. A valid privacy &amp;amp; security model
does not include Windows. OS X is an improvement but you&amp;rsquo;d be better off on
Linux. Even your non-technical family can surely figure out how to use Xubuntu
to surf the web.&lt;/p&gt;
&lt;p&gt;I also use browser extensions to subvert tracking and ads. Ad networks have
severely fucked themselves by this point - I absolutely never trust any ads on
the web, and never will, period. Use software like
&lt;a href=&#34;https://github.com/gorhill/uBlock&#34;&gt;uBlock&lt;/a&gt; to get rid of trackers (and speed
up the web, bonus!). I also block lots of trackers in my /etc/hosts file -
&lt;a href=&#34;https://github.com/StevenBlack/hosts&#34;&gt;check this out&lt;/a&gt;. Also check out
&lt;a href=&#34;https://free-software-for-android.github.io/AdAway/&#34;&gt;AdAway&lt;/a&gt; for Android.&lt;/p&gt;
&lt;p&gt;These changes help to remove your need to trust that corporate interests will
be good stewards of your private information. This is very important - no amount
of encryption will help you if you give Google a GPS map of your every move&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;
and your search history&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; and information about basically every page on the
internet you visit&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;. And all of your emails and contacts and appointments on
your calendar. Google can be subpoenaed or subverted&lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; and many other
companies won&amp;rsquo;t even try&lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; to keep your data secret even when they aren&amp;rsquo;t
legally compelled to. I like this image from Maciej Cegłowski&amp;rsquo;s excellent
talk&lt;sup id=&#34;fnref:10&#34;&gt;&lt;a href=&#34;#fn:10&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;10&lt;/a&gt;&lt;/sup&gt; on website obesity about the state of most websites:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/ks75.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;When you give all of this information to Google, Facebook, and others, you&amp;rsquo;re
basically waiving your fifth amendment&lt;sup id=&#34;fnref:11&#34;&gt;&lt;a href=&#34;#fn:11&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;11&lt;/a&gt;&lt;/sup&gt; rights.&lt;/p&gt;
&lt;p&gt;Once you do have control of your information, there are steps you should take to
keep it secure. The answer is encryption. I use
&lt;a href=&#34;https://wiki.archlinux.org/index.php/Dm-crypt&#34;&gt;dm-crypt&lt;/a&gt; which allows me to
encrypt my entire hard drive on Linux. I&amp;rsquo;m prompted for a password on boot and
then everything proceeds (and I&amp;rsquo;ve never noticed any performance issues, for the
record).&lt;/p&gt;
&lt;p&gt;I also do most of my mobile computing on a laptop running libreboot&lt;sup id=&#34;fnref:12&#34;&gt;&lt;a href=&#34;#fn:12&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;12&lt;/a&gt;&lt;/sup&gt; with
100% open source software. The weak point here is that if your hardware is
compromised and you don&amp;rsquo;t know it, they could steal your password. One possible
solution is keeping your boot partition and perhaps another key on a flash
drive, but this doesn&amp;rsquo;t fully solve the problem. I suggest looking into things
like case intrusion detection and working on being aware of it when your
hardware is messed with.&lt;/p&gt;
&lt;p&gt;I mentioned earlier that my phone is running CyanogenMod without any of the
Google apps. The weak point here is the radio, which is very insecure and likely
riddled with vulnerabilities. I intend to build my own phone soon with a
Raspberry Pi, where I can have more control over this - things like being able
to disconnect power to the radio or disconnect the microphone when not in use
will help.&lt;/p&gt;
&lt;p&gt;I also self host my email, which was a huge pain in the ass to set up, but is
lovely now that I have it. At some point I intend to write a better mail server
to make this easier. I use opportunistic PGP encryption for my emails, but I
send depressingly few encrypted emails like this due to poor adoption (follow me
on &lt;a href=&#34;https://keybase.io/sircmpwn&#34;&gt;keybase&lt;/a&gt;? I&amp;rsquo;ll give you an invitation if you
send me an encrypted email asking for one!)&lt;/p&gt;
&lt;p&gt;If you have any questions about how to implement any of this, help identifying
the weaknesses in your setup, or anything else, please feel free to reach out to
me via email (&lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;sir@cmpwn.com&lt;/a&gt;+&lt;a href=&#34;./publickey.txt&#34;&gt;F4EA1B88&lt;/a&gt;)
or &lt;a href=&#34;https://twitter.com/sircmpwn&#34;&gt;Twitter&lt;/a&gt; or whatever. Good luck sticking it to
the man!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ICloud_leaks_of_celebrity_photos&#34;&gt;ICloud leaks of celebrity photos&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The secretive inventor of Bitcoin. I&amp;rsquo;m not Satoshi, if you were wondering. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/help/delete_account?rdrhc&#34;&gt;Click this&lt;/a&gt; to do so &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;But I liiiiike Facebook and it let&amp;rsquo;s me keep up with my frieeeends&amp;hellip;&amp;rdquo; There&amp;rsquo;s no privacy model that includes Facebook and works. Give up. &lt;a href=&#34;https://stallman.org/facebook.html&#34;&gt;Read this&lt;/a&gt; and try to ignore the childish language and see the tangible evidence instead. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;If you have location services enabled on your phone, &lt;a href=&#34;https://maps.google.com/locationhistory/&#34;&gt;here&amp;rsquo;s a map of everywhere you&amp;rsquo;ve been&lt;/a&gt;. Enjoy! &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://myactivity.google.com/myactivity&#34;&gt;Here&amp;rsquo;s all of your searches&lt;/a&gt;. You can delete the history here, supposedly. I bet it doesn&amp;rsquo;t unfeed that history to your personal advertising neural network at Google. &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Google Adsense and Google Analytics are present on basically every website. I&amp;rsquo;m positive they&amp;rsquo;re writing it down somewhere when you hit a page with those on it. Facebook certainly is, too. &lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:8&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Remember &lt;a href=&#34;https://en.wikipedia.org/wiki/PRISM&#34;&gt;PRISM&lt;/a&gt;? &lt;a href=&#34;#fnref:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:9&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://www.pbs.org/newshour/rundown/report-att-cooperated-extensively-nsa-sharing-billions-phone-email-records/&#34;&gt;Like AT&amp;amp;T, for example&lt;/a&gt; &lt;a href=&#34;#fnref:9&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:10&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://idlewords.com/talks/website_obesity.htm&#34;&gt;The Website Obesity Crisis&lt;/a&gt; &lt;a href=&#34;#fnref:10&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:11&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;That&amp;rsquo;s the right to remain silent. Come on, you should know this. &lt;a href=&#34;#fnref:11&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:12&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://libreboot.org/&#34;&gt;libreboot&lt;/a&gt; is an open source BIOS. I got my laptop from &lt;a href=&#34;https://minifree.org/&#34;&gt;minifree&lt;/a&gt;, which directly supports the libreboot project with their profits. &lt;a href=&#34;#fnref:12&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Understanding pointers</title>
      <link>./2016/05/28/Understanding-pointers.html</link>
      <pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/05/28/Understanding-pointers.html</guid>
      <description>&lt;p&gt;I was recently chatting with a new contributor to Sway who is using the project
as a means of learning C, and he had some questions about what &lt;code&gt;void**&lt;/code&gt; meant
when he found some in the code. It became apparent that this guy only has a
basic grasp on pointers at this point in his learning curve, and I figured it
was time for another blog post - so today, I&amp;rsquo;ll explain pointers.&lt;/p&gt;
&lt;p&gt;To understand pointers, you must first understand how memory works. Your RAM is
basically a flat array of
&lt;a href=&#34;https://en.wikipedia.org/wiki/Octet_(computing)&#34;&gt;octets&lt;/a&gt;. Your compiler
describes every data structure you use as a series of octets. For the context of
this article, let&amp;rsquo;s consider the following memory:&lt;/p&gt;
&lt;p&gt;{:.table}&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0000&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0001&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0002&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0003&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0004&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0005&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0006&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0007&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x08&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x42&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can refer to each element of this array by its index, or address. For
example, the value at address 0x0004 is 0x08. On this system, we&amp;rsquo;re using 16-bit
addresses to refer to 8-bit values. On an i686 (32-bit) system, we use 32-bit
addresses to refer to 8-bit values. On an amd64 (64-bit) system, we use 64-bit
addresses to refer to 8-bit values. On Notch&amp;rsquo;s imaginary DCPU-16 system, we use
16-bit addresses to refer to 16-bit values.&lt;/p&gt;
&lt;p&gt;To refer to the value at 0x0004, we can use a pointer. Let&amp;rsquo;s declare it like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x0004&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we&amp;rsquo;re declaring a variable named value, whose type is &lt;code&gt;uint8_t*&lt;/code&gt;. The *
indicates that it&amp;rsquo;s a pointer. Now, because this is a 16-bit system, the size of
a pointer is 16 bits. If we do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It will print 2, because it takes 16-bits (or 2 bytes) to refer to an address on
this system, even though the value there is 8 bits. On your system it would
probably print 8, or maybe 4 if you&amp;rsquo;re on a 32-bit system. We could also do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x0004&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case we&amp;rsquo;re not casting the &lt;code&gt;uint16_t&lt;/code&gt; value 0x0004 to a &lt;code&gt;uint8_t&lt;/code&gt;, which
would truncate the integer. No, instead, we&amp;rsquo;re casting it to a &lt;code&gt;uint8_t*&lt;/code&gt;, which
is the size required to represent a pointer on this system. All pointers are the
same size.&lt;/p&gt;
&lt;h2 id=&#34;dereferencing-pointers&#34;&gt;Dereferencing pointers&lt;/h2&gt;
&lt;p&gt;We can refer to the value at the other end of this pointer by &lt;em&gt;dereferencing&lt;/em&gt; it.
The pointer is said to contain a &lt;em&gt;reference&lt;/em&gt; to a value in memory. By
&lt;em&gt;dereferencing&lt;/em&gt; it, we can obtain that value. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x0004&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// prints 8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;working-with-multi-byte-values&#34;&gt;Working with multi-byte values&lt;/h2&gt;
&lt;p&gt;Even though memory is basically a big array of &lt;code&gt;uint8_t&lt;/code&gt;, thankfully we can work
with other kinds of data structures inside of it. For example, say we wanted to
store the value 0x1234 in memory. This doesn&amp;rsquo;t fit in 8 bits, so we need to
store it at two different addresses. For example, we could store it at 0x0006
and 0x0007:&lt;/p&gt;
&lt;p&gt;{:.table}&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0000&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0001&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0002&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0003&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0004&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0005&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0006&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0007&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x08&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x42&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x34&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;*0x0007 makes up the first byte of the value, and *0x0006 makes up the second
byte of the value.&lt;/p&gt;
&lt;div class=&#34;well&#34;&gt;
    Why not the other way around? Well, most systems these days use the &#34;little
    endian&#34; notation for storing multi-byte integers in memory, which stores the
    least significant byte first. The least significant byte is the one with the
    smallest order of magnitude (in base sixteen). To get the final number, we
    use (0x12 * 0x100) + (0x34 * 0x1), which gives us 0x1234. Read more about
    endianness &lt;a href=&#34;https://en.wikipedia.org/wiki/Endianness&#34;&gt;here&lt;/a&gt;.
&lt;/div&gt;
&lt;p&gt;C allows us to use pointers that refer to these sorts of composite values, like
so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x0006&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0x%X&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Prints 0x1234
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we&amp;rsquo;ve declared a pointer to a value whose type is &lt;code&gt;uint16_t&lt;/code&gt;. Note that the
size of this pointer is the same size of the &lt;code&gt;uint8_t*&lt;/code&gt; pointer - 16 bits, or
two bytes. The value it &lt;em&gt;references&lt;/em&gt;, though, is a different type than
&lt;code&gt;uint8_t*&lt;/code&gt; references.&lt;/p&gt;
&lt;h2 id=&#34;indirect-pointers&#34;&gt;Indirect pointers&lt;/h2&gt;
&lt;p&gt;Here comes the crazy part - you can work with pointers to pointers. The address
of the &lt;code&gt;uint16_t&lt;/code&gt; pointer we&amp;rsquo;ve been talking about is 0x0006, right? Well, we
can store that number in memory as well. If we store it at 0x0002, our memory
looks like this:&lt;/p&gt;
&lt;p&gt;{:.table}&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0000&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0001&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0002&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0003&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0004&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0005&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0006&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0007&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x06&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x08&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x42&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x34&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The question might then become, how do we get it out again? Well, we can use a
pointer &lt;em&gt;to that pointer&lt;/em&gt;! Check out this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer_to_a_pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x0002&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code just declared a variable whose type is &lt;code&gt;uint16_t**&lt;/code&gt;, which a pointer
whose value is a &lt;code&gt;uint16_t*&lt;/code&gt;, which itself points to a value that is a
&lt;code&gt;uint16_t&lt;/code&gt;. Pretty cool, huh?  We can dereference this too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer_to_a_pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x0002&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer_to_a_pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0x%X&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Prints 0x1234
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We don&amp;rsquo;t actually even need the intermediate variable. This works too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer_to_a_pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x0002&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0x%X&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer_to_a_pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Prints 0x1234
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;void-pointers&#34;&gt;Void pointers&lt;/h2&gt;
&lt;p&gt;The next question that would come up to your average C programmer would be,
&amp;ldquo;well, what is a &lt;code&gt;void*&lt;/code&gt;?&amp;rdquo; Well, remember earlier when I said that all pointers,
regardless of the type of value they reference, are just fixed size integers?
In the imaginary system we&amp;rsquo;ve been talking about, pointers are 16-bit addresses,
or indexes, that refer to places in RAM. On the system you&amp;rsquo;re reading this
article on, it&amp;rsquo;s probably a 64-bit integer. Well, we don&amp;rsquo;t actually need to
specify the type to be able to manipulate pointers if they&amp;rsquo;re just a fixed size
integer - so we don&amp;rsquo;t have to. A &lt;code&gt;void*&lt;/code&gt; stores an arbitrary address without
bringing along any type information. You can later &lt;em&gt;cast&lt;/em&gt; this variable to a
specific kind of pointer to dereference it. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x0006&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uintptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0x%X&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// prints 0x34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Take a closer look at this code, and recall that 0x0006 refers to a 16-bit value
from the previous section. Here, though, we&amp;rsquo;re treating it as an 8-bit value -
the &lt;code&gt;void*&lt;/code&gt; contains no assumptions about what kind of data is there. The result
is that we end up treating it like an 8-bit integer, which ends up being the
least significant byte of 0x1234;&lt;/p&gt;
&lt;h2 id=&#34;dereferencing-structures&#34;&gt;Dereferencing structures&lt;/h2&gt;
&lt;p&gt;In C, we often work with structs. Let&amp;rsquo;s describe one to play with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coordinates&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coordinates&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our structure describes a linked list of coordinates. X and Y are the
coordinates, and next is a pointer to the next set of coordinates in our list.
I&amp;rsquo;m going to drop two of these in memory:&lt;/p&gt;
&lt;p&gt;{:.table}&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0000&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0001&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0002&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0003&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0004&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0005&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0006&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;0x0007&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0xAD&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0xDE&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0xEF&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0xBE&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x06&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x34&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;========&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let&amp;rsquo;s write some C code to reason about this memory with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coordinates&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;coords&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coordinates&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x0000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we look at this structure in memory, you might already be able to pick out
the values. C is going to store the fields of this struct in order. So, we can
expect the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0x%X, 0x%X&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To print out &amp;ldquo;0xDEAD, 0xBEEF&amp;rdquo;. Note that we&amp;rsquo;re using the structure dereferencing
operator here, &lt;code&gt;-&amp;gt;&lt;/code&gt;. This allows us to dereference values &lt;em&gt;inside&lt;/em&gt; of a
structure we have a pointer to. The other case is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0x%X, 0x-X&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which only works if &lt;code&gt;coords&lt;/code&gt; is not a pointer. We also have a pointer within
this structure named next. You can see in the memory I included above that its
address is 0x0004 and its value is 0x0006 - meaning that there&amp;rsquo;s another &lt;code&gt;struct coordinates&lt;/code&gt; that lives at 0x0006 in memory. If you look there, you can see the
first part of it. It&amp;rsquo;s X coordinate is 0x1234.&lt;/p&gt;
&lt;h2 id=&#34;pointer-arithmetic&#34;&gt;Pointer arithmetic&lt;/h2&gt;
&lt;p&gt;In C, we can use math on pointers. For example, we can do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which would make the value of &lt;code&gt;addr&lt;/code&gt; 0x1001. But this is only true for pointers
whose type is 1 byte in size. Consider this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, &lt;code&gt;addr&lt;/code&gt; becomes 0x1002! This is because ++ on a pointer actually adds
&lt;code&gt;sizeof(type)&lt;/code&gt; to the actual address stored. The idea is that if we only added
one, we&amp;rsquo;d be referring to an address that is &lt;em&gt;in the middle&lt;/em&gt; of a uint16_t,
rather than the next uint16_t in memory that we meant to refer to. This is also
how arrays work. The following two code snippets are equivalent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint16_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;null-pointers&#34;&gt;NULL pointers&lt;/h2&gt;
&lt;p&gt;Sometimes you need to work with a pointer that points to something that may not
exist yet, or a resource that has been freed. In this case, we use a NULL
pointer. In the examples you&amp;rsquo;ve seen so far, 0x0000 is a valid address. This is
just for simplicity&amp;rsquo;s sake. In practice, pretty much no modern computer has
any reason to refer to the value at address 0. For that reason, we use NULL to
refer to an uninitialized pointer. Dereferencing a NULL pointer is generally a
Bad Thing and will lead to segfaults. As a fun side effect, since NULL is 0, we
can use it in an if statement:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ptr is valid
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ptr is not valid
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I hope you found this article useful! If you&amp;rsquo;d
like something fun to read next, read about &lt;a href=&#34;http://c2.com/cgi/wiki?ThreeStarProgrammer&#34;&gt;&amp;ldquo;three star
programmers&amp;rdquo;&lt;/a&gt;, or programmers who
have variables like &lt;code&gt;void***&lt;/code&gt;.&lt;/p&gt;
</description>
    </item><item>
      <title>In Memoriam - Mozilla</title>
      <link>./2016/05/11/In-Memoriam-Mozilla.html</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/05/11/In-Memoriam-Mozilla.html</guid>
      <description>&lt;p&gt;Today we look back to the life of Mozilla, a company that was best known for
creating the Firefox web browser. I remember a company that made the web better
and more open by providing a browser that was faster and more customizable than
anyone had ever seen, and by making that browser free and open source.&lt;/p&gt;
&lt;p&gt;I expect many of my readers will be older than I am, but my first memories of
Firefox are back in high school with Firefox 3. I fondly remember my discovery
of it. Mozilla gave us a faster and more powerful web browser to use on school
computers. The other choice was Internet Explorer 6 - but with a flash drive we
could run a &amp;ldquo;portable&amp;rdquo; version of Firefox instead. Using tabbed web browsing was
a clear improvement for usability and I loved installing all sorts of cool
add-ons and I&amp;rsquo;m sure I&amp;rsquo;ve spent at least a few hours of my life browsing persona
themes.&lt;/p&gt;
&lt;p&gt;Mozilla continued to improve their web browser, and I loved it. As I grew up and
learned more about techology and started making my way into programming I loved
it even more. I remember a time when I would tell my friends that I&amp;rsquo;d gladly
appoint Mozilla as the steward of the open internet over the W3C. Firefox
continued to evolve and allow for even more customiziability. Firefox truly
became a &lt;a href=&#34;http://www.catb.org/~esr/jargon/html/H/hacker.html&#34;&gt;hacker&lt;/a&gt;&amp;rsquo;s web
browser.&lt;/p&gt;
&lt;p&gt;Eventually a new player called Chrome arrived on the scene. It was slick and new
and very, very fast. Firefox, on the other hand, appeared to become stagnant.
I made the switch to Chrome for a few years. However, to my eventual delight,
Mozilla didn&amp;rsquo;t quit. They kept making Firefox better and faster and continued to
win on customizability and continued to fight for the best internet possible.
One day I tried Firefox again and I found it to be just as friendly and hackable
as it once was, only now it was a speed demon on par with Chrome. I returned to
Firefox for several happy years.&lt;/p&gt;
&lt;p&gt;Chrome adopted a versioning scheme that made Mozilla nervous. They didn&amp;rsquo;t like
being Firefox 4 next to Chrome 11. They made the first of many compromises when
they switched to bumping the major version with each release. Mozilla died in
April of 2011.&lt;/p&gt;
&lt;p&gt;In Mozilla&amp;rsquo;s place, a new company appeared and started to build a new browser.
This new company had good intentions, but has completely lost the spirit of
Mozilla. This new browser is a stain on Mozilla&amp;rsquo;s legacy - it ships with
unremovable nonfree add-ons, removes huge swaths of the original add-on API,
includes a cryptographically walled garden for add-ons, and apparently now
includes an instant messaging and video conferencing platform.&lt;/p&gt;
&lt;p&gt;The new company has been suffering as well. They have sunk enormous time and
effort into projects that are doomed from the start. They tried to make a mobile
phone OS whose UI was powered by technology that&amp;rsquo;s been proven to produce an
inferior mobile experience (HTML+CSS+JS) using the slowest rendering engine on
the market (gecko) on the lowest powered phones on the market. When this
predictably failed, they turned their sights towards running it on even lower
powered IoT devices. This new company has also announced several times that they
are killing off another well established and well loved project (Thunderbird)
from the old Mozilla. They also recently struck a deal with another dying
company, Yahoo, to make their search engine the default for this &amp;ldquo;neo-Firefox&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;To the new company that calls itself Mozilla: you do an injustice to the memory
of Mozilla. I hope that one day we&amp;rsquo;ll see the Mozilla of the past return.&lt;/p&gt;
</description>
    </item><item>
      <title>State of Sway - April 2016</title>
      <link>./2016/04/20/State-of-sway-April-2016.html</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/04/20/State-of-sway-April-2016.html</guid>
      <description>&lt;p&gt;Since the previous &lt;a href=&#34;./2015/12/20/State-of-sway.html&#34;&gt;State of Sway&lt;/a&gt;, we have
accomplished quite a bit. We are now shipping versioned releases of sway, which
include support for window borders, input device configuration, more new
features, and many bug fixes and stability improvements. I&amp;rsquo;m also happy to say
that Sway 0.5 has landed in the Arch Linux community repository and I&amp;rsquo;m starting
to hear rumors of it landing in other Linux distros as well. Here&amp;rsquo;s a quick
rundown of what&amp;rsquo;s happened in the past four months:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Window borders work now&lt;/li&gt;
&lt;li&gt;Input devices are configurable&lt;/li&gt;
&lt;li&gt;swaybar is much more mature, including support for i3status and i3blocks&lt;/li&gt;
&lt;li&gt;swaylock has reached a similar level of maturity&lt;/li&gt;
&lt;li&gt;New &lt;code&gt;include&lt;/code&gt; config command to include sub-configs&lt;/li&gt;
&lt;li&gt;We have a &lt;a href=&#34;https://github.com/SirCmpwn/sway/blob/master/assets/Sway_Wallpaper_Blue_1920x1080.png&#34;&gt;default wallpaper&lt;/a&gt; and a logo now&lt;/li&gt;
&lt;li&gt;musl libc support has been added&lt;/li&gt;
&lt;li&gt;More features of the i3 IPC protocol have been implemented&lt;/li&gt;
&lt;li&gt;18 more i3 commands have been implemented&lt;/li&gt;
&lt;li&gt;Many improvements to documentation&lt;/li&gt;
&lt;li&gt;Hundreds of bug fixes and small improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m a particularly big fan of the new include command, which allows me to add
this to my config file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include ~/.config/sway/config.d/`hostname`/*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The net of this is that it includes a set of configs specific to each machine I
run Sway on, which each have a unique output device &amp;amp; input device configuration
and several other details, but I can include them all under
&lt;a href=&#34;https://gogs.sr.ht/SirCmpwn/dotfiles&#34;&gt;version control&lt;/a&gt; to keep my dotfiles
synced between computers.&lt;/p&gt;
&lt;p&gt;Today, sway looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/me1j.png&#34;&gt;&lt;img src=&#34;https://sr.ht/me1j.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re now making our way towards Sway 1.0. I have put together a roadmap of the
things we have done and the things that remain to do for Sway 1.0, which is
available on the improved website &lt;a href=&#34;http://swaywm.org/roadmap&#34;&gt;here&lt;/a&gt;. We are
still now moving forward on many of these features, including the most asked for
feature: the stacked &amp;amp; tabbed window layouts, which is under development from
Mikkel Oscar Lyderik. He&amp;rsquo;s given me this screenshot to tease you with:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/0CkR.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;All of this is only possible thanks to the hard work of dozens of contributors.
Here&amp;rsquo;s the breakdown of &lt;strong&gt;lines of code per author&lt;/strong&gt; for the top ten authors
(with the difference from the previous State of Sway in parenthesis):&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;4307 (+3180)&lt;/td&gt;&lt;td&gt;Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;3059 (-457)&lt;/td&gt;&lt;td&gt;Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;2285 (+115)&lt;/td&gt;&lt;td&gt;taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;1826 (+40)&lt;/td&gt;&lt;td&gt;S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;682 (-38)&lt;/td&gt;&lt;td&gt;Luminarys&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;544 (+544)&lt;/td&gt;&lt;td&gt;Cole Mickens&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;515 (-19)&lt;/td&gt;&lt;td&gt;minus&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;385 (+185)&lt;/td&gt;&lt;td&gt;Christoph Gysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;345 (+266)&lt;/td&gt;&lt;td&gt;Kevin Hamacher&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;166 (+45)&lt;/td&gt;&lt;td&gt;crondog&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Once again, I&amp;rsquo;m no longer the author of the most lines of code. Sway now
has a grand total of 15,422 lines of C and 2,787 lines of headers. Here&amp;rsquo;s the
total &lt;strong&gt;number of commits per author&lt;/strong&gt; for each of the top 10
committers:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;688&lt;/td&gt;&lt;td&gt; Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;212&lt;/td&gt;&lt;td&gt; Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;191&lt;/td&gt;&lt;td&gt; taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;109&lt;/td&gt;&lt;td&gt; S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;97&lt;/td&gt;&lt;td&gt; Luminarys&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt; Christoph Gysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;34&lt;/td&gt;&lt;td&gt; minus&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt; crondog&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt; Yacine Hmito&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt; progandy&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As the maintainer of sway, &lt;em&gt;a lot&lt;/em&gt; of what I do is reviewing and merging
contributions from others. So these statistics change a bit if we use &lt;strong&gt;number
of commits per author, excluding merge commits&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;343&lt;/td&gt;&lt;td&gt; Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;201&lt;/td&gt;&lt;td&gt; Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;175&lt;/td&gt;&lt;td&gt; taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;109&lt;/td&gt;&lt;td&gt; S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;96&lt;/td&gt;&lt;td&gt; Luminarys&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt; Christoph Gysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;34&lt;/td&gt;&lt;td&gt; minus&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt; crondog&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt; Yacine Hmito&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt; progandy&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These stats only cover the top ten in each, but there are more - check out the
&lt;a href=&#34;https://github.com/SirCmpwn/sway/graphs/contributors&#34;&gt;full list&lt;/a&gt;. Hopefully
next time I write a blog post like this, we&amp;rsquo;ll be well into the lifetime of Sway
1.0!&lt;/p&gt;
</description>
    </item><item>
      <title>How to write a better bloom filter in C</title>
      <link>./2016/04/12/How-to-write-a-better-bloom-filter-in-C.html</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/04/12/How-to-write-a-better-bloom-filter-in-C.html</guid>
      <description>&lt;p&gt;This is in response to
&lt;a href=&#34;http://blog.michaelschmatz.com/2016/04/11/how-to-write-a-bloom-filter-cpp/&#34;&gt;How to write a bloom filter in C++&lt;/a&gt;,
which has good intentions, but is ultimately a less than ideal bloom filter
implementation. I put together a better one in C in a few minutes, and I&amp;rsquo;ll
explain the advantages of it.&lt;/p&gt;
&lt;p&gt;The important differences are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You bring your own hashing functions&lt;/li&gt;
&lt;li&gt;You can add arbitrary data types, not just bytes&lt;/li&gt;
&lt;li&gt;It uses bits directly instead of relying on the &lt;code&gt;std::vector&amp;lt;bool&amp;gt;&lt;/code&gt;
being space effecient&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I chose C because (1) I prefer it over C++ and (2) I just think it&amp;rsquo;s a better
choice for implementing low level data types, and C++ is better used in high
level code.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not going to explain the mechanics of a bloom filter or most of the details
of why the code looks this way, since I think the original post did a fine job
of that. I&amp;rsquo;ll just present my alternate implementation:&lt;/p&gt;
&lt;h2 id=&#34;header&#34;&gt;Header&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef _BLOOM_H
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define _BLOOM_H
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/* Creates a new bloom filter with no hash functions and size * 8 bits. */&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bloom_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/* Frees a bloom filter. */&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bloom_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/* Adds a hashing function to the bloom filter. You should add all of the
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * functions you intend to use before you add any items. */&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bloom_add_hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash_function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/* Adds an item to the bloom filter. */&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bloom_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/* Tests if an item is in the bloom filter.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Returns false if the item has definitely not been added before. Returns true
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * if the item was probably added before. */&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bloom_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;The implementation of this is pretty straightfoward. First, here&amp;rsquo;s the actual
structs behind the opaque bloom_t type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_hash&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hash_function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_filter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The hash functions are a linked list, but this isn&amp;rsquo;t important. You can make
that anything you want. Otherwise we have a bit of memory called &amp;ldquo;bits&amp;rdquo; and the
size of it. Now, for the easy functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bloom_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;calloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bloom_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These should be fairly self explanatory. The first interesting function is here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bloom_add_hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash_function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;calloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given a hashing function from the user, this just adds it to our linked list of
hash functions. There&amp;rsquo;s a slightly different code path if we&amp;rsquo;re adding the first
function. The functions so far don&amp;rsquo;t really do anything specific to bloom
filters. The first one that does is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bloom_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This iterates over each of the hash functions the user has provided and computes
the hash of the data for that function (modulo the size of our bloom filter),
then it adds this to the bloom filter with this line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This just sets the nth bit of the filter where n is the hash. Finally, we have
the test function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bloom_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function is extremely similar, but instead of setting the nth bit, it
checks the nth bit and returns if it&amp;rsquo;s 0:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it! You have a bloom filter with arbitrary data types for insert and
user-supplied hash functions. I wrote up some simple test code to demonstrate
this, after googling for a couple of random hash functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;bloom.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;djb2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5381&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;jenkins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;bloom_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;bloom_add_hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;djb2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;bloom_add_hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jenkins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Should be 0: %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;bloom_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Should be 1: %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Should (probably) be 0: %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bloom_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bloom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;world hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The full code is available &lt;a href=&#34;https://git.sr.ht/~sircmpwn/bloom/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item><item>
      <title>Please use text/plain for email</title>
      <link>./2016/04/11/Please-use-text-plain-for-emails.html</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/04/11/Please-use-text-plain-for-emails.html</guid>
      <description>&lt;p&gt;A lot of people have come to hate email, and not without good reason. I don&amp;rsquo;t
hate using email, and I attribute this to better email habits. Unfortunately,
most email clients these days lead users into bad habits that probably
contribute to the sad state of email in 2016. The biggest problem with email is
the widespread use of HTML email.&lt;/p&gt;
&lt;p&gt;Compare email to snail mail. You probably throw out most of the mail you get -
it&amp;rsquo;s all junk, ads. Think about the difference between snail mail you read and
snail mail you throw out. Chances are, the mail you throw out is flashy flyers
and spam that&amp;rsquo;s carefully laid out by a designer and full of eye candy (kind of
like many HTML emails). However, if you receive a letter from a friend it&amp;rsquo;s
probably going to be a lot less flashy - just text on a page. Reading letters
like this is pleasant and welcome. Emails should be more like this.&lt;/p&gt;
&lt;p&gt;I consider this the basic argument for plaintext emails - they make email
better. There are more specific problems with HTML emails that I can give,
though (not to mention the fact that I read emails &lt;a href=&#34;https://drewdevault.com/2016/03/22/Integrating-a-VT220-into-my-life.html&#34;&gt;on
this&lt;/a&gt;
now).&lt;/p&gt;
&lt;h2 id=&#34;whats-wrong-with-html-email&#34;&gt;What&amp;rsquo;s wrong with HTML email&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Tracking images&lt;/strong&gt; are images that are included in HTML emails with &amp;lt;img
/&amp;gt; tags. These images have URLs with unique IDs in them that hit remote
servers and let them know that you opened the email, along with various details
about your mail client and such. This is a form of tracking, which many people
go to great lengths to prevent with tools like
&lt;a href=&#34;https://github.com/gorhill/uBlock&#34;&gt;uBlock&lt;/a&gt;. Most email clients recognize this,
and actually &lt;em&gt;block&lt;/em&gt; images from being shown without explicit user consent. If
your images aren&amp;rsquo;t even being shown, then why include them? Tracking users is
evil.&lt;/p&gt;
&lt;p&gt;Many &lt;strong&gt;vulnerabilities&lt;/strong&gt; in mail clients also stem from rendering HTML email.
Luckily, no mail clients have JavaScript enabled on their HTML email renderers.
However, security issues related to HTML emails are still found quite often in
mail clients. I don&amp;rsquo;t want to view this crap (and I don&amp;rsquo;t).&lt;/p&gt;
&lt;p&gt;HTML email also makes &lt;strong&gt;phishing&lt;/strong&gt; much easier. I&amp;rsquo;ve often received HTML emails
with links that hide their true intent by using a different href than their text
would suggest (and almost always with a tracking code added, ugh). They are also
&lt;strong&gt;incompatible&lt;/strong&gt; with many email-based workflows, such as inline quoting,
mailing list participation, and sending &amp;amp; working with source code patches.&lt;/p&gt;
&lt;h2 id=&#34;good-habits-for-plaintext-emails&#34;&gt;Good habits for plaintext emails&lt;/h2&gt;
&lt;p&gt;Some nice things are possible when you choose to use plaintext emails. Remember
before when I was comparing emails to snail mail letters? Well, let&amp;rsquo;s continue
those comparisons. Popular email clients of 2016 have thoroughly bastardized
email, but here&amp;rsquo;s what it once was and perhaps what it could be today.&lt;/p&gt;
&lt;p&gt;The common mail client today uses the abhorrent &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Posting_style#Top-posting&#34;&gt;top
posting&lt;/a&gt;&amp;rdquo; format, where
the entire previous message is dumped underneath your reply. As the usual quote
goes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A: Because it messes up the order in which people normally read text.&lt;/p&gt;
&lt;p&gt;Q: Why is top-posting such a bad thing?&lt;/p&gt;
&lt;p&gt;A: Top-posting.&lt;/p&gt;
&lt;p&gt;Q: What is the most annoying thing in e-mail?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A better way to write emails is the same way you write a letter to send via
snail mail. Would you photocopy the entire history of your correspondence and
staple it to your response? After a while you would start paying more for the
weight! Though bandwidth seems cheap now, the habit is still silly. Instead of
copying the entire conversation into your email, quote only the relevant parts
and respond to them inline. For example, let&amp;rsquo;s say I receive this email:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hi Drew!

Could you take a look at the server this afternoon? I think it&#39;s having some
issues with nginx.

I also took care of the upgrades you asked for last night. Sorry it took so
long!

--
John Doe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The best way to respond to this would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hi John!

&amp;gt;Could you take a look at the server this afternoon? I think it&#39;s having some
&amp;gt;issues with nginx.

No problem. I just had a quick look now and nginx was busted. Should be
working now.

&amp;gt;I also took care of the upgrades you asked for last night. Sorry it took so
&amp;gt;long!

Thanks!

--
Drew DeVault
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;John might follow up with this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;Should be working now.

Yep, seems to be up. Thanks!

--
John Doe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much better if you ask me. This works particularly well on mailing lists for
open source projects, where you send a patch and reviewers will respond by
quoting specific parts of your patch and leaving feedback. Just treat emails
like letters!&lt;/p&gt;
&lt;h2 id=&#34;multipart-emails&#34;&gt;Multipart emails&lt;/h2&gt;
&lt;p&gt;I think there are nothing but negatives to HTML email. I use
&lt;a href=&#34;http://www.mutt.org/&#34;&gt;mutt&lt;/a&gt; to read email, which doesn&amp;rsquo;t even render HTML
emails and allows me to compose emails with Vim. But if you absolutely insist on
using HTML emails, please use &lt;a href=&#34;https://en.wikipedia.org/wiki/MIME#Multipart_messages&#34;&gt;multipart
emails&lt;/a&gt;. If you&amp;rsquo;re
sending automated emails, your programming language likely contains a mechanism
to facilitate this. The idea is that you send an alternative text/plain body for
your email. Be sure that this body contains all of the information of the HTML
version. If you do this, I will at least be willing to read your emails.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-use-plaintext-emails&#34;&gt;How do I use plaintext emails?&lt;/h2&gt;
&lt;p&gt;Your mail client should have an option for composing emails with plaintext. Look
through your settings for it and it&amp;rsquo;ll change the default. Then you&amp;rsquo;re free!
Tell your friends to do the same, and your email life will be happier.&lt;/p&gt;
</description>
    </item><item>
      <title>Integrating a VT220 into my life</title>
      <link>./2016/03/22/Integrating-a-VT220-into-my-life.html</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>./2016/03/22/Integrating-a-VT220-into-my-life.html</guid>
      <description>&lt;p&gt;I bought a DEC VT220 terminal a while ago, and put it next to my desk at work. I
use it to read emails on mutt now, and it&amp;rsquo;s actually quite pleasant. There was
some setup involved in making it as comfortable as possible, though.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/BnAH.jpg&#34;&gt;&lt;img src=&#34;https://sr.ht/BnAH.jpg&#34; alt=&#34;My desk at work&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the terminal up close:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/TnC6.jpg&#34;&gt;&lt;img src=&#34;https://sr.ht/TnC6.jpg&#34; alt=&#34;The terminal itself&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;
&lt;p&gt;First, I have several pieces of hardware involved in this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VT220 terminal&lt;/li&gt;
&lt;li&gt;LK201 keyboard (later made obsolete)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.com/B00IDSM6BW&#34;&gt;USB to serial adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.com/B00066HL50&#34;&gt;DB9-&amp;gt;DB29 null modem cable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It took a while to get all of these things, but I was able to get a nice
refurbished terminal and a couple of crappy LK201 keyboards. Luckily I was able
to eventually remove the need for the keyboard.&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Getting this working on Linux is actually pretty simple thanks to decades of
backwards compatability. Plug all of the cords together, turn on the machine,
and (on Arch, at least) run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl start serial-agetty@ttyUSB0.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will start up a getty for you to log into on your terminal. For a while I
would use the LK201 to log in to this getty and spin up a mail cilent.&lt;/p&gt;
&lt;p&gt;I did have to make a couple of changes to serial-agetty@.service, though:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ExecStart=-/sbin/agetty -h -L 19200 %I vt220
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This specifies the TERM variable as &amp;ldquo;vt220&amp;rdquo; and sets the baud rate to 19200. I
had to also set the baud rate in the terminal&amp;rsquo;s settings to 19200 baud as well,
to get the fastest possible terminal.&lt;/p&gt;
&lt;p&gt;I eventually got into the habit of logging into the terminal with the LK201,
then running tmux and attaching to tmux from my desktop session. I would then
hide this tmux terminal in the upper left corner of my display, and move my
mouse over to it when I wanted to interact with the terminal. This let me use
the same keyboard I used for the rest of my computer experience to interact with
the VT220, instead of trying to use the LK201 as well. This was a bit annoying,
so eventually I did some more customization.&lt;/p&gt;
&lt;h2 id=&#34;removing-the-keyboard&#34;&gt;Removing the keyboard&lt;/h2&gt;
&lt;p&gt;I wanted to be able to make everything automatic, so I could just boot my
computer and log in normally and treat the VT220 almost like a fourth monitor. I
started by automating the process of logging in and running tmux.&lt;/p&gt;
&lt;p&gt;First, I created a user for the terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;useradd vt220
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, I wrote a shell script that would serve as the user&amp;rsquo;s login shell and
would start tmux:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$TERM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;screen&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
	sudo /usr/local/bin/login-sircmpwn
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
	tmux -S /var/tmux/vt220.sock
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I made that directory, &lt;code&gt;/var/tmux/&lt;/code&gt;, and made sure both the vt220 user and my
normal user had access to it. I also edited my sudoers file so that vt220 could
run that command as root:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vt220 ALL=(ALL) NOASSWD: /usr/local/bin/login-sircmpwn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I put the script into &lt;code&gt;/usr/local/bin&lt;/code&gt; and added it to &lt;code&gt;/etc/shells&lt;/code&gt;, then made
it the login shell for the vt220 user with &lt;code&gt;chsh&lt;/code&gt;. I then moved to my own
systemd unit for starting the getty on ttyUSB0, this time with autologin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

[Unit]
Description=Serial Getty on %I
Documentation=man:agetty(8) man:systemd-getty-generator(8)
Documentation=http://0pointer.de/blog/projects/serial-console.html
BindsTo=dev-%i.device
After=dev-%i.device systemd-user-sessions.service plymouth-quit-wait.service

# If additional gettys are spawned during boot then we should make
# sure that this is synchronized before getty.target, even though
# getty.target didn&#39;t actually pull it in.
Before=getty.target
IgnoreOnIsolate=yes

[Service]
ExecStart=-/sbin/agetty -a vt220 -h -L 19200 %I vt220
Type=idle
Restart=always
UtmpIdentifier=%I
TTYPath=/dev/%I
TTYReset=yes
TTYVHangup=yes
KillMode=process
IgnoreSIGPIPE=no
SendSIGHUP=yes

[Install]
WantedBy=getty.target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only difference here is that it invokes agetty with &lt;code&gt;-a vt220&lt;/code&gt; to autologin
as that user. &lt;code&gt;systemctl enable vtgetty@ttyUSB0.service&lt;/code&gt; makes it so that on
boot, the getty would run on ttyUSB0 and autologin as vt220. Then the script
from earlier will run tmux, and within tmux will run &lt;code&gt;sudo /usr/local/bin/login-sircmpwn&lt;/code&gt;, which is this shell script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;until&lt;/span&gt; who &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep sircmpwn 2&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &amp;gt;/dev/null
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
	sleep &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
sudo -iu sircmpwn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What this does is pretty straightforward - it loops until I log in as sircmpwn,
then enters an interactive session with sudo as sircmpwn.&lt;/p&gt;
&lt;p&gt;The net of all of this is that now, I can boot up my machine, and when I log in,
the VT220 starts up with tmux running and logged in as me. Then I went back to
the old way of attaching to this tmux session with a terminal on my desktop
session hidden in a corner of the screen. And now I could ditch the clunky old
LK201 keyboard!&lt;/p&gt;
&lt;h2 id=&#34;treating-the-terminal-as-another-output&#34;&gt;Treating the terminal as another output&lt;/h2&gt;
&lt;p&gt;I said earlier that my goal was to treat the terminal as a fake &amp;ldquo;output&amp;rdquo; that I
could switch to from my desktop session just like I switch between my three
graphical outputs. I run &lt;a href=&#34;https://github.com/SirCmpwn/sway&#34;&gt;sway&lt;/a&gt;, of course, so
I decided to add a fake output in sway and see where that went. I made a
somewhat complicated &lt;a href=&#34;https://github.com/SirCmpwn/sway/compare/vt220&#34;&gt;branch&lt;/a&gt;
for this purpose, but the important change is here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gh&#34;&gt;diff --git a/sway/handlers.c b/sway/handlers.c
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;index cec6319..60f8406 100644
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;--- a/sway/handlers.c
&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+++ b/sway/handlers.c
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;@@ -704,6 +704,21 @@ static void handle_wlc_ready(void) {
&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt; 		free(line);
 		list_del(config-&amp;gt;cmd_queue, 0);
 	}
&lt;span class=&#34;gi&#34;&gt;+	// VT220 stuff
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	// Adds a made up output that we can use for a tmux window
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	// connected to my vt220
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	swayc_t *output = new_swayc(C_OUTPUT);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	output-&amp;gt;name = &amp;#34;VT220&amp;#34;;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	output-&amp;gt;handle = UINTPTR_MAX;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	output-&amp;gt;width = 1000;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	output-&amp;gt;height = 1000;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	output-&amp;gt;unmanaged = create_list();
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	output-&amp;gt;bg_pid = -1;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	add_child(&amp;amp;root_container, output);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	output-&amp;gt;x = -1000;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	output-&amp;gt;y = 0;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	new_workspace(output, &amp;#34;__VT220&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+	// End VT220 stuff
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a fake output and puts it to the far left, then adds a workspace to
it called __VT220. I assigned it the output handle of UINTPTR_MAX and everywhere
in sway that it would try to use the output handle to manipulate a real output,
I changed to to avoid doing so if the handle is UINTPTR_MAX. Then I added this
to my sway config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for_window [title=&amp;quot;__VT220&amp;quot;] move window to workspace __VT220 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And run this command when sway starts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;urxvt -T &amp;quot;__VT220&amp;quot; -e tmux -S /var/tmux/vt220.sock a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which spawns a terminal whose window title is __VT220 running tmux attached to
the session running on the terminal. The for_window rule I added to my sway
config automatically moves this to the VT220 fake output and tada! It works. Now
I have a nice and comfortable way to use my terminal to read emails at work. Now
if only I could convince people to stop sending me HTML emails! I just bought a
second VT220 for use at home, too. Life&amp;rsquo;s good~&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=11339909&#34;&gt;Discussion on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
    </item><item>
      <title>State of Sway - December 2015</title>
      <link>./2015/12/20/State-of-sway-December-2015.html</link>
      <pubDate>Sun, 20 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>./2015/12/20/State-of-sway-December-2015.html</guid>
      <description>&lt;p&gt;I wrote sway&amp;rsquo;s &lt;a href=&#34;https://github.com/SirCmpwn/sway/commit/6a33e1e3cddac31b762e4376e29c03ccf8f92107&#34;&gt;initial commit&lt;/a&gt;
4 months ago, on August 4th. At the time of writing, there are now 1,070 commits
from 29 different authors, totalling 10,682 lines of C (and 1,176 lines of
header files). This has been done over the course of 256 pull requests and 118
issues. Of the 73 &lt;a href=&#34;https://github.com/SirCmpwn/sway/issues/2&#34;&gt;i3 features we&amp;rsquo;re
tracking&lt;/a&gt;, 51 are now supported, and
I&amp;rsquo;ve been using sway as my daily driver for a while now. Today, sway looks like
this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sr.ht/NCx_.png&#34;&gt;&lt;img src=&#34;https://sr.ht/NCx_.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those who are new to the project, &lt;a href=&#34;https://github.com/SirCmpwn/sway&#34;&gt;sway&lt;/a&gt;
is an i3-compatible Wayland compositor. That is, your existing
&lt;a href=&#34;http://i3wm.org/&#34;&gt;i3&lt;/a&gt; configuration file will work as-is on sway, and your
keybindings will be the same and the colors and font configuration will be the
same, and so on. It&amp;rsquo;s i3, but on Wayland.&lt;/p&gt;
&lt;p&gt;Sway initially made the rounds on &lt;a href=&#34;https://redd.it/3he5hn&#34;&gt;/r/linux&lt;/a&gt; and
&lt;a href=&#34;https://redd.it/3he48j&#34;&gt;/r/i3wm&lt;/a&gt; and
&lt;a href=&#34;https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Wayland-i3-Sway-Tiling&#34;&gt;Phoronix&lt;/a&gt;
on August 17th, 13 days after the initial commit. I was already dogfooding it by
then, but now I&amp;rsquo;m actually using it 100% of the time, and I hear others have
started to as well. What&amp;rsquo;s happened since then? Well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Floating windows&lt;/li&gt;
&lt;li&gt;Multihead support&lt;/li&gt;
&lt;li&gt;XDG compliant config&lt;/li&gt;
&lt;li&gt;Fullscreen windows&lt;/li&gt;
&lt;li&gt;gaps&lt;/li&gt;
&lt;li&gt;IPC&lt;/li&gt;
&lt;li&gt;Window criteria&lt;/li&gt;
&lt;li&gt;58 i3 commands and 1 command unique to sway&lt;/li&gt;
&lt;li&gt;Wallpaper support&lt;/li&gt;
&lt;li&gt;Resizing/moving tiled windows with the mouse&lt;/li&gt;
&lt;li&gt;swaymsg, swaylock, &lt;strong&gt;swaybar&lt;/strong&gt; as in i3-msg, i3lock, i3bar&lt;/li&gt;
&lt;li&gt;Hundreds of bug fixes and small improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Work on sway has also driven improvements in our dependencies, such as
&lt;a href=&#34;https://github.com/Cloudef/wlc&#34;&gt;wlc&lt;/a&gt;, which now has improved xwayland support,
support for Wayland protocol extensions (which makes swaybg and swaylock and
swaybar possible), and various bugfixes and small features added at the bequest
of sway. Special thanks to Cloudef for helping us out with so many things!&lt;/p&gt;
&lt;p&gt;All of this is only possible thanks to the hard work of dozens of contributors.
Here&amp;rsquo;s the breakdown of &lt;strong&gt;lines of code per author&lt;/strong&gt; for the top ten authors:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;3516&lt;/td&gt;&lt;td&gt;Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;2400&lt;/td&gt;&lt;td&gt;taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;1786&lt;/td&gt;&lt;td&gt;S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;1127&lt;/td&gt;&lt;td&gt;Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;720&lt;/td&gt;&lt;td&gt;Luminarys&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;534&lt;/td&gt;&lt;td&gt;minus&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;200&lt;/td&gt;&lt;td&gt;Christoph Gysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;121&lt;/td&gt;&lt;td&gt;Yacine Hmito&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;79&lt;/td&gt;&lt;td&gt;Kevin Hamacher&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And here&amp;rsquo;s the total &lt;strong&gt;number of commits per author&lt;/strong&gt; for each of the top 10
committers:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;514&lt;/td&gt;&lt;td&gt; Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;191&lt;/td&gt;&lt;td&gt; taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;102&lt;/td&gt;&lt;td&gt; S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;97&lt;/td&gt;&lt;td&gt; Luminarys&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;56&lt;/td&gt;&lt;td&gt; Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;46&lt;/td&gt;&lt;td&gt; Christoph Gysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;34&lt;/td&gt;&lt;td&gt; minus&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt; Ben Boeckel&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt; Half-Shot&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt; jdiez17&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As the maintainer of sway, &lt;em&gt;a lot&lt;/em&gt; of what I do is reviewing and merging
contributions from others. So these statistics change a bit if we use &lt;strong&gt;number
of commits per author, excluding merge commits&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;&lt;td&gt;279&lt;/td&gt;&lt;td&gt; Drew DeVault&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;175&lt;/td&gt;&lt;td&gt; taiyu&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;102&lt;/td&gt;&lt;td&gt; S. Christoffer Eliesen&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;96&lt;/td&gt;&lt;td&gt; Luminarys&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;56&lt;/td&gt;&lt;td&gt; Mikkel Oscar Lyderik&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;46&lt;/td&gt;&lt;td&gt; Christoph Gysin&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;34&lt;/td&gt;&lt;td&gt; minus&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt; Ben Boeckel&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt; jdiez17&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt; Yacine Hmito&lt;/td&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These stats only cover the top ten in each, but there are more - check out the
&lt;a href=&#34;https://github.com/SirCmpwn/sway/graphs/contributors&#34;&gt;full list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, what does this all mean for sway? Well, it&amp;rsquo;s going very well. If you&amp;rsquo;d like
to live on the edge, you can use sway right now and have a productive workflow.
The important features that are missing include stacking and tabbed layouts,
window borders, and some features on the bar. I&amp;rsquo;m looking at starting up a beta
when these features are finished. Come try out sway! Test it with us, open
GitHub issues with your gripes and desires, and &lt;a href=&#34;http://webchat.freenode.net/?channels=sway&amp;amp;uio=d4&#34;&gt;chat
with us on IRC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This blog post was composed from sway.&lt;/em&gt;&lt;/p&gt;
</description>
    </item><item>
      <title>Bring more Tor into your life</title>
      <link>./2015/11/11/Bring-more-tor-into-your-life.html</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>./2015/11/11/Bring-more-tor-into-your-life.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.torproject.org/&#34;&gt;Tor&lt;/a&gt; is a project that improves your privacy
online by encrypting and bouncing your connection through several nodes before
leaving for the outside world. It makes it much more difficult for someone
spying on you to know who you&amp;rsquo;re talking to online and what you&amp;rsquo;re saying to
them. Many people use it with the Tor Browser (a fork of Firefox) and only use
it with HTTP.&lt;/p&gt;
&lt;p&gt;What some people do not know is that Tor works at the TCP level, and can be used
for any kind of traffic. There is a glaring issue with using Tor for your daily
browsing - it&amp;rsquo;s significantly slower. That being said, there are several things
you run on your computer where speed is not quite as important. I am personally
using Tor for several things (this list is incomplete):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IRC (chat)&lt;/li&gt;
&lt;li&gt;Email client&lt;/li&gt;
&lt;li&gt;DNS lookups (systemwide)&lt;/li&gt;
&lt;li&gt;Downloading system updates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anything that supports downloading through a SOCKS proxy can be used through
Tor. You can also use programs like
&lt;a href=&#34;https://trac.torproject.org/projects/tor/wiki/doc/TorifyHOWTO&#34;&gt;torify&lt;/a&gt; to
transparently wrap syscalls in Tor for any program (this is how I got my email
to use Tor).&lt;/p&gt;
&lt;p&gt;Of course, Tor can&amp;rsquo;t help you if you compromise yourself. You should not use
bittorrent over Tor, and you should check your other applications. You should
also be using SSL/TLS/etc on top of Tor, so that exit nodes can&amp;rsquo;t be evil with
your traffic.&lt;/p&gt;
&lt;h2 id=&#34;orbot&#34;&gt;Orbot&lt;/h2&gt;
&lt;p&gt;I also use Tor on my phone. I run all of my phone&amp;rsquo;s traffic through Tor, since I
don&amp;rsquo;t use the internet on my phone much. I have whitelisted apps that need to
stream video or audio, though, for the sake of speed. You can do this, too - set
up a black or whitelist of apps on your phone whose networking will be done
through Tor. The app for this is
&lt;a href=&#34;https://guardianproject.info/apps/orbot/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;why-bother&#34;&gt;Why bother?&lt;/h2&gt;
&lt;p&gt;The easy answer is &amp;ldquo;secure everything&amp;rdquo;. If you don&amp;rsquo;t have a good reason to
remain insecure, you should default to secure. That argument doesn&amp;rsquo;t work on
everyone, though, so here are some others.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Securing trivial traffic makes more noise to hide the things you care about&lt;/li&gt;
&lt;li&gt;You can have more peace of mind about using public WiFi networks if you&amp;rsquo;re
using Tor.&lt;/li&gt;
&lt;li&gt;ISPs can&amp;rsquo;t inject extra ads and tracking into things you&amp;rsquo;re using over Tor.&lt;/li&gt;
&lt;li&gt;The NSA targets people who use Tor. If you &amp;ldquo;have nothing to hide&amp;rdquo;, then you
can help defend those who do by adding more noise and giving agencies that
engage in illegal spying a bigger haystack. Bonus: Tor helps make sure that
even though you&amp;rsquo;re being looked at, you&amp;rsquo;re secure.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item><item>
      <title>Please don&#39;t use Slack for FOSS projects</title>
      <link>./2015/11/01/Please-stop-using-slack.html</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>./2015/11/01/Please-stop-using-slack.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve noticed that more and more projects are using things like Slack as the chat
medium for their open source projects. In the past couple of days alone, I&amp;rsquo;ve
been directed to Slack for Babel and Bootstrap. I&amp;rsquo;d like to try and curb this
phenomenon before it takes off any more.&lt;/p&gt;
&lt;h2 id=&#34;problems-with-slack&#34;&gt;Problems with Slack&lt;/h2&gt;
&lt;p&gt;Slack&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is closed source&lt;/li&gt;
&lt;li&gt;has only one client (&lt;em&gt;update: errata at the bottom of this article&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;is a walled garden&lt;/li&gt;
&lt;li&gt;requires users to have a different tab open for each project they want to be
involved in&lt;/li&gt;
&lt;li&gt;requires that Heroku hack to get open registration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last one is a real stinker. Slack is not a tool built for open source
projects to use for communication with their userbase. It&amp;rsquo;s a tool built for
teams and it is ill-suited to this use-case. In fact, Slack has gone on record
as saying that it &lt;em&gt;cannot&lt;/em&gt; support this sort of use-case: &amp;ldquo;it’s great that
people are putting Slack to good use&amp;rdquo; but unfortunately &amp;ldquo;these communities are
not something we have the capacity to support given the growth in our existing
business.&amp;rdquo; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-is-irc&#34;&gt;What is IRC?&lt;/h2&gt;
&lt;p&gt;IRC, or Internet Relay Chat&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is a standardized and well-supported protocol &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;has hundreds of open source clients, servers, and bots &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;is a distributed design with several networks&lt;/li&gt;
&lt;li&gt;allows several projects to co-exist on the same network&lt;/li&gt;
&lt;li&gt;has no hacks for registration and is designed to be open&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;no-irc-is-not-dead&#34;&gt;No, IRC is not dead&lt;/h3&gt;
&lt;p&gt;I often hear that IRC is dead. Even my dad pokes fun at me for using a 30 year
old protocol, but not after I pointed out that he still uses HTTP. Despite the
usual shtick from the valley, old is not necessarily a synonym for bad.&lt;/p&gt;
&lt;p&gt;IRC has been around since forever. You may think that it&amp;rsquo;s not popular anymore,
but there are still tons of people using it. There are 87,762 users &lt;em&gt;currently
online&lt;/em&gt; (at time of writing) on Freenode. There are 10,293 people on OFTC.
22,384 people on Rizon. In other words, it&amp;rsquo;s still going strong, and I put a lot
more faith in something that&amp;rsquo;s been going full speed ahead since the 80s than in
a Silicon Valley fad startup.&lt;/p&gt;
&lt;h2 id=&#34;problems-with-irc-that-slack-solves&#34;&gt;Problems with IRC that Slack solves&lt;/h2&gt;
&lt;p&gt;There are several things Slack tries to solve about IRC. They are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code snippets&lt;/strong&gt;: Slack has built-in support for them. On IRC you&amp;rsquo;re just asked
to use a pastebin like Gist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File transfers&lt;/strong&gt;: Slack does them. IRC also does them through XDCC, but this
can be difficult to get working.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Persistent sessions&lt;/strong&gt;: Slack makes it so that you can see what you missed when
you return. With IRC, you don&amp;rsquo;t have this. If you want it, you can set up an IRC
bouncer like &lt;a href=&#34;http://znc.in/&#34;&gt;ZNC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integrations&lt;/strong&gt;: with things like build bots. This was never actually a problem
with IRC. IRC has always been significantly better at this than Slack. There is
&lt;em&gt;definitely&lt;/em&gt; an IRC client library for your favorite programming language, and
you can write your own client from scratch in a matter of minutes anyway.
There&amp;rsquo;s an &lt;a href=&#34;https://github.com/nandub/hubot-irc&#34;&gt;IRC&lt;/a&gt; backend for Hubot, too.
GitHub has a built-in hook for announcing repository activity in an IRC channel.&lt;/p&gt;
&lt;h2 id=&#34;other-projects-are-using-irc&#34;&gt;Other projects are using IRC&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s a short, incomplete list of important FOSS projects using IRC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debian&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;jQuery&lt;/li&gt;
&lt;li&gt;Angular&lt;/li&gt;
&lt;li&gt;ReactJS&lt;/li&gt;
&lt;li&gt;NeoVim&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;everyone else&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list goes on for a while. Just fill in another few hundred bullet points
with your imagination. Seriously, just join &lt;code&gt;#&amp;lt;project-name&amp;gt;&lt;/code&gt; on Freenode. It
probably exists.&lt;/p&gt;
&lt;h2 id=&#34;irc-is-better-for-your-company-too&#34;&gt;IRC is better for your company, too&lt;/h2&gt;
&lt;p&gt;We use IRC at &lt;a href=&#34;https://www.linode.com/&#34;&gt;Linode&lt;/a&gt;, even for non-technical people.
It works great. If you want to reduce the barrier to entry for non-technicals,
set up something like &lt;a href=&#34;https://github.com/erming/shout&#34;&gt;shout&lt;/a&gt; instead. You can
also have a pretty no-brainer link to webchat on almost every network, &lt;a href=&#34;http://webchat.esper.net/?nick=&amp;amp;channels=truecraft&#34;&gt;like
this&lt;/a&gt;. If you need file
hosting, you can deploy an instance of
&lt;a href=&#34;https://github.com/SirCmpwn/sr.ht/&#34;&gt;sr.ht&lt;/a&gt; or something like it. You can also
host IRC servers on your own infrastructure, which avoids leaving sensitive
conversations on someone else&amp;rsquo;s servers.&lt;/p&gt;
&lt;h2 id=&#34;please-use-irc&#34;&gt;Please use IRC&lt;/h2&gt;
&lt;p&gt;In short, I&amp;rsquo;d really appreciate it if we all quit using Slack like this. It&amp;rsquo;s
not appropriate for FOSS projects. I would much rather join your channel with
the client I already have running. That way, I&amp;rsquo;m more likely to stick around
after I get help with whatever issue I came to you for, and contribute back by
helping others as I idle in your channel until the end of time. On Slack, I
leave as soon as I&amp;rsquo;m done getting help because tabs in my browser are precious
real estate.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=10486541&#34;&gt;First discussion on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=11013136&#34;&gt;Second discussion on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;updates&#34;&gt;Updates&lt;/h2&gt;
&lt;p&gt;Addressing feedback on this article.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slack IRC bridge&lt;/strong&gt;: Slack provides an IRC bridge that lets you connect to
Slack with an IRC client. I&amp;rsquo;ve used it - it&amp;rsquo;s a bit of a pain in the ass to set
up, and once you have it, it&amp;rsquo;s not ideal. They did put some effort into it,
though, and it&amp;rsquo;s usable. I&amp;rsquo;m not suggesting that Slack as a product is worse
than IRC - I&amp;rsquo;m just saying that it&amp;rsquo;s not better than IRC for FOSS projects, and
probably not that much better for companies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clients&lt;/strong&gt;: Slack has several clients that use the API. That being said, there
are fewer of them and for fewer platforms than IRC clients, and there are more
libraries around IRC than there are for Slack. Also, the bigger issue is that I
already have an IRC client, which I use for the hundreds of FOSS projects that
use IRC, and I don&amp;rsquo;t want to add a Slack client for one or two projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gitter&lt;/strong&gt;: Gitter is bad for many of the same reasons Slack is. Please don&amp;rsquo;t
use it over IRC.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ircv3&lt;/strong&gt;: Check it out: &lt;a href=&#34;http://ircv3.net&#34;&gt;ircv3.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;irccloud&lt;/strong&gt;: Is really cool and solves all of the problems. &lt;a href=&#34;https://www.irccloud.com/&#34;&gt;irccloud.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2018-03-12&lt;/strong&gt;: Slack is shutting down the IRC and XMPP gateways.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://thenextweb.com/insider/2015/03/24/slack-is-quietly-unintentionally-killing-irc/&#34;&gt;Slack is quietly, unintentionally killing IRC - The Next Web&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc1459.txt&#34;&gt;RFC 1459&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/search?o=desc&amp;amp;q=irc&amp;amp;s=stars&amp;amp;type=Repositories&amp;amp;utf8=%E2%9C%93&#34;&gt;Github search for IRC&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>A practical understanding of Flux</title>
      <link>./2015/07/20/A-practical-understanding-of-Flux.html</link>
      <pubDate>Mon, 20 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>./2015/07/20/A-practical-understanding-of-Flux.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React.js&lt;/a&gt; and the
&lt;a href=&#34;https://facebook.github.io/flux/&#34;&gt;Flux&lt;/a&gt; are shaping up to be some of the most
important tools for web development in the coming years. The MVC model was
strong on the server when we decided to take the frontend seriously, and it was
shoehorned into the frontend since we didn&amp;rsquo;t know any better. React and Flux
challenge that and I like where it&amp;rsquo;s going very much. That being said, it was
very difficult for me to get into. I put together this blog post to serve as a
more &lt;em&gt;practical&lt;/em&gt; guide - the upstream documentation tells you a lot of concepts
and expects you to put them together yourself. Hopefully at the end of this
blog post you can confidently start writing things with React+Flux instead of
reading brain-melting docs for a few hours like I did.&lt;/p&gt;
&lt;p&gt;At the core of it, React and Flux are very simple and elegant. Far more simple
than the voodoo sales pitch upstream would have you believe. To be clear,
&lt;strong&gt;React&lt;/strong&gt; is a framework-ish that lets you describe your UI through reusable
components, and includes &lt;em&gt;jsx&lt;/em&gt; for describing HTML elements directly in your
JavaScript code. &lt;strong&gt;Flux&lt;/strong&gt; is an &lt;em&gt;optional&lt;/em&gt; architectural design philosophy that
you can adopt to help structure your applications. I have been using
&lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt; to compile my React+Flux work, which gives me
ES6/ES7 support - I strongly suggest you do the same. This blog post assumes
you&amp;rsquo;re doing so. For a crash course on ES6, &lt;a href=&#34;http://git.io/es6features&#34;&gt;read this entire
page&lt;/a&gt;. Crash course for ES7 is omitted here for
brevity, but &lt;a href=&#34;https://gist.github.com/SirCmpwn/2e8e455c91494b7c3713&#34;&gt;click this&lt;/a&gt;
if you&amp;rsquo;re interested.&lt;/p&gt;
&lt;h2 id=&#34;flux-overview&#34;&gt;Flux overview&lt;/h2&gt;
&lt;p&gt;Flux is based on a unidirectional data flow. The direction is: dispatcher ➜
stores ➜ views, and the data is actions. At the stores or views level, you can
give actions to the dispatcher, which passes them down the line.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s explain exactly what piece is, and how it fits in to your application.
After this I&amp;rsquo;ll tell you some specific details and I have a starter kit prepared
for you to grab as well.&lt;/p&gt;
&lt;h3 id=&#34;dispatcher&#34;&gt;Dispatcher&lt;/h3&gt;
&lt;p&gt;The dispatcher is very simple. Anything can register to receive a callback when
an &amp;ldquo;action&amp;rdquo; happens. There is one dispatcher and one set of callbacks, and
everything that registers for it will receive every action given to the
dispatcher, and can do with this as it pleases. Generally speaking you will only
have the stores listen to this. The kind of actions you will send along may look
something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a record&lt;/li&gt;
&lt;li&gt;Delete a record&lt;/li&gt;
&lt;li&gt;Fetch a record with a given ID&lt;/li&gt;
&lt;li&gt;Refresh a store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anything that would change data is going to be given to the dispatcher and
passed along to the actions. Since everything receives every action you give to
the dispatcher, you have to encode something into each action that describes
what it&amp;rsquo;s for. I use objects that look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;STORE_NAME.ACTION_TYPE.ETC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;...&lt;/code&gt; is whatever extra data you need to include (the ID of the record
to fetch, the contents of the record to be added, the property that needs to
change, etc). Here&amp;rsquo;s an example payload:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ACCOUNTS.CREATE.USER&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SirCmpwn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sir@cmpwn.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hunter2&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Accounts store is listening for actions that start with &lt;code&gt;ACCOUNTS.&lt;/code&gt; and when
it sees &lt;code&gt;CREATE.USER&lt;/code&gt;, it knows a new user needs to be created with these
details.&lt;/p&gt;
&lt;h3 id=&#34;stores&#34;&gt;Stores&lt;/h3&gt;
&lt;p&gt;The stores just have ownership of data and handle any changes that happen to
that data. When the data changes, they raise events that the views can subscribe
to to let them know what&amp;rsquo;s up. There&amp;rsquo;s nothing magic going on here (I initially
thought there was magic). Here&amp;rsquo;s a really simple store:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Dispatcher&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;whatever&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;UserStore&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_users&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;Dispatcher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ACCOUNTS.CREATE.USER&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; 
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;password&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;raiseChangeEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Exercise for the reader
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;store&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;UserStore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;UserStore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yeah, that&amp;rsquo;s all there is to it. Each store should be a singleton. You use it
like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;UserStore&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;whatever/UserStore&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UserStore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;UserStore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;registerChangeEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UserStore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// This has changed now
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Stores end up having a lot of boilerplate. I haven&amp;rsquo;t quite figured out the best
way to address that yet.&lt;/p&gt;
&lt;h3 id=&#34;views&#34;&gt;Views&lt;/h3&gt;
&lt;p&gt;Views are react components. What makes React components interesting is that they
re-render the whole thing when you call &lt;code&gt;setState&lt;/code&gt;. If you want to change the
way it appears on the page for any reason, a call to &lt;code&gt;setState&lt;/code&gt; will need to
happen. And here are the two circumstances under which they will change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In response to user input to change non-semantic view state&lt;/li&gt;
&lt;li&gt;In response to a change event from a store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first bullet here means that you can call &lt;code&gt;setState&lt;/code&gt; to change view states,
but not data. The second bullet is for when the data changes. When you change
view states, this refers to things like &amp;ldquo;click button to reveal form&amp;rdquo;. When you
change data, this refers to things like &amp;ldquo;a new record was created, show it&amp;rdquo;, or
even &amp;ldquo;a single property of a record changed, show that change&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wrong way&lt;/strong&gt;: you have a text box that updates the &amp;ldquo;name&amp;rdquo; of a record. When the
user presses the &amp;ldquo;Apply&amp;rdquo; key, the view will re-render itself with the new name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Right way&lt;/strong&gt;: When you press &amp;ldquo;Apply&amp;rdquo;, the view sends an action to the
dispatcher to apply the change. The relevant store picks up the action, applies
the change to its own data store, and raises an event. Your view hears that
event and re-renders itself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://facebook.github.io/flux/img/flux-simple-f8-diagram-1300w.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://facebook.github.io/flux/img/flux-simple-f8-diagram-with-client-action-1300w.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;why-bother&#34;&gt;Why bother?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Easy to have stores depend on each other&lt;/li&gt;
&lt;li&gt;All views that depend on the same stores are updated when it changes&lt;/li&gt;
&lt;li&gt;It follows that all cross-store dependencies are updated in a similar fashion&lt;/li&gt;
&lt;li&gt;Single source of truth for data&lt;/li&gt;
&lt;li&gt;Easy as pie to pick up and maintain with little knowledge of the codebase&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;practical-problems&#34;&gt;Practical problems&lt;/h2&gt;
&lt;p&gt;Here are some problems I ran into, and the fluxy solution to each.&lt;/p&gt;
&lt;h3 id=&#34;need-to-load-data-async&#34;&gt;Need to load data async&lt;/h3&gt;
&lt;p&gt;You have a list of DNS records to show the user, but they&amp;rsquo;re hanging out on the
server instead of in JavaScript objects. Here&amp;rsquo;s how you accomodate for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you use a store, call &lt;code&gt;Store.fetchIfNecessary()&lt;/code&gt; first.&lt;/li&gt;
&lt;li&gt;When you pull data from the store, expect &lt;code&gt;null&lt;/code&gt; and handle this elegantly.&lt;/li&gt;
&lt;li&gt;When the initial fetch finishes in the store, raise a change event.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From &lt;code&gt;fetchIfNecessary&lt;/code&gt; in the store, go do the request unless it&amp;rsquo;s in progress or
done. On the view side, show a loading spinner or something if you get &lt;code&gt;null&lt;/code&gt;.
When the change event happens, whatever code set the state of your component
initially will be re-run, and this time it won&amp;rsquo;t get &lt;code&gt;null&lt;/code&gt; - deal with it
appropriately (show the actual UI).&lt;/p&gt;
&lt;p&gt;This works for more than things that are well-defined at dev time. If you need
to, for example, fetch data for an arbitrary ID:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View calls &lt;code&gt;Store.userById(10)&lt;/code&gt; and gets &lt;code&gt;null&lt;/code&gt;, renders lack of data
appropriately&lt;/li&gt;
&lt;li&gt;Store is like &amp;ldquo;my bad&amp;rdquo; and fetches it from the server&lt;/li&gt;
&lt;li&gt;Store raises change event when it arrives and the view re-renders&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;batteries-not-included&#34;&gt;Batteries not included&lt;/h3&gt;
&lt;p&gt;Upstream, in terms of actual usable code, flux just gives you a dispatcher. You
also need something to handle your events. This is easy to roll yourself, or you
can grab one of a bazillion things online that will do it for you. There is also
no base Store class for you, so make one of those. You should probably just
include some shared code for raising events and consuming actions. Mine looks
something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;UserStore&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Store&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;USER&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_users&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CREATE.USER&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;userCreated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;userCreated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...);&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;raiseChangeEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Users&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Do what works best for you.&lt;/p&gt;
&lt;h2 id=&#34;starter-kit&#34;&gt;Starter Kit&lt;/h2&gt;
&lt;p&gt;If you want something with the batteries in and a base to build from, I&amp;rsquo;ve got
you covered. Head over to
&lt;a href=&#34;https://github.com/SirCmpwn/react-starter-kit&#34;&gt;SirCmpwn/react-starter-kit&lt;/a&gt; on
Github.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;React and Flux are going to be big. This feels like the right way to build a
frontend. Hopefully I saved you from all the headache I went through trying to
&amp;ldquo;get&amp;rdquo; this stuff, and I hope it serves you well in the future. I&amp;rsquo;m going to be
pushing pretty hard for this model at my new gig, so I may be writing more blog
posts as I explore it in a large-scale application - stay tuned.&lt;/p&gt;
</description>
    </item><item>
      <title>osu!web - WebGL &amp; Web Audio</title>
      <link>./2015/06/14/osuweb.html</link>
      <pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>./2015/06/14/osuweb.html</guid>
      <description>&lt;script src=&#34;./js/underscore-min.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;I&amp;rsquo;ve taken a liking to a video game called &lt;a href=&#34;https://osu.ppy.sh&#34;&gt;osu!&lt;/a&gt; over the
past few months. It&amp;rsquo;s a rhythm game where you use move your mouse to circles
that appear with the beat, and click (or press a key) at the right time. It
looks something like this:&lt;/p&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/qdaZnQQAPqQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;The key of this game is that the &amp;ldquo;beatmaps&amp;rdquo; (a song plus notes to hit) are
user-submitted. There are thousands of them, and the difficulty curve is very
long - I&amp;rsquo;ve been playing for 10 months and I&amp;rsquo;m only maybe 70% of the way up the
difficulty curve. It&amp;rsquo;s also a competitive game, which leads to a lot more fun,
where each user tries to complete maps a little bit better than everyone else
can. You can see on the left in that video - this is a very good player who
earned the #1 rank during this play.&lt;/p&gt;
&lt;p&gt;In my tendency to start writing code related to every game I play, I&amp;rsquo;ve been
working on a cool project called &lt;a href=&#34;http://www.drewdevault.com/osuweb&#34;&gt;osu!web&lt;/a&gt;.
This is a Javascript project that can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decompress osu beatmap archives&lt;/li&gt;
&lt;li&gt;Decode the music with Web Audio&lt;/li&gt;
&lt;li&gt;Decode the osu! beatmap format&lt;/li&gt;
&lt;li&gt;Play the map!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case you don&amp;rsquo;t have any osz files hanging around, try out &lt;a href=&#34;https://sr.ht/f30.osz&#34;&gt;this
one&lt;/a&gt;, which is the one from the video above.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/044.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;osuweb-and-the-future&#34;&gt;osu!web and the future&lt;/h2&gt;
&lt;p&gt;This part of the blog post is for non-technical readers, mostly osu players.
osu!web is pretty cool, and I want to make it even better. My current plans are
just to make it a beatmap viewer, and I&amp;rsquo;m working now on achieving that goal. I
have to finish sliders and add spinners, and eventually work on things like
storyboards. Playing background videos is not in the cards because of
limitations with HTML5 video.&lt;/p&gt;
&lt;p&gt;Eventually, I&amp;rsquo;d like to make it possible to link to a certain time in a certain
map, or in a certain replay. Oh yeah, I want to make it support replays, too.
If I get replays working, though, then I don&amp;rsquo;t see any reason not to let players
try the maps out in their web browsers, too. Keep an eye out!&lt;/p&gt;
&lt;h2 id=&#34;technical-details&#34;&gt;Technical Details&lt;/h2&gt;
&lt;p&gt;This project is only possible thanks to a whole bunch of new web technologies
that have been stabilizing in the past year or so. The source code is &lt;a href=&#34;https://github.com/SirCmpwn/osuweb&#34;&gt;on
Github&lt;/a&gt; if you want to check it out.&lt;/p&gt;
&lt;h3 id=&#34;loading-beatmaps&#34;&gt;Loading beatmaps&lt;/h3&gt;
&lt;p&gt;When the user &lt;a href=&#34;https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/scenes/need-files.js#L8-L41&#34;&gt;drags and
drops&lt;/a&gt;
an osz file, we use &lt;a href=&#34;https://github.com/gildas-lormeau/zip.js&#34;&gt;zip.js&lt;/a&gt; and
create a virtual filesystem of sorts to browse through the archive. In this
archive we have several things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A number of &amp;ldquo;tracks&amp;rdquo; - osu files that define notes and such for various
difficulties&lt;/li&gt;
&lt;li&gt;The song (mp3) and optionally a video background (avi)&lt;/li&gt;
&lt;li&gt;Assets - a background image and optionally a skin (like a Minecraft texture
pack)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/ce6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;We then load the *.osu files and decode them. They look similar to ini files or
Unix config files. Here&amp;rsquo;s a snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[General]
AudioFilename: MuryokuP - Sweet Sweet Cendrillon Drug.mp3
AudioLeadIn: 1000
PreviewTime: 69853

# snip

[Metadata]
Title:Sweet Sweet Cendrillon Drug
TitleUnicode:Sweet Sweet Cendrillon Drug
Artist:MuryokuP
ArtistUnicode:MuryokuP
Creator:Smoothie
Version:Cendrillon

# snip

[HitObjects]
104,308,1246,5,0,0:0:0:0:
68,240,1553,1,0,0:0:0:0:
68,164,1861,1,0,0:0:0:0:
104,96,2169,1,0,0:0:0:0:
172,60,2476,2,0,P|256:48|340:60,1,170,0|0,0:0|0:0,0:0:0:0:
404,104,3399,5,0,0:0:0:0:

# snip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is decoded by
&lt;a href=&#34;https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/osu.js&#34;&gt;osu.js&lt;/a&gt;. For
some sections (like &lt;code&gt;[Metadata]&lt;/code&gt;), it just puts each entry into a dict that you
can pull from later. It does more for things like hit objects, and understands
which of these lines is a slider versus a hit circle versus a spinner and so on.&lt;/p&gt;
&lt;p&gt;I sneakily loaded a beatmap in the background in your browser as you were
reading. If you want to check it out, open up your console and play with the
&lt;code&gt;track&lt;/code&gt; object. Ignore all the disqus errors, they&amp;rsquo;re irrelevant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/a81.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;enter-stage-web-audio&#34;&gt;Enter stage: Web Audio&lt;/h2&gt;
&lt;p&gt;Web Audio had a bit of a rocky development cycle, what with Chrome thinking it&amp;rsquo;s
special and implementing a completely different standard from everyone else.
Things have &lt;a href=&#34;http://caniuse.com/#feat=audio-api&#34;&gt;settled&lt;/a&gt; by now, and I can
start playing with it 😁 Bonus: Mozilla finally added mp3 support to all
platforms, including Linux (which my dev machine runs).&lt;/p&gt;
&lt;p&gt;The osz file includes an mp3, which we
&lt;a href=&#34;https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/osu.js#L209-L224&#34;&gt;extract&lt;/a&gt;
into an ArrayBuffer, and
&lt;a href=&#34;https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/osu-audio.js&#34;&gt;load&lt;/a&gt;
into a Web Audio context. This is super cool and totally would not have been
possible even a few months ago - kudos to the teams implementing all this
exciting stuff in the browsers.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s about all we&amp;rsquo;re doing with Web Audio right now. I do add a gain node so
that you can control the volume with your mouse wheel. In the future, we can get
more creative by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding support for HT/DT mods&lt;/li&gt;
&lt;li&gt;Adding support for NC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;enter-stage-pixi&#34;&gt;Enter stage: PIXI&lt;/h2&gt;
&lt;p&gt;Once we&amp;rsquo;ve decoded the beatmap and loaded the audio, we can play it. After
briefly showing the user a difficulty selection, we jump into rendering the map.
For this, I&amp;rsquo;ve decided to use &lt;a href=&#34;http://pixijs.com/&#34;&gt;PIXI.js&lt;/a&gt;, which gives us a
really nice API to use on top of WebGL with a canvas fallback for when WebGL is
not available. I was originally just using canvas, but it wasn&amp;rsquo;t very
performant, so I went looking for a 2D WebGL framework and found PIXI. It&amp;rsquo;s
pretty cool.&lt;/p&gt;
&lt;p&gt;First, we iterate over all of the hit objects on the beatmap and generate
sprites for them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;populateHit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Creates PIXI objects for a given hit
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;circle&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createHitCircle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;slider&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createSlider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;populateHit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Prepare sprites and such
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is all done before we start playing. We consider the timestamp in the music
that the hit is scheduled for, and then we place &lt;em&gt;all&lt;/em&gt; of the hit objects into
an array and start the song. See code for
&lt;a href=&#34;https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/scenes/playback.js#L88-L143&#34;&gt;createHitCircle&lt;/a&gt;,
which puts together a bunch of sprites for each hit cirlce and sets their alpha
to zero. See also
&lt;a href=&#34;https://github.com/SirCmpwn/osuweb/blob/gh-pages/scripts/scenes/playback.js#L145-L228&#34;&gt;createSlider&lt;/a&gt;,
which is more complicated (I&amp;rsquo;ll go into detail later).&lt;/p&gt;
&lt;p&gt;Each frame, we get the current time from the Web Audio layer, and we run a
function that updates a list of upcoming hit objects:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;updateUpcoming&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Cache the next ten seconds worth of hit objects
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;futuremost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timestamp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;TIME_CONSTANT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;game&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addChildAt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;upcomingHits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;futuremost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;futuremost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;upcomingHits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;upcomingHits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;despawn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_DESPAWN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;slider&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;despawn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliderTimeTotal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;despawn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;upcomingHits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;game&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;removeChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I adopted this pattern early on for performance reasons. During each frame&amp;rsquo;s
rendering step, we only have the sprites and such loaded for hit objects in the
near future. This saves a lot of time. PIXI has all of these sprites loaded and
draws them for us each frame. During each frame, all we have to do is update
them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;updateHitObjects&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;updateUpcoming&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;upcomingHits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;upcomingHits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;circle&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;updateHitCircle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;slider&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;updateSlider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;spinner&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;//self.updateSpinner(hit, time); // TODO
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is passed in the current timestamp in the song, and based on this we are
able to do some simple math to calculate how much alpha each note should have,
as well as the scale of the approach circle (which tells you when to click the
note):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;updateHitCircle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_APPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_FULL_APPEAR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_APPEAR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_FULL_APPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_DISAPPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_DISAPPEAR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_APPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;approach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_APPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;approach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_APPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;approach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve left out sliders, which again are pretty complicated. We&amp;rsquo;ll get to them
after you look at this screenshot again:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/044.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;All of these hit objects are having their alpha and approach circle scale
adjusted each frame by the above method. Since we&amp;rsquo;re basing this on the
timestamp of the map, a convenient side effect is that we can pass in any time
to see what the map should look like at that time.&lt;/p&gt;
&lt;h2 id=&#34;curves&#34;&gt;Curves&lt;/h2&gt;
&lt;p&gt;The hardest thing so far has been rendering sliders, which are hit objects that
you&amp;rsquo;re meant to click and hold as you move across the &amp;ldquo;slider&amp;rdquo;. They look like
this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/c97.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The golden circle is the area you need to keep your mouse in if you want to pass
this slider. Sliders are defined as a series of curves. There are a few kinds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linear sliders (not curves)&lt;/li&gt;
&lt;li&gt;Catmull sliders&lt;/li&gt;
&lt;li&gt;Bezier sliders&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now I&amp;rsquo;ve only done bezier sliders. I give many thanks to
&lt;a href=&#34;https://github.com/itdelatrisu/opsu&#34;&gt;opsu&lt;/a&gt;, which I learned a lot of useful
stuff about sliders from. Each slider is currently generated using the
now-deprecated &amp;ldquo;peppysliders&amp;rdquo; method, where the sprite is repeated along the
curve several times. If you look carefully as a slider fades out, you can notice
that this is the case.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/787.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The newer style of sliders involves rendering them with a custom shader. This
should be possible with PIXI, but I haven&amp;rsquo;t done any research on them yet.
Again, I expect to be able to draw a lot of knowledge from reading the opsu
source code.&lt;/p&gt;
&lt;p&gt;I left out the initializer for sliders earlier, because it&amp;rsquo;s long and
complicated. I&amp;rsquo;ll include it here so you can see how this goes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createSlider&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastFrame&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keyframes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timing&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;track&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timingPoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;track&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timingPoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;track&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timingPoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;timing&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliderTime&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;millisecondsPerBeat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pixelLength&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;track&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;difficulty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SliderMultiplier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliderTimeTotal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliderTime&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// TODO: Other sorts of curves besides LINEAR and BEZIER
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// TODO: Something other than shit peppysliders
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LinearBezier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SLIDER_LINEAR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PIXI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sprite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hitcircle.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xoffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;yoffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;combos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;combo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;combos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createHitCircle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Far end
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;combo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;combo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createHitCircle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Near end
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Add follow circle
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PIXI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sprite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sliderfollowcircle.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;visible&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;manualAlpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Add follow ball
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PIXI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sprite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sliderb0.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;visible&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;manualAlpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Add reverse symbol
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PIXI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sprite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;reversearrow.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xoffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;yoffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// This makes the arrow point back towards the start of the slider
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// TODO: Make it point at the previous keyframe instead
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deltaX&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deltaY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rotation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;atan2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deltaY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deltaX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Add another reverse symbol
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reverse_b&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PIXI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sprite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;reversearrow.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xoffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;yoffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deltaX&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deltaY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rotation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;atan2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deltaY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deltaX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Only visible when it&amp;#39;s the next end to hit:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;visible&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, there are many more moving pieces here. The important part is
the curve:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LinearBezier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SLIDER_LINEAR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PIXI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sprite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hitcircle.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anchor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xoffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;yoffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;combos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;combo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;combos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the &lt;a href=&#34;https://github.com/SirCmpwn/osuweb/tree/gh-pages/scripts/curves&#34;&gt;curve
code&lt;/a&gt;, a
series of points along each curve are generated for us to place sprites at.
These are precomputed like all other hit objects to save time during playback.
However, the render updater is still quite complicated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;updateSlider&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_APPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_FULL_APPEAR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Fade in (before hit)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_APPEAR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;approach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_APPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;approach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_APPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_FULL_APPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliderTimeTotal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// During slide
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_DISAPPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliderTimeTotal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Fade out (after slide)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NOTE_DISAPPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliderTimeTotal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Update approach circle
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;approach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_APPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;approach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_APPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NOTE_DISAPPEAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliderTimeTotal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;approach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;visible&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;visible&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;visible&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Update ball and follow circle
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliderTimeTotal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pointAt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at_next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pointAt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xoffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;follow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;yoffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xoffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gfx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;yoffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deltaX&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at_next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deltaY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at_next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at_next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at_next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rotation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;atan2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deltaY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deltaX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliderTimeTotal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliderTime&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ball&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;texture&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sliderb&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reverse_b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reverse_b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reverse_b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isUndefined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_manualAlpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Much of this is the same as the hit circle updater, since we have a similar hit
circle at the start of the slider that needs to update in a similar fashion.
However, we also have to move the rolling ball and the follow circle along the
slider as the song progresses. This involves calling out to the curve code to
figure out what point is (&lt;code&gt;current_time / slider_end&lt;/code&gt;) along the length of the
slider. We put the ball there, and we also ask for the point at (&lt;code&gt;(current_time + 0.01) / slider_end&lt;/code&gt;) and make the ball rotate to face that direction.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s the bulk of the work neccessary to make an osu renderer. I&amp;rsquo;ll have to add
spinners once I feel like the slider code is complete, and a friend is working
on adding hit sounds (sound effects that play when you correctly hit a note).
The biggest problem he&amp;rsquo;s facing is that Web Audio has no good solution for
low-latency audio playback. On my side of things, though, everything is going
great. PIXI was a really good choice - it&amp;rsquo;s an easy to use API and the WebGL
frontend is fast as hell. osu!web plays a map with performance that compares to
the performance of osu! native.&lt;/p&gt;
&lt;script src=&#34;./js/osu.js&#34;&gt;&lt;/script&gt;
&lt;script&gt;
var xhr = new XMLHttpRequest();
xhr.open(&#34;GET&#34;, &#34;/example.osu&#34;);
xhr.onload = function() {
    window.track = new Track(xhr.responseText);
    window.track.decode();
};
xhr.send();
&lt;/script&gt;
</description>
    </item><item>
      <title>Hooks - running stuff on Github hooks</title>
      <link>./2015/04/19/Hooks.html</link>
      <pubDate>Sun, 19 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>./2015/04/19/Hooks.html</guid>
      <description>&lt;p&gt;I found myself in need of a simple tool for deploying a project on every git
commit, but I didn&amp;rsquo;t have a build server set up. This led to Hooks - a very
simple tool that allows you to run arbitrary commands when Github&amp;rsquo;s hooks
execute.&lt;/p&gt;
&lt;p&gt;The configuration is very simple. In &lt;code&gt;/etc/hooks.conf&lt;/code&gt;, write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[truecraft]
repository=SirCmpwn/TrueCraft
branch=master
command=systemctl restart hooks
valid_ips=204.232.175.64/27,192.30.252.0/22,127.0.0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may include any number of hooks. The &lt;code&gt;valid_ips&lt;/code&gt; entry in that example
allows you to accept hooks from Github and from localhost. Then you run Hooks
itself, it will execute your command when you push a commit to your repository.&lt;/p&gt;
&lt;p&gt;This allows you to do continuous deployment on the cheap and easy. I hope you
find it useful. &lt;a href=&#34;https://github.com/SirCmpwn/hooks&#34;&gt;Hooks&lt;/a&gt;.&lt;/p&gt;
</description>
    </item><item>
      <title>Porting an assembler, debugger, and more to WebAssembly</title>
      <link>./2014/11/30/Porting-an-entire-toolchain-to-the-browser-with-emscripten.html</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>./2014/11/30/Porting-an-entire-toolchain-to-the-browser-with-emscripten.html</guid>
      <description>&lt;p&gt;WebAssembly is pretty cool! It lets you write portable C and cross-compile it to
JavaScript so it&amp;rsquo;ll run in a web browser. As the maintainer of
&lt;a href=&#34;http://www.knightos.org&#34;&gt;KnightOS&lt;/a&gt;, I looked to WASM as a potential means
of reducing the cost of entry for new developers hoping to target the OS.&lt;/p&gt;
&lt;noscript&gt;
Note: this article uses JavaScript to run all of this stuff in your web browser.
I don&#39;t use any third-party scripts, tracking, or anything else icky.
&lt;/noscript&gt;
&lt;h2 id=&#34;rationale-for-wasm&#34;&gt;Rationale for WASM&lt;/h2&gt;
&lt;p&gt;There are several pieces of software in the toolchain that are required to write
and test software for KnightOS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KnightOS/scas&#34;&gt;scas&lt;/a&gt; - a z80 assembler&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KnightOS/genkfs&#34;&gt;genkfs&lt;/a&gt; - generates KFS filesystem images&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KnightOS/kpack&#34;&gt;kpack&lt;/a&gt; - packaging tool, like makepkg on Arch Linux&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KnightOS/z80e&#34;&gt;z80e&lt;/a&gt; - a z80 calculator emulator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You also need a copy of the latest kernel and any of your dependencies from
&lt;a href=&#34;https://packages.knightos.org&#34;&gt;packages.knightos.org&lt;/a&gt;. Getting all of this is
not straightforward. On Linux and Mac, there are no official packages for any of
these tools. On Windows, there are still no official packages, and you have to
use Cygwin on top of that. The first step to writing KnightOS programs is to
manually compile and install several tools, which is a lot to ask of someone who
just wants to experiment.&lt;/p&gt;
&lt;p&gt;All of the tools in our toolchain are written in C. We saw WASM as an
opportunity to reduce all of this effort into simply firing up your web browser.
It works, too! Here&amp;rsquo;s what was involved.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Click the screen on the emulator to the left to give it your
keyboard. Click away to take it back. You can use your arrow keys, F1-F5,
enter, and escape (as MODE).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-final-product&#34;&gt;The final product&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start by showing you what we&amp;rsquo;ve accomplished. It&amp;rsquo;s now possible for
curious developers to try out KnightOS programming in their web browser. Of
course, they still have to do it in assembly, but we&amp;rsquo;re &lt;a href=&#34;https://github.com/KnightOS/kcc&#34;&gt;working on
that&lt;/a&gt; 😉. Here&amp;rsquo;s a &amp;ldquo;hello world&amp;rdquo; you can run in
your web browser:&lt;/p&gt;
&lt;div class=&#34;demo&#34;&gt;
    &lt;div class=&#34;editor&#34;
        data-source=&#34;/sources/helloworld.asm&#34;
        data-file=&#34;main.asm&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;calculator-wrapper&#34;&gt;
        &lt;div class=&#34;calculator&#34;&gt;
            &lt;canvas width=&#34;385&#34; height=&#34;256&#34; class=&#34;emulator-screen&#34;&gt;&lt;/canvas&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We can also install new dependencies on the fly and use them in our programs.
Here&amp;rsquo;s another program that draws the &amp;ldquo;hello world&amp;rdquo; message in a window. You
should install &lt;code&gt;core/corelib&lt;/code&gt; first:&lt;/p&gt;
&lt;p&gt;&lt;input type=&#34;text&#34; id=&#34;package-name&#34; value=&#34;core/corelib&#34; /&gt;
&lt;input type=&#34;button&#34; id=&#34;install-package&#34; value=&#34;Install&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;demo&#34;&gt;
    &lt;div class=&#34;editor&#34; data-source=&#34;/sources/corelib-hello.asm&#34; data-file=&#34;main.asm&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;calculator-wrapper&#34;&gt;
        &lt;div class=&#34;calculator&#34;&gt;
            &lt;canvas width=&#34;385&#34; height=&#34;256&#34; class=&#34;emulator-screen&#34;&gt;&lt;/canvas&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can find more packages to try out on
&lt;a href=&#34;https://packages.knightos.org&#34;&gt;packages.knightos.org&lt;/a&gt;. Here&amp;rsquo;s another example,
this one launches the file manager. You&amp;rsquo;ll have to install a few packages for it
to work:&lt;/p&gt;
&lt;p&gt;Install:
&lt;input type=&#34;button&#34; class=&#34;install-package-button&#34; data-package=&#34;extra/fileman&#34; value=&#34;extra/fileman&#34; /&gt;
&lt;input type=&#34;button&#34; class=&#34;install-package-button&#34; data-package=&#34;core/configlib&#34; value=&#34;core/configlib&#34; /&gt;
&lt;input type=&#34;button&#34; class=&#34;install-package-button&#34; data-package=&#34;core/corelib&#34; value=&#34;core/corelib&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;demo&#34;&gt;
    &lt;div class=&#34;editor&#34; data-source=&#34;/sources/fileman.asm&#34; data-file=&#34;main.asm&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;calculator-wrapper&#34;&gt;
        &lt;div class=&#34;calculator&#34;&gt;
            &lt;canvas width=&#34;385&#34; height=&#34;256&#34; class=&#34;emulator-screen&#34;&gt;&lt;/canvas&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Feel free to edit any of these examples! You can run them again with the Run
button. These resources might be useful if you want to play with this some more:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.z80.info/z80-op.txt&#34;&gt;z80 instruction set&lt;/a&gt; - &lt;a href=&#34;http://tutorials.eeems.ca/ASMin28Days/lesson/toc.html&#34;&gt;z80 assembly tutorial&lt;/a&gt; - &lt;a href=&#34;http://www.knightos.org/documentation/reference&#34;&gt;KnightOS reference documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: our toolchain has some memory leaks, so eventually WASM is going to
run out of memory and then you&amp;rsquo;ll have to refresh. Sorry!&lt;/p&gt;
&lt;h2 id=&#34;how-all-of-the-pieces-fit-together&#34;&gt;How all of the pieces fit together&lt;/h2&gt;
&lt;p&gt;When you
loaded this page, a bunch of things happened. First, the &lt;a href=&#34;https://github.com/KnightOS/kernel/releases&#34;&gt;latest
release&lt;/a&gt; of the &lt;a href=&#34;https://github.com/KnightOS/kernel&#34;&gt;KnightOS
kernel&lt;/a&gt; was downloaded. Then all of the
WASM ports of the toolchain were downloaded and loaded. Some virtual filesystems
were set up, and two KnightOS packages were downloaded and installed:
&lt;a href=&#34;https://packages.knightos.org/core/init&#34;&gt;&lt;code&gt;core/init&lt;/code&gt;&lt;/a&gt;, and
&lt;a href=&#34;https://packages.knightos.org/core/kernel-headers&#34;&gt;&lt;code&gt;core/kernel-headers&lt;/code&gt;&lt;/a&gt;,
respectively necessary for booting the system and compiling code against the
kernel API.  Extracting those packages involves copying them into kpack&amp;rsquo;s
virtual filesystem and running &lt;code&gt;kpack -e path/to/package root/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you click &amp;ldquo;Run&amp;rdquo; on one of these text boxes, the contents of the text box is
written to &lt;code&gt;/main.asm&lt;/code&gt; in the assembler&amp;rsquo;s virtual filesystem. The package
installation process extracts headers to &lt;code&gt;/include/&lt;/code&gt;, and scas itself is run
with &lt;code&gt;/main.asm -I/include -o /executable&lt;/code&gt;, which assembles the program and
writes the output to &lt;code&gt;/executable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we copy the executable into the genkfs filesystem (this is the tool that
generates filesystem images). We also copy the empty kernel into this
filesystem, as well as any of the packages we&amp;rsquo;ve installed. We then run &lt;code&gt;genkfs /kernel.rom /root&lt;/code&gt;, which creates a filesystem image from &lt;code&gt;/root&lt;/code&gt; and bakes it
into &lt;code&gt;kernel.rom&lt;/code&gt;. This produces a ready-to-emulate ROM image that we can load
into the z80e emulator on the left.&lt;/p&gt;
&lt;h2 id=&#34;the-wasm-details&#34;&gt;The WASM details&lt;/h2&gt;
&lt;p&gt;Porting all this stuff to WASM wasn&amp;rsquo;t straightforward. The easiest part
was cross-compiling all of them to JavaScript:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd build
emconfigure cmake ..
emmake make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The process was basically that simple for each piece of software. There were
&lt;a href=&#34;https://github.com/KnightOS/genkfs/commit/c4eefa87a3b5bdbafcc6d971654608c594f779a1&#34;&gt;a&lt;/a&gt;
&lt;a href=&#34;https://github.com/KnightOS/scas/commit/d2044e7d7586a946422ce6493cc6dff01127d1c2&#34;&gt;few&lt;/a&gt;
&lt;a href=&#34;https://github.com/KnightOS/scas/commit/8bc31af28e8419a9fa6c421147ea522935bd0df4&#34;&gt;changes&lt;/a&gt;
made to some of the tools to fix a few problems. The hard part
came when I wanted to run all of them on the same page. WASM compiled code
assumes that it will be the only WASM module on the page at any given
time, so this was a bit challenging and involved editing the generated JS.&lt;/p&gt;
&lt;p&gt;The first thing I did was wrap all of the modules in isolated AMD loaders&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.
You can see how some of this ended up looking by visiting the actual scripts
(warning, big files):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;./tools/scas.js&#34;&gt;scas.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./tools/kpack.js&#34;&gt;kpack.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./tools/genkfs.js&#34;&gt;genkfs.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That was enough to make it so that they could all run. These are part of a
toolchain, though, so somehow they needed to share files. Emscripten&amp;rsquo;s &lt;a href=&#34;http://kripken.github.io/emscripten-site/docs/api_reference/Filesystem-API.html&#34;&gt;FS
object&lt;/a&gt;
cannot be shared between modules, so the solution was to write a little JS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-coffeescript&#34; data-lang=&#34;coffeescript&#34;&gt;&lt;span class=&#34;nv&#34;&gt;copy_between_systems = &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;(fs1, fs2, from, to, encoding) -&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;fs1p = &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;fs2p = &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;s = &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fs1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fs1p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Writing &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fs1p&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; to &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fs2p&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fs2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mkdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fs2p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# pass
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;copy_between_systems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fs1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs1p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs2p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;fs2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;writeFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fs2p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fs1p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encoding: &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;encoding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encoding: &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;encoding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this, we can extract packages in the kpack filesystem and copy them to the
genkfs filesystem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-coffeescript&#34; data-lang=&#34;coffeescript&#34;&gt;&lt;span class=&#34;nv&#34;&gt;install_package = &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;(repo, name, callback) -&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;full_name = &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Downloading &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;full_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;xhr = &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;https://packages.knightos.org/&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;full_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/download&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;xhr.responseType = &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;arraybuffer&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;xhr.onload = &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;() -&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Installing &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;full_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;file_name = &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;/packages/&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;.pkg&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;data = &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Uint8Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kpack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;writeFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encoding: &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;binary&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kpack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;callMain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;-e&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;/pkgroot&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;copy_between_systems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kpack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/pkgroot/include&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/include&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;copy_between_systems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kpack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;genkfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/pkgroot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/root&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Package installed.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this puts all the pieces in place for us to actually pass an assembly file
through our toolchain:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-coffeescript&#34; data-lang=&#34;coffeescript&#34;&gt;&lt;span class=&#34;nv&#34;&gt;run_project = &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;(main) -&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Assemble
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;writeFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;/main.asm&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Calling assembler...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;ret = &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;callMain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;/main.asm&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;-I/include/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;-o&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;executable&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Assembly done!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Build filesystem
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;executable = &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/executable&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encoding: &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;binary&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;genkfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;writeFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/root/bin/executable&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;executable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encoding: &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;binary&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;genkfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;writeFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/root/etc/inittab&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/bin/executable&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;genkfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;writeFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/kernel.rom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Uint8Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kernel_rom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encoding: &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;binary&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;genkfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;callMain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/kernel.rom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/root&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;rom = &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;genkfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/kernel.rom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encoding: &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;binary&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Loading your program into the emulator!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;current_emulator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;current_emulator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cleanup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;current_emulator = &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toolchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ide_emu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;screen&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;current_emulator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;load_rom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This was fairly easy to put together once we got all the tools to cooperate.
After all, these are all command-line tools. Invoking them is as simple as
calling &lt;code&gt;main&lt;/code&gt; and then fiddling with the files that come out. Porting z80e, on
the other hand, was not nearly as simple.&lt;/p&gt;
&lt;h2 id=&#34;porting-z80e-to-the-browser&#34;&gt;Porting z80e to the browser&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/KnightOS/z80e&#34;&gt;z80e&lt;/a&gt; is our calculator emulator. It&amp;rsquo;s also
written in C, but needs to interact much more closely with the user. We need to
be able to render the display to a canvas, and to receive input from the user.
This isn&amp;rsquo;t nearly as simple as just calling &lt;code&gt;main&lt;/code&gt; and playing with some files.&lt;/p&gt;
&lt;p&gt;To accomplish this, we&amp;rsquo;ve put together
&lt;a href=&#34;https://github.com/KnightOS/OpenTI&#34;&gt;OpenTI&lt;/a&gt;, a set of JavaScript bindings to
z80e. This is mostly the work of my friend puckipedia, but I can explain a bit
of what is involved. The short of it is that we needed to map native structs to
JavaScript objects and pass JavaScript code as function pointers to z80e&amp;rsquo;s
hooks. So far as I know, the KnightOS team is the only group to have attempted
something with this deep of integration between WASM and JavaScript - because we
had to do a ton of the work ourselves.&lt;/p&gt;
&lt;p&gt;OpenTI contains a
&lt;a href=&#34;https://github.com/KnightOS/OpenTI/blob/master/webui/js/OpenTI/wrap.js&#34;&gt;wrap&lt;/a&gt;
module that is capable of wrapping structs and pointers in JavaScript objects.
This is a tedious procedure, because we have to know the offset and size of each
field in native code. An example of a wrapped object is given here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;../wrap&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Registers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;This object can only be instantiated with a memory region predefined!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;AF&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;PV&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;H&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;BC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;DE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;H&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_AF&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_BC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_DE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_HL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;PC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;IX&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;IXL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;IXH&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;IY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;IYL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;IYH&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 2 dummy bytes needed for 4-byte alignment
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;Registers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sizeOf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Registers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result of that effort is that you can find out what the current value of a
register is from some nice clean JavaScript: &lt;code&gt;asic.cpu.registers.PC&lt;/code&gt; (it&amp;rsquo;s &lt;code
id=&#34;register-pc&#34;&gt;&lt;/code&gt;, by the way). Pop open your JavaScript console and play
around with the &lt;code&gt;current_asic&lt;/code&gt; global!&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve put all of this together on &lt;a href=&#34;http://try.knightos.org&#34;&gt;try.knightos.org&lt;/a&gt;.
The source is available on
&lt;a href=&#34;https://github.com/KnightOS/try.knightos.org&#34;&gt;GitHub&lt;/a&gt;. It&amp;rsquo;s entirely
client-side, so it can be hosted on GitHub Pages. I&amp;rsquo;m hopeful that this will
make it easier for people to get interested in KnightOS development, but it&amp;rsquo;ll
be a lot better once I can get more documentation and tutorials written. It&amp;rsquo;d be
pretty cool if we could have interactive tutorials like this!&lt;/p&gt;
&lt;p&gt;If you, reader, are interested in working on some pretty cool shit, there&amp;rsquo;s a
place for you! We have things to do in Assembly, C, JavaScript, Python, and a
handful of other things. Maybe you have a knack for design and want to help
improve it. Whatever the case may be, if you have interest in this stuff, come
hang out with us on IRC: &lt;a href=&#34;http://webchat.freenode.net/?channels=knightos&amp;amp;uio=d4&#34;&gt;#knightos on
irc.freenode.net&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://sr.ht/zhRB.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2018-08-31&lt;/strong&gt;: This article was updated to fix some long-broken scripts and
adjust everything to fit into the since-updated blog theme. The title was also
changed from &amp;ldquo;Porting an entire desktop toolchain to the browser with
Emscripten&amp;rdquo; and some minor editorial corrections were made. References to
Emscripten were replaced with WebAssembly - WASM is the standard API that
browsers have implemented to replace asm.js, and the Emscripten toolchain and
JavaScript API remained compatible throughout the process.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;AMD was an early means of using modules with JavaScript, which was popular at the time this article was written (2014). Today, a different form of modules has become part of the JavaScript language standard. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>On the profitability of image hosting websites</title>
      <link>./2014/10/10/The-profitability-of-online-services.html</link>
      <pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>./2014/10/10/The-profitability-of-online-services.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been doing a lot of thought about whether or not it&amp;rsquo;s even possible to both
run a simple website &lt;em&gt;and&lt;/em&gt; turn a profit from it &lt;em&gt;and&lt;/em&gt; maintain a high quality
of service. In particular, I&amp;rsquo;m thinking about image hosts, considering that I
run one (a rather unprofitable one, too), but I would
think that my thoughts on this matter apply to more kinds of websites. That
being said, I&amp;rsquo;ll just talk about media hosting because that&amp;rsquo;s where I have
tangible expertise.&lt;/p&gt;
&lt;p&gt;I think that all image hosts suffer from the same sad pattern of eventual
failure. That pattern is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a great image hosting website (you should stop here)&lt;/li&gt;
&lt;li&gt;Decide to monetize it&lt;/li&gt;
&lt;li&gt;Add advertising&lt;/li&gt;
&lt;li&gt;Stop allowing hotlinking&lt;/li&gt;
&lt;li&gt;Add more advertising&lt;/li&gt;
&lt;li&gt;Add social tools like comments, voting - attempt build a community to look at
your ads&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Monetization is a poison. You start realizing that you wrote a shitty website in
PHP on shared hosting and it can&amp;rsquo;t handle the traffic. You spend more money on
it and realize you don&amp;rsquo;t like spending your money on it, so you decide to
monetize, and now the poison has got you. There&amp;rsquo;s an extremely fine line to walk
with monetization. You start wanting to make enough money to support your
servers, but then you think to yourself &amp;ldquo;well, I worked hard for this, maybe I
should make a living from it!&amp;rdquo; This introduces several problems.&lt;/p&gt;
&lt;p&gt;First of all, you made an image hosting website. It&amp;rsquo;s already perfect. Almost
anything you can think of adding will only make it worse. If you suddenly decide
that you need to spend more time on it to justify taking money from it, then you
have a lot of time to get things wrong. You eventually run out of the good
features and start implementing the bad ones.&lt;/p&gt;
&lt;p&gt;More importantly, though, you realize that you should be making &lt;em&gt;more&lt;/em&gt; money.
Maybe you can turn this into a nice job working on your own website! And that
means you should start a business and assign yourself a salary and start making
a profit and hire new people. The money has to come from somewhere. So you make
even more compromises. Eventually, people stop using your service. People start
to &lt;em&gt;detest&lt;/em&gt; your service. It can get so bad that people will refuse to click on
any link that leads to your website. Your users will be harassed for continuing
to use your site. &lt;strong&gt;You fail, and everyone hates you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This trend is observable with PhotoBucket, ImageShack, TinyPic, the list goes
on. The conclusion I&amp;rsquo;ve drawn from this is that &lt;strong&gt;it is impossible to run a
profitable image hosting service without sacrificing what makes your service
worthwhile&lt;/strong&gt;. We have arrived at a troubling place with the case of Imgur,
however.  MrGrim (the creator of Imgur) also identified this trend and decided
to put a stop to it by building a simple image hosting service for Reddit. It
had great intentions, check out the old archive.org mirror of it&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.  With
these great intentions and a great service, Imgur rose to become the 46th most
popular website globally&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, and 18th in the United States alone, on the
shoulders of Reddit, which now ranks 47th. I&amp;rsquo;m going to expand upon this here,
particularly with respect to Reddit, but I included the ranks here to dissuade
anyone who says &amp;ldquo;there&amp;rsquo;s more than Reddit out there&amp;rdquo; in response to this post.
Reddit is a &lt;em&gt;huge&lt;/em&gt; deal.&lt;/p&gt;
&lt;p&gt;Other image hosts died down when people recognized their problems. Imgur has
reached a critical mass where that will not happen. 20% of all new Reddit posts
are Imgur, and most users just don&amp;rsquo;t know better than to use anything else. That
being said, Imgur shows the signs of the image hosting poison. They stopped
being an image hosting website and became their own community. They added
advertising, which is fine on its own, but then they started redirecting direct
links&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to pages with ads. And still, their userbase is just as strong,
despite better alternatives appearing.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sure what to do about Imgur. I don&amp;rsquo;t like that they&amp;rsquo;ve won the mindshare
with a staggering margin. I do know that I&amp;rsquo;ve tried to make my own service
immune to the image hosting poison. We run it incredibly lean - we handle over
10 million HTTP requests per day on a single server that also does transcoding
and storage for $200 per month. We get about $20-$30 in monthly revenue from our
Project Wonderful&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; ads, and a handful of donations that usually amount to
less than $20. Fortunately, $150ish isn&amp;rsquo;t a hard number to pay out of our own
pockets every month, and we&amp;rsquo;ve made a damn good website that&amp;rsquo;s extremely
scalable to keep our costs low. We haven&amp;rsquo;t taken seed money, and we&amp;rsquo;re not
really the sort to fix problems by throwing more money at it. We also won&amp;rsquo;t be
hiring any paid staff any time soon, so our costs are pretty much constant. On
top of that, if we do fall victim to the image hosting poison, 100% of our code
is open source, so the next service can skip R&amp;amp;D and start being awesome
immediately. Even with all of that, though, all I can think of doing is sticking
around until people realize that Imgur really does suck.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2017-03-07 update&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mediacru.sh shut down (out of money)&lt;/li&gt;
&lt;li&gt;pomf.se shut down (out of money)&lt;/li&gt;
&lt;li&gt;minus.com shut down after going down the decline described in this post&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have started a private service called &lt;a href=&#34;https://sr.ht&#34;&gt;sr.ht&lt;/a&gt;, which I aim to
use to fix the problem by only letting my friends and I use it. It has
controlled growth and won&amp;rsquo;t get too big and too expensive. It&amp;rsquo;s on Github if you
want to &lt;a href=&#34;https://github.com/SirCmpwn/sr.ht&#34;&gt;use it&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20090225014924/http://imgur.com/&#34;&gt;Original Imgur home page&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://www.alexa.com/siteinfo/imgur.com&#34;&gt;Imgur on Alexa&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://dillpickle.github.io/imgur-please-dont-be-the-next-tinypic-or-imageshack.html&#34;&gt;Imgur redirects &amp;ldquo;direct&amp;rdquo; links based on referrals&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.projectwonderful.com/&#34;&gt;Project Wonderful, an advertising service that doesn&amp;rsquo;t suck&lt;/a&gt; &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item><item>
      <title>Process scheduling and multitasking in KnightOS</title>
      <link>./2014/09/02/Process-scheduling-in-KnightOS.html</link>
      <pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>./2014/09/02/Process-scheduling-in-KnightOS.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;m going to do some blogging about technical decisions made with
&lt;a href=&#34;http://knightos.org&#34;&gt;KnightOS&lt;/a&gt;. It&amp;rsquo;s an open-source project I&amp;rsquo;ve been working
on for the past four years to build an open-source Unix-like kernel for TI
calculators (in assembly). It&amp;rsquo;s been a cool platform on top of which I can
research low level systems concepts and I thought I&amp;rsquo;d share some of my findings
with the world.&lt;/p&gt;
&lt;p&gt;So, first of all, what is scheduling? For those who are completely out of the
loop, I&amp;rsquo;ll explain what exactly it is and why it&amp;rsquo;s neccessary. Computers run on
a CPU, which executes a series of instructions in order. Each core is not
capable of running several instructions concurrently. However, you can run
hundreds of processes at once on your computer (and you probably are doing so
as you read this article). There are a number of ways of accomplishing, but the
one that suits the most situations is &lt;em&gt;preemtive multitasking&lt;/em&gt;. This is what
KnightOS uses. You see, a CPU can only execute one instruction after another,
but you can &amp;ldquo;raise an interrupt&amp;rdquo;. This will halt execution and move to some
other bit of code for a moment. This can be used to handle various events (for
example, the GameBoy raises an interrupt when a button is pressed). One of
these events is often a timer, which raises an interrupt at a fixed interval.
This is the mechanism by which preemptive multitasking is accomplished.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say for a moment that you have two programs loaded into memory and
running, at addresses 0x1000 and 0x2000. Your kernel has an interrupt handler
at 0x100. So if program A is running and an interrupt fires, the following
happens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;0x1000 is pushed to the stack as the return address&lt;/li&gt;
&lt;li&gt;The program counter is set to 0x100 and the interrupt runs&lt;/li&gt;
&lt;li&gt;The interrupt concludes and returns, which pops 0x1000 from the stack and
into the program counter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once the interrput handler runs, however, the kernel has a chance to be sneaky:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;0x1000 is pushed to the stack as the return address&lt;/li&gt;
&lt;li&gt;The program counter is set to 0x100 and the interrupt runs&lt;/li&gt;
&lt;li&gt;The interrupt removes 0x1000 from the stack and puts 0x2000 there instead&lt;/li&gt;
&lt;li&gt;The interrupt concludes and returns, which pops 0x2000 from the stack and
into the program counter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now the interrupt has switched the CPU from program A to program B. And the
next time an interrupt occurs, the kernel can switch from program B to program
A. This event is called a &amp;ldquo;context switch&amp;rdquo;.  This is the basis of preemptive
multitasking. On top of this, however, there are lots of ideas around which
processes should get CPU time and when. Some systems have more complex
schedulers, but KnightOS runs on limited hardware and I wanted the context
switch to be short and sweet so that the running processes get as much of the
CPU as possible. I&amp;rsquo;ll explain the simple KnightOS scheduling algorithm here.
First, its goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Short and simple context switches&lt;/li&gt;
&lt;li&gt;Ability to suspend processes when not in foreground&lt;/li&gt;
&lt;li&gt;Ability to run background processes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What KnightOS uses is a simple round robin with the ability to suspend threads.
That is, we have a list of processes and then some flags, among which is
whether or not the processes is currently suspended. So say we have this list
of processes in memory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1: PC=0x2000, not suspended&lt;/li&gt;
&lt;li&gt;2: PC=0x2000, not suspended&lt;/li&gt;
&lt;li&gt;3: PC=0x2000, suspended&lt;/li&gt;
&lt;li&gt;4: PC=0x2000, not suspended&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As process 1 is running and an interrupt fires, the kernel looks at this table
and picks the next non-suspended process to run - process 2. On the next
interrupt, it does it again, skipping process 3 and giving time to process 4.&lt;/p&gt;
&lt;p&gt;To actually implement this, we have to think about the stack. KnightOS runs on
z80 processors, which have a single stack and a shared memory space. The CPU
uses the PC register to keep track of which address the current instruction is
at. That is, say you compile this code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ld a, 10
inc a
ld (hl), a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This compiles to the machine code 3E 0A 3C 77. Say we load this program at
0x8000 - then 0x8000 will point to &lt;code&gt;ld a, 10&lt;/code&gt;. When the CPU finishes executing
this instruction, it advances PC to 0x8002 (since &lt;code&gt;ld a, 10&lt;/code&gt; is a two-byte
instruction). The next instruction it executes will be &lt;code&gt;inc a&lt;/code&gt;, and then PC
advances to 0x8003.&lt;/p&gt;
&lt;p&gt;The stack is used for a lot of things. It can be used to save values, and it is
used to call subroutines. It is also used for interrupts. It&amp;rsquo;s like the same
stacks you use in higher level applications, but it&amp;rsquo;s at a very low level. When
an interrupt fires, the current value of PC is pushed to the stack. Then PC is
set to the interrupt routine, and then when that&amp;rsquo;s done the top of the stack is
removed and placed into PC (effectively returning control to the original
location). However, since the stack is used for much more than that, we have
additional things to consider.&lt;/p&gt;
&lt;p&gt;In KnightOS, when a new process starts, it&amp;rsquo;s allocated a stack in memory and
the CPU&amp;rsquo;s stack pointer (SP) is set to its address. When an interrupt happens,
we need to change the stack to point at some other process so it has time to
run (since that&amp;rsquo;s where its PC is). However, we need to make sure that the
first processes stack is left intact. Since we allocate a new stack for the
next process, we can simply change SP to that processes stack. This will leave
behind the value of PC that was pushed during the interrupt for the previous
process, and lo and behlod a similar value of PC is waiting on top of the other
processes stack.&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s it! We do a simple round robin, skipping suspended processes and
following the procedure outlined above to switch between them. This is how
KnightOS shares one CPU with several &amp;ldquo;concurrent&amp;rdquo; processes. Operating systems
like Linux use more complicated schedulers with more interesting theory if
you&amp;rsquo;d like some additional reading. And of course, since KnightOS is open
source, you may enjoy reading all of our code for handling this stuff (in
assembly):&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/KnightOS/kernel/blob/master/src/00/interrupt.asm&#34;&gt;Context switching&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/KnightOS/kernel/blob/master/src/00/thread.asm#L72&#34;&gt;Stack allocation during process creation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re hanging out on #knightos on Freenode if you want to chat about cool
low-level stuff like scheduling and memory management.&lt;/p&gt;
</description>
    </item><item>
      <title>Python&#39;s datetime sucks</title>
      <link>./2014/06/28/Python-datetime-sucks.html</link>
      <pubDate>Sat, 28 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>./2014/06/28/Python-datetime-sucks.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing with Python for about a year now, and I like pretty much
everything about it. There&amp;rsquo;s one thing that&amp;rsquo;s really rather bad and really should
not be that bad, however - date &amp;amp; time support. It&amp;rsquo;s ridiculous how bad it is in
Python. This is what you get with the standard datetime module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The current time and strftime, with a reasonable set of properties&lt;/li&gt;
&lt;li&gt;Time deltas with days, seconds, and microseconds and nothing else&lt;/li&gt;
&lt;li&gt;Acceptable support for parsing dates and times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What you don&amp;rsquo;t get is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Meaningful time deltas&lt;/li&gt;
&lt;li&gt;Useful arithmetic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Date and time support is a rather tricky thing to do and it&amp;rsquo;s something that the
standard library should support well enough to put it in the back of your mind
instead of making you do all the work.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll be comparing it to C# and .NET.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say I want to get the total hours between two &lt;code&gt;datetime&lt;/code&gt;s.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// C#
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hours&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TotalHours&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Python&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;hours&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s not so bad. How about getting the time exactly one month in the future:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddMonths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timedelta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;days&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, that&amp;rsquo;s not ideal. In C#, if you add one month to Janurary 30th, you get
Feburary 28th (or leap day if appropriate). In Python, you could write a janky
function to do this for you, or you could use the crappy alternative I wrote
above.&lt;/p&gt;
&lt;p&gt;How about if I want to take a delta between dates and show it somewhere, like a
countdown? Say an event is happening at some point in the future and I want to
print &amp;ldquo;3 days, 5 hours, 12 minutes, 10 seconds left&amp;rdquo;. This is distinct from the
first example, which could give you &amp;ldquo;50 hours&amp;rdquo;, whereas this example would give
you &amp;ldquo;2 days, 2 hours&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;future&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;future&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{0} days, {1} hours, {2} minutes, {3} seconds left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Days&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Hours&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Minutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Seconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ...mess of math you have to implement yourself omitted...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Maybe I have a website where users can set their locale?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;some format string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setlocale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LC_TIME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sv_SE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Global!&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strftime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some format string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By the way, that Python one doesn&amp;rsquo;t work on Windows. It uses system locales names
which are different on Windows than on Linux or OS X. Mono (cross-platform .NET)
handles this for you on any system.&lt;/p&gt;
&lt;p&gt;And a few other cases that are easy in .NET and not in Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Days since the start of this year&lt;/li&gt;
&lt;li&gt;Constants like the days in every month&lt;/li&gt;
&lt;li&gt;Is it currently DST in this timezone?&lt;/li&gt;
&lt;li&gt;Is this a leap year?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, Python&amp;rsquo;s datetime module could really use a lot of fleshing out. This
is common stuff and easy for a naive programmer to do wrong.&lt;/p&gt;
</description>
    </item><item>
      <title>Go&#39;s error handling doesn&#39;t sit right with me</title>
      <link>./2014/06/07/Why-Go-error-handling-doesnt-sit-right-with-me.html</link>
      <pubDate>Sat, 07 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>./2014/06/07/Why-Go-error-handling-doesnt-sit-right-with-me.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ll open up by saying that I am not a language designer, and I do like a lot of
things about Go. I just recently figured out how to describe why Go&amp;rsquo;s error
handling mechanics don&amp;rsquo;t sit right with me.&lt;/p&gt;
&lt;p&gt;If you aren&amp;rsquo;t familiar with Go, here&amp;rsquo;s an example of how Go programmers might do
error handling:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SomethingThatMightGoWrong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Handle error
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Proceed
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s extrapolate this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MightFail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;doStuffA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Error handling omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;doStuffB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Error handling omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;doStuffC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Error handling omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;doStuffD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Error handling omitted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go has good intentions by removing exceptions. They add a lot of overhead and
returning errors isn&amp;rsquo;t a bad thing in general. However, I spend a lot of my time
writing assembly. Assembly can use similar mechanics, but I&amp;rsquo;m spoiled by it (I
know, spoiled by assembly?) and I can see how Go could have done better. In
assembly, &lt;code&gt;goto&lt;/code&gt; (or instructions like it) are the only means you have of
branching. It&amp;rsquo;s not like other languages where it&amp;rsquo;s taboo - you pretty much &lt;em&gt;have&lt;/em&gt;
to use it. Most assembly also makes it fancy and conditional. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;goto condition, label
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would jump to &lt;code&gt;label&lt;/code&gt; given that &lt;code&gt;condition&lt;/code&gt; is met. Like Go, assembly
generally doesn&amp;rsquo;t have exceptions or anything similar. In my own personal flavor
of assembly, I have my functions return error codes as well.  Here&amp;rsquo;s how it&amp;rsquo;s
different, though. Let&amp;rsquo;s look at some code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;call somethingThatMightFail
jp nz, errorHandler
call somethingThatMightFailB
jp nz, errorHandler
call somethingThatMightFailC
jp nz, errorHandler
call somethingThatMightFailD
jp nz, errorHandler
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The difference here is that all functions return errors in the same way - by
resetting the Z flag. If that flag is set, we do a quick branch (the &lt;code&gt;jp&lt;/code&gt;
instruction is short for &lt;code&gt;jump&lt;/code&gt;) to the error handler. It&amp;rsquo;s not clear from looking
at this snippet, but the error code is stored in the A register, which the
&lt;code&gt;errorHandler&lt;/code&gt; recognizes as an error code and shows an appropriate message for.
We can have one error handler for an entire procedure, and it feels natural.&lt;/p&gt;
&lt;p&gt;In Go, you have to put an if statement here. Each error caught costs you three
lines of code in the middle of your important logic flow. With languages that
throw exceptions, you have all the logic in a readable procedure, and some error
handling at the end of it all. With Go, you have to throw a bunch of
3-line-minimum error handlers all over the middle of your procedure.&lt;/p&gt;
&lt;p&gt;In my examples, you can still return errors like this, but you can do so with a
lot less visual clutter. One line of error handling is better than 3 lines, if you
ask me. Also, no one gives a damn how you format assembly code, so if you wanted
to do something like this you&amp;rsquo;d be fine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;call somethingThatMightFail
  jp nz, errorHandler
call somethingThatMightFailB
  jp nz, errorHandler
call somethingThatMightFailC
  jp nz, errorHandler
call somethingThatMightFailD
  jp nz, errorHandler
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;call somethingThatMightFail  \ jp nz, errorHandler
call somethingThatMightFailB \ jp nz, errorHandler
call somethingThatMightFailC \ jp nz, errorHandler
call somethingThatMightFailD \ jp nz, errorHandler
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The point is, I think Go&amp;rsquo;s error handling stuff make your code harder to read and
more tedious to write. The basic idea - return errors instead of throwing them -
has good intentions. It&amp;rsquo;s just that how they&amp;rsquo;ve done it isn&amp;rsquo;t so great.&lt;/p&gt;
</description>
    </item><item>
      <title>Hacking on your TI calculator</title>
      <link>./2014/02/25/Hacking-on-your-TI-calculator.html</link>
      <pubDate>Tue, 25 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>./2014/02/25/Hacking-on-your-TI-calculator.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve built the &lt;a href=&#34;https://github.com/KnightOS/kernel&#34;&gt;KnightOS kernel&lt;/a&gt;, an open-source OS that runs on
several TI calculator models, including the popular TI-83+ family, and recently the new TI-84+ Color
Silver Edition. I have published some information on how to build your own operating sytsems for these
devices, but I&amp;rsquo;ve learned a lot since then and I&amp;rsquo;m writing this blog post to include the lessons I&amp;rsquo;ve
learned from other attempts.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Coming into this, you should be comforable with z80 assembly. It&amp;rsquo;s possible to write an OS for these
devices in C (and perhaps other high-level languages), but proficiency in z80 assembly is still
required. Additionally, I don&amp;rsquo;t consider C a viable choice for osdev on these devices when you
consider that the available compliers do not optimize the result very well, and these devices have
very limited resources.&lt;/p&gt;
&lt;p&gt;You will also have to be comfortable (though not neccessarily expert-level) with these tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make&lt;/li&gt;
&lt;li&gt;The assembler of your choice&lt;/li&gt;
&lt;li&gt;The toolchain of your choice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m going to gear this post from the perspective of a Linux user, but Windows users should be able to
do fine with cygwin. If you&amp;rsquo;re looking for a good assembler, I suggest
&lt;a href=&#34;https://github.com/KnightOS/sass&#34;&gt;sass&lt;/a&gt;, the assembler KnightOS uses. I built it myself to address
the needs of the kernel, and it includes several nice features that make it easier to maintain such a
large and complex codebase. Other good choices include
&lt;a href=&#34;https://wabbit.codeplex.com/releases/view/45088&#34;&gt;spasm&lt;/a&gt; and
&lt;a href=&#34;https://code.google.com/p/brass-assembler/&#34;&gt;brass&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For your toolchain, there are a few options, but I&amp;rsquo;ve built custom tools that work well for KnightOS
and should fit into your project as well. You need to accomplish a couple of tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KnightOS/MakeROM&#34;&gt;Create ROM files from assembler output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KnightOS/CreateUpgrade&#34;&gt;Create OS upgrades from ROM files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You also need the &lt;a href=&#34;http://brandonw.net/calculators/keys/&#34;&gt;cryptographic signing keys&lt;/a&gt; for any of the
calculators you intend to support. There are ways to get around using these (which you&amp;rsquo;ll need to
research for the TI-84+ CSE, for example) that you may want to look into. These keys will allow you
to add a cryptographic signature on your OS upgrades that will make your calculator think it&amp;rsquo;s an
official Texas Instruments operating system, and you will be able to send it to the device. The
CreateUpgrade tool linked above produces signed upgrade files for you, but if you choose to use other
tools you may need to find a seperate signing tool.&lt;/p&gt;
&lt;p&gt;Additonally, if you target devices with a newer boot code, you&amp;rsquo;ll have to reflash your boot code or
use a tool like &lt;a href=&#34;http://brandonw.net/calcstuff/uosrecv.zip&#34;&gt;UOSRECV&lt;/a&gt; to send your OS to an actual
device.&lt;/p&gt;
&lt;h2 id=&#34;what-youre-getting-into&#34;&gt;What you&amp;rsquo;re getting into&lt;/h2&gt;
&lt;p&gt;You will be replacing everything on the calculator with your own system (though if you want to retain
compatability with TIOS like &lt;a href=&#34;http://brandonw.net/calculators/OS2/&#34;&gt;OS2&lt;/a&gt; tried to, feel free). You&amp;rsquo;ll
need to do &lt;em&gt;everything&lt;/em&gt;, including common things like providing your own multiplication functions, or
drawing functions, or anything else. You&amp;rsquo;ll also be responsible for initializing the calculator and
all of the hardware you want to use (such as the LCD or keypad).&lt;/p&gt;
&lt;p&gt;That being said, you can take some code from projects like the KnightOS kernel to help you out. The
KnightOS kernel is open sourced under the MIT license, which means you&amp;rsquo;re free to take any code from
it and use it in your own project. I also strongly suggest using it as a reference for when you get
stuck.&lt;/p&gt;
&lt;p&gt;The advantage to taking on this task is that you can leverage the full potential of these devices.
What you&amp;rsquo;re building for is a 6/15 MHz z80 with 32K or more of RAM, plus plenty of Flash and all
sorts of fun hardware. You can also build something that frees your device of proprietary code, if
that is what you are interested in (though the proprietary boot code would remain - but that&amp;rsquo;s a
story for another day).&lt;/p&gt;
&lt;p&gt;If you plan on making a full blown operating systems that can run arbituary programs and handle all
sorts of fun things, you&amp;rsquo;ll want to make sure you have a strong understanding of programming in
general, as well as solid algorithmic knowledge and low-level knowledge. If you don&amp;rsquo;t know how to
use pointers or bit math, or don&amp;rsquo;t fully understand the details of the device, you may want to try
again when you do. That being said, I didn&amp;rsquo;t know a lot when I started KnightOS (as the community was
happy to point out), and now I feel much more secure in my skills.&lt;/p&gt;
&lt;h2 id=&#34;building-the-basic-os&#34;&gt;Building the basic OS&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll build a simple OS here to get you started, including booting the thing up and showing a
simple sprite on the screen. First, we&amp;rsquo;ll create a simple Makefile. This OS will run on the
TI-73, TI-83+, TI-83+ SE, TI-84+, TI-84+ SE, and TI-84+ CSE, as well as the French variations
on these devices.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;./demo_os.tar.gz&#34;&gt;Grab this tarball&lt;/a&gt; with the basic OS to get started. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── build
│   ├── CreateUpgrade.exe
│   ├── MakeROM.exe
│   └── sass.exe
├── inc
│   └── platforms.inc
├── Makefile
└── src
    ├── 00
    │   ├── base.asm
    │   ├── boot.asm
    │   ├── display.asm
    │   └── header.asm
    └── boot
        └── base.asm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you grab this, run &lt;code&gt;make all&lt;/code&gt; and you&amp;rsquo;ll get a bunch of ROM files in the &lt;code&gt;bin&lt;/code&gt; directory.
I&amp;rsquo;ll explain a little bit about how it works. The important file here is &lt;code&gt;boot.asm&lt;/code&gt;, but I
encourage you to read whatever else you feel like - especially the Makefile.&lt;/p&gt;
&lt;h3 id=&#34;miscellaneous-files&#34;&gt;Miscellaneous Files&lt;/h3&gt;
&lt;p&gt;Here is the purpose of each file, save for boot.asm (which gets its own section later):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The makefile is like a script for building the OS. You should probably learn how these work
if you don&amp;rsquo;t already.&lt;/li&gt;
&lt;li&gt;Everything in build/ is part of the suggested toolchain.&lt;/li&gt;
&lt;li&gt;The inc folder can be #included to, and includes &lt;code&gt;platforms.inc&lt;/code&gt;, which defines a bunch of
useful constants for you.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base.asm&lt;/code&gt; is just a bunch of #include statements, for linking without a linker&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display.asm&lt;/code&gt; has some useful display code I pulled out of KnightOS&lt;/li&gt;
&lt;li&gt;&lt;code&gt;header.asm&lt;/code&gt; contains the OS header and RST list&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bootasm&#34;&gt;boot.asm&lt;/h3&gt;
&lt;p&gt;The real juciy stuff is boot.asm. This file initializes everything and draws a smiley face
in the middle of the screen. Here&amp;rsquo;s what it does (in order):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Disable interrupts&lt;/li&gt;
&lt;li&gt;Set up memory mappings&lt;/li&gt;
&lt;li&gt;Create a stack and set SP accordingly&lt;/li&gt;
&lt;li&gt;Initialize the LCD (B&amp;amp;W or color)&lt;/li&gt;
&lt;li&gt;Draw a smiley face&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;m sure your OS will probably want to do more interesting things. The KnightOS kernel, for
example, adds on top of this a bunch of kernel state initialization, filesystem initialization,
and loads up a boot program.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boot.asm&lt;/code&gt; is well-commented and I encourage you to read through it to get an idea of what
needs to be done. The most complicated and annoying bit is the color LCD initialization, which is
mostly in &lt;code&gt;display.asm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I encourage you to spend some time playing with this. Bring in more things and try to build
something simple. Remember, you have no bcalls here. You need to build everything yourself.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;There are several things you might want to check out. The first and most obvious is
&lt;a href=&#34;http://wikiti.brandonw.net/index.php?title=Calculator_Documentation&#34;&gt;WikiTI&lt;/a&gt;. I don&amp;rsquo;t use much
here except for the documentation on I/O ports, and you&amp;rsquo;ll find it useful, too.&lt;/p&gt;
&lt;p&gt;The rest of the resources here are links to code in the KnightOS kernel.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/KnightOS/kernel/blob/master/src/00/interrupt.asm#L19&#34;&gt;interrupt handler&lt;/a&gt;
is a good reference for anyone wanting to work with interrupts to do things like handle the ON
button, link activity, or timers. One good use case here (and what KnightOS uses it for) is
preemptive multitasking. Note that you might want to use &lt;code&gt;exx&lt;/code&gt; and &lt;code&gt;ex af, af&#39;&lt;/code&gt; instead of
pushing all the registers like KnightOS does. Take special note of how we handle USB activity.&lt;/p&gt;
&lt;p&gt;You might want to consider offering some sort of color LCD compatabilty mode like KnightOS does.
This allows you to treat it like a black &amp;amp; white screen. The relevant code is
&lt;a href=&#34;https://github.com/KnightOS/kernel/blob/master/src/00/display-color.asm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to interact with the keyboard, you&amp;rsquo;ll probably want to reference the KnightOS
keyboard code &lt;a href=&#34;https://github.com/KnightOS/kernel/blob/master/src/00/keyboard.asm&#34;&gt;here&lt;/a&gt;. You
might also consider working out an interrupt-based keyboard driver.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to manipulate Flash, you need to run most of it from RAM. You will probably want
to reference the &lt;a href=&#34;https://github.com/KnightOS/kernel/blob/master/src/00/flash.asm&#34;&gt;KnightOS Flash driver&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;skipping-to-the-good-part&#34;&gt;Skipping to the good part&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s entirely possible to avoid writing an entire system by yourself. If you want to dive right
in and start immediately making something cool, you might consider grabbing the KnightOS kernel.
Right off the bat, you&amp;rsquo;ll get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A tree-based filesystem&lt;/li&gt;
&lt;li&gt;Multitasking and IPC&lt;/li&gt;
&lt;li&gt;Memory management&lt;/li&gt;
&lt;li&gt;A standard library (math, sorting, etc)&lt;/li&gt;
&lt;li&gt;Library support&lt;/li&gt;
&lt;li&gt;Hardware drivers for the keyboard, displays, etc&lt;/li&gt;
&lt;li&gt;Color and monochrome graphics (and a compatability layer)&lt;/li&gt;
&lt;li&gt;A font and text rendering&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.knightos.org/documentation.html&#34;&gt;Great documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Full support for 9 calculator models&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The kernel is standalone and open-source, and it runs great without the KnightOS userspace.
If you&amp;rsquo;re interested in that, you can get started &lt;a href=&#34;https://github.com/KnightOS/kernel&#34;&gt;on GitHub&lt;/a&gt;.
We&amp;rsquo;d also love some contributors, if you want to help make the kernel even better.&lt;/p&gt;
&lt;h2 id=&#34;closing-thoughts&#34;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;I hope to see a few cool OSes come into being in the TI world. It&amp;rsquo;s unfortunately sparse in that
regard. If you run into any problems, feel free to drop by #knightos on irc.freenode.net, where
I&amp;rsquo;m sure myself or someone else can help answer your questions. Good luck!&lt;/p&gt;
</description>
    </item><item>
      <title>The bug that hides from breakpoints</title>
      <link>./2014/02/02/The-worst-bugs.html</link>
      <pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>./2014/02/02/The-worst-bugs.html</guid>
      <description>&lt;p&gt;This is the story of the most difficult bug I ever had to solve. See if you can
figure it out before the conclusion.&lt;/p&gt;
&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;
&lt;p&gt;For some years now, I&amp;rsquo;ve worked on a kernel for Texas
Instruments calculators called &lt;a href=&#34;https://github.com/KnightOS/kernel&#34;&gt;KnightOS&lt;/a&gt;.
This kernel is written entirely in assembly, and targets the old-school z80
processor from back in 1976. This classic processor was built without any
concept of protection rings. It&amp;rsquo;s an 8-bit processor, with 150-some instructions
and (in this application) 32K of RAM and 32K of Flash. This stuff is so old, I
ended up writing most of the KnightOS toolchain from scratch rather than try to
get archaic assemblers and compilers running on modern systems.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re working in an enviornment like this, there&amp;rsquo;s no seperation between
kernel and userland. All &amp;ldquo;userspace&amp;rdquo; programs run as root, and crashing the entire
system is a simple task. All the memory my kernel sets aside for the
process table, or memory ownership, file handles, stacks, any other executing
process - any program can modify this freely. Of course, we have to rely on the
userland to play nice, and it usually does. But when there are bugs, they can be a
real pain in the ass to hunt down.&lt;/p&gt;
&lt;h3 id=&#34;the-elusive-bug&#34;&gt;The elusive bug&lt;/h3&gt;
&lt;p&gt;The original bug report: &lt;strong&gt;When running the counting demo and switching between
applications, the thread list graphics become corrupted.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can reproduce this problem, so I settle into my development enviornment and I
set a breakpoint near the thread list&amp;rsquo;s graphical code. I fire up the emulator and
repeat the steps&amp;hellip; but it doesn&amp;rsquo;t happen. This happened consistently: &lt;strong&gt;the bug
was not reproduceable when a breakpoint was set&lt;/strong&gt;. Keep in mind, I&amp;rsquo;m running this
in a z80 emulator, so the enviornment is supposedly no different. There&amp;rsquo;s no
debugger attached here.&lt;/p&gt;
&lt;p&gt;Though this is quite strange, I don&amp;rsquo;t immediately despair. I try instead setting a
&amp;ldquo;breakpoint&amp;rdquo; by dropping an infinite loop in the code, instead of a formal
breakpoint. I figure that I can halt the program flow manually and open the
debugger to inspect the problem. However, the bug wouldn&amp;rsquo;t be tamed quite so
easily. The bug was unreproducable when I had this psuedo-breakpoint in place,
too.&lt;/p&gt;
&lt;p&gt;At this point, I started to get a little frustrated. How do I debug a problem that
disappears when you debug it? I decided to try and find out what caused it after
it had taken place, by setting the breakpoint to be hit only after the graphical
corruption happened. Here, I gained some ground. I was able to reproduce it, and
&lt;em&gt;then&lt;/em&gt; halt the machine, and I could examine memory and such after the bug was
given a chance to have its way over the system.&lt;/p&gt;
&lt;p&gt;I discovered the reason the graphics were being corrupted. The kernel kept the
length of the process table at a fixed address. The thread list, in order to draw
the list of active threads, looks to this value to determine how many threads it
should draw. Well, when the bug occured, the value was too high! The thread list
was drawing threads that did not exist, and the text rendering puked non-ASCII
characters all over the display. But why was that value being corrupted?&lt;/p&gt;
&lt;p&gt;It was an oddly specific address to change. None of the surrounding memory was
touched. Making it even more odd was the very specific conditions this happened
under - only when the counting demo was running. I asked myself, &amp;ldquo;what makes the
counting demo unique?&amp;rdquo; It hit me after a moment of thought. The counting demo
existed to demonstrate non-supsendable threads. The kernel would stop executing
threads (or &amp;ldquo;suspend&amp;rdquo; them) when they lost focus, in an attempt to keep the
system&amp;rsquo;s very limited resources available. The counting demo was marked as
non-suspendable, a feature that had been implemented a few months prior. It
showed a number on the screen that counted up forever, and the idea was that you
could go give some other application focus, come back, and the number would have
been counting up while you were away. A background task, if you will.&lt;/p&gt;
&lt;p&gt;A more accurate description of the bug emerged: &amp;ldquo;the length of the kernel process
table gets corrupted when launching the thread list when a non-suspendable thread
is running&amp;rdquo;. What followed was hours and hours of crawling through the hundreds of
lines of assembly between summoning the thread list, and actually seeing it. I&amp;rsquo;ll
spare you the details, because they are very boring. We&amp;rsquo;ll pick the story back up
at the point where I had isolated the area in which it occured: applib.&lt;/p&gt;
&lt;p&gt;The KnightOS userland offered &amp;ldquo;applib&amp;rdquo;, a library of common functions applications
would need to get the general UX of the system. Among these was the function
&lt;code&gt;applibGetKey&lt;/code&gt;, which was a wrapper around the kernel&amp;rsquo;s &lt;code&gt;getKey&lt;/code&gt; function. The
idea was that it would work the same way (return the last key pressed), but for
special keys, it would do the appropriate action for you. For example, if you
pressed the F5 key, it would suspend the current thread and launch the thread
list. This is the mechanism with which most applications transfer control out of
their own thread and into the thread list.&lt;/p&gt;
&lt;p&gt;Eager that I had found the source of the issue, I placed a breakpoint nearby. That
same issue from before struck again - the bug vanished when the breakpoint was
set. I tried a more creative approach: instead of using a proper breakpoint, I
asked the emulator to halt whenever that address was written to. Even still - the
bug hid itself whenever this happened.&lt;/p&gt;
&lt;p&gt;I decided to dive into the kernel&amp;rsquo;s getKey function. Here&amp;rsquo;s the start of the
function, as it appeared at the time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getKey:
    call hasKeypadLock
    jr _
    xor a
    ret
_:  push bc
; ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I started going through this code line-by-line, trying to see if there was
anything here that could concievably touch the thread table. I noticed a minor
error here, and corrected it without thinking:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getKey:
    call hasKeypadLock
    jr z, _
    xor a
    ret
_:  push bc
; ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The simple error I had corrected: getKey was pressing forward, even when the
current thread didn&amp;rsquo;t have control of the keyboard hardware. This was a silly
error - only two characters were omitted.&lt;/p&gt;
&lt;p&gt;A moment after I fixed that issue, the answer set in - this was the source of the
entire problem. Confirming it, I booted up the emulator with this change applied
and the bug was indeed resolved.&lt;/p&gt;
&lt;p&gt;Can you guess what happened here? Here&amp;rsquo;s the other piece of the puzzle to help you
out, translated more or less into C for readability:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;applibGetKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KEY_F5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;launch_threadlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;suspend_thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Two more details you might not have picked up on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;applibGetKey is non-blocking&lt;/li&gt;
&lt;li&gt;suspend_thread suspends the current thread immediately, so it doesn&amp;rsquo;t return until the
thread resumes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-bug-uncovered&#34;&gt;The bug, uncovered&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s what actually happened. For most threads (the suspendable kind), that
thread stops processing when &lt;code&gt;suspend_thread()&lt;/code&gt; is called. The usually
non-blocking applibGetKey function blocks until the thread is resumed in this
scenario. However, the counting demo was &lt;em&gt;non-suspendable&lt;/em&gt;. The suspend_thread
function has no effect, by design. So, suspend_thread did not block, and the
keypress was returned straight away. By this point, the thread list had launched
properly and it was given control of the keyboard.&lt;/p&gt;
&lt;p&gt;However, the counting demo went back into its main loop, and started calling
applibGetKey again. Since the average user&amp;rsquo;s finger remained pressed against the
button for a few moments more, applibGetKey &lt;em&gt;continued to launch the thread list,
over and over&lt;/em&gt;. The thread list itself is a special thread, and it doesn&amp;rsquo;t
actually have a user-friendly name. It was designed to ignore itself when it drew
the active threads. However, it was &lt;em&gt;not&lt;/em&gt; designed to ignore other instances of
itself, the reason being that there would never be two of them running at once.
When attempting to draw these other instances, the thread list started rendering
text that wasn&amp;rsquo;t there, causing the corruption.&lt;/p&gt;
&lt;p&gt;This bug vanished whenever I set a breakpoint because it would halt the system&amp;rsquo;s
keyboard processing logic. I lifted my finger from the key before allowing it to
move on.&lt;/p&gt;
&lt;p&gt;The solution was to make the kernel&amp;rsquo;s getKey function respect hardware locks by
fixing that simple, two-character typo. That way, the counting demo, which had no
right to know what keys were being pressed, would not know that they key was still
being pressed.&lt;/p&gt;
&lt;p&gt;The debugging described by this blog post took approximately three weeks.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=7688700&#34;&gt;Discussion on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
    </item><item>
      <title>Custom Music Syncing on Android</title>
      <link>./2013/08/24/Music-syncing-on-Android.html</link>
      <pubDate>Sat, 24 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>./2013/08/24/Music-syncing-on-Android.html</guid>
      <description>&lt;p&gt;I have an HTC One, with CyanogenMod installed. I usually use Spotify, but I&amp;rsquo;ve been wanting to move away from it for a while.
The biggest thing keeping me there was the ease of syncing up with my phone - I added music on my PC and it just showed up
on my phone.&lt;/p&gt;
&lt;p&gt;So, I finally decided to make it work on my phone without Spotify. You might have success if you aren&amp;rsquo;t using CyanogenMod,
but you definitely need to be rooted and you need to access a root shell on your phone. I was using &lt;code&gt;adb shell&lt;/code&gt; to start with,
but it has poor terminal emulation. Instead, I ended up installing an SSH daemon on the phone and just using that. Easier to
use vim in such an enviornment.&lt;/p&gt;
&lt;p&gt;The end result is that a cronjob kicks off each hour on my phone and runs a script that uses rsync to sync up my phone&amp;rsquo;s music
with my desktop&amp;rsquo;s music. That&amp;rsquo;s another thing - a prerequisite of this working is that you have to expose your music to the
outside world on an SSH server somewhere.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll tell you how I got it working, then you can see if it works for you. It might take some effort on your part to tweak
these instructions to fit your requirements.&lt;/p&gt;
&lt;h2 id=&#34;sanity-checks&#34;&gt;Sanity checks&lt;/h2&gt;
&lt;p&gt;Get into your phone&amp;rsquo;s shell and make sure you have basic things installed. You&amp;rsquo;ll need to make sure you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bash&lt;/li&gt;
&lt;li&gt;cron&lt;/li&gt;
&lt;li&gt;ssh&lt;/li&gt;
&lt;li&gt;rsync&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you don&amp;rsquo;t have them, you can probably get them by installing busybox.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-ssh&#34;&gt;Setting up SSH&lt;/h2&gt;
&lt;p&gt;We need to generate a key. I tried using ssh-keygen before, but it had problems with rsync on Android. Instead, we use
dropbearkey. Generate your key with &lt;code&gt;dropbearkey -t rsa -f /data/.ssh/id_rsa&lt;/code&gt;. You&amp;rsquo;ll see the public key echoed to stdout.
It&amp;rsquo;s not saved anywhere for you, so grab it out of your shell and put it somewhere - namely, in the authorized_keys file
on the SSH server you plan to pull music from.&lt;/p&gt;
&lt;p&gt;At this point, you can probably SSH into the server you want to pull from. Run &lt;code&gt;ssh -i /data/.ssh/id_rsa &amp;lt;your server here&amp;gt;&lt;/code&gt;
to double check. Note that this isn&amp;rsquo;t just for fun - you need to do this to get your server into known_hosts, so we can
non-interactively access it.&lt;/p&gt;
&lt;h2 id=&#34;making-android-more-sane&#34;&gt;Making Android more sane&lt;/h2&gt;
&lt;p&gt;Now that this is working, we need to clean up a little before cron will run right. Android is only a &amp;ldquo;Linux&amp;rdquo; system in the
sense that &lt;code&gt;uname&lt;/code&gt; outputs &amp;ldquo;Linux&amp;rdquo;. It grossly ignores the FHS and you need to fix it a little. Figure out how to do a
nice init.d script on your phone. For my CyanogenMod install, I can add scripts to &lt;code&gt;/data/local/userlocal.d/&lt;/code&gt; and they&amp;rsquo;ll
be run at boot. Here&amp;rsquo;s my little script for making Android a little more sane:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/system/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Making /system rw isn&amp;#39;t strictly needed&lt;/span&gt;
mount -o remount,rw /system
mount -o remount,rw /
ln -s /data/var /var
ln -s /system/bin /bin
ln -s /data/.ssh /.ssh
crond
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;update-script-and-initial-import&#34;&gt;Update script and initial import&lt;/h2&gt;
&lt;p&gt;The following is the script we&amp;rsquo;ll use to update your phone&amp;rsquo;s music library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/system/xbin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Syncs music between a remote computer and this phone&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;RHOST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;remote hostname&amp;gt;
&lt;span class=&#34;nv&#34;&gt;EHOST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;fallback, I use this &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; connecting from outside my LAN&amp;gt;
&lt;span class=&#34;nv&#34;&gt;RPORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;RUSER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;username&amp;gt;
&lt;span class=&#34;nv&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/data/.ssh/id_rsa
&lt;span class=&#34;nv&#34;&gt;RPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/path/to/your/remote/music
&lt;span class=&#34;c1&#34;&gt;# Omit the final directory. On my setup, this goes to /sdcard/Music, and my remote is /home/sircmpwn/Music&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;LPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/sdcard

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;date&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &amp;gt;&amp;gt; /var/log/update-music.log

rsync -ruvL --delete --rsh&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ssh -p &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$RPORT&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -i &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ID&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$RUSER&lt;/span&gt;@&lt;span class=&#34;nv&#34;&gt;$RHOST&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$RPATH&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$LPATH&lt;/span&gt; &amp;gt;&amp;gt; /var/log/update-music-rsync-so.log 2&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    rsync -ruvL --delete --rsh&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ssh -p &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$RPORT&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -i &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ID&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$RUSER&lt;/span&gt;@&lt;span class=&#34;nv&#34;&gt;$EHOST&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$RPATH&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$LPATH&lt;/span&gt; &amp;gt;&amp;gt; /var/log/update-music-rsync-so.log 2&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save this script to &lt;code&gt;/data/updateMusic&lt;/code&gt;, make it executable with &lt;code&gt;chmod +x /data/updateMusic&lt;/code&gt;, then run the initial import
with &lt;code&gt;/data/updateMusic&lt;/code&gt;. After a while, you&amp;rsquo;ll have all your computer&amp;rsquo;s music on your phone. Now, we just need to make it
update automatically.&lt;/p&gt;
&lt;p&gt;Note: I set up a couple of logs for you. &lt;code&gt;/var/log/update-music.log&lt;/code&gt; has the timestamp of every time it did an update. Also,
&lt;code&gt;/var/log/update-music-rsync-so.log&lt;/code&gt; has the output of rsync from each run.&lt;/p&gt;
&lt;h2 id=&#34;cron&#34;&gt;Cron&lt;/h2&gt;
&lt;p&gt;Finally, we need to set up a cronjob. If you followed the instructions so far (and if you&amp;rsquo;re lucky), you should have everything
ready for cron. The biggest pain in my ass was getting cron to coorperate, but the init script earlier should take care of
that. Run &lt;code&gt;crontab -e&lt;/code&gt; and write your crontab:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 * * * * /data/updateMusic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice and simple. Your phone will now sync up your music every hour, on the hour, with your home computer. Here are some
possible points for improvement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check wlan0 and only sync if it&amp;rsquo;s up&lt;/li&gt;
&lt;li&gt;Log cron somewhere&lt;/li&gt;
&lt;li&gt;Alter the update script to do a little bit better about the &amp;ldquo;fallback&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Sync more than just music&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After all of this, I now have a nice setup that syncs music to my phone so I can listen to it with Apollo. I might switch
away from Apollo, though, it&amp;rsquo;s pretty buggy. &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;Let me know&lt;/a&gt; if you can suggest an alternative music
player, or if you get stuck working through this procedure yourself.&lt;/p&gt;
</description>
    </item><item>
      <title>You don&#39;t need jQuery</title>
      <link>./2013/08/19/You-dont-need-jQuery.html</link>
      <pubDate>Mon, 19 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>./2013/08/19/You-dont-need-jQuery.html</guid>
      <description>&lt;p&gt;It&amp;rsquo;s true. You really don&amp;rsquo;t need jQuery. Modern web browsers can do most of what you want from jQuery,
without jQuery.&lt;/p&gt;
&lt;p&gt;For example, take &lt;a href=&#34;https://mediacru.sh&#34;&gt;MediaCrush&lt;/a&gt;. It&amp;rsquo;s a website I spent some time working on with a friend.
It&amp;rsquo;s actually quite sophisticated - drag-and-drop uploading, uploading via a hidden form, events wired up to
links and dynamically generated content, and ajax requests/file uploads, the whole she-bang. It does all of
that without jQuery. It&amp;rsquo;s &lt;a href=&#34;https://github.com/MediaCrush/MediaCrush&#34;&gt;open source&lt;/a&gt;, if you&amp;rsquo;re looking for a good
example of how all of this can be used in the wild.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s walk through some of the things you like jQuery for, and I&amp;rsquo;ll show you how to do it without.&lt;/p&gt;
&lt;h2 id=&#34;document-querying-with-css-selectors&#34;&gt;Document Querying with CSS Selectors&lt;/h2&gt;
&lt;p&gt;You like jQuery for selecting content. I don&amp;rsquo;t blame you - it&amp;rsquo;s really cool. Here&amp;rsquo;s some code using jQuery:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;div.article p&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, here&amp;rsquo;s how you can do it on vanilla JS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;div.article p&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Documentation: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document.querySelectorAll&#34;&gt;querySelectorAll&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/element.classList&#34;&gt;classList&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is, of course, a little more verbose. However, it&amp;rsquo;s probably a lot simpler than you expected. Works in
IE 8 and newer - except for classList, which works in IE 10 and newer. You can instead use className, which is
a little less flexible, but still pretty easy to work with.&lt;/p&gt;
&lt;h2 id=&#34;ajax&#34;&gt;Ajax&lt;/h2&gt;
&lt;p&gt;You want to make requests in JavaScript. This is how you POST with jQuery:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/path/to/endpoint&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;otherParameter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;otherValue&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;success&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s the same code, without jQuery:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// A little deceptively named
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/path/to/endpoint&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;responseText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;formData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FormData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;formData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;parameter&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;formData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;otherParameter&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;formData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Documentation: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&#34;&gt;XMLHttpRequest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also a bit more verbose than jQuery, but much simpler than you might&amp;rsquo;ve expected. Now here&amp;rsquo;s the real kicker:
It works in IE 7, and IE 5 with a little effort. IE actually pioneered XHR.&lt;/p&gt;
&lt;h2 id=&#34;animations&#34;&gt;Animations&lt;/h2&gt;
&lt;p&gt;This is where it starts to get more subjective and breaks backwards compatability. Here&amp;rsquo;s my opinion on the
matter of transitions: dropping legacy browser support for fancy animations is acceptable. I don&amp;rsquo;t think it&amp;rsquo;s
a problem if your website isn&amp;rsquo;t pretty and animated on older browsers. Keep that in mind as we move on.&lt;/p&gt;
&lt;p&gt;I want to animate the opacity of a &lt;code&gt;.foobar&lt;/code&gt; when you hover over it. With jQuery:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.foobar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mouseenter&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;opacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mouseleave&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;opacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Without jQuery, I wouldn&amp;rsquo;t do this in Javascript. I&amp;rsquo;d use the magic of CSS animations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;foobar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;transition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;opacity&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;linear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;foobar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;hover&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;opacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&#34;foobar&#34;&gt;Hover over this text&lt;/p&gt;
&lt;style&gt;.foobar{transition:opacity 2s linear;font-weight:bold;}.foobar:hover{opacity:0.5;}&lt;/style&gt;
&lt;p&gt;Documentation: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_animations&#34;&gt;CSS animations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Much better, eh? Works in IE 10+. You can do much more complicated animations with CSS, but I can&amp;rsquo;t think of
a good demo, so that&amp;rsquo;s an exercise left to the reader.&lt;/p&gt;
&lt;h2 id=&#34;tree-traversal&#34;&gt;Tree traversal&lt;/h2&gt;
&lt;p&gt;jQuery lets you navigate a tree pretty easily. Let&amp;rsquo;s say you want to find the container of a button and remove
all .foobar elements underneath it, upon clicking the button.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#mybutton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.foobar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nice and succinct. I&amp;rsquo;m sure you can tell the theme so far - the main advantage of jQuery is a less verbose
syntax. Here&amp;rsquo;s how it&amp;rsquo;s done without jQuery:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mybutton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foobars&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.foobar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foobars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;removeChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;foobars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A little wordier, but not so bad. Works in IE 9+ (8+ if you don&amp;rsquo;t use addEventListener).&lt;/p&gt;
&lt;h2 id=&#34;in-conclusion&#34;&gt;In conclusion&lt;/h2&gt;
&lt;p&gt;jQuery is, of course, based on JavaScript, and as a result, anything jQuery can do can be done without jQuery.
Feel free to &lt;a href=&#34;mailto:sir@cmpwn.com&#34;&gt;ask me&lt;/a&gt; if you&amp;rsquo;re curious about how I&amp;rsquo;d do something else without jQuery.&lt;/p&gt;
&lt;p&gt;I feel like adding jQuery is one of the first things a web developer does to their shiny new website. It just
isn&amp;rsquo;t really necessary in this day and age. That extra request, 91kb, and load time are probably negligible,
but it&amp;rsquo;s still a little less clean than it could be. There&amp;rsquo;s no need to go back and rid all of your projects of
jQuery, but I&amp;rsquo;d suggest that for your next one, you try to do without. Keep MDN open in the next tab over and
I&amp;rsquo;m sure you&amp;rsquo;ll get through it fine.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
